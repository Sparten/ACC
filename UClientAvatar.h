/*
   This file has been generated by IDA.
   It contains local type definitions from
   AC2-Win64-Shipping.i64
*/

#define __int8 char
#define __int16 short
#define __int32 int
#define __int64 long long

struct FScriptContainerElement;
struct FString;
struct ITextData;
struct SharedPointerInternals::FReferenceControllerBase;
struct SharedPointerInternals::FReferenceControllerBaseVtbl;
struct TSharedPtr<FString,1>;
struct FTextHistory;
struct UObject;
struct UProperty;
struct FObjectInstancingGraph;
struct FObjectInitializer;
struct FVTableHelper;
struct FReferenceCollector;
struct FReferenceCollectorVtbl;
struct FReferenceCollectorArchive;
struct UClass;
struct UObjectBaseVtbl;
struct FLinker;
struct FLinkerVtbl;
struct FStructuredArchiveFormatterVtbl;
struct FBinaryArchiveFormatter;
struct FStructuredArchive;
struct FGCObjectVtbl;
struct TBaseDelegate<void,FName const &,UPackage *,enum EAsyncLoadingResult::Type>;
struct FLinkerLoad;
struct UPackage;
struct FAsyncPackage;
struct FSingleThreadRunnable;
struct FSingleThreadRunnableVtbl;
struct FRunnableVtbl;
struct FRunnableThread;
struct FRunnableThreadVtbl;
struct FEvent;
struct FEventVtbl;
struct TSet<int,DefaultKeyFuncs<int,0>,FDefaultSetAllocator>;
struct FAsyncLoadingThread;
struct FCustomVersionContainer;
struct FWorldTileInfo;
union SHA1_WORKSPACE_BLOCK;
struct FSHA1;
struct FUntypedBulkData;
struct FUntypedBulkDataVtbl;
struct TFutureState<bool>;
struct TArray<FCompressedChunk,FDefaultAllocator>;
struct TFunction<bool __cdecl(double)>;
struct FArchiveVtbl;
struct FArchive::FFastPathLoadBuffer;
struct FCustomPropertyListNode;
struct ITargetPlatform;
struct FTargetDeviceId;
struct FRenderResource;
struct FRenderResourceVtbl;
struct TLinkedList<FRenderResource *>;
struct FRHIResourceVtbl;
struct FRHIVertexBuffer;
struct FStaticMeshVertexDataInterface;
struct FResourceArrayInterfaceVtbl;
struct FStaticMeshVertexDataInterfaceVtbl;
struct FRHIShaderResourceView;
struct FPositionVertexData;
struct FColorVertexData;
struct FRHIIndexBuffer;
struct FDynamicMeshIndexBuffer32;
struct FRHIVertexDeclaration;
struct FVertexFactory;
struct FRHIUniformBuffer;
struct FLocalVertexFactory;
struct FKConvexGeomRenderInfo;
struct UDEPRECATED_PhysicalMaterialPropertyBase;
struct physx::PxBaseVtbl;
struct physx::PxMaterial;
struct UPhysicalMaterial;
struct FWalkableSlopeOverride;
struct physx::PxD6Joint;
struct FConstraintInstance;
struct physx::PxRigidActor;
struct physx::PxAggregate;
struct TArray<char,FDefaultAllocator>;
struct TMap<physx::PxShape *,FBodyInstance::FWeldInfo,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<physx::PxShape *,FBodyInstance::FWeldInfo,0> >;
struct UBodySetup;
struct UAssetUserData;
struct IInterface_AssetUserDataVtbl;
struct FRHITexture;
struct FRHISamplerState;
struct FTexture;
struct FTextureResource;
struct FRHITextureReference;
struct FGraphEvent;
struct USoundClass;
struct USoundConcurrency;
struct TMultiMap<enum EAttenuationShape::Type,FBaseAttenuationSettings::AttenuationShapeDetails,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<enum EAttenuationShape::Type,FBaseAttenuationSettings::AttenuationShapeDetails,1> >;
struct FBaseAttenuationSettingsVtbl;
struct FIndexedCurveVtbl;
struct TArray<FRichCurveEditInfoTemplate<FRichCurve *>,FDefaultAllocator>;
struct TArray<FRichCurveEditInfoTemplate<FRichCurve const *>,FDefaultAllocator>;
struct TArray<UObject const *,FDefaultAllocator>;
struct FPackageReloadedEvent;
struct FCurveOwnerInterfaceVtbl;
struct UCurveFloat;
struct USoundAttenuation;
struct USoundSubmix;
struct UAmbisonicsSubmixSettingsBase;
struct USoundWave;
struct IQueuedWorkVtbl;
struct FQueuedThreadPool;
struct FQueuedThread;
struct FQueuedThreadPoolVtbl;
struct FAsyncTask<Audio::FAsyncSoundWavePCMWriteWorker>;
struct Audio::FAudioRecordingData;
struct USoundEffectSourcePresetChain;
struct USoundBase;
struct UCurveTable;
struct ICompressedAudioInfo;
struct FSoundQualityInfo;
struct ICompressedAudioInfoVtbl;
struct FAsyncTask<FAsyncAudioDecompressWorker>;
struct FStreamedAudioPlatformData;
struct FPlatformAudioCookOverrides;
struct UTextureLODSettings;
struct FStaticMeshLODSettings;
struct ITargetPlatform::FOnTargetDeviceDiscovered;
struct ITargetPlatform::FOnTargetDeviceLost;
struct ITargetPlatformVtbl;
struct FArchiveSerializedPropertyChain;
struct TArray<FHistoricTextFormatData,FDefaultAllocator>;
struct FHistoricTextNumericData;
struct FTextHistoryVtbl;
struct ITextDataVtbl;
struct UPackageMap;
struct UScriptStruct::ICppStructOps;
struct INetDeltaBaseState;
struct INetDeltaBaseStateVtbl;
struct TSharedPtr<INetDeltaBaseState,0>;
struct UScriptStruct;
struct INetSerializeCB;
struct INetSerializeCBVtbl;
struct FNetworkGUID;
struct FNetDeltaSerializeInfo;
struct FOutputDevice;
struct FOutputDeviceVtbl;
struct FPropertyTag;
struct UScriptStruct::ICppStructOpsVtbl;
struct FMaterialCompiler;
struct TArray<FSceneView const *,FDefaultAllocator>;
struct FRenderTarget;
struct FRHITexture2D;
struct FRHIUnorderedAccessView;
struct FRenderTargetVtbl;
struct FTickFunctionVtbl;
struct FTickTaskSequencer;
struct UWorld;
struct FExecVtbl;
struct AActor;
struct USceneComponent;
struct UActorComponent;
struct UInputComponent;
struct FNavAgentProperties;
struct IPathFollowingAgentInterface;
struct FHitResult;
struct IPathFollowingAgentInterfaceVtbl;
struct INavAgentInterfaceVtbl;
struct FUniqueNetId;
struct FUniqueNetIdVtbl;
struct FUniqueNetIdWrapperVtbl;
struct APlayerState;
struct AController;
struct APawn;
struct FTriMeshCollisionData;
struct IInterface_CollisionDataProviderVtbl;
struct TArray<FNodeItem,FDefaultAllocator>;
struct INodeMappingProviderInterfaceVtbl;
struct FSkeletalMeshRenderData;
struct USkeletalMesh;
struct IInterface_PreviewMeshProviderVtbl;
struct USkeleton;
struct FBoxSphereBounds;
struct UThumbnailInfo;
struct UPhysicsAsset;
struct FSkelMeshRefPoseOverride;
struct FDeferredCleanupInterfaceVtbl;
struct FGPUSkinCache::FRWBuffersAllocation;
struct FGPUSkinCache;
struct FSkeletalMeshObject;
struct FDynamicSkelMeshObjectDataGPUSkin;
struct FResourceSizeEx;
struct FDynamicSkelMeshObjectDataGPUSkinVtbl;
struct FSkeletalMeshObjectGPUSkin;
struct FGPUSkinCacheEntry;
struct FAnimUpdateRateParameters;
struct USCS_Node;
struct USimpleConstructionScript;
struct UInheritableComponentHandler;
struct UStructProperty;
struct UFunction;
struct FFrame;
struct FOutParmRec;
struct IAnimClassInterfaceVtbl;
struct UAnimBlueprintGeneratedClass;
struct UAnimationAsset;
struct UAnimMontage;
struct FAnimMontageInstance;
struct FAnimInstanceProxy;
struct UAnimInstance;
struct FAnimationInitializeContext;
struct FAnimNode_Base;
struct FAnimationCacheBonesContext;
struct FAnimationUpdateContext;
struct FCurveElement;
struct FPoseContext;
struct FComponentSpacePoseContext;
struct FNodeDebugData;
struct TArray<FNodeDebugData,FDefaultAllocator>;
struct FAnimNode_BaseVtbl;
struct FAnimInstanceProxyVtbl;
struct USkeletalMeshComponent;
struct FAnimNode_SubInput;
struct IClothingSimulation;
struct IClothingSimulationContext;
struct IClothingSimulationContextVtbl;
struct FClothCollisionData;
struct IClothingSimulationVtbl;
struct UClothingSimulationInteractor;
struct UNavMovementComponent;
struct IRVOAvoidanceInterfaceVtbl;
struct FNetworkPredictionData_Client;
struct FNetworkPredictionData_ClientVtbl;
struct FNetworkPredictionData_Server;
struct FNetworkPredictionData_ServerVtbl;
struct INetworkPredictionInterfaceVtbl;
struct ACharacter;
struct UCharacterMovementComponent;
struct FSavedMove_Character;
struct FNetworkPredictionData_Client_Character;
struct APlayerController;
struct FSavedMove_CharacterVtbl;
struct FRootMotionSourceGroupVtbl;
struct FNetworkPredictionData_Server_Character;
struct UCapsuleComponent;
struct UPlayer;
struct UInterpTrackInstDirector;
struct FTexturePlatformData;
struct FResourceBulkDataInterfaceVtbl;
struct FTexture2DResourceMem;
struct FTexture2DUpdate;
struct FTexture2DUpdateVtbl;
struct UTexture2D;
struct FAsyncTask<FTexture2DUpdate::FMipUpdateTask>;
struct FTexture2DResource;
struct FTexture2DUpdate::FContext;
struct UReporterGraph;
struct IBreakIterator;
struct IBreakIteratorVtbl;
struct FCanvasWordWrapper;
struct FRefCountedObjectVtbl;
struct HHitProxy;
struct FHitProxyConsumer;
struct FHitProxyConsumerVtbl;
struct FSceneInterface;
struct FCanvas;
struct FCanvasItemVtbl;
struct FBatchedElementParameters;
struct FComputedUniformBuffer;
struct FLocalUniformBufferWorkArea;
struct TShaderMap<FMaterialShaderType>Vtbl;
struct FMaterialShaderMap;
struct USubsurfaceProfile;
struct FMaterialRenderProxy;
struct FBatchedElements;
struct FCompositeFont;
struct IFontProviderInterfaceVtbl;
struct UFont;
struct UCanvas;
struct FSceneView;
struct AHUD;
struct UTextureCube;
struct APlayerCameraManager;
struct UCameraModifier_CameraShake;
struct FInterpEdInputData;
struct FViewport;
struct FKeyDetails;
struct TOptional<TSharedRef<SWidget,0> >;
struct FSlateControlledConstructionVtbl;
struct SWidget;
struct IToolTip;
struct IToolTipVtbl;
struct ILayoutCache;
struct FCachedWidgetNode;
struct ILayoutCacheVtbl;
struct TSharedRef<SWidget const ,0>;
struct FSlotBaseVtbl;
struct FChildrenVtbl;
struct ISlateViewport;
struct SWindow;
struct FMemStackBase::FTaggedMemory;
struct FMemStackBase;
struct FMemMark;
struct FSlateShaderResource;
struct FSlateShaderResourceVtbl;
struct FCursorReply;
struct FInputEventVtbl;
struct FWidgetPath;
struct TSet<FKey,DefaultKeyFuncs<FKey,0>,FDefaultSetAllocator>;
struct FPointerEvent;
struct FDragDropOperation;
struct FDragDropEvent;
struct FDragDropOperationVtbl;
struct FKeyEvent;
struct FAnalogInputEvent;
struct FCharacterEvent;
struct FFocusEvent;
struct FMotionEvent;
struct TOptional<bool>;
struct FPopupMethodReply;
struct FNavigationReply;
struct FNavigationEvent;
struct FWindowActivateEvent;
struct ISlateViewportVtbl;
struct FCurveSequence;
struct FActiveTimerHandle;
struct SVerticalBox::FSlot;
struct TArray<FSlateBrush const *,FDefaultAllocator>;
struct FSlateWidgetStyleVtbl;
struct FSlateBrushVtbl;
struct FSlateShaderResourceProxy;
struct FSlateSharedHandleData;
struct FWindowStyle;
struct FGenericWindow;
struct FGenericWindowDefinition;
struct FGenericWindowVtbl;
struct FHittestGrid;
struct SOverlay;
struct SPopupLayer;
struct IWindowTitleBar;
struct IWindowTitleBarVtbl;
struct FStatUnitData;
struct FStatHitchesData;
struct FViewportClientVtbl;
struct FRHIViewport;
struct FInterpEdInputInterfaceVtbl;
struct UInterpGroup;
struct UCameraAnim;
struct UInterpGroupInst;
struct FCurveEdInterfaceVtbl;
struct UInterpTrackMove;
struct UInterpTrackInstMove;
struct UCameraAnimInst;
struct UCameraComponent;
struct ACameraActor;
struct UDrawFrustumComponent;
struct ADebugCameraController;
struct UCheatManager;
struct UPlayerInput;
struct UHapticFeedbackEffect_Base;
struct FActiveHapticFeedbackEffect;
struct UNetConnection;
struct SVirtualJoystick;
struct UTouchInterface;
struct USphereComponent;
struct FStaticMeshRenderData;
struct FStaticMeshOccluderData;
struct FSpeedTreeWind;
struct UNavCollisionBase;
struct UStaticMesh;
struct UStaticMeshComponent;
struct ASpectatorPawn;
struct PacketHandler;
struct PacketHandlerVtbl;
struct TArray<FAnalyticsEventAttribute,FDefaultAllocator>;
struct IAnalyticsProvider;
struct IAnalyticsProviderVtbl;
struct HandlerComponentVtbl;
struct FEncryptionComponent;
struct TQueue<BufferedPacket *,1>::TNode;
struct BufferedPacket;
struct ReliabilityHandlerComponent;
struct UNetDriver;
struct StatelessConnectHandlerComponent;
struct FNetGUIDCache;
struct FClassNetCacheMgr;
struct UReplicationDriver;
struct FNetworkObjectList;
struct FOutBunch;
struct FInBunch;
struct UChannel;
struct UReplicationConnectionDriver;
struct FNetworkNotifyVtbl;
struct UModel;
struct ULevelActorContainer;
struct ALevelScriptActor;
struct UBillboardComponent;
struct ANavigationObjectBase;
struct FTickTaskLevel;
struct TOctree<TVolumeLightingSample<3>,FLightVolumeOctreeSemantics>;
struct FPrecomputedLightVolumeData;
struct FPrecomputedLightVolume;
struct FRHITexture3D;
struct FPrecomputedVolumetricLightmapData;
struct FPrecomputedVolumetricLightmap;
struct UMapBuildDataRegistry;
struct UNavigationSystemConfig;
struct UReverbEffect;
struct USoundEffectSubmixPreset;
struct USoundMix;
struct UBookMark;
struct AWorldSettings;
struct AGameSession;
struct AGameStateBase;
struct AServerStatReplicator;
struct INetworkReplayStreamer;
struct FNetworkReplayVersion;
struct TBaseDelegate<void,FGotoResult const &>;
struct TBaseDelegate<void,bool const ,__int64 const >;
struct TBaseDelegate<void,FEnumerateEventsResult const &>;
struct TBaseDelegate<void,FReplayEventList const &,bool>;
struct TBaseDelegate<void,FRequestEventDataResult const &>;
struct TBaseDelegate<void,TArray<unsigned char,FDefaultAllocator> const &,bool>;
struct TBaseDelegate<void,FSearchEventsResult const &>;
struct TBaseDelegate<void,TArray<FNetworkReplayStreamInfo,FDefaultAllocator> const &>;
struct TBaseDelegate<void,FDownloadHeaderResult const &>;
struct TBaseDelegate<void,FKeepReplayResult const &>;
struct TBaseDelegate<void,FRenameReplayResult const &>;
struct TBaseDelegate<void,FDeleteFinishedStreamResult const &>;
struct TBaseDelegate<void,FEnumerateStreamsResult const &>;
struct INetworkReplayStreamerVtbl;
struct FQueuedReplayTask;
struct FQueuedReplayTaskVtbl;
struct UDemoNetDriver;
struct ULevel;
struct FLevelCollection;
struct ULineBatchComponent;
struct AGameNetworkManager;
struct UPhysicsCollisionHandler;
struct AParticleEventManager;
struct UBrushComponent;
struct APhysicsVolume;
struct UNavigationSystemBase;
struct UAISystemBase;
struct INavEdgeProviderInterface;
struct TArray<FNavEdgeSegment,FDefaultAllocator>;
struct INavEdgeProviderInterfaceVtbl;
struct UAvoidanceManager;
struct UPendingNetGame;
struct UGameViewportClient;
struct FSceneViewStateReference;
struct FSceneViewStateReferenceVtbl;
struct FSceneViewStateInterface;
struct FRenderQueryPool;
struct FRenderQueryPoolVtbl;
struct FOcclusionPrimitive;
struct IPooledRenderTarget;
struct FPooledRenderTargetDesc;
struct IPooledRenderTargetVtbl;
struct FRHIStructuredBuffer;
struct TRefCountPtr<IPooledRenderTarget>;
struct FIndirectLightingCacheAllocation;
struct FOcclusionFrameResults;
struct FSceneSoftwareOcclusion;
struct FRWByteAddressBuffer;
struct FRWBufferStructured;
struct FLpvWriteUniformBufferParameters;
struct FLightPropagationVolume;
struct FHeightfieldLightingAtlas;
struct FDynamicReadBufferVtbl;
struct FForwardLightingViewResources;
struct FTileIntersectionResources;
struct FAOScreenGridResources;
struct FRHIRenderQuery;
struct FTemporalLODState;
struct FSceneViewState;
struct UMaterialInterface;
struct UMaterialInstance;
struct FMaterialInstanceResource;
struct FPipelineStateStats;
struct FRHIComputeShader;
struct FRHICommandListBase;
struct FRHICommandListDebugContext;
struct FRHICommandBase;
struct FRHICommandBaseVtbl;
struct FRHIComputeFence;
struct IRHIComputeContext;
struct IRHIComputeContextVtbl;
struct FRHIBoundShaderState;
struct FRHIDepthStencilState;
struct FRHIRasterizerState;
struct FRHIBlendState;
struct IRHIDeprecatedContextVtbl;
struct IRHICommandContext;
struct FPrimitiveSceneProxy;
struct FLightCacheInterface;
struct FLightInteraction;
struct FLightSceneProxy;
struct FSphere;
struct FLightParameters;
struct FSceneViewFamily;
struct TArray<FWholeSceneProjectedShadowInitializer,TInlineAllocator<6,FDefaultAllocator> >;
struct FConvexVolume;
struct FShadowCascadeSettings;
struct FWholeSceneProjectedShadowInitializer;
struct FPerObjectProjectedShadowInitializer;
struct FLightSceneProxyVtbl;
struct UTextureLightProfile;
struct FStaticShadowDepthMapData;
struct ULightComponent;
struct FLightSceneInfo;
struct FPlanarReflectionRenderTarget;
struct FPlanarReflectionSceneProxy;
struct FReflectionCaptureProxy;
struct FRHITextureCube;
struct FReflectionTextureCubeResource;
struct UReflectionCaptureComponent;
struct FLightPrimitiveInteraction;
struct FFXSystemInterface;
struct UVectorField;
struct FVectorFieldResource;
struct FVectorFieldInstance;
struct UVectorFieldComponent;
struct FParticleEmitterInstance;
struct FSubUVBoundingGeometryBuffer;
struct USubUVAnimation;
struct UParticleEmitter;
struct UParticleSystemComponent;
struct UInterpCurveEdSetup;
struct UParticleSystem;
struct UDistributionFloat;
struct UParticleModuleRequired;
struct UParticleModuleTypeDataBase;
struct UParticleModuleSpawn;
struct UParticleModuleEventGenerator;
struct UParticleLODLevel;
struct FBaseParticle;
struct FDynamicEmitterDataBase;
struct FParticleVertexFactoryBase;
struct FMaterialRelevance;
struct FParticleDynamicData;
struct FParticleSystemSceneProxy;
struct FOneFrameResource;
struct FOneFrameResourceVtbl;
struct FMeshElementCollector;
struct FSimpleLightEntry;
struct FSimpleLightPerViewEntry;
struct FSimpleLightInstacePerViewIndexData;
struct FSimpleLightArray;
struct FDynamicEmitterReplayDataBase;
struct FDynamicEmitterReplayDataBaseVtbl;
struct FDynamicEmitterDataBaseVtbl;
struct FParticleEmitterInstanceVtbl;
struct UParticleModuleSpawnPerUnit;
struct UDistributionVector;
struct FGPUSpriteResources;
struct FGPUSpriteEmitterInfo;
struct FRHICommandListImmediate;
struct FGlobalDistanceFieldParameterData;
struct FUniformBufferStruct;
struct FUniformBufferStructVtbl;
struct FShaderUniformBufferParameter;
struct TLinkedList<FUniformBufferStruct *>;
struct FFXSystemInterfaceVtbl;
struct TArray<FBoxSphereBounds,FDefaultAllocator>;
struct TArray<FPrimitiveComponentId,FDefaultAllocator>;
struct FSkyTextureCubeResource;
struct TSHVectorRGB<3>;
struct FSkyLightSceneProxy;
struct USkyLightComponent;
struct FDistanceFieldObjectBuffers;
struct FSurfelBuffers;
struct FInstancedSurfelBuffers;
struct FAtmosphereTextureResource;
struct UAtmosphericFogComponent;
struct FAtmosphericFogSceneInfo;
struct TArray<FWindSourceSceneProxy *,FDefaultAllocator>;
struct FScene;
struct FReadOnlyCVARCache;
struct FPrimitiveSceneInfo;
struct FLightTileIntersectionResources;
struct FLightCacheInterfaceVtbl;
struct FLightMap;
struct FShadowMap;
struct FMeshBatch;
struct FOccluderElementsCollector;
struct FOccluderElementsCollectorVtbl;
struct FPrimitiveViewRelevance;
struct FHeightfieldComponentDescription;
struct TArray<FLightCacheInterface *,TInlineAllocator<8,FDefaultAllocator> >;
struct FLODMask;
struct FPrimitiveSceneProxyVtbl;
struct FExtraShaderCompilerSettings;
struct TArray<UMaterialExpressionCustomOutput *,FDefaultAllocator>;
struct FMaterialVtbl;
struct UMaterial;
struct FMaterialResource;
struct UMaterialInstanceDynamic;
struct FSceneViewStateInterfaceVtbl;
struct TLinkedList<FSceneViewStateReference *>;
struct ULocalPlayer;
struct UConsoleSettings;
struct UConsole;
struct UGameInstance;
struct FViewportFrame;
struct FViewportFrameVtbl;
struct IGameLayerManager;
struct IGameLayer;
struct IGameLayerVtbl;
struct TSharedPtr<IGameLayer,0>;
struct IGameLayerManagerVtbl;
struct FWorldContext;
struct UOnlineSession;
struct FTimerManager;
struct FTimerManagerVtbl;
struct FPhysicsReplication;
struct FPhysicsReplicationVtbl;
struct FPhysScene;
struct physx::PxBaseTask;
struct physx::PxBaseTaskVtbl;
struct physx::PxCpuDispatcher;
struct physx::PxTaskManager;
struct physx::PxGpuDispatcher;
struct physx::PxTask;
struct physx::PxCudaContextManager;
struct physx::PxCudaContextManagerVtbl;
struct physx::PxGpuCopyDesc;
struct physx::PxGpuDispatcherVtbl;
struct physx::PxTaskManagerVtbl;
struct physx::PxCpuDispatcherVtbl;
struct physx::PxConstraint;
struct physx::PxConstraintInfo;
struct physx::PxSimulationEventCallback;
struct physx::PxShape;
struct physx::PxContactPair;
struct physx::PxContactPairHeader;
struct physx::PxTriggerPair;
struct physx::PxRigidBody;
struct physx::PxTransform;
struct physx::PxSimulationEventCallbackVtbl;
struct physx::PxModifiableContact;
struct physx::PxContactModifyPair;
struct physx::PxContactModifyCallbackVtbl;
struct FContactModifyCallback;
struct physx::PxBroadPhaseCallbackVtbl;
struct FPhysXMbpBroadphaseCallback;
struct PhysXCompletionTask;
struct nvidia::apex::RenderDataProviderVtbl;
struct nvidia::apex::RWLockableVtbl;
struct nvidia::apex::RenderableIterator;
struct nvidia::apex::ContextVtbl;
struct nvidia::apex::Scene;
struct FPhysSubstepTask;
struct UWorldComposition;
struct FWorldInGamePerformanceTrackers;
struct FPrimitiveComponentPostPhysicsTickFunction;
struct UDecalComponent;
struct FDeferredDecalProxy;
struct FReflectionCaptureData;
struct TArray<UReflectionCaptureComponent *,FDefaultAllocator>;
struct TArray<FFloat16Color,FDefaultAllocator>;
struct UBoxComponent;
struct UPlanarReflectionComponent;
struct UTextureRenderTargetCube;
struct UTextureRenderTarget2D;
struct USceneCaptureComponentCube;
struct USceneCaptureComponent2D;
struct FSceneRenderer;
struct FSceneRendererVtbl;
struct FViewUniformShaderParameters;
struct FTranslucentPrimSet::FTranslucentSortedPrim;
struct FSortedPrimSet<unsigned int>::FSortedPrim;
struct FVisibleLightViewInfo;
struct FMeshBatchAndRelevance;
struct FPrimitiveDrawInterface;
struct FDynamicPrimitiveResource;
struct FDynamicPrimitiveResourceVtbl;
struct FPrimitiveDrawInterfaceVtbl;
struct FOcclusionQueryBatcher::FOcclusionBatch;
struct TShaderMap<FGlobalShaderType>;
struct TShaderMap<FGlobalShaderType>Vtbl;
struct IRefCountedObjectVtbl;
struct ICustomVisibilityQuery;
struct FViewInfo;
struct FStaticMesh;
struct FShadowStaticMeshElement;
struct FProjectedShadowInfo;
struct TRefCountPtr<FProjectedShadowInfo>;
struct FVisibleLightInfo;
struct FSortedShadowMapAtlas;
struct TMap<FMaterial *,FMaterialShaderMap *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FMaterial *,FMaterialShaderMap *,0> >;
struct TArray<FMaterial const *,FDefaultAllocator>;
struct UExponentialHeightFogComponent;
struct FWindSourceSceneProxy;
struct UWindDirectionalSourceComponent;
struct TArray<ULightComponent const *,FDefaultAllocator>;
struct TArray<FMaterialParameterCollectionInstanceResource *,FDefaultAllocator>;
struct FSceneInterfaceVtbl;
struct ISceneViewFamilyScreenPercentage;
struct TArray<FSceneViewScreenPercentageConfig,FDefaultAllocator>;
struct ISceneViewFamilyScreenPercentageVtbl;
struct FViewElementDrawer;
struct FViewElementDrawerVtbl;
struct IBlendableInterfaceVtbl;
struct FDefaultMaterialInstance;
struct UMaterialFunction;
struct FMaterialParameterCollectionInstanceResource;
struct UMaterialParameterCollection;
struct FMaterialLayersFunctions;
struct UMaterialExpressionCustom;
struct UMaterialExpressionCustomOutput;
struct FMaterialCompilerVtbl;
struct FSlateTextureAtlasVtbl;
struct FAtlasedTextureSlot;
struct INavigationQueryFilterInterface;
struct INavigationQueryFilterInterfaceVtbl;
struct FNavigationQueryFilter;
struct FT_MemoryRec_;
struct ISlateAtlasProviderVtbl;
struct FFreeTypeLibrary;
struct FFreeTypeGlyphCache;
struct FFreeTypeAdvanceCache;
struct FFreeTypeKerningPairCache;
struct FCompositeFontCache;
struct FSlateFontRenderer;
struct FSlateFontCache;
struct TextBiDi::ITextBiDi;
struct TArray<TextBiDi::FTextDirectionInfo,FDefaultAllocator>;
struct TextBiDi::ITextBiDiVtbl;
struct _RTL_CRITICAL_SECTION_DEBUG;
struct hb_user_data_key_t;
struct hb_user_data_array_t::hb_user_data_item_t;
struct hb_font_t;
struct hb_face_t;
struct hb_shape_plan_t;
struct hb_feature_t;
struct hb_face_t::plan_node_t;
struct hb_font_funcs_t;
struct hb_font_extents_t;
struct hb_glyph_extents_t;
struct FSlateTextShaper;
struct ISlateFontAtlasFactory;
struct ISlateFontTexture;
struct ISlateFontTextureVtbl;
struct FSlateFontAtlas;
struct TSharedRef<FSlateFontAtlas,0>;
struct TSharedPtr<ISlateFontTexture,0>;
struct ISlateFontAtlasFactoryVtbl;
struct HICON__;
struct FTextLayout;
struct IRun;
struct FTextRange;
struct FShapedTextCache;
struct FRunTextContext;
struct ILayoutBlock;
struct TSharedRef<IRun,0>;
struct FLayoutBlockTextContext;
struct IRunRendererVtbl;
struct TSharedPtr<IRunRenderer,0>;
struct ILayoutBlockVtbl;
struct TSharedRef<ILayoutBlock,0>;
struct TSharedRef<FString,0>;
struct FRunInfo;
struct IRunVtbl;
struct FTextLayoutVtbl;
struct FSlateTextLayout;
struct ITextLayoutMarshaller;
struct ITextLayoutMarshallerVtbl;
struct ISlateRunRenderer;
struct FSlateTextBlockLayout;
struct STextBlock;
struct FNavigationPath;
struct INavigationDataInterfaceVtbl;
struct FPathFindingResult;
struct FPathFindingQuery;
struct ANavigationData;
struct FNavDataGenerator;
struct TArray<FNavigationDirtyArea,FDefaultAllocator>;
struct FNavDataGeneratorVtbl;
struct FNavigationPathVtbl;
struct IModuleInterfaceVtbl;
struct SScrollBarTrack;
struct ISlateWidgetStyleContainerInterfaceVtbl;
struct USlateWidgetStyleContainerBase;
struct USlateWidgetStyleAsset;
struct FSlateDrawBuffer;
struct SSpacer;
struct SScrollBar;
struct FTickableObjectBaseVtbl;
struct _GUID;
struct FDeferredUpdateResource;
struct FDeferredUpdateResourceVtbl;
struct TLinkedList<FDeferredUpdateResource *>;
struct HDC__;
struct FStaticMeshInstanceData;
struct FTextureRenderTarget2DResource;
struct SVerticalBox;
struct UPanelWidget;
struct UPanelSlot;
struct UWidget::FGetWidget;
struct UWidgetNavigation;
struct UUserWidget;
struct SObjectWidget;
struct INamedSlotInterfaceVtbl;
struct UWidgetTree;
struct UCurveLinearColor;
struct type_info;
struct type_infoVtbl;
struct ISlate3DRenderer;
struct ISlate3DRendererVtbl;
struct IUnknownVtbl;
struct IFMODStudioModule;
struct FMOD::Studio::System;
struct UFMODEvent;
struct FMOD::Studio::EventInstance;
struct FMOD::System;
struct FMOD::DSP;
struct FMOD::Sound;
struct UFMODBank;
struct FMovieSceneEvaluationTemplate;
struct UMovieSceneSequence;
struct FMovieSceneSubSequenceData;
struct IMovieSceneSequenceTemplateStore;
struct IMovieSceneSequenceTemplateStoreVtbl;
struct TMap<FViewportClient *,EMovieSceneViewportParams,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FViewportClient *,EMovieSceneViewportParams,0> >;
struct TArray<UObject *,TInlineAllocator<1,FDefaultAllocator> >;
struct IMovieSceneBindingOverridesInterfaceVtbl;
struct FMovieSceneSpawnRegister;
struct FMovieSceneSpawnable;
struct FMovieSceneSpawnRegisterVtbl;
struct IMovieScenePlayerVtbl;
struct FMovieSceneTimeController;
struct FMovieSceneTimeControllerVtbl;
struct FPerInstanceRenderData;
struct UInstancedStaticMeshComponent;
struct UCurveVector;
struct USplineComponent;
struct std::_Container_proxy;
struct std::_Iterator_base12;
struct USpotLightComponent;
struct UProceduralMeshComponent;
struct CurveVtbl;
struct CubicSpline<float,float>Vtbl;
struct CubicSpline<float,float>::Element;
struct UDataTable;
struct FTableRowBaseVtbl;
struct UAcParticlesManager;
struct UAC2TyreSmoke;
struct RaceEngineer;
struct RaceEngineerVtbl;
struct ICarPhysicsStateProvider;
struct WingState;
struct DownForceState;
struct DebugPoint;
struct DebugLine;
struct ICarPhysicsStateProviderVtbl;
struct EngineMap;
struct DynamicControllerStage;
struct TurboData;
struct TyreCompoundData;
struct TyreCompoundSet;
struct DynamicWingControllerData;
struct WingData;
struct DynamicDownForceControllerData;
struct DownForceData;
struct ColliderBoxesData;
struct TractionControlSettings;
struct ABSSettings;
struct std::_Func_base<void,TimeLineEvent const &>;
struct TimeLineEvent;
struct std::_Func_base<void,TimeLineEvent const &>Vtbl;
struct std::pair<void *,std::function<void __cdecl(TimeLineEvent const &)> >;
struct std::_Func_base<void,OnStepCompleteEvent const &>;
struct Car;
struct OnStepCompleteEvent;
struct std::_Func_base<void,OnStepCompleteEvent const &>Vtbl;
struct std::pair<void *,std::function<void __cdecl(OnStepCompleteEvent const &)> >;
struct std::_Func_base<void,OnControlsProviderChanged const &>;
struct ICarControlsProvider;
struct VibrationDef;
struct ICarControlsProviderVtbl;
struct OnControlsProviderChanged;
struct std::_Func_base<void,OnControlsProviderChanged const &>Vtbl;
struct std::pair<void *,std::function<void __cdecl(OnControlsProviderChanged const &)> >;
struct std::_Func_base<void,OnLapCompletedEvent const &>;
struct OnLapCompletedEvent;
struct std::_Func_base<void,OnLapCompletedEvent const &>Vtbl;
struct std::pair<void *,std::function<void __cdecl(OnLapCompletedEvent const &)> >;
struct std::_Func_base<void,OnSectorSplitEvent const &>;
struct OnSectorSplitEvent;
struct std::_Func_base<void,OnSectorSplitEvent const &>Vtbl;
struct std::pair<void *,std::function<void __cdecl(OnSectorSplitEvent const &)> >;
struct std::_Func_base<void,vec3d const &>;
struct std::_Func_base<void,vec3d const &>Vtbl;
struct std::pair<void *,std::function<void __cdecl(vec3d const &)> >;
struct std::_Func_base<void,std::pair<int,int> const &>;
struct std::pair<int,int>;
struct std::_Func_base<void,std::pair<int,int> const &>Vtbl;
struct std::pair<void *,std::function<void __cdecl(std::pair<int,int> const &)> >;
struct std::_Func_base<void,OnCollisionEvent const &>;
struct IRigidBody;
struct IRigidBodyVtbl;
struct OnCollisionEvent;
struct std::_Func_base<void,OnCollisionEvent const &>Vtbl;
struct std::pair<void *,std::function<void __cdecl(OnCollisionEvent const &)> >;
struct std::_Func_base<void,double const &>;
struct std::_Func_base<void,double const &>Vtbl;
struct std::pair<void *,std::function<void __cdecl(double const &)> >;
struct FixedJointODE;
struct ICollisionObject;
struct ICollisionObjectVtbl;
struct CollisionData;
struct ICollisionCallbackVtbl;
struct PhysicsEngine;
struct std::_Func_base<void,CarConnectedEvent const &>;
struct rapidjson::GenericValue<rapidjson::UTF16<wchar_t>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator> >;
struct rapidjson::GenericMember<rapidjson::UTF16<wchar_t>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator> >;
struct rapidjson::CrtAllocator;
struct rapidjson::GenericStringBuffer<rapidjson::UTF16<wchar_t>,rapidjson::CrtAllocator>;
struct rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF16<wchar_t>,rapidjson::CrtAllocator>,rapidjson::UTF16<wchar_t>,rapidjson::UTF16<wchar_t>,rapidjson::CrtAllocator,0>;
struct UDPPacket;
struct ksRacing::WritableRaceStructureVtbl;
struct ksRacing::CarInfo;
struct ksRacing::DriverInfo;
struct CarConnectedEvent;
struct std::_Func_base<void,CarConnectedEvent const &>Vtbl;
struct std::pair<void *,std::function<void __cdecl(CarConnectedEvent const &)> >;
struct std::_Func_base<void,unsigned char const &>;
struct std::_Func_base<void,unsigned char const &>Vtbl;
struct std::pair<void *,std::function<void __cdecl(unsigned char const &)> >;
struct std::_Func_base<void,ksRacing::OnSplitTimeEvent const &>;
struct ksRacing::OnSplitTimeEvent;
struct std::_Func_base<void,ksRacing::OnSplitTimeEvent const &>Vtbl;
struct std::pair<void *,std::function<void __cdecl(ksRacing::OnSplitTimeEvent const &)> >;
struct std::_Func_base<void,ksRacing::OnRemoteLapEvent const &>;
struct ksRacing::OnRemoteLapEvent;
struct std::_Func_base<void,ksRacing::OnRemoteLapEvent const &>Vtbl;
struct std::pair<void *,std::function<void __cdecl(ksRacing::OnRemoteLapEvent const &)> >;
struct std::_Func_base<void,OnSessionUpdateEvent const &>;
struct OnSessionUpdateEvent;
struct std::_Func_base<void,OnSessionUpdateEvent const &>Vtbl;
struct std::pair<void *,std::function<void __cdecl(OnSessionUpdateEvent const &)> >;
struct std::pair<unsigned short,unsigned short>;
struct ksRacing::TrackEvent;
struct ksRacing::Lap;
struct ksRacing::NextSessionPenalty;
struct ksRacing::SessionPenalty;
struct ksRacing::WeatherStatus;
struct ksRacing::PitStopEvent;
struct ksRacing::TyreSet;
struct std::vector<ksRacing::TyreSet,std::allocator<ksRacing::TyreSet> >;
struct ksRacing::EventResult;
struct ksRacing::DriverEntity;
struct ksRacing::CarEntity;
struct ksRacing::SessionEntity;
struct ksRacing::EventEntity;
struct std::_Func_base<void,UDPMessage const &>;
struct UDPMessage;
struct std::_Func_base<void,UDPMessage const &>Vtbl;
struct std::function<void __cdecl(UDPMessage const &)>;
struct UDPSocket;
struct Concurrency::details::_Concurrent_queue_base_v4::_Page;
struct Concurrency::details::_Concurrent_queue_base_v4Vtbl;
struct Concurrency::details::_Concurrent_queue_rep;
struct TCPSocket;
struct NetCarStateProvider;
struct ClientCollisionEvent;
struct AC2Client;
struct IRayTrackCollisionProvider;
struct RayCastResult;
struct IRayCaster;
struct RayCastHit;
struct IRayCasterVtbl;
struct IRayTrackCollisionProviderVtbl;
struct TriangleVtbl;
struct SlipStream;
struct std::_Func_base<void,SessionInfo const &>;
struct std::_Func_base<void,SessionInfo const &>Vtbl;
struct std::pair<void *,std::function<void __cdecl(SessionInfo const &)> >;
struct DirectInput;
struct DirectInputVtbl;
struct IDirectInput8W;
struct IDirectInputEffectDriver;
struct THMRS;
struct IDirectInputEffect;
struct IDirectInputDevice8W;
struct InputDevice;
struct std::_Tree_node<std::pair<unsigned int const ,dxSpace *>,void *>;
struct PhysicsCore;
struct TimeLine;
struct TimeLineVtbl;
struct AISplineRecorder;
struct AISplineRecorderVtbl;
struct AISpline;
struct AISplineVtbl;
struct AIStraightData;
struct SplineVtbl;
struct SplinePoint;
struct GridElement;
struct std::vector<GridElement,std::allocator<GridElement> >;
struct AISplinePayload;
struct Track;
struct TrackGene;
struct DynamicTrackStatus;
struct IDebugVisualizer;
struct DebugString;
struct IDebugVisualizerVtbl;
struct ThreadPool;
struct ThreadPoolVtbl;
struct std::_Func_base<void>;
struct std::_Func_base<void>Vtbl;
struct std::function<void __cdecl(void)>;
struct Task;
struct TimeLineStatus;
struct CarCollisionBox;
struct SGearRatio;
struct Turbo;
struct ITorqueGenerator;
struct ITorqueGeneratorVtbl;
struct ICoastGenerator;
struct ICoastGeneratorVtbl;
struct DynamicController;
struct TurboDynamicController;
struct std::_Func_base<void,OnGearRequestEvent const &>;
struct OnGearRequestEvent;
struct std::_Func_base<void,OnGearRequestEvent const &>Vtbl;
struct std::pair<void *,std::function<void __cdecl(OnGearRequestEvent const &)> >;
struct ISuspension;
struct ISuspensionVtbl;
struct TyreThermalPatch;
struct SignalGeneratorVtbl;
struct TyreModelOutput;
struct TyreModelInput;
struct ITyreModelVtbl;
struct ColliderWheel;
struct Tyre;
struct DynamicWingController;
struct Wing;
struct DownForce;
struct DynamicDownForceController;
struct TelemetryChannel;
struct DRSWingConnection;
struct ERSPowerController;
struct DistanceJointODE;
struct Suspension;
struct ThermalObjectVtbl;
struct FWidgetRenderer;
struct std::_Tree_node<std::pair<unsigned short const ,ksRacing::TimingRecord>,void *>;
struct std::_Tree_node<unsigned short,void *>;
struct std::_Func_base<void,ksRacing::EntryListUpdatedEvent const &>;
struct ksRacing::EntryListUpdatedEvent;
struct std::_Func_base<void,ksRacing::EntryListUpdatedEvent const &>Vtbl;
struct std::pair<void *,std::function<void __cdecl(ksRacing::EntryListUpdatedEvent const &)> >;
struct std::_Tree_node<std::pair<unsigned short const ,ksRacing::CarInfo>,void *>;
struct std::_Tree_node<std::pair<unsigned short const ,ksRacing::DriverEntry>,void *>;
struct std::_Func_base<void,enum ksRacing::TrackFlagLights const &>;
struct std::_Func_base<void,enum ksRacing::TrackFlagLights const &>Vtbl;
struct std::pair<void *,std::function<void __cdecl(enum ksRacing::TrackFlagLights const &)> >;
struct std::_Func_base<void,ksRacing::RaceStateEvent const &>;
struct ksRacing::RaceStateEvent;
struct std::_Func_base<void,ksRacing::RaceStateEvent const &>Vtbl;
struct std::pair<void *,std::function<void __cdecl(ksRacing::RaceStateEvent const &)> >;
struct std::_Func_base<void,ksRacing::RaceStartTimeEvent const &>;
struct ksRacing::RaceStartTimeEvent;
struct std::_Func_base<void,ksRacing::RaceStartTimeEvent const &>Vtbl;
struct std::pair<void *,std::function<void __cdecl(ksRacing::RaceStartTimeEvent const &)> >;
struct std::_Func_base<void,ksRacing::StartSessionEvent const &>;
struct std::_Func_base<void,ksRacing::StartSessionEvent const &>Vtbl;
struct std::pair<void *,std::function<void __cdecl(ksRacing::StartSessionEvent const &)> >;
struct std::_Func_base<void,ksRacing::SwapDriverEvent const &>;
struct ksRacing::SwapDriverEvent;
struct std::_Func_base<void,ksRacing::SwapDriverEvent const &>Vtbl;
struct std::pair<void *,std::function<void __cdecl(ksRacing::SwapDriverEvent const &)> >;
struct std::_Func_base<void,bool const &>;
struct std::_Func_base<void,bool const &>Vtbl;
struct std::pair<void *,std::function<void __cdecl(bool const &)> >;
struct std::_Func_base<void,ksRacing::AddOnlineEvent const &>;
struct ksRacing::AddOnlineEvent;
struct std::_Func_base<void,ksRacing::AddOnlineEvent const &>Vtbl;
struct std::pair<void *,std::function<void __cdecl(ksRacing::AddOnlineEvent const &)> >;
struct ksRacing::EntryList;
struct std::_Func_base<void,ksRacing::UpdateOfficialPositionEvent const &>;
struct ksRacing::UpdateOfficialPositionEvent;
struct std::_Func_base<void,ksRacing::UpdateOfficialPositionEvent const &>Vtbl;
struct std::pair<void *,std::function<void __cdecl(ksRacing::UpdateOfficialPositionEvent const &)> >;
struct std::_Func_base<void,ksRacing::UpdateCarSystems const &>;
struct ksRacing::UpdateCarSystems;
struct std::_Func_base<void,ksRacing::UpdateCarSystems const &>Vtbl;
struct std::pair<void *,std::function<void __cdecl(ksRacing::UpdateCarSystems const &)> >;
struct std::_Func_base<void,unsigned short const &>;
struct std::_Func_base<void,unsigned short const &>Vtbl;
struct std::pair<void *,std::function<void __cdecl(unsigned short const &)> >;
struct ksRacing::RaceManager;
struct std::_Tree_node<std::pair<unsigned short const ,ksRacing::CarState>,void *>;
struct std::_Tree_node<std::pair<unsigned short const ,ksRacing::CarState *>,void *>;
struct ksRacing::CarStateServices;
struct std::_Tree_node<std::pair<unsigned short const ,ksRacing::DriverState>,void *>;
struct ksRacing::DriverStateServices;
struct ksRacing::WeatherServices;
struct ksRacing::SeasonItem;
struct ksRacing::ResultServices;
struct ksRacing::GarageStock;
struct ksRacing::GarageServices;
struct std::pair<bool,unsigned short>;
struct ksRacing::TrackServices;
struct std::_Func_base<void,ksRacing::Lap const &>;
struct std::_Func_base<void,ksRacing::Lap const &>Vtbl;
struct std::pair<void *,std::function<void __cdecl(ksRacing::Lap const &)> >;
struct std::_Func_base<void,ksRacing::BestLap const &>;
struct ksRacing::BestLap;
struct std::_Func_base<void,ksRacing::BestLap const &>Vtbl;
struct std::pair<void *,std::function<void __cdecl(ksRacing::BestLap const &)> >;
struct ksRacing::TimingServices;
struct std::_Func_base<void,ksRacing::InvestigationStart const &>;
struct ksRacing::InvestigationStart;
struct std::_Func_base<void,ksRacing::InvestigationStart const &>Vtbl;
struct std::pair<void *,std::function<void __cdecl(ksRacing::InvestigationStart const &)> >;
struct std::_Func_base<void,ksRacing::InvestigationEnd const &>;
struct ksRacing::InvestigationEnd;
struct std::_Func_base<void,ksRacing::InvestigationEnd const &>Vtbl;
struct std::pair<void *,std::function<void __cdecl(ksRacing::InvestigationEnd const &)> >;
struct std::_Tree_node<std::pair<unsigned short,unsigned short>,void *>;
struct std::_Tree_node<std::pair<unsigned short const ,ksRacing::CarInvestigation>,void *>;
struct std::_Tree_node<std::pair<unsigned short const ,ksRacing::CarPenalty>,void *>;
struct ksRacing::RaceDirectorServices;
struct std::_Tree_node<std::pair<unsigned short const ,std::set<unsigned short,std::less<unsigned short>,std::allocator<unsigned short> > >,void *>;
struct ksRacing::ReplayFrame<ksRacing::ReplayCarMatrix>;
struct ksRacing::ReplayFrame<ksRacing::ReplayCarAdditional>;
struct UCarData;
struct UAIDataAsset;
struct USetupManager;
struct ACarAvatar;
struct AACPlayerCameraManager;
struct AAcFreeCameraActor;
struct UAcInfoManager;
struct UAcPresetManager;
struct UAcCarGraphicData;
struct UAcMenuState;
struct UAcPageBase;
struct UAcGameInstance;
struct UAcPanelBase;
struct UTextBlock;
struct SScrollPanel;
struct SScrollBox;
struct UScrollBox;
struct UVerticalBox;
struct UHelpInMenu;
struct IMovieSceneBindingOwnerInterfaceVtbl;
struct ULevelSequencePlayer;
struct ULevelSequenceBurnInInitSettings;
struct ULevelSequenceBurnInOptions;
struct UMovieSceneBindingOverrides;
struct ALevelSequenceActor;
struct ULevelSequenceBurnIn;
struct UAcStereoLayerComponent;
struct UAcInputDeviceManager;
struct UViewOptionsLibrary;
struct AAcMenuGameMode;
struct UAcRaceEventGenerator;
struct SharedMemoryWriter;
struct std::_Tree_node<std::pair<ICarPhysicsStateProvider * const,CarPhysicsState>,void *>;
struct TQueue<APhysicsAvatar::PhysicsState,1>::TNode;
struct TQueue<std::function<void __cdecl(void)>,1>::TNode;
struct TQueue<DynamicTrackStatus,1>::TNode;
struct UPhysicsSettingsAC;
struct UAIPerceptionComponent;
struct IAIPerceptionListenerInterfaceVtbl;
struct UGameplayTasksComponent;
struct UGameplayTask;
struct IGameplayTaskOwnerInterfaceVtbl;
struct IGenericTeamAgentInterfaceVtbl;
struct FVisualLogEntry;
struct IVisualLoggerDebugSnapshotInterfaceVtbl;
struct IAIResourceInterfaceVtbl;
struct FMoveRequestCustomData;
struct UPathFollowingComponent;
struct UBrainComponent;
struct UBlackboardData;
struct TArray<FBlackboardEntry,FDefaultAllocator>;
struct UBlackboardComponent;
struct UPawnAction;
struct UPawnActionsComponent;
struct AAcRaceGameMode;
struct UAcAssistController;
struct AIKersArea;
struct AIOpponentData;
struct AIBrakeObstacle;
struct AIBrakeProfilerItem;
struct std::_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > const ,TyreCompoundStrategy>,void *>;
struct AIWingSetup;
struct AIDriver;
struct AAiCarController;
struct UAcRaceManager;
struct AAcRaceGameState;
struct std::_Tree_node<std::pair<unsigned short const ,ksRacing::CarReplayData>,void *>;
struct ksRacing::ReplayFrame<ksRacing::ReplayWorldUpdate>;
struct std::_Tree_node<std::pair<unsigned short const ,ksRacing::DriverInfo>,void *>;
struct std::_Tree_node<std::pair<unsigned short const ,ksRacing::CarReplaySnapshot>,void *>;
struct ksRacing::FHighlightEvents;
struct DummyTyre;
struct UReplayManager;
struct UReplayHighlightEvents;
struct AReplayActor;
struct AWindDirectionalSource;
struct ARainBase;
struct UMaterialExpressionConstant3Vector;
struct AAcParticles;
struct UAudioManager;
struct APhysicsAvatar;
struct UTrackPhysicsDataCache;
struct UTrackGenome;
struct ATrackAvatar;
struct UTrackPeopleController;
struct SurfacesManager;
struct SurfacesManagerVtbl;
struct std::_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > const ,SurfaceDef>,void *>;
struct ATriggerBox;
struct ATriggerVolume;
struct AAcPlayerStartManager;
struct AAcCarLocationManager;
struct AAcTrackSpline;
struct ASceneCapture2D;
struct ADirectionalLight;
struct AAcIdealLineActor;
struct ksRacing::ReplayFrame<GhostCarMatrix>;
struct AGhostCarManager;
struct std::_Func_base<void,FCornerSectionCarResult const &>;
struct FCornerSectionCarResult;
struct std::_Func_base<void,FCornerSectionCarResult const &>Vtbl;
struct std::pair<void *,std::function<void __cdecl(FCornerSectionCarResult const &)> >;
struct UTrackSectionServices;
struct UAcTeamStrategyController;
struct AAudioActor;
struct std::_Func_base<void,int const &>;
struct std::_Func_base<void,int const &>Vtbl;
struct std::pair<void *,std::function<void __cdecl(int const &)> >;
struct UAudioComms;
struct AAcSpotter;
struct UBlackPage;
struct UAcMenuData;
struct UMenuManager;
struct std::_Func_base<void,TCPPacket const &>;
struct TCPPacket;
struct std::_Func_base<void,TCPPacket const &>Vtbl;
struct TQueue<TCPPacket,1>::TNode;
struct TcpClient;
struct UOnlineServicesSession;
struct UOnlineServices;
struct UExpoModeManager;
struct std::_Func_base<void,ksRacing::AssistRules const &>;
struct std::_Func_base<void,ksRacing::AssistRules const &>Vtbl;
struct std::pair<void *,std::function<void __cdecl(ksRacing::AssistRules const &)> >;
struct std::_Func_base<void,ksRacing::RealismRules const &>;
struct std::_Func_base<void,ksRacing::RealismRules const &>Vtbl;
struct std::pair<void *,std::function<void __cdecl(ksRacing::RealismRules const &)> >;
struct UAcUserOptionsManager;
struct DiscordClientAPIWrapper;
struct UGamePlatformServices;
struct UAcCarAnimations;
struct UAcCarLightingSystem;
struct UAcCarSystems;
struct UAcLedSystem;
struct UAcCarTimingServices;
struct UKSAudioComponent;
struct UCarAudio;
struct UAcExhaustComponent;
struct UArrowComponent;
struct AAcPitstopProcedure;
struct AAcPlayerStart;
struct UAcCarPitstopManager;
struct USkidmarks;
struct UAC2WaterSpray;
struct UCarAvatarRatingCalculator;
struct UAcLumirankComponent;
struct UAcGlassDropletsComponent;

/* 24 */
enum EObjectFlags
{
  RF_NoFlags = 0x0,
  RF_Public = 0x1,
  RF_Standalone = 0x2,
  RF_MarkAsNative = 0x4,
  RF_Transactional = 0x8,
  RF_ClassDefaultObject = 0x10,
  RF_ArchetypeObject = 0x20,
  RF_Transient = 0x40,
  RF_MarkAsRootSet = 0x80,
  RF_TagGarbageTemp = 0x100,
  RF_NeedInitialization = 0x200,
  RF_NeedLoad = 0x400,
  RF_KeepForCooker = 0x800,
  RF_NeedPostLoad = 0x1000,
  RF_NeedPostLoadSubobjects = 0x2000,
  RF_NewerVersionExists = 0x4000,
  RF_BeginDestroyed = 0x8000,
  RF_FinishDestroyed = 0x10000,
  RF_BeingRegenerated = 0x20000,
  RF_DefaultSubObject = 0x40000,
  RF_WasLoaded = 0x80000,
  RF_TextExportTransient = 0x100000,
  RF_LoadCompleted = 0x200000,
  RF_InheritableComponentTemplate = 0x400000,
  RF_DuplicateTransient = 0x800000,
  RF_StrongRefOnFrame = 0x1000000,
  RF_NonPIEDuplicateTransient = 0x2000000,
  RF_Dynamic = 0x4000000,
  RF_WillBeLoaded = 0x8000000,
};

/* 3843 */
struct $DE76E4E415D3FC4DD6C71F0E3F3D8FB0
{
  int ComparisonIndex;
  unsigned int Number;
};

/* 3844 */
union $8356C26B3AB176DD6DF801D60F1BAECE
{
  $DE76E4E415D3FC4DD6C71F0E3F3D8FB0 __s0;
  unsigned __int64 CompositeComparisonValue;
};

/* 3845 */
struct FName
{
  $8356C26B3AB176DD6DF801D60F1BAECE ___u0;
};

/* 3853 */
struct UObjectBase
{
  UObjectBaseVtbl *vfptr;
  EObjectFlags ObjectFlags;
  int InternalIndex;
  UClass *ClassPrivate;
  FName NamePrivate;
  UObject *OuterPrivate;
};

/* 3911 */
struct __cppobj UObjectBaseUtility : UObjectBase
{
};

/* 3854 */
struct __cppobj UObject : UObjectBaseUtility
{
};

/* 67185 */
struct __cppobj std::allocator<std::pair<void *,std::function<void __cdecl(CarConnectedEvent const &)> > >
{
};

/* 57829 */
struct __cppobj std::_Container_base0
{
};

/* 67216 */
struct __cppobj std::_Vector_val<std::_Simple_types<std::pair<void *,std::function<void __cdecl(CarConnectedEvent const &)> > > > : std::_Container_base0
{
  std::pair<void *,std::function<void __cdecl(CarConnectedEvent const &)> > *_Myfirst;
  std::pair<void *,std::function<void __cdecl(CarConnectedEvent const &)> > *_Mylast;
  std::pair<void *,std::function<void __cdecl(CarConnectedEvent const &)> > *_Myend;
};

/* 67217 */
struct __cppobj std::_Compressed_pair<std::allocator<std::pair<void *,std::function<void __cdecl(CarConnectedEvent const &)> > >,std::_Vector_val<std::_Simple_types<std::pair<void *,std::function<void __cdecl(CarConnectedEvent const &)> > > >,1> : std::allocator<std::pair<void *,std::function<void __cdecl(CarConnectedEvent const &)> > >
{
  std::_Vector_val<std::_Simple_types<std::pair<void *,std::function<void __cdecl(CarConnectedEvent const &)> > > > _Myval2;
};

/* 67218 */
struct std::_Vector_alloc<std::_Vec_base_types<std::pair<void *,std::function<void __cdecl(CarConnectedEvent const &)> >,std::allocator<std::pair<void *,std::function<void __cdecl(CarConnectedEvent const &)> > > > >
{
  std::_Compressed_pair<std::allocator<std::pair<void *,std::function<void __cdecl(CarConnectedEvent const &)> > >,std::_Vector_val<std::_Simple_types<std::pair<void *,std::function<void __cdecl(CarConnectedEvent const &)> > > >,1> _Mypair;
};

/* 67219 */
struct __cppobj std::vector<std::pair<void *,std::function<void __cdecl(CarConnectedEvent const &)> >,std::allocator<std::pair<void *,std::function<void __cdecl(CarConnectedEvent const &)> > > > : std::_Vector_alloc<std::_Vec_base_types<std::pair<void *,std::function<void __cdecl(CarConnectedEvent const &)> >,std::allocator<std::pair<void *,std::function<void __cdecl(CarConnectedEvent const &)> > > > >
{
};

/* 67220 */
struct Event<CarConnectedEvent>
{
  std::vector<std::pair<void *,std::function<void __cdecl(CarConnectedEvent const &)> >,std::allocator<std::pair<void *,std::function<void __cdecl(CarConnectedEvent const &)> > > > handlers;
};

/* 67221 */
struct __cppobj std::allocator<std::pair<void *,std::function<void __cdecl(unsigned char const &)> > >
{
};

/* 67229 */
struct __cppobj std::_Vector_val<std::_Simple_types<std::pair<void *,std::function<void __cdecl(unsigned char const &)> > > > : std::_Container_base0
{
  std::pair<void *,std::function<void __cdecl(unsigned char const &)> > *_Myfirst;
  std::pair<void *,std::function<void __cdecl(unsigned char const &)> > *_Mylast;
  std::pair<void *,std::function<void __cdecl(unsigned char const &)> > *_Myend;
};

/* 67230 */
struct __cppobj std::_Compressed_pair<std::allocator<std::pair<void *,std::function<void __cdecl(unsigned char const &)> > >,std::_Vector_val<std::_Simple_types<std::pair<void *,std::function<void __cdecl(unsigned char const &)> > > >,1> : std::allocator<std::pair<void *,std::function<void __cdecl(unsigned char const &)> > >
{
  std::_Vector_val<std::_Simple_types<std::pair<void *,std::function<void __cdecl(unsigned char const &)> > > > _Myval2;
};

/* 67231 */
struct std::_Vector_alloc<std::_Vec_base_types<std::pair<void *,std::function<void __cdecl(unsigned char const &)> >,std::allocator<std::pair<void *,std::function<void __cdecl(unsigned char const &)> > > > >
{
  std::_Compressed_pair<std::allocator<std::pair<void *,std::function<void __cdecl(unsigned char const &)> > >,std::_Vector_val<std::_Simple_types<std::pair<void *,std::function<void __cdecl(unsigned char const &)> > > >,1> _Mypair;
};

/* 67232 */
struct __cppobj std::vector<std::pair<void *,std::function<void __cdecl(unsigned char const &)> >,std::allocator<std::pair<void *,std::function<void __cdecl(unsigned char const &)> > > > : std::_Vector_alloc<std::_Vec_base_types<std::pair<void *,std::function<void __cdecl(unsigned char const &)> >,std::allocator<std::pair<void *,std::function<void __cdecl(unsigned char const &)> > > > >
{
};

/* 67233 */
struct Event<unsigned char>
{
  std::vector<std::pair<void *,std::function<void __cdecl(unsigned char const &)> >,std::allocator<std::pair<void *,std::function<void __cdecl(unsigned char const &)> > > > handlers;
};

/* 67234 */
struct __cppobj std::allocator<std::pair<void *,std::function<void __cdecl(ksRacing::OnSplitTimeEvent const &)> > >
{
};

/* 67243 */
struct __cppobj std::_Vector_val<std::_Simple_types<std::pair<void *,std::function<void __cdecl(ksRacing::OnSplitTimeEvent const &)> > > > : std::_Container_base0
{
  std::pair<void *,std::function<void __cdecl(ksRacing::OnSplitTimeEvent const &)> > *_Myfirst;
  std::pair<void *,std::function<void __cdecl(ksRacing::OnSplitTimeEvent const &)> > *_Mylast;
  std::pair<void *,std::function<void __cdecl(ksRacing::OnSplitTimeEvent const &)> > *_Myend;
};

/* 67244 */
struct __cppobj std::_Compressed_pair<std::allocator<std::pair<void *,std::function<void __cdecl(ksRacing::OnSplitTimeEvent const &)> > >,std::_Vector_val<std::_Simple_types<std::pair<void *,std::function<void __cdecl(ksRacing::OnSplitTimeEvent const &)> > > >,1> : std::allocator<std::pair<void *,std::function<void __cdecl(ksRacing::OnSplitTimeEvent const &)> > >
{
  std::_Vector_val<std::_Simple_types<std::pair<void *,std::function<void __cdecl(ksRacing::OnSplitTimeEvent const &)> > > > _Myval2;
};

/* 67245 */
struct std::_Vector_alloc<std::_Vec_base_types<std::pair<void *,std::function<void __cdecl(ksRacing::OnSplitTimeEvent const &)> >,std::allocator<std::pair<void *,std::function<void __cdecl(ksRacing::OnSplitTimeEvent const &)> > > > >
{
  std::_Compressed_pair<std::allocator<std::pair<void *,std::function<void __cdecl(ksRacing::OnSplitTimeEvent const &)> > >,std::_Vector_val<std::_Simple_types<std::pair<void *,std::function<void __cdecl(ksRacing::OnSplitTimeEvent const &)> > > >,1> _Mypair;
};

/* 67246 */
struct __cppobj std::vector<std::pair<void *,std::function<void __cdecl(ksRacing::OnSplitTimeEvent const &)> >,std::allocator<std::pair<void *,std::function<void __cdecl(ksRacing::OnSplitTimeEvent const &)> > > > : std::_Vector_alloc<std::_Vec_base_types<std::pair<void *,std::function<void __cdecl(ksRacing::OnSplitTimeEvent const &)> >,std::allocator<std::pair<void *,std::function<void __cdecl(ksRacing::OnSplitTimeEvent const &)> > > > >
{
};

/* 67247 */
struct Event<ksRacing::OnSplitTimeEvent>
{
  std::vector<std::pair<void *,std::function<void __cdecl(ksRacing::OnSplitTimeEvent const &)> >,std::allocator<std::pair<void *,std::function<void __cdecl(ksRacing::OnSplitTimeEvent const &)> > > > handlers;
};

/* 67248 */
struct __cppobj std::allocator<std::pair<void *,std::function<void __cdecl(ksRacing::OnRemoteLapEvent const &)> > >
{
};

/* 67257 */
struct __cppobj std::_Vector_val<std::_Simple_types<std::pair<void *,std::function<void __cdecl(ksRacing::OnRemoteLapEvent const &)> > > > : std::_Container_base0
{
  std::pair<void *,std::function<void __cdecl(ksRacing::OnRemoteLapEvent const &)> > *_Myfirst;
  std::pair<void *,std::function<void __cdecl(ksRacing::OnRemoteLapEvent const &)> > *_Mylast;
  std::pair<void *,std::function<void __cdecl(ksRacing::OnRemoteLapEvent const &)> > *_Myend;
};

/* 67258 */
struct __cppobj std::_Compressed_pair<std::allocator<std::pair<void *,std::function<void __cdecl(ksRacing::OnRemoteLapEvent const &)> > >,std::_Vector_val<std::_Simple_types<std::pair<void *,std::function<void __cdecl(ksRacing::OnRemoteLapEvent const &)> > > >,1> : std::allocator<std::pair<void *,std::function<void __cdecl(ksRacing::OnRemoteLapEvent const &)> > >
{
  std::_Vector_val<std::_Simple_types<std::pair<void *,std::function<void __cdecl(ksRacing::OnRemoteLapEvent const &)> > > > _Myval2;
};

/* 67259 */
struct std::_Vector_alloc<std::_Vec_base_types<std::pair<void *,std::function<void __cdecl(ksRacing::OnRemoteLapEvent const &)> >,std::allocator<std::pair<void *,std::function<void __cdecl(ksRacing::OnRemoteLapEvent const &)> > > > >
{
  std::_Compressed_pair<std::allocator<std::pair<void *,std::function<void __cdecl(ksRacing::OnRemoteLapEvent const &)> > >,std::_Vector_val<std::_Simple_types<std::pair<void *,std::function<void __cdecl(ksRacing::OnRemoteLapEvent const &)> > > >,1> _Mypair;
};

/* 67260 */
struct __cppobj std::vector<std::pair<void *,std::function<void __cdecl(ksRacing::OnRemoteLapEvent const &)> >,std::allocator<std::pair<void *,std::function<void __cdecl(ksRacing::OnRemoteLapEvent const &)> > > > : std::_Vector_alloc<std::_Vec_base_types<std::pair<void *,std::function<void __cdecl(ksRacing::OnRemoteLapEvent const &)> >,std::allocator<std::pair<void *,std::function<void __cdecl(ksRacing::OnRemoteLapEvent const &)> > > > >
{
};

/* 67261 */
struct Event<ksRacing::OnRemoteLapEvent>
{
  std::vector<std::pair<void *,std::function<void __cdecl(ksRacing::OnRemoteLapEvent const &)> >,std::allocator<std::pair<void *,std::function<void __cdecl(ksRacing::OnRemoteLapEvent const &)> > > > handlers;
};

/* 67262 */
struct __cppobj std::allocator<std::pair<void *,std::function<void __cdecl(OnSessionUpdateEvent const &)> > >
{
};

/* 67271 */
struct __cppobj std::_Vector_val<std::_Simple_types<std::pair<void *,std::function<void __cdecl(OnSessionUpdateEvent const &)> > > > : std::_Container_base0
{
  std::pair<void *,std::function<void __cdecl(OnSessionUpdateEvent const &)> > *_Myfirst;
  std::pair<void *,std::function<void __cdecl(OnSessionUpdateEvent const &)> > *_Mylast;
  std::pair<void *,std::function<void __cdecl(OnSessionUpdateEvent const &)> > *_Myend;
};

/* 67272 */
struct __cppobj std::_Compressed_pair<std::allocator<std::pair<void *,std::function<void __cdecl(OnSessionUpdateEvent const &)> > >,std::_Vector_val<std::_Simple_types<std::pair<void *,std::function<void __cdecl(OnSessionUpdateEvent const &)> > > >,1> : std::allocator<std::pair<void *,std::function<void __cdecl(OnSessionUpdateEvent const &)> > >
{
  std::_Vector_val<std::_Simple_types<std::pair<void *,std::function<void __cdecl(OnSessionUpdateEvent const &)> > > > _Myval2;
};

/* 67273 */
struct std::_Vector_alloc<std::_Vec_base_types<std::pair<void *,std::function<void __cdecl(OnSessionUpdateEvent const &)> >,std::allocator<std::pair<void *,std::function<void __cdecl(OnSessionUpdateEvent const &)> > > > >
{
  std::_Compressed_pair<std::allocator<std::pair<void *,std::function<void __cdecl(OnSessionUpdateEvent const &)> > >,std::_Vector_val<std::_Simple_types<std::pair<void *,std::function<void __cdecl(OnSessionUpdateEvent const &)> > > >,1> _Mypair;
};

/* 67274 */
struct __cppobj std::vector<std::pair<void *,std::function<void __cdecl(OnSessionUpdateEvent const &)> >,std::allocator<std::pair<void *,std::function<void __cdecl(OnSessionUpdateEvent const &)> > > > : std::_Vector_alloc<std::_Vec_base_types<std::pair<void *,std::function<void __cdecl(OnSessionUpdateEvent const &)> >,std::allocator<std::pair<void *,std::function<void __cdecl(OnSessionUpdateEvent const &)> > > > >
{
};

/* 67275 */
struct Event<OnSessionUpdateEvent>
{
  std::vector<std::pair<void *,std::function<void __cdecl(OnSessionUpdateEvent const &)> >,std::allocator<std::pair<void *,std::function<void __cdecl(OnSessionUpdateEvent const &)> > > > handlers;
};

/* 69526 */
struct __cppobj UClientAvatar : UObject
{
  Event<CarConnectedEvent> evOnCarConnected;
  Event<unsigned char> evOnCarDisconnected;
  Event<ksRacing::OnSplitTimeEvent> evOnRemoteSplit;
  Event<ksRacing::OnRemoteLapEvent> evOnRemoteLapCompleted;
  Event<OnSessionUpdateEvent> evOnSessionUpdate;
  AC2Client *client;
  APhysicsAvatar *physicsAvatar;
};

/* 201518 */
typedef unsigned __int16 wchar_t;

/* 3910 */
struct UObjectBaseVtbl
{
  void *(__cdecl *__vecDelDtor)(UObjectBase *this, unsigned int);
  void (__cdecl *RegisterDependencies)(UObjectBase *this);
  void (__cdecl *DeferredRegister)(UObjectBase *this, UClass *, const wchar_t *, const wchar_t *);
};

/* 3855 */
struct __cppobj UField : UObject
{
  UField *Next;
};

/* 3831 */
struct FHeapAllocator::ForAnyElementType
{
  FScriptContainerElement *Data;
};

/* 3857 */
struct TArray<unsigned char,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 3860 */
struct TArray<UObject *,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 3856 */
struct __cppobj UStruct : UField
{
  UStruct *SuperStruct;
  UField *Children;
  int PropertiesSize;
  int MinAlignment;
  TArray<unsigned char,FDefaultAllocator> Script;
  UProperty *PropertyLink;
  UProperty *RefLink;
  UProperty *DestructorLink;
  UProperty *PostConstructLink;
  TArray<UObject *,FDefaultAllocator> ScriptObjectReferences;
};

/* 3861 */
struct __declspec(align(8)) FClassBaseChain
{
  FClassBaseChain **ClassBaseChainArray;
  int NumClassBasesInChainMinusOne;
};

/* 2 */
enum EClassFlags
{
  CLASS_None = 0x0,
  CLASS_Abstract = 0x1,
  CLASS_DefaultConfig = 0x2,
  CLASS_Config = 0x4,
  CLASS_Transient = 0x8,
  CLASS_Parsed = 0x10,
  CLASS_MatchedSerializers = 0x20,
  CLASS_AdvancedDisplay = 0x40,
  CLASS_Native = 0x80,
  CLASS_NoExport = 0x100,
  CLASS_NotPlaceable = 0x200,
  CLASS_PerObjectConfig = 0x400,
  CLASS_ReplicationDataIsSetUp = 0x800,
  CLASS_EditInlineNew = 0x1000,
  CLASS_CollapseCategories = 0x2000,
  CLASS_Interface = 0x4000,
  CLASS_CustomConstructor = 0x8000,
  CLASS_Const = 0x10000,
  CLASS_CompiledFromBlueprint = 0x40000,
  CLASS_MinimalAPI = 0x80000,
  CLASS_RequiredAPI = 0x100000,
  CLASS_DefaultToInstanced = 0x200000,
  CLASS_TokenStreamAssembled = 0x400000,
  CLASS_HasInstancedReference = 0x800000,
  CLASS_Hidden = 0x1000000,
  CLASS_Deprecated = 0x2000000,
  CLASS_HideDropDown = 0x4000000,
  CLASS_GlobalUserConfig = 0x8000000,
  CLASS_Intrinsic = 0x10000000,
  CLASS_Constructed = 0x20000000,
  CLASS_ConfigDoNotCheckDefaults = 0x40000000,
  CLASS_NewerVersionExists = 0x80000000,
};

/* 3897 */
struct TArray<FRepRecord,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 3898 */
struct TArray<UField *,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 3862 */
struct TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<24,8> >,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 3863 */
struct TAlignedBytes<4,4>::TPadding
{
  char Pad[4];
};

/* 3864 */
struct TAlignedBytes<4,4>
{
  TAlignedBytes<4,4>::TPadding Padding;
};

/* 3865 */
struct __cppobj TTypeCompatibleBytes<unsigned int> : TAlignedBytes<4,4>
{
};

/* 3866 */
struct __cppobj FHeapAllocator::ForElementType<unsigned int> : FHeapAllocator::ForAnyElementType
{
};

/* 3867 */
struct TInlineAllocator<4,FDefaultAllocator>::ForElementType<unsigned int>
{
  TTypeCompatibleBytes<unsigned int> InlineData[4];
  FHeapAllocator::ForElementType<unsigned int> SecondaryData;
};

/* 3868 */
struct TBitArray<FDefaultBitArrayAllocator>
{
  TInlineAllocator<4,FDefaultAllocator>::ForElementType<unsigned int> AllocatorInstance;
  int NumBits;
  int MaxBits;
};

/* 3899 */
struct TSparseArray<TSetElement<TTuple<FName,UFunction *> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<24,8> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 3870 */
struct __cppobj TTypeCompatibleBytes<FSetElementId> : TAlignedBytes<4,4>
{
};

/* 3871 */
struct __cppobj FHeapAllocator::ForElementType<FSetElementId> : FHeapAllocator::ForAnyElementType
{
};

/* 3872 */
struct TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId>
{
  TTypeCompatibleBytes<FSetElementId> InlineData[1];
  FHeapAllocator::ForElementType<FSetElementId> SecondaryData;
};

/* 3900 */
struct __declspec(align(8)) TSet<TTuple<FName,UFunction *>,TDefaultMapHashableKeyFuncs<FName,UFunction *,0>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<TTuple<FName,UFunction *> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 3901 */
struct TMapBase<FName,UFunction *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,UFunction *,0> >
{
  TSet<TTuple<FName,UFunction *>,TDefaultMapHashableKeyFuncs<FName,UFunction *,0>,FDefaultSetAllocator> Pairs;
};

/* 3902 */
struct __cppobj TSortableMapBase<FName,UFunction *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,UFunction *,0> > : TMapBase<FName,UFunction *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,UFunction *,0> >
{
};

/* 3903 */
struct __cppobj TMap<FName,UFunction *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,UFunction *,0> > : TSortableMapBase<FName,UFunction *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,UFunction *,0> >
{
};

/* 3904 */
struct TArray<FImplementedInterface,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 3905 */
struct TArray<unsigned int,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 3906 */
struct FGCReferenceTokenStream
{
  TArray<unsigned int,FDefaultAllocator> Tokens;
};

/* 3907 */
struct Windows::CRITICAL_SECTION
{
  void *Opaque1[1];
  int Opaque2[2];
  void *Opaque3[3];
};

/* 3908 */
struct FWindowsCriticalSection
{
  Windows::CRITICAL_SECTION CriticalSection;
};

/* 3909 */
struct TArray<FNativeFunctionLookup,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 3896 */
struct __cppobj UClass : UStruct, FClassBaseChain
{
  void (__cdecl *ClassConstructor)(FObjectInitializer *);
  UObject *(__cdecl *ClassVTableHelperCtorCaller)(FVTableHelper *);
  void (__cdecl *ClassAddReferencedObjects)(UObject *, FReferenceCollector *);
  unsigned __int32 ClassUnique : 31;
  unsigned __int32 bCooked : 1;
  EClassFlags ClassFlags;
  _BYTE ClassCastFlags[8];
  UClass *ClassWithin;
  UObject *ClassGeneratedBy;
  FName ClassConfigName;
  TArray<FRepRecord,FDefaultAllocator> ClassReps;
  TArray<UField *,FDefaultAllocator> NetFields;
  UObject *ClassDefaultObject;
  TMap<FName,UFunction *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,UFunction *,0> > FuncMap;
  TMap<FName,UFunction *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,UFunction *,0> > SuperFuncMap;
  TArray<FImplementedInterface,FDefaultAllocator> Interfaces;
  FGCReferenceTokenStream ReferenceTokenStream;
  FWindowsCriticalSection ReferenceTokenStreamCritical;
  TArray<FNativeFunctionLookup,FDefaultAllocator> NativeFunctionLookupTable;
};

/* 67186 */
struct __cppobj std::_Arg_types<CarConnectedEvent const &>
{
};

/* 67212 */
union std::_Func_class<void,CarConnectedEvent const &>::_Storage
{
  long double _Dummy1;
  char _Dummy2[56];
  std::_Func_base<void,CarConnectedEvent const &> *_Ptrs[8];
};

/* 67213 */
struct __cppobj std::_Func_class<void,CarConnectedEvent const &> : std::_Arg_types<CarConnectedEvent const &>
{
  std::_Func_class<void,CarConnectedEvent const &>::_Storage _Mystorage;
};

/* 67214 */
struct __cppobj std::function<void __cdecl(CarConnectedEvent const &)> : std::_Func_class<void,CarConnectedEvent const &>
{
};

/* 67215 */
struct std::pair<void *,std::function<void __cdecl(CarConnectedEvent const &)> >
{
  void *first;
  std::function<void __cdecl(CarConnectedEvent const &)> second;
};

/* 67222 */
struct __cppobj std::_Arg_types<unsigned char const &>
{
};

/* 67225 */
union std::_Func_class<void,unsigned char const &>::_Storage
{
  long double _Dummy1;
  char _Dummy2[56];
  std::_Func_base<void,unsigned char const &> *_Ptrs[8];
};

/* 67226 */
struct __cppobj std::_Func_class<void,unsigned char const &> : std::_Arg_types<unsigned char const &>
{
  std::_Func_class<void,unsigned char const &>::_Storage _Mystorage;
};

/* 67227 */
struct __cppobj std::function<void __cdecl(unsigned char const &)> : std::_Func_class<void,unsigned char const &>
{
};

/* 67228 */
struct std::pair<void *,std::function<void __cdecl(unsigned char const &)> >
{
  void *first;
  std::function<void __cdecl(unsigned char const &)> second;
};

/* 67235 */
struct __cppobj std::_Arg_types<ksRacing::OnSplitTimeEvent const &>
{
};

/* 67239 */
union std::_Func_class<void,ksRacing::OnSplitTimeEvent const &>::_Storage
{
  long double _Dummy1;
  char _Dummy2[56];
  std::_Func_base<void,ksRacing::OnSplitTimeEvent const &> *_Ptrs[8];
};

/* 67240 */
struct __cppobj std::_Func_class<void,ksRacing::OnSplitTimeEvent const &> : std::_Arg_types<ksRacing::OnSplitTimeEvent const &>
{
  std::_Func_class<void,ksRacing::OnSplitTimeEvent const &>::_Storage _Mystorage;
};

/* 67241 */
struct __cppobj std::function<void __cdecl(ksRacing::OnSplitTimeEvent const &)> : std::_Func_class<void,ksRacing::OnSplitTimeEvent const &>
{
};

/* 67242 */
struct std::pair<void *,std::function<void __cdecl(ksRacing::OnSplitTimeEvent const &)> >
{
  void *first;
  std::function<void __cdecl(ksRacing::OnSplitTimeEvent const &)> second;
};

/* 67249 */
struct __cppobj std::_Arg_types<ksRacing::OnRemoteLapEvent const &>
{
};

/* 67253 */
union std::_Func_class<void,ksRacing::OnRemoteLapEvent const &>::_Storage
{
  long double _Dummy1;
  char _Dummy2[56];
  std::_Func_base<void,ksRacing::OnRemoteLapEvent const &> *_Ptrs[8];
};

/* 67254 */
struct __cppobj std::_Func_class<void,ksRacing::OnRemoteLapEvent const &> : std::_Arg_types<ksRacing::OnRemoteLapEvent const &>
{
  std::_Func_class<void,ksRacing::OnRemoteLapEvent const &>::_Storage _Mystorage;
};

/* 67255 */
struct __cppobj std::function<void __cdecl(ksRacing::OnRemoteLapEvent const &)> : std::_Func_class<void,ksRacing::OnRemoteLapEvent const &>
{
};

/* 67256 */
struct std::pair<void *,std::function<void __cdecl(ksRacing::OnRemoteLapEvent const &)> >
{
  void *first;
  std::function<void __cdecl(ksRacing::OnRemoteLapEvent const &)> second;
};

/* 67263 */
struct __cppobj std::_Arg_types<OnSessionUpdateEvent const &>
{
};

/* 67267 */
union std::_Func_class<void,OnSessionUpdateEvent const &>::_Storage
{
  long double _Dummy1;
  char _Dummy2[56];
  std::_Func_base<void,OnSessionUpdateEvent const &> *_Ptrs[8];
};

/* 67268 */
struct __cppobj std::_Func_class<void,OnSessionUpdateEvent const &> : std::_Arg_types<OnSessionUpdateEvent const &>
{
  std::_Func_class<void,OnSessionUpdateEvent const &>::_Storage _Mystorage;
};

/* 67269 */
struct __cppobj std::function<void __cdecl(OnSessionUpdateEvent const &)> : std::_Func_class<void,OnSessionUpdateEvent const &>
{
};

/* 67270 */
struct std::pair<void *,std::function<void __cdecl(OnSessionUpdateEvent const &)> >
{
  void *first;
  std::function<void __cdecl(OnSessionUpdateEvent const &)> second;
};

/* 62365 */
struct __cppobj std::allocator<wchar_t>
{
};

/* 62366 */
union std::_String_val<std::_Simple_types<wchar_t> >::_Bxty
{
  wchar_t _Buf[8];
  wchar_t *_Ptr;
  char _Alias[8];
};

/* 62367 */
struct __cppobj std::_String_val<std::_Simple_types<wchar_t> > : std::_Container_base0
{
  std::_String_val<std::_Simple_types<wchar_t> >::_Bxty _Bx;
  unsigned __int64 _Mysize;
  unsigned __int64 _Myres;
};

/* 62368 */
struct __cppobj std::_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1> : std::allocator<wchar_t>
{
  std::_String_val<std::_Simple_types<wchar_t> > _Myval2;
};

/* 62369 */
struct std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >
{
  std::_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1> _Mypair;
};

/* 62376 */
struct __cppobj std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > : std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >
{
};

/* 67276 */
struct __declspec(align(4)) ServerInfo
{
  std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > ip;
  std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > password;
  unsigned __int16 udpPort;
  unsigned __int16 tcpPort;
  unsigned __int16 maxClients;
};

/* 67188 */
struct ksRacing::WritableRaceStructure
{
  ksRacing::WritableRaceStructureVtbl *vfptr;
  std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > fileDir;
};

/* 67277 */
struct __cppobj std::allocator<ksRacing::CarInfo>
{
};

/* 67278 */
struct __cppobj std::_Vector_val<std::_Simple_types<ksRacing::CarInfo> > : std::_Container_base0
{
  ksRacing::CarInfo *_Myfirst;
  ksRacing::CarInfo *_Mylast;
  ksRacing::CarInfo *_Myend;
};

/* 67279 */
struct __cppobj std::_Compressed_pair<std::allocator<ksRacing::CarInfo>,std::_Vector_val<std::_Simple_types<ksRacing::CarInfo> >,1> : std::allocator<ksRacing::CarInfo>
{
  std::_Vector_val<std::_Simple_types<ksRacing::CarInfo> > _Myval2;
};

/* 67280 */
struct std::_Vector_alloc<std::_Vec_base_types<ksRacing::CarInfo,std::allocator<ksRacing::CarInfo> > >
{
  std::_Compressed_pair<std::allocator<ksRacing::CarInfo>,std::_Vector_val<std::_Simple_types<ksRacing::CarInfo> >,1> _Mypair;
};

/* 67281 */
struct __cppobj std::vector<ksRacing::CarInfo,std::allocator<ksRacing::CarInfo> > : std::_Vector_alloc<std::_Vec_base_types<ksRacing::CarInfo,std::allocator<ksRacing::CarInfo> > >
{
};

/* 67282 */
struct __cppobj std::allocator<ksRacing::DriverInfo>
{
};

/* 67283 */
struct __cppobj std::_Vector_val<std::_Simple_types<ksRacing::DriverInfo> > : std::_Container_base0
{
  ksRacing::DriverInfo *_Myfirst;
  ksRacing::DriverInfo *_Mylast;
  ksRacing::DriverInfo *_Myend;
};

/* 67284 */
struct __cppobj std::_Compressed_pair<std::allocator<ksRacing::DriverInfo>,std::_Vector_val<std::_Simple_types<ksRacing::DriverInfo> >,1> : std::allocator<ksRacing::DriverInfo>
{
  std::_Vector_val<std::_Simple_types<ksRacing::DriverInfo> > _Myval2;
};

/* 67285 */
struct std::_Vector_alloc<std::_Vec_base_types<ksRacing::DriverInfo,std::allocator<ksRacing::DriverInfo> > >
{
  std::_Compressed_pair<std::allocator<ksRacing::DriverInfo>,std::_Vector_val<std::_Simple_types<ksRacing::DriverInfo> >,1> _Mypair;
};

/* 67286 */
struct __cppobj std::vector<ksRacing::DriverInfo,std::allocator<ksRacing::DriverInfo> > : std::_Vector_alloc<std::_Vec_base_types<ksRacing::DriverInfo,std::allocator<ksRacing::DriverInfo> > >
{
};

/* 67287 */
struct __cppobj std::allocator<ksRacing::EventResult>
{
};

/* 67363 */
struct __cppobj std::_Vector_val<std::_Simple_types<ksRacing::EventResult> > : std::_Container_base0
{
  ksRacing::EventResult *_Myfirst;
  ksRacing::EventResult *_Mylast;
  ksRacing::EventResult *_Myend;
};

/* 67364 */
struct __cppobj std::_Compressed_pair<std::allocator<ksRacing::EventResult>,std::_Vector_val<std::_Simple_types<ksRacing::EventResult> >,1> : std::allocator<ksRacing::EventResult>
{
  std::_Vector_val<std::_Simple_types<ksRacing::EventResult> > _Myval2;
};

/* 67365 */
struct std::_Vector_alloc<std::_Vec_base_types<ksRacing::EventResult,std::allocator<ksRacing::EventResult> > >
{
  std::_Compressed_pair<std::allocator<ksRacing::EventResult>,std::_Vector_val<std::_Simple_types<ksRacing::EventResult> >,1> _Mypair;
};

/* 67366 */
struct __cppobj std::vector<ksRacing::EventResult,std::allocator<ksRacing::EventResult> > : std::_Vector_alloc<std::_Vec_base_types<ksRacing::EventResult,std::allocator<ksRacing::EventResult> > >
{
};

/* 67352 */
struct __cppobj std::allocator<short>
{
};

/* 67353 */
struct __cppobj std::_Vector_val<std::_Simple_types<short> > : std::_Container_base0
{
  __int16 *_Myfirst;
  __int16 *_Mylast;
  __int16 *_Myend;
};

/* 67354 */
struct __cppobj std::_Compressed_pair<std::allocator<short>,std::_Vector_val<std::_Simple_types<short> >,1> : std::allocator<short>
{
  std::_Vector_val<std::_Simple_types<short> > _Myval2;
};

/* 67355 */
struct std::_Vector_alloc<std::_Vec_base_types<short,std::allocator<short> > >
{
  std::_Compressed_pair<std::allocator<short>,std::_Vector_val<std::_Simple_types<short> >,1> _Mypair;
};

/* 67356 */
struct __cppobj std::vector<short,std::allocator<short> > : std::_Vector_alloc<std::_Vec_base_types<short,std::allocator<short> > >
{
};

/* 67295 */
struct __cppobj std::allocator<ksRacing::TrackEvent>
{
};

/* 67297 */
struct __cppobj std::_Vector_val<std::_Simple_types<ksRacing::TrackEvent> > : std::_Container_base0
{
  ksRacing::TrackEvent *_Myfirst;
  ksRacing::TrackEvent *_Mylast;
  ksRacing::TrackEvent *_Myend;
};

/* 67298 */
struct __cppobj std::_Compressed_pair<std::allocator<ksRacing::TrackEvent>,std::_Vector_val<std::_Simple_types<ksRacing::TrackEvent> >,1> : std::allocator<ksRacing::TrackEvent>
{
  std::_Vector_val<std::_Simple_types<ksRacing::TrackEvent> > _Myval2;
};

/* 67299 */
struct std::_Vector_alloc<std::_Vec_base_types<ksRacing::TrackEvent,std::allocator<ksRacing::TrackEvent> > >
{
  std::_Compressed_pair<std::allocator<ksRacing::TrackEvent>,std::_Vector_val<std::_Simple_types<ksRacing::TrackEvent> >,1> _Mypair;
};

/* 67300 */
struct __cppobj std::vector<ksRacing::TrackEvent,std::allocator<ksRacing::TrackEvent> > : std::_Vector_alloc<std::_Vec_base_types<ksRacing::TrackEvent,std::allocator<ksRacing::TrackEvent> > >
{
};

/* 67301 */
struct __cppobj std::allocator<ksRacing::Lap>
{
};

/* 67303 */
struct __cppobj std::_Vector_val<std::_Simple_types<ksRacing::Lap> > : std::_Container_base0
{
  ksRacing::Lap *_Myfirst;
  ksRacing::Lap *_Mylast;
  ksRacing::Lap *_Myend;
};

/* 67304 */
struct __cppobj std::_Compressed_pair<std::allocator<ksRacing::Lap>,std::_Vector_val<std::_Simple_types<ksRacing::Lap> >,1> : std::allocator<ksRacing::Lap>
{
  std::_Vector_val<std::_Simple_types<ksRacing::Lap> > _Myval2;
};

/* 67305 */
struct std::_Vector_alloc<std::_Vec_base_types<ksRacing::Lap,std::allocator<ksRacing::Lap> > >
{
  std::_Compressed_pair<std::allocator<ksRacing::Lap>,std::_Vector_val<std::_Simple_types<ksRacing::Lap> >,1> _Mypair;
};

/* 67306 */
struct __cppobj std::vector<ksRacing::Lap,std::allocator<ksRacing::Lap> > : std::_Vector_alloc<std::_Vec_base_types<ksRacing::Lap,std::allocator<ksRacing::Lap> > >
{
};

/* 67307 */
struct __cppobj std::allocator<ksRacing::NextSessionPenalty>
{
};

/* 67309 */
struct __cppobj std::_Vector_val<std::_Simple_types<ksRacing::NextSessionPenalty> > : std::_Container_base0
{
  ksRacing::NextSessionPenalty *_Myfirst;
  ksRacing::NextSessionPenalty *_Mylast;
  ksRacing::NextSessionPenalty *_Myend;
};

/* 67310 */
struct __cppobj std::_Compressed_pair<std::allocator<ksRacing::NextSessionPenalty>,std::_Vector_val<std::_Simple_types<ksRacing::NextSessionPenalty> >,1> : std::allocator<ksRacing::NextSessionPenalty>
{
  std::_Vector_val<std::_Simple_types<ksRacing::NextSessionPenalty> > _Myval2;
};

/* 67311 */
struct std::_Vector_alloc<std::_Vec_base_types<ksRacing::NextSessionPenalty,std::allocator<ksRacing::NextSessionPenalty> > >
{
  std::_Compressed_pair<std::allocator<ksRacing::NextSessionPenalty>,std::_Vector_val<std::_Simple_types<ksRacing::NextSessionPenalty> >,1> _Mypair;
};

/* 67312 */
struct __cppobj std::vector<ksRacing::NextSessionPenalty,std::allocator<ksRacing::NextSessionPenalty> > : std::_Vector_alloc<std::_Vec_base_types<ksRacing::NextSessionPenalty,std::allocator<ksRacing::NextSessionPenalty> > >
{
};

/* 67313 */
struct __cppobj std::allocator<ksRacing::SessionPenalty>
{
};

/* 67315 */
struct __cppobj std::_Vector_val<std::_Simple_types<ksRacing::SessionPenalty> > : std::_Container_base0
{
  ksRacing::SessionPenalty *_Myfirst;
  ksRacing::SessionPenalty *_Mylast;
  ksRacing::SessionPenalty *_Myend;
};

/* 67316 */
struct __cppobj std::_Compressed_pair<std::allocator<ksRacing::SessionPenalty>,std::_Vector_val<std::_Simple_types<ksRacing::SessionPenalty> >,1> : std::allocator<ksRacing::SessionPenalty>
{
  std::_Vector_val<std::_Simple_types<ksRacing::SessionPenalty> > _Myval2;
};

/* 67317 */
struct std::_Vector_alloc<std::_Vec_base_types<ksRacing::SessionPenalty,std::allocator<ksRacing::SessionPenalty> > >
{
  std::_Compressed_pair<std::allocator<ksRacing::SessionPenalty>,std::_Vector_val<std::_Simple_types<ksRacing::SessionPenalty> >,1> _Mypair;
};

/* 67318 */
struct __cppobj std::vector<ksRacing::SessionPenalty,std::allocator<ksRacing::SessionPenalty> > : std::_Vector_alloc<std::_Vec_base_types<ksRacing::SessionPenalty,std::allocator<ksRacing::SessionPenalty> > >
{
};

/* 67319 */
struct __cppobj std::allocator<ksRacing::WeatherStatus>
{
};

/* 67321 */
struct __cppobj std::_Vector_val<std::_Simple_types<ksRacing::WeatherStatus> > : std::_Container_base0
{
  ksRacing::WeatherStatus *_Myfirst;
  ksRacing::WeatherStatus *_Mylast;
  ksRacing::WeatherStatus *_Myend;
};

/* 67322 */
struct __cppobj std::_Compressed_pair<std::allocator<ksRacing::WeatherStatus>,std::_Vector_val<std::_Simple_types<ksRacing::WeatherStatus> >,1> : std::allocator<ksRacing::WeatherStatus>
{
  std::_Vector_val<std::_Simple_types<ksRacing::WeatherStatus> > _Myval2;
};

/* 67323 */
struct std::_Vector_alloc<std::_Vec_base_types<ksRacing::WeatherStatus,std::allocator<ksRacing::WeatherStatus> > >
{
  std::_Compressed_pair<std::allocator<ksRacing::WeatherStatus>,std::_Vector_val<std::_Simple_types<ksRacing::WeatherStatus> >,1> _Mypair;
};

/* 67324 */
struct __cppobj std::vector<ksRacing::WeatherStatus,std::allocator<ksRacing::WeatherStatus> > : std::_Vector_alloc<std::_Vec_base_types<ksRacing::WeatherStatus,std::allocator<ksRacing::WeatherStatus> > >
{
};

/* 67325 */
struct __cppobj std::allocator<ksRacing::PitStopEvent>
{
};

/* 67337 */
struct __cppobj std::_Vector_val<std::_Simple_types<ksRacing::PitStopEvent> > : std::_Container_base0
{
  ksRacing::PitStopEvent *_Myfirst;
  ksRacing::PitStopEvent *_Mylast;
  ksRacing::PitStopEvent *_Myend;
};

/* 67338 */
struct __cppobj std::_Compressed_pair<std::allocator<ksRacing::PitStopEvent>,std::_Vector_val<std::_Simple_types<ksRacing::PitStopEvent> >,1> : std::allocator<ksRacing::PitStopEvent>
{
  std::_Vector_val<std::_Simple_types<ksRacing::PitStopEvent> > _Myval2;
};

/* 67339 */
struct std::_Vector_alloc<std::_Vec_base_types<ksRacing::PitStopEvent,std::allocator<ksRacing::PitStopEvent> > >
{
  std::_Compressed_pair<std::allocator<ksRacing::PitStopEvent>,std::_Vector_val<std::_Simple_types<ksRacing::PitStopEvent> >,1> _Mypair;
};

/* 67340 */
struct __cppobj std::vector<ksRacing::PitStopEvent,std::allocator<ksRacing::PitStopEvent> > : std::_Vector_alloc<std::_Vec_base_types<ksRacing::PitStopEvent,std::allocator<ksRacing::PitStopEvent> > >
{
};

/* 67341 */
struct __cppobj std::allocator<std::vector<ksRacing::TyreSet,std::allocator<ksRacing::TyreSet> > >
{
};

/* 67348 */
struct __cppobj std::_Vector_val<std::_Simple_types<std::vector<ksRacing::TyreSet,std::allocator<ksRacing::TyreSet> > > > : std::_Container_base0
{
  std::vector<ksRacing::TyreSet,std::allocator<ksRacing::TyreSet> > *_Myfirst;
  std::vector<ksRacing::TyreSet,std::allocator<ksRacing::TyreSet> > *_Mylast;
  std::vector<ksRacing::TyreSet,std::allocator<ksRacing::TyreSet> > *_Myend;
};

/* 67349 */
struct __cppobj std::_Compressed_pair<std::allocator<std::vector<ksRacing::TyreSet,std::allocator<ksRacing::TyreSet> > >,std::_Vector_val<std::_Simple_types<std::vector<ksRacing::TyreSet,std::allocator<ksRacing::TyreSet> > > >,1> : std::allocator<std::vector<ksRacing::TyreSet,std::allocator<ksRacing::TyreSet> > >
{
  std::_Vector_val<std::_Simple_types<std::vector<ksRacing::TyreSet,std::allocator<ksRacing::TyreSet> > > > _Myval2;
};

/* 67350 */
struct std::_Vector_alloc<std::_Vec_base_types<std::vector<ksRacing::TyreSet,std::allocator<ksRacing::TyreSet> >,std::allocator<std::vector<ksRacing::TyreSet,std::allocator<ksRacing::TyreSet> > > > >
{
  std::_Compressed_pair<std::allocator<std::vector<ksRacing::TyreSet,std::allocator<ksRacing::TyreSet> > >,std::_Vector_val<std::_Simple_types<std::vector<ksRacing::TyreSet,std::allocator<ksRacing::TyreSet> > > >,1> _Mypair;
};

/* 67351 */
struct __cppobj std::vector<std::vector<ksRacing::TyreSet,std::allocator<ksRacing::TyreSet> >,std::allocator<std::vector<ksRacing::TyreSet,std::allocator<ksRacing::TyreSet> > > > : std::_Vector_alloc<std::_Vec_base_types<std::vector<ksRacing::TyreSet,std::allocator<ksRacing::TyreSet> >,std::allocator<std::vector<ksRacing::TyreSet,std::allocator<ksRacing::TyreSet> > > > >
{
};

/* 57841 */
struct __cppobj std::allocator<unsigned short>
{
};

/* 57842 */
struct __cppobj std::_Vector_val<std::_Simple_types<unsigned short> > : std::_Container_base0
{
  unsigned __int16 *_Myfirst;
  unsigned __int16 *_Mylast;
  unsigned __int16 *_Myend;
};

/* 57843 */
struct __cppobj std::_Compressed_pair<std::allocator<unsigned short>,std::_Vector_val<std::_Simple_types<unsigned short> >,1> : std::allocator<unsigned short>
{
  std::_Vector_val<std::_Simple_types<unsigned short> > _Myval2;
};

/* 57844 */
struct std::_Vector_alloc<std::_Vec_base_types<unsigned short,std::allocator<unsigned short> > >
{
  std::_Compressed_pair<std::allocator<unsigned short>,std::_Vector_val<std::_Simple_types<unsigned short> >,1> _Mypair;
};

/* 57845 */
struct __cppobj std::vector<unsigned short,std::allocator<unsigned short> > : std::_Vector_alloc<std::_Vec_base_types<unsigned short,std::allocator<unsigned short> > >
{
};

/* 67357 */
struct __cppobj ksRacing::SessionResult : ksRacing::WritableRaceStructure
{
  std::vector<ksRacing::TrackEvent,std::allocator<ksRacing::TrackEvent> > trackEvents;
  std::vector<ksRacing::Lap,std::allocator<ksRacing::Lap> > laps;
  std::vector<ksRacing::NextSessionPenalty,std::allocator<ksRacing::NextSessionPenalty> > nextSessionPenalties;
  std::vector<ksRacing::SessionPenalty,std::allocator<ksRacing::SessionPenalty> > currentSessionPenalties;
  std::vector<ksRacing::WeatherStatus,std::allocator<ksRacing::WeatherStatus> > weatherForUpdateMinutes;
  std::vector<ksRacing::PitStopEvent,std::allocator<ksRacing::PitStopEvent> > pitstopEvents;
  std::vector<std::vector<ksRacing::TyreSet,std::allocator<ksRacing::TyreSet> >,std::allocator<std::vector<ksRacing::TyreSet,std::allocator<ksRacing::TyreSet> > > > tyresConditions;
  std::vector<unsigned short,std::allocator<unsigned short> > standing;
  std::vector<short,std::allocator<short> > points;
};

/* 67367 */
struct __cppobj ksRacing::SeasonResult : ksRacing::WritableRaceStructure
{
  std::vector<ksRacing::CarInfo,std::allocator<ksRacing::CarInfo> > cars;
  std::vector<ksRacing::DriverInfo,std::allocator<ksRacing::DriverInfo> > drivers;
  std::vector<ksRacing::EventResult,std::allocator<ksRacing::EventResult> > events;
  std::vector<short,std::allocator<short> > points;
  ksRacing::SessionResult savedSession;
};

/* 67368 */
struct __cppobj __declspec(align(8)) ksRacing::RaceRules : ksRacing::WritableRaceStructure
{
  char fullSeasonJokerTyreCount;
  char raceToRaceJokerTyreCount;
  char pitlaneSpeedLimitKmh;
};

/* 67369 */
struct __cppobj __declspec(align(2)) ksRacing::HudRules : ksRacing::WritableRaceStructure
{
  _BYTE highlightTargetLocation[1];
  _BYTE highlightRollingStartLocation[1];
  _BYTE showVirtualMirror[1];
  _BYTE showVirtualFlags[1];
  _BYTE showRadar[1];
  _BYTE showFuelAlert[1];
  _BYTE showTyreTempAlert[1];
};

/* 67370 */
struct __cppobj __declspec(align(8)) ksRacing::AssistRules : ksRacing::WritableRaceStructure
{
  char presetIndex;
  std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > description;
  _BYTE autoGear[1];
  _BYTE autoClutch[1];
  char stabilityControlLevelMin;
  char stabilityControlLevelMax;
  _BYTE autoEngineSwitch[1];
  _BYTE autoPitLimiter[1];
  _BYTE autoPitProcedure[1];
  _BYTE autoWiper[1];
  _BYTE autoLights[1];
  _BYTE autoPitRequest[1];
  _BYTE showIdealLine[1];
};

/* 67371 */
struct __cppobj __declspec(align(4)) ksRacing::GraphicsRules : ksRacing::WritableRaceStructure
{
  char rainSprayLevelMin;
  char rainSprayLevelMax;
  char rainWindShieldLevelMin;
  char rainWindShieldLevelMax;
  char cockpitLevelMirrorMin;
  char cockpitLevelMirrorMax;
};

/* 67372 */
struct __cppobj __declspec(align(4)) ksRacing::SuperpoleRules : ksRacing::WritableRaceStructure
{
  char d_Q3_EligibleCarFactor;
  char superpoleEligibleCarNumber;
  unsigned __int16 superpoleCarStartInterval;
  char superpoleMaxValidLapCount;
  char superPoleLimitedTyreSetCount;
};

/* 67373 */
struct __cppobj ksRacing::RealismRules : ksRacing::WritableRaceStructure
{
  char presetIndex;
  std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > description;
  char eventIndex;
  char sessionIndex;
  float damageRate;
  _BYTE instantSetupChange[1];
  float setupChangeTimeRate;
  float carRepairTimeRate;
  _BYTE yellowFlags[1];
  _BYTE fullYellowCourse[1];
  _BYTE safetyCar[1];
  _BYTE tyreFuelWear[1];
  _BYTE unlimitedTyreSet[1];
  _BYTE brakeFading[1];
  float rainRealism;
};

/* 67374 */
struct __cppobj __declspec(align(8)) ksRacing::GameplayRules : ksRacing::WritableRaceStructure
{
  char eventIndex;
  char sessionIndex;
  _BYTE canTeleportToPit[1];
  unsigned __int16 teleportToPitPenaltyTime;
  _BYTE superpoleVirtualSession[1];
  _BYTE fastRollingStart[1];
  int preSessionTime;
  _BYTE simulateTeammates[1];
  char skillMultiplier;
  char aggroMultiplier;
  int playerSessionPostTime;
};

/* 67375 */
struct __cppobj ksRacing::OnlineRules : ksRacing::WritableRaceStructure
{
  char eventIndex;
  char sessionIndex;
  _BYTE singleEvents[1];
  _BYTE loopSeason[1];
  unsigned __int16 maxPing;
  char lagSecs;
  char lagCount;
  _BYTE simulateAsOneManTeam[1];
  _BYTE forcePlayerSwap[1];
  _BYTE cockpitCameraMode[1];
  _BYTE dashCameraMode[1];
  _BYTE chaseCameraMode[1];
  _BYTE bumperCameraMode[1];
  _BYTE bonnetCameraMode[1];
  _BYTE freeJoinMode[1];
  unsigned int sessionStartingUITime;
  unsigned int sessionResultUITime;
  unsigned int sessionRaceOverTime;
  unsigned int sessionPostRaceTime;
};

/* 67376 */
struct __cppobj __declspec(align(8)) ksRacing::RaceDirectorRules : ksRacing::WritableRaceStructure
{
  char eventIndex;
  char sessionIndex;
  _BYTE humanRaceDirector[1];
  int severeCutTimeLimit;
  int lightCutTimeLimit;
  unsigned int cutClearTime;
  char activeCutInvestigationLimit;
};

/* 67377 */
struct __cppobj std::allocator<ksRacing::RealismRules>
{
};

/* 67378 */
struct __cppobj std::_Vector_val<std::_Simple_types<ksRacing::RealismRules> > : std::_Container_base0
{
  ksRacing::RealismRules *_Myfirst;
  ksRacing::RealismRules *_Mylast;
  ksRacing::RealismRules *_Myend;
};

/* 67379 */
struct __cppobj std::_Compressed_pair<std::allocator<ksRacing::RealismRules>,std::_Vector_val<std::_Simple_types<ksRacing::RealismRules> >,1> : std::allocator<ksRacing::RealismRules>
{
  std::_Vector_val<std::_Simple_types<ksRacing::RealismRules> > _Myval2;
};

/* 67380 */
struct std::_Vector_alloc<std::_Vec_base_types<ksRacing::RealismRules,std::allocator<ksRacing::RealismRules> > >
{
  std::_Compressed_pair<std::allocator<ksRacing::RealismRules>,std::_Vector_val<std::_Simple_types<ksRacing::RealismRules> >,1> _Mypair;
};

/* 67381 */
struct __cppobj std::vector<ksRacing::RealismRules,std::allocator<ksRacing::RealismRules> > : std::_Vector_alloc<std::_Vec_base_types<ksRacing::RealismRules,std::allocator<ksRacing::RealismRules> > >
{
};

/* 67382 */
struct __cppobj std::allocator<ksRacing::GameplayRules>
{
};

/* 67383 */
struct __cppobj std::_Vector_val<std::_Simple_types<ksRacing::GameplayRules> > : std::_Container_base0
{
  ksRacing::GameplayRules *_Myfirst;
  ksRacing::GameplayRules *_Mylast;
  ksRacing::GameplayRules *_Myend;
};

/* 67384 */
struct __cppobj std::_Compressed_pair<std::allocator<ksRacing::GameplayRules>,std::_Vector_val<std::_Simple_types<ksRacing::GameplayRules> >,1> : std::allocator<ksRacing::GameplayRules>
{
  std::_Vector_val<std::_Simple_types<ksRacing::GameplayRules> > _Myval2;
};

/* 67385 */
struct std::_Vector_alloc<std::_Vec_base_types<ksRacing::GameplayRules,std::allocator<ksRacing::GameplayRules> > >
{
  std::_Compressed_pair<std::allocator<ksRacing::GameplayRules>,std::_Vector_val<std::_Simple_types<ksRacing::GameplayRules> >,1> _Mypair;
};

/* 67386 */
struct __cppobj std::vector<ksRacing::GameplayRules,std::allocator<ksRacing::GameplayRules> > : std::_Vector_alloc<std::_Vec_base_types<ksRacing::GameplayRules,std::allocator<ksRacing::GameplayRules> > >
{
};

/* 67387 */
struct __cppobj std::allocator<ksRacing::OnlineRules>
{
};

/* 67388 */
struct __cppobj std::_Vector_val<std::_Simple_types<ksRacing::OnlineRules> > : std::_Container_base0
{
  ksRacing::OnlineRules *_Myfirst;
  ksRacing::OnlineRules *_Mylast;
  ksRacing::OnlineRules *_Myend;
};

/* 67389 */
struct __cppobj std::_Compressed_pair<std::allocator<ksRacing::OnlineRules>,std::_Vector_val<std::_Simple_types<ksRacing::OnlineRules> >,1> : std::allocator<ksRacing::OnlineRules>
{
  std::_Vector_val<std::_Simple_types<ksRacing::OnlineRules> > _Myval2;
};

/* 67390 */
struct std::_Vector_alloc<std::_Vec_base_types<ksRacing::OnlineRules,std::allocator<ksRacing::OnlineRules> > >
{
  std::_Compressed_pair<std::allocator<ksRacing::OnlineRules>,std::_Vector_val<std::_Simple_types<ksRacing::OnlineRules> >,1> _Mypair;
};

/* 67391 */
struct __cppobj std::vector<ksRacing::OnlineRules,std::allocator<ksRacing::OnlineRules> > : std::_Vector_alloc<std::_Vec_base_types<ksRacing::OnlineRules,std::allocator<ksRacing::OnlineRules> > >
{
};

/* 67392 */
struct __cppobj std::allocator<ksRacing::RaceDirectorRules>
{
};

/* 67393 */
struct __cppobj std::_Vector_val<std::_Simple_types<ksRacing::RaceDirectorRules> > : std::_Container_base0
{
  ksRacing::RaceDirectorRules *_Myfirst;
  ksRacing::RaceDirectorRules *_Mylast;
  ksRacing::RaceDirectorRules *_Myend;
};

/* 67394 */
struct __cppobj std::_Compressed_pair<std::allocator<ksRacing::RaceDirectorRules>,std::_Vector_val<std::_Simple_types<ksRacing::RaceDirectorRules> >,1> : std::allocator<ksRacing::RaceDirectorRules>
{
  std::_Vector_val<std::_Simple_types<ksRacing::RaceDirectorRules> > _Myval2;
};

/* 67395 */
struct std::_Vector_alloc<std::_Vec_base_types<ksRacing::RaceDirectorRules,std::allocator<ksRacing::RaceDirectorRules> > >
{
  std::_Compressed_pair<std::allocator<ksRacing::RaceDirectorRules>,std::_Vector_val<std::_Simple_types<ksRacing::RaceDirectorRules> >,1> _Mypair;
};

/* 67396 */
struct __cppobj std::vector<ksRacing::RaceDirectorRules,std::allocator<ksRacing::RaceDirectorRules> > : std::_Vector_alloc<std::_Vec_base_types<ksRacing::RaceDirectorRules,std::allocator<ksRacing::RaceDirectorRules> > >
{
};

/* 67397 */
struct __cppobj std::allocator<ksRacing::EventEntity>
{
};

/* 67422 */
struct __cppobj std::_Vector_val<std::_Simple_types<ksRacing::EventEntity> > : std::_Container_base0
{
  ksRacing::EventEntity *_Myfirst;
  ksRacing::EventEntity *_Mylast;
  ksRacing::EventEntity *_Myend;
};

/* 67423 */
struct __cppobj std::_Compressed_pair<std::allocator<ksRacing::EventEntity>,std::_Vector_val<std::_Simple_types<ksRacing::EventEntity> >,1> : std::allocator<ksRacing::EventEntity>
{
  std::_Vector_val<std::_Simple_types<ksRacing::EventEntity> > _Myval2;
};

/* 67424 */
struct std::_Vector_alloc<std::_Vec_base_types<ksRacing::EventEntity,std::allocator<ksRacing::EventEntity> > >
{
  std::_Compressed_pair<std::allocator<ksRacing::EventEntity>,std::_Vector_val<std::_Simple_types<ksRacing::EventEntity> >,1> _Mypair;
};

/* 67425 */
struct __cppobj std::vector<ksRacing::EventEntity,std::allocator<ksRacing::EventEntity> > : std::_Vector_alloc<std::_Vec_base_types<ksRacing::EventEntity,std::allocator<ksRacing::EventEntity> > >
{
};

/* 67426 */
struct __cppobj __declspec(align(8)) ksRacing::SeasonEntity : ksRacing::WritableRaceStructure
{
  ksRacing::RaceRules rules;
  ksRacing::HudRules hud;
  ksRacing::AssistRules assists;
  ksRacing::GraphicsRules graphics;
  ksRacing::SuperpoleRules superpoleRules;
  ksRacing::RealismRules sessionRealism;
  ksRacing::GameplayRules sessionGameplay;
  ksRacing::OnlineRules sessionOnline;
  ksRacing::RaceDirectorRules sessionRaceDirector;
  std::vector<ksRacing::RealismRules,std::allocator<ksRacing::RealismRules> > sessionRealismOverride;
  std::vector<ksRacing::GameplayRules,std::allocator<ksRacing::GameplayRules> > sessionGameplayOverride;
  std::vector<ksRacing::OnlineRules,std::allocator<ksRacing::OnlineRules> > sessionOnlineOverride;
  std::vector<ksRacing::RaceDirectorRules,std::allocator<ksRacing::RaceDirectorRules> > sessionRaceDirectorOverride;
  std::vector<ksRacing::EventEntity,std::allocator<ksRacing::EventEntity> > events;
  int eventOnlineReference;
};

/* 67209 */
struct __cppobj ksRacing::DriverInfo : ksRacing::WritableRaceStructure
{
  std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > firstName;
  std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > secondName;
  std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > lastName;
  std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > nickName;
  std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > shortName;
  char weight;
  __declspec(align(2)) _BYTE nationality[2];
  _BYTE driverCategory[1];
  std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > driverRow;
  int helmetTemplateKey;
  int helmetBaseColor;
  int helmetDetailColor;
  char helmetMaterialType;
  int helmetGlassColor;
  float helmetGlassMetallic;
  int glovesTemplateKey;
  int suitTemplateKey;
  int suitDetailColor1;
  int suitDetailColor2;
  char skillLevel;
  char aggroLevel;
  std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > playerID;
};

/* 67208 */
struct __cppobj __declspec(align(8)) ksRacing::CarInfo : ksRacing::WritableRaceStructure
{
  int raceNumber;
  char auxLightKey;
  int auxLightColor;
  char skinTemplateKey;
  int skinColor1Id;
  int skinColor2Id;
  int skinColor3Id;
  char skinMaterialType1;
  char skinMaterialType2;
  char skinMaterialType3;
  int rimColor1Id;
  int rimColor2Id;
  char rimMaterialType1;
  char rimMaterialType2;
  std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > teamName;
  _BYTE nationality[2];
  std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > displayName;
  std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > competitorName;
  _BYTE competitorNationality[2];
  char teamTemplateKey;
  _BYTE carModelType[1];
  _BYTE cupCategory[1];
  _BYTE licenseType[1];
  bool useEnduranceKit;
  bool isPlayerCar;
  bool isNetCar;
};

/* 67427 */
struct __cppobj std::default_delete<UDPSocket>
{
};

/* 67441 */
struct __cppobj std::_Compressed_pair<std::default_delete<UDPSocket>,UDPSocket *,1> : std::default_delete<UDPSocket>
{
  UDPSocket *_Myval2;
};

/* 67442 */
struct std::_Unique_ptr_base<UDPSocket,std::default_delete<UDPSocket> >
{
  std::_Compressed_pair<std::default_delete<UDPSocket>,UDPSocket *,1> _Mypair;
};

/* 67443 */
struct __cppobj std::unique_ptr<UDPSocket,std::default_delete<UDPSocket> > : std::_Unique_ptr_base<UDPSocket,std::default_delete<UDPSocket> >
{
};

/* 61932 */
struct $BD85036DCC0442AA317E9171D0F2179B
{
  char s_b1;
  char s_b2;
  char s_b3;
  char s_b4;
};

/* 61933 */
struct $CC608A129C88F312E26B04B0A6BA5EDC
{
  unsigned __int16 s_w1;
  unsigned __int16 s_w2;
};

/* 61934 */
union $B6F142B416B8E9EC191D20324079D3AD
{
  $BD85036DCC0442AA317E9171D0F2179B S_un_b;
  $CC608A129C88F312E26B04B0A6BA5EDC S_un_w;
  unsigned int S_addr;
};

/* 61935 */
struct in_addr
{
  $B6F142B416B8E9EC191D20324079D3AD S_un;
};

/* 61936 */
struct sockaddr_in
{
  unsigned __int16 sin_family;
  unsigned __int16 sin_port;
  in_addr sin_addr;
  char sin_zero[8];
};

/* 67205 */
struct IPAddress
{
  sockaddr_in sokaddr;
};

/* 67444 */
struct __cppobj std::default_delete<TCPSocket>
{
};

/* 67459 */
struct __cppobj std::_Compressed_pair<std::default_delete<TCPSocket>,TCPSocket *,1> : std::default_delete<TCPSocket>
{
  TCPSocket *_Myval2;
};

/* 67460 */
struct std::_Unique_ptr_base<TCPSocket,std::default_delete<TCPSocket> >
{
  std::_Compressed_pair<std::default_delete<TCPSocket>,TCPSocket *,1> _Mypair;
};

/* 67461 */
struct __cppobj std::unique_ptr<TCPSocket,std::default_delete<TCPSocket> > : std::_Unique_ptr_base<TCPSocket,std::default_delete<TCPSocket> >
{
};

/* 67462 */
struct __cppobj std::allocator<unsigned char>
{
};

/* 67463 */
struct __cppobj std::_Vector_val<std::_Simple_types<unsigned char> > : std::_Container_base0
{
  char *_Myfirst;
  char *_Mylast;
  char *_Myend;
};

/* 67464 */
struct __cppobj std::_Compressed_pair<std::allocator<unsigned char>,std::_Vector_val<std::_Simple_types<unsigned char> >,1> : std::allocator<unsigned char>
{
  std::_Vector_val<std::_Simple_types<unsigned char> > _Myval2;
};

/* 67465 */
struct std::_Vector_alloc<std::_Vec_base_types<unsigned char,std::allocator<unsigned char> > >
{
  std::_Compressed_pair<std::allocator<unsigned char>,std::_Vector_val<std::_Simple_types<unsigned char> >,1> _Mypair;
};

/* 67466 */
struct __cppobj std::vector<unsigned char,std::allocator<unsigned char> > : std::_Vector_alloc<std::_Vec_base_types<unsigned char,std::allocator<unsigned char> > >
{
};

/* 67467 */
struct __cppobj std::allocator<ClientCollisionEvent>
{
};

/* 67470 */
struct __cppobj std::_Vector_val<std::_Simple_types<ClientCollisionEvent> > : std::_Container_base0
{
  ClientCollisionEvent *_Myfirst;
  ClientCollisionEvent *_Mylast;
  ClientCollisionEvent *_Myend;
};

/* 67471 */
struct __cppobj std::_Compressed_pair<std::allocator<ClientCollisionEvent>,std::_Vector_val<std::_Simple_types<ClientCollisionEvent> >,1> : std::allocator<ClientCollisionEvent>
{
  std::_Vector_val<std::_Simple_types<ClientCollisionEvent> > _Myval2;
};

/* 67472 */
struct std::_Vector_alloc<std::_Vec_base_types<ClientCollisionEvent,std::allocator<ClientCollisionEvent> > >
{
  std::_Compressed_pair<std::allocator<ClientCollisionEvent>,std::_Vector_val<std::_Simple_types<ClientCollisionEvent> >,1> _Mypair;
};

/* 67473 */
struct __cppobj std::vector<ClientCollisionEvent,std::allocator<ClientCollisionEvent> > : std::_Vector_alloc<std::_Vec_base_types<ClientCollisionEvent,std::allocator<ClientCollisionEvent> > >
{
};

/* 67474 */
struct __declspec(align(4)) AC2Client
{
  Event<CarConnectedEvent> evOnCarConnected;
  Event<unsigned char> evOnCarDisconnected;
  Event<ksRacing::OnSplitTimeEvent> evOnRemoteSplit;
  Event<ksRacing::OnRemoteLapEvent> evOnRemoteLapCompleted;
  Event<OnSessionUpdateEvent> evOnSessionUpdateEvent;
  ServerInfo serverInfo;
  _BYTE clientStatus[1];
  ksRacing::SeasonResult seasonResult;
  ksRacing::SeasonEntity seasonEntity;
  ksRacing::DriverInfo driverInfo;
  ksRacing::CarInfo carInfo;
  bool isAssociated;
  std::unique_ptr<UDPSocket,std::default_delete<UDPSocket> > sok;
  long double lastSendTime;
  long double sendInterval;
  IPAddress serverIP;
  char connectionID;
  char connectedCarId;
  char pakSequenceIndex;
  std::unique_ptr<TCPSocket,std::default_delete<TCPSocket> > tcpSock;
  std::vector<unsigned char,std::allocator<unsigned char> > connectedCarIDS;
  std::vector<unsigned char,std::allocator<unsigned char> > requestedCarIDS;
  PhysicsEngine *physicsEngine;
  unsigned int pingTime;
  long double lastPingTime;
  std::vector<ClientCollisionEvent,std::allocator<ClientCollisionEvent> > clientColissionEvents;
  long double lastClientEventSendTime;
  bool isGameStarted;
  unsigned __int16 carIndex;
  unsigned __int16 driverIndex;
};

/* 4439 */
struct TEnumAsByte<enum ETickingGroup>
{
  char Value;
};

/* 4440 */
struct TArray<FTickPrerequisite,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 4437 */
struct FTickFunction
{
  FTickFunctionVtbl *vfptr;
  TEnumAsByte<enum ETickingGroup> TickGroup;
  TEnumAsByte<enum ETickingGroup> EndTickGroup;
  TEnumAsByte<enum ETickingGroup> ActualStartTickGroup;
  TEnumAsByte<enum ETickingGroup> ActualEndTickGroup;
  __int8 bTickEvenWhenPaused : 1;
  __int8 bCanEverTick : 1;
  __int8 bStartWithTickEnabled : 1;
  __int8 bAllowTickOnDedicatedServer : 1;
  __int8 bHighPriority : 1;
  __int8 bRunOnAnyThread : 1;
  bool bRegistered;
  bool bWasInterval;
  _BYTE TickState[1];
  int TickVisitedGFrameCounter;
  int TickQueuedGFrameCounter;
  void *TaskPointer;
  TArray<FTickPrerequisite,FDefaultAllocator> Prerequisites;
  FTickFunction *Next;
  float RelativeTickCooldown;
  float LastTickGameTimeSeconds;
  float TickInterval;
  FTickTaskLevel *TickTaskLevel;
};

/* 4455 */
struct __cppobj FActorTickFunction : FTickFunction
{
  AActor *Target;
};

/* 4456 */
struct TEnumAsByte<enum ENetRole>
{
  char Value;
};

/* 3821 */
struct FVector
{
  float X;
  float Y;
  float Z;
};

/* 3828 */
struct FRotator
{
  float Pitch;
  float Yaw;
  float Roll;
};

/* 4457 */
struct FRepMovement
{
  FVector LinearVelocity;
  FVector AngularVelocity;
  FVector Location;
  FRotator Rotation;
  __int8 bSimulatedPhysicSleep : 1;
  __int8 bRepPhysics : 1;
  _BYTE LocationQuantizationLevel[1];
  _BYTE VelocityQuantizationLevel[1];
  _BYTE RotationQuantizationLevel[1];
};

/* 4458 */
struct __cppobj FVector_NetQuantize100 : FVector
{
};

/* 4460 */
struct FRepAttachment
{
  AActor *AttachParent;
  FVector_NetQuantize100 LocationOffset;
  FVector_NetQuantize100 RelativeScale3D;
  FRotator RotationOffset;
  FName AttachSocket;
  USceneComponent *AttachComponent;
};

/* 4461 */
struct TEnumAsByte<enum ENetDormancy>
{
  char Value;
};

/* 4462 */
struct TEnumAsByte<enum EAutoReceiveInput::Type>
{
  char Value;
};

/* 4502 */
struct TArray<AActor *,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 4503 */
struct TArray<AMatineeActor *,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 4504 */
struct FTimerHandle
{
  unsigned __int64 Handle;
};

/* 3916 */
struct TArray<FName,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 3842 */
struct FWeakObjectPtr
{
  int ObjectIndex;
  int ObjectSerialNumber;
};

/* 4505 */
struct __cppobj TWeakObjectPtr<UChildActorComponent,FWeakObjectPtr> : FWeakObjectPtr
{
};

/* 4286 */
struct TArray<TScriptDelegate<FWeakObjectPtr>,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 4287 */
struct TMulticastScriptDelegate<FWeakObjectPtr>
{
  TArray<TScriptDelegate<FWeakObjectPtr>,FDefaultAllocator> InvocationList;
};

/* 4506 */
struct __cppobj TBaseDynamicMulticastDelegate<FWeakObjectPtr,void,AActor *,float,UDamageType const *,AController *,AActor *> : TMulticastScriptDelegate<FWeakObjectPtr>
{
};

/* 4507 */
struct __cppobj FTakeAnyDamageSignature : TBaseDynamicMulticastDelegate<FWeakObjectPtr,void,AActor *,float,UDamageType const *,AController *,AActor *>
{
};

/* 4508 */
struct __cppobj TBaseDynamicMulticastDelegate<FWeakObjectPtr,void,AActor *,float,AController *,FVector,UPrimitiveComponent *,FName,FVector,UDamageType const *,AActor *> : TMulticastScriptDelegate<FWeakObjectPtr>
{
};

/* 4509 */
struct __cppobj FTakePointDamageSignature : TBaseDynamicMulticastDelegate<FWeakObjectPtr,void,AActor *,float,AController *,FVector,UPrimitiveComponent *,FName,FVector,UDamageType const *,AActor *>
{
};

/* 4510 */
struct __cppobj TBaseDynamicMulticastDelegate<FWeakObjectPtr,void,AActor *,float,UDamageType const *,FVector,FHitResult,AController *,AActor *> : TMulticastScriptDelegate<FWeakObjectPtr>
{
};

/* 4511 */
struct __cppobj FTakeRadialDamageSignature : TBaseDynamicMulticastDelegate<FWeakObjectPtr,void,AActor *,float,UDamageType const *,FVector,FHitResult,AController *,AActor *>
{
};

/* 4512 */
struct __cppobj TBaseDynamicMulticastDelegate<FWeakObjectPtr,void,AActor *,AActor *> : TMulticastScriptDelegate<FWeakObjectPtr>
{
};

/* 4513 */
struct __cppobj FActorBeginOverlapSignature : TBaseDynamicMulticastDelegate<FWeakObjectPtr,void,AActor *,AActor *>
{
};

/* 4514 */
struct __cppobj FActorEndOverlapSignature : TBaseDynamicMulticastDelegate<FWeakObjectPtr,void,AActor *,AActor *>
{
};

/* 4515 */
struct __cppobj TBaseDynamicMulticastDelegate<FWeakObjectPtr,void,AActor *> : TMulticastScriptDelegate<FWeakObjectPtr>
{
};

/* 4516 */
struct __cppobj FActorBeginCursorOverSignature : TBaseDynamicMulticastDelegate<FWeakObjectPtr,void,AActor *>
{
};

/* 4517 */
struct __cppobj FActorEndCursorOverSignature : TBaseDynamicMulticastDelegate<FWeakObjectPtr,void,AActor *>
{
};

/* 4518 */
struct __cppobj TBaseDynamicMulticastDelegate<FWeakObjectPtr,void,AActor *,FKey> : TMulticastScriptDelegate<FWeakObjectPtr>
{
};

/* 4519 */
struct __cppobj FActorOnClickedSignature : TBaseDynamicMulticastDelegate<FWeakObjectPtr,void,AActor *,FKey>
{
};

/* 4520 */
struct __cppobj FActorOnReleasedSignature : TBaseDynamicMulticastDelegate<FWeakObjectPtr,void,AActor *,FKey>
{
};

/* 4521 */
struct __cppobj TBaseDynamicMulticastDelegate<FWeakObjectPtr,void,enum ETouchIndex::Type,AActor *> : TMulticastScriptDelegate<FWeakObjectPtr>
{
};

/* 4522 */
struct __cppobj FActorOnInputTouchBeginSignature : TBaseDynamicMulticastDelegate<FWeakObjectPtr,void,enum ETouchIndex::Type,AActor *>
{
};

/* 4523 */
struct __cppobj FActorOnInputTouchEndSignature : TBaseDynamicMulticastDelegate<FWeakObjectPtr,void,enum ETouchIndex::Type,AActor *>
{
};

/* 4524 */
struct __cppobj FActorBeginTouchOverSignature : TBaseDynamicMulticastDelegate<FWeakObjectPtr,void,enum ETouchIndex::Type,AActor *>
{
};

/* 4525 */
struct __cppobj FActorEndTouchOverSignature : TBaseDynamicMulticastDelegate<FWeakObjectPtr,void,enum ETouchIndex::Type,AActor *>
{
};

/* 4526 */
struct __cppobj TBaseDynamicMulticastDelegate<FWeakObjectPtr,void,AActor *,AActor *,FVector,FHitResult const &> : TMulticastScriptDelegate<FWeakObjectPtr>
{
};

/* 4527 */
struct __cppobj FActorHitSignature : TBaseDynamicMulticastDelegate<FWeakObjectPtr,void,AActor *,AActor *,FVector,FHitResult const &>
{
};

/* 4528 */
struct __cppobj FActorDestroyedSignature : TBaseDynamicMulticastDelegate<FWeakObjectPtr,void,AActor *>
{
};

/* 4529 */
struct __cppobj TBaseDynamicMulticastDelegate<FWeakObjectPtr,void,AActor *,enum EEndPlayReason::Type> : TMulticastScriptDelegate<FWeakObjectPtr>
{
};

/* 4530 */
struct __cppobj FActorEndPlaySignature : TBaseDynamicMulticastDelegate<FWeakObjectPtr,void,AActor *,enum EEndPlayReason::Type>
{
};

/* 3957 */
struct TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<16,8> >,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 4531 */
struct TSparseArray<TSetElement<UActorComponent *>,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<16,8> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 4532 */
struct __declspec(align(8)) TSet<UActorComponent *,DefaultKeyFuncs<UActorComponent *,0>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<UActorComponent *>,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 4533 */
struct TArray<UActorComponent *,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 4231 */
struct TRefCountPtr<FGraphEvent>
{
  FGraphEvent *Reference;
};

/* 4232 */
struct FRenderCommandFence
{
  TRefCountPtr<FGraphEvent> CompletionEvent;
};

/* 4454 */
struct __cppobj AActor : UObject
{
  FActorTickFunction PrimaryActorTick;
  __int8 bHidden : 1;
  __int8 bNetTemporary : 1;
  __int8 bNetStartup : 1;
  __int8 bOnlyRelevantToOwner : 1;
  __int8 bAlwaysRelevant : 1;
  __int8 bReplicateMovement : 1;
  __int8 bTearOff : 1;
  __int8 bExchangedRoles : 1;
  __int8 bNetLoadOnClient : 1;
  __int8 bNetUseOwnerRelevancy : 1;
  __int8 bRelevantForNetworkReplays : 1;
  __int8 bReplayRewindable : 1;
  __int8 bAllowTickBeforeBeginPlay : 1;
  __int8 bAutoDestroyWhenFinished : 1;
  __int8 bBlockInput : 1;
  __int8 bCanBeDamaged : 1;
  __int8 bCollideWhenPlacing : 1;
  __int8 bFindCameraComponentWhenViewTarget : 1;
  __int8 bGenerateOverlapEventsDuringLevelStreaming : 1;
  __int8 bIgnoresOriginShifting : 1;
  __int8 bEnableAutoLODGeneration : 1;
  __int8 bIsEditorOnlyActor : 1;
  __int8 bActorSeamlessTraveled : 1;
  __int8 bReplicates : 1;
  __int8 bCanBeInCluster : 1;
  __int8 bAllowReceiveTickEventOnDedicatedServer : 1;
  __int8 bNetCheckedInitialPhysicsState : 1;
  __int8 bHasFinishedSpawning : 1;
  __int8 bActorInitialized : 1;
  __int8 bTickFunctionsRegistered : 1;
  __int8 bHasDeferredComponentRegistration : 1;
  __int8 bRunningUserConstructionScript : 1;
  __int8 bActorEnableCollision : 1;
  __int8 bActorIsBeingDestroyed : 1;
  __int8 bActorWantsDestroyDuringBeginPlay : 1;
  __int8 ActorHasBegunPlay : 2;
  TEnumAsByte<enum ENetRole> RemoteRole;
  FRepMovement ReplicatedMovement;
  float InitialLifeSpan;
  float CustomTimeDilation;
  float CreationTime;
  FRepAttachment AttachmentReplication;
  AActor *Owner;
  FName NetDriverName;
  TEnumAsByte<enum ENetRole> Role;
  TEnumAsByte<enum ENetDormancy> NetDormancy;
  _BYTE SpawnCollisionHandlingMethod[1];
  TEnumAsByte<enum EAutoReceiveInput::Type> AutoReceiveInput;
  int InputPriority;
  UInputComponent *InputComponent;
  float NetCullDistanceSquared;
  int NetTag;
  float NetUpdateFrequency;
  float MinNetUpdateFrequency;
  float NetPriority;
  APawn *Instigator;
  TArray<AActor *,FDefaultAllocator> Children;
  USceneComponent *RootComponent;
  TArray<AMatineeActor *,FDefaultAllocator> ControllingMatineeActors;
  FTimerHandle TimerHandle_LifeSpanExpired;
  TArray<FName,FDefaultAllocator> Layers;
  TWeakObjectPtr<UChildActorComponent,FWeakObjectPtr> ParentComponent;
  TArray<FName,FDefaultAllocator> Tags;
  FTakeAnyDamageSignature OnTakeAnyDamage;
  FTakePointDamageSignature OnTakePointDamage;
  FTakeRadialDamageSignature OnTakeRadialDamage;
  FActorBeginOverlapSignature OnActorBeginOverlap;
  FActorEndOverlapSignature OnActorEndOverlap;
  FActorBeginCursorOverSignature OnBeginCursorOver;
  FActorEndCursorOverSignature OnEndCursorOver;
  FActorOnClickedSignature OnClicked;
  FActorOnReleasedSignature OnReleased;
  FActorOnInputTouchBeginSignature OnInputTouchBegin;
  FActorOnInputTouchEndSignature OnInputTouchEnd;
  FActorBeginTouchOverSignature OnInputTouchEnter;
  FActorEndTouchOverSignature OnInputTouchLeave;
  FActorHitSignature OnActorHit;
  FActorDestroyedSignature OnDestroyed;
  FActorEndPlaySignature OnEndPlay;
  TSet<UActorComponent *,DefaultKeyFuncs<UActorComponent *,0>,FDefaultSetAllocator> OwnedComponents;
  TArray<UActorComponent *,FDefaultAllocator> ReplicatedComponents;
  TArray<UActorComponent *,FDefaultAllocator> InstanceComponents;
  TArray<UActorComponent *,FDefaultAllocator> BlueprintCreatedComponents;
  FRenderCommandFence DetachFence;
};

/* 3960 */
struct FRunnable
{
  FRunnableVtbl *vfptr;
};

/* 69110 */
struct __cppobj TDefaultDelete<SharedMemoryWriter>
{
};

/* 69113 */
struct __cppobj TUniquePtr<SharedMemoryWriter,TDefaultDelete<SharedMemoryWriter> > : TDefaultDelete<SharedMemoryWriter>
{
  SharedMemoryWriter *Ptr;
};

/* 69114 */
struct __cppobj TDefaultDelete<PhysicsEngine>
{
};

/* 69115 */
struct __cppobj TUniquePtr<PhysicsEngine,TDefaultDelete<PhysicsEngine> > : TDefaultDelete<PhysicsEngine>
{
  PhysicsEngine *Ptr;
};

/* 34505 */
struct __cppobj TDefaultDelete<FRunnableThread>
{
};

/* 34506 */
struct __cppobj TUniquePtr<FRunnableThread,TDefaultDelete<FRunnableThread> > : TDefaultDelete<FRunnableThread>
{
  FRunnableThread *Ptr;
};

/* 67886 */
struct std::_Atomic_bool
{
  char _My_val;
};

/* 67887 */
struct __cppobj std::atomic<bool> : std::_Atomic_bool
{
};

/* 67906 */
struct std::_Atomic_uint
{
  unsigned int _My_val;
};

/* 67907 */
struct __cppobj std::atomic<unsigned int> : std::_Atomic_uint
{
};

/* 69116 */
struct __cppobj std::less<ICarPhysicsStateProvider *>
{
};

/* 69117 */
struct __cppobj std::allocator<std::_Tree_node<std::pair<ICarPhysicsStateProvider * const,CarPhysicsState>,void *> >
{
};

/* 69120 */
struct __cppobj std::_Tree_val<std::_Tree_simple_types<std::pair<ICarPhysicsStateProvider * const,CarPhysicsState> > > : std::_Container_base0
{
  std::_Tree_node<std::pair<ICarPhysicsStateProvider * const,CarPhysicsState>,void *> *_Myhead;
  unsigned __int64 _Mysize;
};

/* 69121 */
struct __cppobj std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<ICarPhysicsStateProvider * const,CarPhysicsState>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<ICarPhysicsStateProvider * const,CarPhysicsState> > >,1> : std::allocator<std::_Tree_node<std::pair<ICarPhysicsStateProvider * const,CarPhysicsState>,void *> >
{
  std::_Tree_val<std::_Tree_simple_types<std::pair<ICarPhysicsStateProvider * const,CarPhysicsState> > > _Myval2;
};

/* 69122 */
struct __cppobj std::_Compressed_pair<std::less<ICarPhysicsStateProvider *>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<ICarPhysicsStateProvider * const,CarPhysicsState>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<ICarPhysicsStateProvider * const,CarPhysicsState> > >,1>,1> : std::less<ICarPhysicsStateProvider *>
{
  std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<ICarPhysicsStateProvider * const,CarPhysicsState>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<ICarPhysicsStateProvider * const,CarPhysicsState> > >,1> _Myval2;
};

/* 69123 */
struct std::_Tree_comp_alloc<std::_Tmap_traits<ICarPhysicsStateProvider *,CarPhysicsState,std::less<ICarPhysicsStateProvider *>,std::allocator<std::pair<ICarPhysicsStateProvider * const,CarPhysicsState> >,0> >
{
  std::_Compressed_pair<std::less<ICarPhysicsStateProvider *>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<ICarPhysicsStateProvider * const,CarPhysicsState>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<ICarPhysicsStateProvider * const,CarPhysicsState> > >,1>,1> _Mypair;
};

/* 69124 */
struct __cppobj std::_Tree<std::_Tmap_traits<ICarPhysicsStateProvider *,CarPhysicsState,std::less<ICarPhysicsStateProvider *>,std::allocator<std::pair<ICarPhysicsStateProvider * const,CarPhysicsState> >,0> > : std::_Tree_comp_alloc<std::_Tmap_traits<ICarPhysicsStateProvider *,CarPhysicsState,std::less<ICarPhysicsStateProvider *>,std::allocator<std::pair<ICarPhysicsStateProvider * const,CarPhysicsState> >,0> >
{
};

/* 69125 */
struct __cppobj std::map<ICarPhysicsStateProvider *,CarPhysicsState,std::less<ICarPhysicsStateProvider *>,std::allocator<std::pair<ICarPhysicsStateProvider * const,CarPhysicsState> > > : std::_Tree<std::_Tmap_traits<ICarPhysicsStateProvider *,CarPhysicsState,std::less<ICarPhysicsStateProvider *>,std::allocator<std::pair<ICarPhysicsStateProvider * const,CarPhysicsState> >,0> >
{
};

/* 69126 */
struct __declspec(align(8)) APhysicsAvatar::PhysicsState
{
  std::map<ICarPhysicsStateProvider *,CarPhysicsState,std::less<ICarPhysicsStateProvider *>,std::allocator<std::pair<ICarPhysicsStateProvider * const,CarPhysicsState> > > providerStates;
  long double physicsTimeStamp;
  long double localTimeStamp;
  float cpuOccupancy;
};

/* 69128 */
struct TQueue<APhysicsAvatar::PhysicsState,1>
{
  TQueue<APhysicsAvatar::PhysicsState,1>::TNode *volatile Head;
  TQueue<APhysicsAvatar::PhysicsState,1>::TNode *Tail;
};

/* 69129 */
struct __cppobj std::allocator<std::function<void __cdecl(void)> >
{
};

/* 69130 */
struct __cppobj std::_Vector_val<std::_Simple_types<std::function<void __cdecl(void)> > > : std::_Container_base0
{
  std::function<void __cdecl(void)> *_Myfirst;
  std::function<void __cdecl(void)> *_Mylast;
  std::function<void __cdecl(void)> *_Myend;
};

/* 69131 */
struct __cppobj std::_Compressed_pair<std::allocator<std::function<void __cdecl(void)> >,std::_Vector_val<std::_Simple_types<std::function<void __cdecl(void)> > >,1> : std::allocator<std::function<void __cdecl(void)> >
{
  std::_Vector_val<std::_Simple_types<std::function<void __cdecl(void)> > > _Myval2;
};

/* 69132 */
struct std::_Vector_alloc<std::_Vec_base_types<std::function<void __cdecl(void)>,std::allocator<std::function<void __cdecl(void)> > > >
{
  std::_Compressed_pair<std::allocator<std::function<void __cdecl(void)> >,std::_Vector_val<std::_Simple_types<std::function<void __cdecl(void)> > >,1> _Mypair;
};

/* 69133 */
struct __cppobj std::vector<std::function<void __cdecl(void)>,std::allocator<std::function<void __cdecl(void)> > > : std::_Vector_alloc<std::_Vec_base_types<std::function<void __cdecl(void)>,std::allocator<std::function<void __cdecl(void)> > > >
{
};

/* 69135 */
struct TQueue<std::function<void __cdecl(void)>,1>
{
  TQueue<std::function<void __cdecl(void)>,1>::TNode *volatile Head;
  TQueue<std::function<void __cdecl(void)>,1>::TNode *Tail;
};

/* 69137 */
struct TQueue<DynamicTrackStatus,1>
{
  TQueue<DynamicTrackStatus,1>::TNode *volatile Head;
  TQueue<DynamicTrackStatus,1>::TNode *Tail;
};

/* 641 */
enum ESpawnActorCollisionHandlingMethod
{
  Undefined = 0x0,
  AlwaysSpawn = 0x1,
  AdjustIfPossibleButAlwaysSpawn = 0x2,
  AdjustIfPossibleButDontSpawnIfColliding = 0x3,
  DontSpawnIfColliding = 0x4,
};

/* 1734 */
typedef ESpawnActorCollisionHandlingMethod SessionType;

/* 67502 */
const struct SessionInfo
{
  SessionType type;
  long double startTimeMS;
  long double timeSecs;
  int laps;
  int index;
};

/* 69384 */
struct __cppobj APhysicsAvatar : AActor, FRunnable
{
  TUniquePtr<SharedMemoryWriter,TDefaultDelete<SharedMemoryWriter> > sharedMemoryWriter;
  TUniquePtr<PhysicsEngine,TDefaultDelete<PhysicsEngine> > engine;
  TUniquePtr<FRunnableThread,TDefaultDelete<FRunnableThread> > physicsThread;
  long double currentTime;
  std::atomic<bool> stopRequested;
  std::atomic<bool> pauseRequested;
  std::atomic<unsigned int> physicsLateCount;
  int refs;
  unsigned int physicsBlendCount;
  FWindowsCriticalSection physicsSyncCommandsCSection;
  APhysicsAvatar::PhysicsState physicsState[2];
  __declspec(align(16)) TQueue<APhysicsAvatar::PhysicsState,1> physicsStateQueue;
  long double physicsStateExtractionTime;
  std::vector<std::function<void __cdecl(void)>,std::allocator<std::function<void __cdecl(void)> > > commandsToPhysicsSync;
  TQueue<std::function<void __cdecl(void)>,1> commandsToMain;
  TQueue<std::function<void __cdecl(void)>,1> commandQueue;
  TQueue<DynamicTrackStatus,1> dynamicTrackQueue;
  long double physicsTime;
  SessionInfo currentSession;
  ksRacing::TrackServices *trackServices;
  AAcRaceGameMode *raceGameMode;
};

/* 3830 */
struct __cppobj FScriptContainerElement
{
};

/* 3858 */
struct TEnumAsByte<enum ELifetimeCondition>
{
  char Value;
};

/* 3859 */
struct __cppobj UProperty : UField
{
  int ArrayDim;
  int ElementSize;
  _BYTE PropertyFlags[8];
  unsigned __int16 RepIndex;
  TEnumAsByte<enum ELifetimeCondition> BlueprintReplicationCondition;
  int Offset_Internal;
  FName RepNotifyFunc;
  UProperty *PropertyLinkNext;
  UProperty *NextRef;
  UProperty *DestructorLinkNext;
  UProperty *PostConstructLinkNext;
};

/* 3878 */
struct TAlignedBytes<16,8>::TPadding
{
  char Pad[16];
};

/* 3879 */
struct TAlignedBytes<16,8>
{
  TAlignedBytes<16,8>::TPadding Padding;
};

/* 3880 */
struct __cppobj TTypeCompatibleBytes<FObjectInitializer::FOverrides::FOverride> : TAlignedBytes<16,8>
{
};

/* 3881 */
struct __cppobj FHeapAllocator::ForElementType<FObjectInitializer::FOverrides::FOverride> : FHeapAllocator::ForAnyElementType
{
};

/* 3882 */
struct TInlineAllocator<8,FDefaultAllocator>::ForElementType<FObjectInitializer::FOverrides::FOverride>
{
  TTypeCompatibleBytes<FObjectInitializer::FOverrides::FOverride> InlineData[8];
  FHeapAllocator::ForElementType<FObjectInitializer::FOverrides::FOverride> SecondaryData;
};

/* 3883 */
struct TArray<FObjectInitializer::FOverrides::FOverride,TInlineAllocator<8,FDefaultAllocator> >
{
  TInlineAllocator<8,FDefaultAllocator>::ForElementType<FObjectInitializer::FOverrides::FOverride> AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 3884 */
struct FObjectInitializer::FOverrides
{
  TArray<FObjectInitializer::FOverrides::FOverride,TInlineAllocator<8,FDefaultAllocator> > Overrides;
};

/* 3885 */
struct __cppobj TTypeCompatibleBytes<FObjectInitializer::FSubobjectsToInit::FSubobjectInit> : TAlignedBytes<16,8>
{
};

/* 3886 */
struct __cppobj FHeapAllocator::ForElementType<FObjectInitializer::FSubobjectsToInit::FSubobjectInit> : FHeapAllocator::ForAnyElementType
{
};

/* 3887 */
struct TInlineAllocator<8,FDefaultAllocator>::ForElementType<FObjectInitializer::FSubobjectsToInit::FSubobjectInit>
{
  TTypeCompatibleBytes<FObjectInitializer::FSubobjectsToInit::FSubobjectInit> InlineData[8];
  FHeapAllocator::ForElementType<FObjectInitializer::FSubobjectsToInit::FSubobjectInit> SecondaryData;
};

/* 3888 */
struct TArray<FObjectInitializer::FSubobjectsToInit::FSubobjectInit,TInlineAllocator<8,FDefaultAllocator> >
{
  TInlineAllocator<8,FDefaultAllocator>::ForElementType<FObjectInitializer::FSubobjectsToInit::FSubobjectInit> AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 3889 */
struct FObjectInitializer::FSubobjectsToInit
{
  TArray<FObjectInitializer::FSubobjectsToInit::FSubobjectInit,TInlineAllocator<8,FDefaultAllocator> > SubobjectInits;
};

/* 3890 */
const struct __declspec(align(8)) FObjectInitializer
{
  UObject *Obj;
  UObject *ObjectArchetype;
  bool bCopyTransientsFromClassDefaults;
  bool bShouldInitializePropsFromArchetype;
  bool bSubobjectClassInitializationAllowed;
  FObjectInstancingGraph *InstanceGraph;
  FObjectInitializer::FOverrides ComponentOverrides;
  FObjectInitializer::FSubobjectsToInit ComponentInits;
  UObject *LastConstructedObject;
  __int8 bIsDeferredInitializer : 1;
};

/* 3891 */
struct __cppobj FVTableHelper
{
};

/* 3892 */
struct FReferenceCollector
{
  FReferenceCollectorVtbl *vfptr;
  FReferenceCollectorArchive *DefaultReferenceCollectorArchive;
  FReferenceCollectorArchive *PersistentFrameReferenceCollectorArchive;
};

/* 67187 */
struct std::_Func_base<void,CarConnectedEvent const &>
{
  std::_Func_base<void,CarConnectedEvent const &>Vtbl *vfptr;
};

/* 67223 */
struct std::_Func_base<void,unsigned char const &>
{
  std::_Func_base<void,unsigned char const &>Vtbl *vfptr;
};

/* 67236 */
struct std::_Func_base<void,ksRacing::OnSplitTimeEvent const &>
{
  std::_Func_base<void,ksRacing::OnSplitTimeEvent const &>Vtbl *vfptr;
};

/* 67250 */
struct std::_Func_base<void,ksRacing::OnRemoteLapEvent const &>
{
  std::_Func_base<void,ksRacing::OnRemoteLapEvent const &>Vtbl *vfptr;
};

/* 67264 */
struct std::_Func_base<void,OnSessionUpdateEvent const &>
{
  std::_Func_base<void,OnSessionUpdateEvent const &>Vtbl *vfptr;
};

/* 67207 */
struct ksRacing::WritableRaceStructureVtbl
{
  void *(__cdecl *__vecDelDtor)(ksRacing::WritableRaceStructure *this, unsigned int);
  void (__cdecl *ValidateStruct)(ksRacing::WritableRaceStructure *this);
  void (__cdecl *JsonToStruct)(ksRacing::WritableRaceStructure *this, rapidjson::GenericValue<rapidjson::UTF16<wchar_t>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator> > *);
  void (__cdecl *StructToJson)(ksRacing::WritableRaceStructure *this, rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF16<wchar_t>,rapidjson::CrtAllocator>,rapidjson::UTF16<wchar_t>,rapidjson::UTF16<wchar_t>,rapidjson::CrtAllocator,0> *);
  void (__cdecl *writePacket)(ksRacing::WritableRaceStructure *this, UDPPacket *);
  void (__cdecl *readFromPacket)(ksRacing::WritableRaceStructure *this, UDPPacket *);
};

/* 67288 */
struct __cppobj std::allocator<std::pair<unsigned short,unsigned short> >
{
};

/* 67290 */
struct __cppobj std::_Vector_val<std::_Simple_types<std::pair<unsigned short,unsigned short> > > : std::_Container_base0
{
  std::pair<unsigned short,unsigned short> *_Myfirst;
  std::pair<unsigned short,unsigned short> *_Mylast;
  std::pair<unsigned short,unsigned short> *_Myend;
};

/* 67291 */
struct __cppobj std::_Compressed_pair<std::allocator<std::pair<unsigned short,unsigned short> >,std::_Vector_val<std::_Simple_types<std::pair<unsigned short,unsigned short> > >,1> : std::allocator<std::pair<unsigned short,unsigned short> >
{
  std::_Vector_val<std::_Simple_types<std::pair<unsigned short,unsigned short> > > _Myval2;
};

/* 67292 */
struct std::_Vector_alloc<std::_Vec_base_types<std::pair<unsigned short,unsigned short>,std::allocator<std::pair<unsigned short,unsigned short> > > >
{
  std::_Compressed_pair<std::allocator<std::pair<unsigned short,unsigned short> >,std::_Vector_val<std::_Simple_types<std::pair<unsigned short,unsigned short> > >,1> _Mypair;
};

/* 67293 */
struct __cppobj std::vector<std::pair<unsigned short,unsigned short>,std::allocator<std::pair<unsigned short,unsigned short> > > : std::_Vector_alloc<std::_Vec_base_types<std::pair<unsigned short,unsigned short>,std::allocator<std::pair<unsigned short,unsigned short> > > >
{
};

/* 67294 */
struct __cppobj std::allocator<ksRacing::SessionResult>
{
};

/* 67358 */
struct __cppobj std::_Vector_val<std::_Simple_types<ksRacing::SessionResult> > : std::_Container_base0
{
  ksRacing::SessionResult *_Myfirst;
  ksRacing::SessionResult *_Mylast;
  ksRacing::SessionResult *_Myend;
};

/* 67359 */
struct __cppobj std::_Compressed_pair<std::allocator<ksRacing::SessionResult>,std::_Vector_val<std::_Simple_types<ksRacing::SessionResult> >,1> : std::allocator<ksRacing::SessionResult>
{
  std::_Vector_val<std::_Simple_types<ksRacing::SessionResult> > _Myval2;
};

/* 67360 */
struct std::_Vector_alloc<std::_Vec_base_types<ksRacing::SessionResult,std::allocator<ksRacing::SessionResult> > >
{
  std::_Compressed_pair<std::allocator<ksRacing::SessionResult>,std::_Vector_val<std::_Simple_types<ksRacing::SessionResult> >,1> _Mypair;
};

/* 67361 */
struct __cppobj std::vector<ksRacing::SessionResult,std::allocator<ksRacing::SessionResult> > : std::_Vector_alloc<std::_Vec_base_types<ksRacing::SessionResult,std::allocator<ksRacing::SessionResult> > >
{
};

/* 67362 */
struct __cppobj ksRacing::EventResult : ksRacing::WritableRaceStructure
{
  std::vector<std::pair<unsigned short,unsigned short>,std::allocator<std::pair<unsigned short,unsigned short> > > carDrivers;
  std::vector<ksRacing::SessionResult,std::allocator<ksRacing::SessionResult> > sessions;
  std::vector<short,std::allocator<short> > points;
};

/* 67296 */
struct __cppobj __declspec(align(8)) ksRacing::TrackEvent : ksRacing::WritableRaceStructure
{
  unsigned int triggerSessionTime;
  _BYTE trackEvent[1];
  int value;
};

/* 57830 */
struct __cppobj std::allocator<int>
{
};

/* 57831 */
struct __cppobj std::_Vector_val<std::_Simple_types<int> > : std::_Container_base0
{
  int *_Myfirst;
  int *_Mylast;
  int *_Myend;
};

/* 57832 */
struct __cppobj std::_Compressed_pair<std::allocator<int>,std::_Vector_val<std::_Simple_types<int> >,1> : std::allocator<int>
{
  std::_Vector_val<std::_Simple_types<int> > _Myval2;
};

/* 57833 */
struct std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >
{
  std::_Compressed_pair<std::allocator<int>,std::_Vector_val<std::_Simple_types<int> >,1> _Mypair;
};

/* 57834 */
struct __cppobj std::vector<int,std::allocator<int> > : std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >
{
};

/* 67302 */
struct __cppobj __declspec(align(8)) ksRacing::Lap : ksRacing::WritableRaceStructure
{
  unsigned __int16 driverIndex;
  float timeStamp;
  int lapTime;
  std::vector<int,std::allocator<int> > splitTimes;
  unsigned __int16 lapStates;
};

/* 67308 */
struct __cppobj ksRacing::NextSessionPenalty : ksRacing::WritableRaceStructure
{
  unsigned __int16 carIndex;
  _BYTE penalty[1];
  unsigned int value;
};

/* 67314 */
struct __cppobj ksRacing::SessionPenalty : ksRacing::WritableRaceStructure
{
  unsigned __int16 carIndex;
  _BYTE penalty[1];
  unsigned int assignedAtSessionTime;
  unsigned int paidOnAtSessionTime;
  unsigned int value;
};

/* 67320 */
struct __cppobj __declspec(align(8)) ksRacing::WeatherStatus : ksRacing::WritableRaceStructure
{
  float ambientTemperature;
  float roadTemperature;
  float wetLevel;
  float windSpeed;
  float windDirection;
  float rainLevel;
  float cloudLevel;
};

/* 67326 */
struct __cppobj std::allocator<enum ksRacing::PitStopMistakeType>
{
};

/* 1737 */
enum ksRacing::LapStateFlags
{
  HasCut = 0x0,
  IsInvalidLap = 0x1,
  HasPenalty = 0x2,
  IsOutLap = 0x3,
  IsInLap = 0x4,
  IsFormationLap = 0x5,
  IsSafetyCarOnTrack = 0x6,
  IsFullCourseYellow = 0x7,
  IsRetired = 0x8,
  IsDisqualified = 0x9,
  IsOnPitWorkingZone = 0xA,
  DriverSwap = 0xB,
};

/* 1750 */
typedef ksRacing::LapStateFlags ksRacing::PitStopMistakeType;

/* 67327 */
struct __cppobj std::_Vector_val<std::_Simple_types<enum ksRacing::PitStopMistakeType> > : std::_Container_base0
{
  ksRacing::PitStopMistakeType *_Myfirst;
  ksRacing::PitStopMistakeType *_Mylast;
  ksRacing::PitStopMistakeType *_Myend;
};

/* 67328 */
struct __cppobj std::_Compressed_pair<std::allocator<enum ksRacing::PitStopMistakeType>,std::_Vector_val<std::_Simple_types<enum ksRacing::PitStopMistakeType> >,1> : std::allocator<enum ksRacing::PitStopMistakeType>
{
  std::_Vector_val<std::_Simple_types<enum ksRacing::PitStopMistakeType> > _Myval2;
};

/* 67329 */
struct std::_Vector_alloc<std::_Vec_base_types<enum ksRacing::PitStopMistakeType,std::allocator<enum ksRacing::PitStopMistakeType> > >
{
  std::_Compressed_pair<std::allocator<enum ksRacing::PitStopMistakeType>,std::_Vector_val<std::_Simple_types<enum ksRacing::PitStopMistakeType> >,1> _Mypair;
};

/* 67330 */
struct __cppobj std::vector<enum ksRacing::PitStopMistakeType,std::allocator<enum ksRacing::PitStopMistakeType> > : std::_Vector_alloc<std::_Vec_base_types<enum ksRacing::PitStopMistakeType,std::allocator<enum ksRacing::PitStopMistakeType> > >
{
};

/* 67331 */
struct __cppobj std::allocator<enum ksRacing::PitStopRepairType>
{
};

/* 1751 */
enum ksRacing::PitStopRepairType
{
  Chassis = 0x0,
  SuspensionLF = 0x1,
  SuspensionRF = 0x2,
  SuspensionLR = 0x3,
  SuspensionRR = 0x4,
  Brakes = 0x5,
  Radiator = 0x6,
  GearBox = 0x7,
};

/* 67332 */
struct __cppobj std::_Vector_val<std::_Simple_types<enum ksRacing::PitStopRepairType> > : std::_Container_base0
{
  ksRacing::PitStopRepairType *_Myfirst;
  ksRacing::PitStopRepairType *_Mylast;
  ksRacing::PitStopRepairType *_Myend;
};

/* 67333 */
struct __cppobj std::_Compressed_pair<std::allocator<enum ksRacing::PitStopRepairType>,std::_Vector_val<std::_Simple_types<enum ksRacing::PitStopRepairType> >,1> : std::allocator<enum ksRacing::PitStopRepairType>
{
  std::_Vector_val<std::_Simple_types<enum ksRacing::PitStopRepairType> > _Myval2;
};

/* 67334 */
struct std::_Vector_alloc<std::_Vec_base_types<enum ksRacing::PitStopRepairType,std::allocator<enum ksRacing::PitStopRepairType> > >
{
  std::_Compressed_pair<std::allocator<enum ksRacing::PitStopRepairType>,std::_Vector_val<std::_Simple_types<enum ksRacing::PitStopRepairType> >,1> _Mypair;
};

/* 67335 */
struct __cppobj std::vector<enum ksRacing::PitStopRepairType,std::allocator<enum ksRacing::PitStopRepairType> > : std::_Vector_alloc<std::_Vec_base_types<enum ksRacing::PitStopRepairType,std::allocator<enum ksRacing::PitStopRepairType> > >
{
};

/* 67336 */
struct __cppobj ksRacing::PitStopEvent : ksRacing::WritableRaceStructure
{
  unsigned int triggerSessionTime;
  unsigned __int16 currentDriverIndex;
  unsigned __int16 newDriverIndex;
  _BYTE speedType[1];
  unsigned __int16 newTyreSetIndex;
  unsigned int pitStopTimeLength;
  std::vector<enum ksRacing::PitStopMistakeType,std::allocator<enum ksRacing::PitStopMistakeType> > mistakes;
  std::vector<enum ksRacing::PitStopRepairType,std::allocator<enum ksRacing::PitStopRepairType> > repairs;
};

/* 67342 */
struct __cppobj std::allocator<ksRacing::TyreSet>
{
};

/* 67344 */
struct __cppobj std::_Vector_val<std::_Simple_types<ksRacing::TyreSet> > : std::_Container_base0
{
  ksRacing::TyreSet *_Myfirst;
  ksRacing::TyreSet *_Mylast;
  ksRacing::TyreSet *_Myend;
};

/* 67345 */
struct __cppobj std::_Compressed_pair<std::allocator<ksRacing::TyreSet>,std::_Vector_val<std::_Simple_types<ksRacing::TyreSet> >,1> : std::allocator<ksRacing::TyreSet>
{
  std::_Vector_val<std::_Simple_types<ksRacing::TyreSet> > _Myval2;
};

/* 67346 */
struct std::_Vector_alloc<std::_Vec_base_types<ksRacing::TyreSet,std::allocator<ksRacing::TyreSet> > >
{
  std::_Compressed_pair<std::allocator<ksRacing::TyreSet>,std::_Vector_val<std::_Simple_types<ksRacing::TyreSet> >,1> _Mypair;
};

/* 67347 */
struct __cppobj std::vector<ksRacing::TyreSet,std::allocator<ksRacing::TyreSet> > : std::_Vector_alloc<std::_Vec_base_types<ksRacing::TyreSet,std::allocator<ksRacing::TyreSet> > >
{
};

/* 67398 */
struct __cppobj ksRacing::CircuitEntity : ksRacing::WritableRaceStructure
{
  bool enabled;
  char pitNumber;
  char sectorCount;
  float formationTriggerNormalizedRangeStart;
  float formationTriggerNormalizedRangeEnd;
  float greenFlagTriggerNormalizedRangeStart;
  float greenFlagTriggerNormalizedRangeEnd;
  float baseGrip;
};

/* 67399 */
struct __cppobj std::allocator<ksRacing::CarEntity>
{
};

/* 67407 */
struct __cppobj std::_Vector_val<std::_Simple_types<ksRacing::CarEntity> > : std::_Container_base0
{
  ksRacing::CarEntity *_Myfirst;
  ksRacing::CarEntity *_Mylast;
  ksRacing::CarEntity *_Myend;
};

/* 67408 */
struct __cppobj std::_Compressed_pair<std::allocator<ksRacing::CarEntity>,std::_Vector_val<std::_Simple_types<ksRacing::CarEntity> >,1> : std::allocator<ksRacing::CarEntity>
{
  std::_Vector_val<std::_Simple_types<ksRacing::CarEntity> > _Myval2;
};

/* 67409 */
struct std::_Vector_alloc<std::_Vec_base_types<ksRacing::CarEntity,std::allocator<ksRacing::CarEntity> > >
{
  std::_Compressed_pair<std::allocator<ksRacing::CarEntity>,std::_Vector_val<std::_Simple_types<ksRacing::CarEntity> >,1> _Mypair;
};

/* 67410 */
struct __cppobj std::vector<ksRacing::CarEntity,std::allocator<ksRacing::CarEntity> > : std::_Vector_alloc<std::_Vec_base_types<ksRacing::CarEntity,std::allocator<ksRacing::CarEntity> > >
{
};

/* 67411 */
struct __cppobj ksRacing::CarSet : ksRacing::WritableRaceStructure
{
  std::vector<ksRacing::CarEntity,std::allocator<ksRacing::CarEntity> > cars;
};

/* 67412 */
struct __cppobj ksRacing::EventRaceRules : ksRacing::WritableRaceStructure
{
  char mandatoryPitStopToleranceCount;
  unsigned __int16 mandatoryPitStopDuration;
  char mandatoryPitStopCount;
  unsigned int maxStintTime;
  unsigned int extendedMaxStintTime;
  unsigned int specialProAm_D3_MaxStintTime;
  unsigned int extendedSpecialProAm_D3_MaxStintTime;
  unsigned int specialProAm_D3_MaxDrivingTime;
  unsigned int extendedSpecialProAm_D3_MaxDrivingTime;
  unsigned __int16 forcedTechnicalPitStopDuration;
  unsigned int forcedTechnicalPitStopTimeLimit;
  unsigned int maxContinuousDrivingTime;
  unsigned int maxDrivingTime;
  char penaltyLapLimit;
  unsigned int stintPenaltyTimeThresholdMins;
  unsigned int timeToEndOfRace;
  unsigned int timeToEndOfRacePenalty;
  unsigned int proAm_MinBronze_P_DrivingTime;
  unsigned int proAm_MinBronze_PP_DrivingTime;
  unsigned int proAm_MinBronzeTimePer24H_Stage;
  unsigned int am_MaxSilverDrivingTotalTime;
  unsigned int am_MinSilverTimePer24H_Stage;
  char firstEventNewTyreSetCount;
  char nextEventNewTyreSetCount;
  char nextEventUsedTyreSetCount;
  char bronzeSilverExtraNewTyreSetCount;
  char qualifyingRaceStartLimitedTyreSetCount;
  unsigned int pitWindowOpenAtTime;
  unsigned int pitWindowCloseAtTime;
  unsigned int singleDriverPitStopTime;
};

/* 67413 */
struct __cppobj std::allocator<ksRacing::SessionEntity>
{
};

/* 67415 */
struct __cppobj std::_Vector_val<std::_Simple_types<ksRacing::SessionEntity> > : std::_Container_base0
{
  ksRacing::SessionEntity *_Myfirst;
  ksRacing::SessionEntity *_Mylast;
  ksRacing::SessionEntity *_Myend;
};

/* 67416 */
struct __cppobj std::_Compressed_pair<std::allocator<ksRacing::SessionEntity>,std::_Vector_val<std::_Simple_types<ksRacing::SessionEntity> >,1> : std::allocator<ksRacing::SessionEntity>
{
  std::_Vector_val<std::_Simple_types<ksRacing::SessionEntity> > _Myval2;
};

/* 67417 */
struct std::_Vector_alloc<std::_Vec_base_types<ksRacing::SessionEntity,std::allocator<ksRacing::SessionEntity> > >
{
  std::_Compressed_pair<std::allocator<ksRacing::SessionEntity>,std::_Vector_val<std::_Simple_types<ksRacing::SessionEntity> >,1> _Mypair;
};

/* 67418 */
struct __cppobj std::vector<ksRacing::SessionEntity,std::allocator<ksRacing::SessionEntity> > : std::_Vector_alloc<std::_Vec_base_types<ksRacing::SessionEntity,std::allocator<ksRacing::SessionEntity> > >
{
};

/* 67419 */
struct __cppobj ksRacing::RaceEntity : ksRacing::WritableRaceStructure
{
  _BYTE eventType[1];
  ksRacing::EventRaceRules eventRaceRules;
  std::vector<ksRacing::SessionEntity,std::allocator<ksRacing::SessionEntity> > sessions;
};

/* 57846 */
struct __cppobj std::allocator<float>
{
};

/* 57847 */
struct __cppobj std::_Vector_val<std::_Simple_types<float> > : std::_Container_base0
{
  float *_Myfirst;
  float *_Mylast;
  float *_Myend;
};

/* 57848 */
struct __cppobj std::_Compressed_pair<std::allocator<float>,std::_Vector_val<std::_Simple_types<float> >,1> : std::allocator<float>
{
  std::_Vector_val<std::_Simple_types<float> > _Myval2;
};

/* 57849 */
struct std::_Vector_alloc<std::_Vec_base_types<float,std::allocator<float> > >
{
  std::_Compressed_pair<std::allocator<float>,std::_Vector_val<std::_Simple_types<float> >,1> _Mypair;
};

/* 57850 */
struct __cppobj std::vector<float,std::allocator<float> > : std::_Vector_alloc<std::_Vec_base_types<float,std::allocator<float> > >
{
};

/* 67420 */
struct __cppobj ksRacing::WeatherData : ksRacing::WritableRaceStructure
{
  char enabled;
  float sunlightMean;
  float sunlightAmplitude;
  float ambientTemperatureMean;
  float ambientTemperatureAmplitude;
  int nHarmonics;
  float weatherBaseMean;
  float weatherBaseDeviation;
  float variabilityMean;
  float variabilityDeviation;
  std::vector<float,std::allocator<float> > sineCoefficients;
  std::vector<float,std::allocator<float> > cosineCoefficients;
};

/* 67421 */
struct __cppobj __declspec(align(8)) ksRacing::EventEntity : ksRacing::WritableRaceStructure
{
  std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > trackName;
  ksRacing::CircuitEntity circuit;
  ksRacing::GraphicsRules graphics;
  ksRacing::CarSet carSet;
  ksRacing::RaceEntity race;
  ksRacing::WeatherStatus startupWeatherStatus;
  ksRacing::WeatherData startupWeatherData;
  float startupIdealLineGrip;
};

/* 67428 */
struct __cppobj std::allocator<std::function<void __cdecl(UDPMessage const &)> >
{
};

/* 67436 */
struct __cppobj std::_Vector_val<std::_Simple_types<std::function<void __cdecl(UDPMessage const &)> > > : std::_Container_base0
{
  std::function<void __cdecl(UDPMessage const &)> *_Myfirst;
  std::function<void __cdecl(UDPMessage const &)> *_Mylast;
  std::function<void __cdecl(UDPMessage const &)> *_Myend;
};

/* 67437 */
struct __cppobj std::_Compressed_pair<std::allocator<std::function<void __cdecl(UDPMessage const &)> >,std::_Vector_val<std::_Simple_types<std::function<void __cdecl(UDPMessage const &)> > >,1> : std::allocator<std::function<void __cdecl(UDPMessage const &)> >
{
  std::_Vector_val<std::_Simple_types<std::function<void __cdecl(UDPMessage const &)> > > _Myval2;
};

/* 67438 */
struct std::_Vector_alloc<std::_Vec_base_types<std::function<void __cdecl(UDPMessage const &)>,std::allocator<std::function<void __cdecl(UDPMessage const &)> > > >
{
  std::_Compressed_pair<std::allocator<std::function<void __cdecl(UDPMessage const &)> >,std::_Vector_val<std::_Simple_types<std::function<void __cdecl(UDPMessage const &)> > >,1> _Mypair;
};

/* 67439 */
struct __cppobj std::vector<std::function<void __cdecl(UDPMessage const &)>,std::allocator<std::function<void __cdecl(UDPMessage const &)> > > : std::_Vector_alloc<std::_Vec_base_types<std::function<void __cdecl(UDPMessage const &)>,std::allocator<std::function<void __cdecl(UDPMessage const &)> > > >
{
};

/* 67440 */
struct UDPSocket
{
  unsigned __int64 soc;
  bool isBlocking;
  std::vector<std::function<void __cdecl(UDPMessage const &)>,std::allocator<std::function<void __cdecl(UDPMessage const &)> > > listeners;
  unsigned __int16 ping;
  bool shutdownFlag;
  long double lastPingTime;
};

/* 67446 */
struct Concurrency::details::_Concurrent_queue_base_v4
{
  Concurrency::details::_Concurrent_queue_base_v4Vtbl *vfptr;
  Concurrency::details::_Concurrent_queue_rep *_My_rep;
  unsigned __int64 _Items_per_page;
  unsigned __int64 _Item_size;
};

/* 58290 */
struct __cppobj std::allocator<char>
{
};

/* 67453 */
struct __cppobj __declspec(align(8)) Concurrency::concurrent_queue<unsigned __int64,std::allocator<unsigned __int64> > : Concurrency::details::_Concurrent_queue_base_v4
{
  std::allocator<char> _My_allocator;
};

/* 67454 */
struct BufferedChannel<unsigned __int64>
{
  Concurrency::concurrent_queue<unsigned __int64,std::allocator<unsigned __int64> > queue;
};

/* 67455 */
struct __declspec(align(8)) _Thrd_imp_t
{
  void *_Hnd;
  unsigned int _Id;
};

/* 67456 */
struct std::thread
{
  _Thrd_imp_t _Thr;
};

/* 67457 */
struct TCPQueue
{
  char buffer[65536];
  unsigned int cursor;
};

/* 67458 */
struct __declspec(align(8)) TCPSocket
{
  BufferedChannel<unsigned __int64> chNewConnections;
  std::vector<std::function<void __cdecl(UDPMessage const &)>,std::allocator<std::function<void __cdecl(UDPMessage const &)> > > listeners;
  std::thread listenerThread;
  bool isExiting;
  char *recvBuffer;
  unsigned __int64 soc;
  unsigned __int64 listenSock;
  bool isBlocking;
  bool isServer;
  TCPQueue buffer;
  int errorCount;
};

/* 67171 */
struct ICollisionCallback
{
  ICollisionCallbackVtbl *vfptr;
};

/* 67177 */
struct __cppobj std::allocator<Car *>
{
};

/* 67178 */
struct __cppobj std::_Vector_val<std::_Simple_types<Car *> > : std::_Container_base0
{
  Car **_Myfirst;
  Car **_Mylast;
  Car **_Myend;
};

/* 67179 */
struct __cppobj std::_Compressed_pair<std::allocator<Car *>,std::_Vector_val<std::_Simple_types<Car *> >,1> : std::allocator<Car *>
{
  std::_Vector_val<std::_Simple_types<Car *> > _Myval2;
};

/* 67180 */
struct std::_Vector_alloc<std::_Vec_base_types<Car *,std::allocator<Car *> > >
{
  std::_Compressed_pair<std::allocator<Car *>,std::_Vector_val<std::_Simple_types<Car *> >,1> _Mypair;
};

/* 67181 */
struct __cppobj std::vector<Car *,std::allocator<Car *> > : std::_Vector_alloc<std::_Vec_base_types<Car *,std::allocator<Car *> > >
{
};

/* 67182 */
struct __cppobj std::allocator<NetCarStateProvider *>
{
};

/* 67494 */
struct __cppobj std::_Vector_val<std::_Simple_types<NetCarStateProvider *> > : std::_Container_base0
{
  NetCarStateProvider **_Myfirst;
  NetCarStateProvider **_Mylast;
  NetCarStateProvider **_Myend;
};

/* 67495 */
struct __cppobj std::_Compressed_pair<std::allocator<NetCarStateProvider *>,std::_Vector_val<std::_Simple_types<NetCarStateProvider *> >,1> : std::allocator<NetCarStateProvider *>
{
  std::_Vector_val<std::_Simple_types<NetCarStateProvider *> > _Myval2;
};

/* 67496 */
struct std::_Vector_alloc<std::_Vec_base_types<NetCarStateProvider *,std::allocator<NetCarStateProvider *> > >
{
  std::_Compressed_pair<std::allocator<NetCarStateProvider *>,std::_Vector_val<std::_Simple_types<NetCarStateProvider *> >,1> _Mypair;
};

/* 67497 */
struct __cppobj std::vector<NetCarStateProvider *,std::allocator<NetCarStateProvider *> > : std::_Vector_alloc<std::_Vec_base_types<NetCarStateProvider *,std::allocator<NetCarStateProvider *> > >
{
};

/* 67498 */
struct __cppobj __declspec(align(8)) Concurrency::concurrent_queue<ACPhysicsEvent,std::allocator<ACPhysicsEvent> > : Concurrency::details::_Concurrent_queue_base_v4
{
  std::allocator<char> _My_allocator;
};

/* 67157 */
struct __cppobj std::allocator<std::pair<void *,std::function<void __cdecl(double const &)> > >
{
};

/* 67165 */
struct __cppobj std::_Vector_val<std::_Simple_types<std::pair<void *,std::function<void __cdecl(double const &)> > > > : std::_Container_base0
{
  std::pair<void *,std::function<void __cdecl(double const &)> > *_Myfirst;
  std::pair<void *,std::function<void __cdecl(double const &)> > *_Mylast;
  std::pair<void *,std::function<void __cdecl(double const &)> > *_Myend;
};

/* 67166 */
struct __cppobj std::_Compressed_pair<std::allocator<std::pair<void *,std::function<void __cdecl(double const &)> > >,std::_Vector_val<std::_Simple_types<std::pair<void *,std::function<void __cdecl(double const &)> > > >,1> : std::allocator<std::pair<void *,std::function<void __cdecl(double const &)> > >
{
  std::_Vector_val<std::_Simple_types<std::pair<void *,std::function<void __cdecl(double const &)> > > > _Myval2;
};

/* 67167 */
struct std::_Vector_alloc<std::_Vec_base_types<std::pair<void *,std::function<void __cdecl(double const &)> >,std::allocator<std::pair<void *,std::function<void __cdecl(double const &)> > > > >
{
  std::_Compressed_pair<std::allocator<std::pair<void *,std::function<void __cdecl(double const &)> > >,std::_Vector_val<std::_Simple_types<std::pair<void *,std::function<void __cdecl(double const &)> > > >,1> _Mypair;
};

/* 67168 */
struct __cppobj std::vector<std::pair<void *,std::function<void __cdecl(double const &)> >,std::allocator<std::pair<void *,std::function<void __cdecl(double const &)> > > > : std::_Vector_alloc<std::_Vec_base_types<std::pair<void *,std::function<void __cdecl(double const &)> >,std::allocator<std::pair<void *,std::function<void __cdecl(double const &)> > > > >
{
};

/* 67169 */
struct Event<double>
{
  std::vector<std::pair<void *,std::function<void __cdecl(double const &)> >,std::allocator<std::pair<void *,std::function<void __cdecl(double const &)> > > > handlers;
};

/* 67499 */
struct __cppobj std::allocator<std::pair<void *,std::function<void __cdecl(SessionInfo const &)> > >
{
};

/* 67508 */
struct __cppobj std::_Vector_val<std::_Simple_types<std::pair<void *,std::function<void __cdecl(SessionInfo const &)> > > > : std::_Container_base0
{
  std::pair<void *,std::function<void __cdecl(SessionInfo const &)> > *_Myfirst;
  std::pair<void *,std::function<void __cdecl(SessionInfo const &)> > *_Mylast;
  std::pair<void *,std::function<void __cdecl(SessionInfo const &)> > *_Myend;
};

/* 67509 */
struct __cppobj std::_Compressed_pair<std::allocator<std::pair<void *,std::function<void __cdecl(SessionInfo const &)> > >,std::_Vector_val<std::_Simple_types<std::pair<void *,std::function<void __cdecl(SessionInfo const &)> > > >,1> : std::allocator<std::pair<void *,std::function<void __cdecl(SessionInfo const &)> > >
{
  std::_Vector_val<std::_Simple_types<std::pair<void *,std::function<void __cdecl(SessionInfo const &)> > > > _Myval2;
};

/* 67510 */
struct std::_Vector_alloc<std::_Vec_base_types<std::pair<void *,std::function<void __cdecl(SessionInfo const &)> >,std::allocator<std::pair<void *,std::function<void __cdecl(SessionInfo const &)> > > > >
{
  std::_Compressed_pair<std::allocator<std::pair<void *,std::function<void __cdecl(SessionInfo const &)> > >,std::_Vector_val<std::_Simple_types<std::pair<void *,std::function<void __cdecl(SessionInfo const &)> > > >,1> _Mypair;
};

/* 67511 */
struct __cppobj std::vector<std::pair<void *,std::function<void __cdecl(SessionInfo const &)> >,std::allocator<std::pair<void *,std::function<void __cdecl(SessionInfo const &)> > > > : std::_Vector_alloc<std::_Vec_base_types<std::pair<void *,std::function<void __cdecl(SessionInfo const &)> >,std::allocator<std::pair<void *,std::function<void __cdecl(SessionInfo const &)> > > > >
{
};

/* 67512 */
struct Event<SessionInfo>
{
  std::vector<std::pair<void *,std::function<void __cdecl(SessionInfo const &)> >,std::allocator<std::pair<void *,std::function<void __cdecl(SessionInfo const &)> > > > handlers;
};

/* 67513 */
struct PhysicsSettings
{
  float slipVibrationThresholdMin;
  float slipVibrationThresholdMax;
  float slipVibrationStrength;
  float puddlesGain;
  float marblesAccumulationGain;
  float marblesDissipationGain;
  float marblesMuK;
  float marblesGrooveK;
  float idealLineWidth;
  bool useRaycastWheels;
  float flatSpotVibrationStrength;
};

/* 67532 */
struct __cppobj std::allocator<SlipStream *>
{
};

/* 67533 */
struct __cppobj std::_Vector_val<std::_Simple_types<SlipStream *> > : std::_Container_base0
{
  SlipStream **_Myfirst;
  SlipStream **_Mylast;
  SlipStream **_Myend;
};

/* 67534 */
struct __cppobj std::_Compressed_pair<std::allocator<SlipStream *>,std::_Vector_val<std::_Simple_types<SlipStream *> >,1> : std::allocator<SlipStream *>
{
  std::_Vector_val<std::_Simple_types<SlipStream *> > _Myval2;
};

/* 67535 */
struct std::_Vector_alloc<std::_Vec_base_types<SlipStream *,std::allocator<SlipStream *> > >
{
  std::_Compressed_pair<std::allocator<SlipStream *>,std::_Vector_val<std::_Simple_types<SlipStream *> >,1> _Mypair;
};

/* 67536 */
struct __cppobj std::vector<SlipStream *,std::allocator<SlipStream *> > : std::_Vector_alloc<std::_Vec_base_types<SlipStream *,std::allocator<SlipStream *> > >
{
};

/* 67537 */
struct CoreCPUTimes
{
  long double solverTime;
  long double collisionTime;
  int contactPoints;
  int narrowPhaseTests;
};

/* 67538 */
struct __declspec(align(8)) PhysicsCPUTimes
{
  long double carStep;
  CoreCPUTimes coreCPUTimes;
  int currentCPU;
};

/* 67539 */
struct SteerMzLowSpeedReduction
{
  float speedKMH;
  float minValue;
};

/* 66821 */
struct vec3d
{
  long double x;
  long double y;
  long double z;
};

/* 66896 */
struct Speed
{
  float value;
};

/* 67540 */
struct Wind
{
  vec3d vector;
  Speed speed;
  long double directionDeg;
};

/* 1275 */
enum EOnlineServerConnectionStatus::Type
{
  Normal = 0x0,
  NotConnected = 0x1,
  Connected = 0x2,
  ConnectionDropped = 0x3,
  NoNetworkConnection = 0x4,
  ServiceUnavailable = 0x5,
  UpdateRequired = 0x6,
  ServersTooBusy = 0x7,
  DuplicateLoginDetected = 0x8,
  InvalidUser = 0x9,
  NotAuthorized = 0xA,
  InvalidSession = 0xB,
};

/* 1735 */
typedef EOnlineServerConnectionStatus::Type PhysicsRaceState;

/* 66809 */
struct __cppobj std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >
{
};

/* 66810 */
struct __cppobj std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > : std::_Container_base0
{
  std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > *_Myfirst;
  std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > *_Mylast;
  std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > *_Myend;
};

/* 66811 */
struct __cppobj std::_Compressed_pair<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >,std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >,1> : std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >
{
  std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > _Myval2;
};

/* 66812 */
struct std::_Vector_alloc<std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > >
{
  std::_Compressed_pair<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >,std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >,1> _Mypair;
};

/* 66813 */
struct __cppobj std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > : std::_Vector_alloc<std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > >
{
};

/* 67617 */
struct __cppobj std::default_delete<ThreadPool>
{
};

/* 67642 */
struct __cppobj std::_Compressed_pair<std::default_delete<ThreadPool>,ThreadPool *,1> : std::default_delete<ThreadPool>
{
  ThreadPool *_Myval2;
};

/* 67643 */
struct std::_Unique_ptr_base<ThreadPool,std::default_delete<ThreadPool> >
{
  std::_Compressed_pair<std::default_delete<ThreadPool>,ThreadPool *,1> _Mypair;
};

/* 67644 */
struct __cppobj std::unique_ptr<ThreadPool,std::default_delete<ThreadPool> > : std::_Unique_ptr_base<ThreadPool,std::default_delete<ThreadPool> >
{
};

/* 66801 */
struct __cppobj std::allocator<CubicSpline<float,float>::Element>
{
};

/* 66803 */
struct __cppobj std::_Vector_val<std::_Simple_types<CubicSpline<float,float>::Element> > : std::_Container_base0
{
  CubicSpline<float,float>::Element *_Myfirst;
  CubicSpline<float,float>::Element *_Mylast;
  CubicSpline<float,float>::Element *_Myend;
};

/* 66804 */
struct __cppobj std::_Compressed_pair<std::allocator<CubicSpline<float,float>::Element>,std::_Vector_val<std::_Simple_types<CubicSpline<float,float>::Element> >,1> : std::allocator<CubicSpline<float,float>::Element>
{
  std::_Vector_val<std::_Simple_types<CubicSpline<float,float>::Element> > _Myval2;
};

/* 66805 */
struct std::_Vector_alloc<std::_Vec_base_types<CubicSpline<float,float>::Element,std::allocator<CubicSpline<float,float>::Element> > >
{
  std::_Compressed_pair<std::allocator<CubicSpline<float,float>::Element>,std::_Vector_val<std::_Simple_types<CubicSpline<float,float>::Element> >,1> _Mypair;
};

/* 66806 */
struct __cppobj std::vector<CubicSpline<float,float>::Element,std::allocator<CubicSpline<float,float>::Element> > : std::_Vector_alloc<std::_Vec_base_types<CubicSpline<float,float>::Element,std::allocator<CubicSpline<float,float>::Element> > >
{
};

/* 66799 */
struct CubicSpline<float,float>
{
  CubicSpline<float,float>Vtbl *vfptr;
  std::vector<CubicSpline<float,float>::Element,std::allocator<CubicSpline<float,float>::Element> > mElements;
};

/* 66797 */
struct Curve
{
  CurveVtbl *vfptr;
  std::vector<float,std::allocator<float> > references;
  std::vector<float,std::allocator<float> > values;
  float fastStep;
  bool cubicSplineReady;
  CubicSpline<float,float> cSpline;
  std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > filename;
};

/* 67645 */
struct DynamicTempData
{
  Curve temperatureCurve;
  long double temperatureStartTime;
  float baseRoad;
  float baseAir;
};

/* 67184 */
struct __cppobj PhysicsEngine : ICollisionCallback
{
  std::vector<Car *,std::allocator<Car *> > cars;
  std::vector<NetCarStateProvider *,std::allocator<NetCarStateProvider *> > netPhysicsProviders;
  long double physicsTime;
  bool validated;
  Concurrency::concurrent_queue<ACPhysicsEvent,std::allocator<ACPhysicsEvent> > eventQueue;
  Event<double> evOnStepCompleted;
  Event<double> evOnPreStep;
  Event<SessionInfo> evOnNewSessionPhysics;
  bool allowTyreBlankets;
  long double lockGearboxAtStartTimeMS;
  float fuelConsumptionRate;
  float tyreConsumptionRate;
  int allowedTyresOut;
  PhysicsSettings settings;
  DirectInput *directInput;
  std::vector<SlipStream *,std::allocator<SlipStream *> > slipStreams;
  long double gameTime;
  float ambientTemperature;
  float roadTemperature;
  float mechanicalDamageRate;
  PhysicsCPUTimes physicsCPUTimes;
  const float flatSpotFFGain;
  SteerMzLowSpeedReduction mzLowSpeedReduction;
  float gyroWheelGain;
  float damperMinValue;
  float damperGain;
  Wind wind;
  float rainGlobalLevel;
  float rainRealism;
  bool isMasterFrame;
  PhysicsRaceState raceState;
  SessionInfo sessionInfo;
  PhysicsCore *core;
  Track *track;
  IDebugVisualizer *debugVisualizer;
  unsigned int stepCounter;
  std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > legalTyreList;
  std::unique_ptr<ThreadPool,std::default_delete<ThreadPool> > pool;
  DynamicTempData dynamicTemp;
  Car *playerControlledCar;
};

/* 66815 */
struct vec3f
{
  float x;
  float y;
  float z;
};

/* 67469 */
struct __declspec(align(8)) ClientCollisionEvent
{
  NetCarStateProvider *netCar;
  float speed;
  vec3f worldPos;
  vec3f relPos;
};

/* 65 */
enum ELevelTick
{
  LEVELTICK_TimeOnly = 0x0,
  LEVELTICK_ViewportsOnly = 0x1,
  LEVELTICK_All = 0x2,
  LEVELTICK_PauseTick = 0x3,
};

/* 400 */
enum ENamedThreads::Type
{
  UnusedAnchor = 0xFFFFFFFF,
  RHIThread = 0x0,
  AudioThread = 0x1,
  GameThread = 0x2,
  ActualRenderingThread = 0x3,
  AnyThread = 0xFF,
  MainQueue = 0x0,
  LocalQueue = 0x100,
  NumQueues = 0x2,
  ThreadIndexMask = 0xFF,
  QueueIndexMask = 0x100,
  QueueIndexShift = 0x8,
  NormalTaskPriority = 0x0,
  HighTaskPriority = 0x200,
  NumTaskPriorities = 0x2,
  TaskPriorityMask = 0x200,
  TaskPriorityShift = 0x9,
  NormalThreadPriority = 0x0,
  HighThreadPriority = 0x400,
  BackgroundThreadPriority = 0x800,
  NumThreadPriorities = 0x3,
  ThreadPriorityMask = 0xC00,
  ThreadPriorityShift = 0xA,
  GameThread_Local = 0x102,
  ActualRenderingThread_Local = 0x103,
  AnyHiPriThreadNormalTask = 0x4FF,
  AnyHiPriThreadHiPriTask = 0x6FF,
  AnyNormalThreadNormalTask = 0xFF,
  AnyNormalThreadHiPriTask = 0x2FF,
  AnyBackgroundThreadNormalTask = 0x8FF,
  AnyBackgroundHiPriTask = 0xAFF,
};

/* 4438 */
struct FTickFunctionVtbl
{
  void *(__cdecl *__vecDelDtor)(FTickFunction *this, unsigned int);
  void (__cdecl *ExecuteTick)(FTickFunction *this, float, ELevelTick, ENamedThreads::Type, TRefCountPtr<FGraphEvent> *);
  FString *(__cdecl *DiagnosticMessage)(FTickFunction *this, FString *result);
};

/* 4445 */
struct TSparseArray<TSetElement<FTickFunction *>,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<16,8> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 4446 */
struct __declspec(align(8)) TSet<FTickFunction *,DefaultKeyFuncs<FTickFunction *,0>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<FTickFunction *>,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 4447 */
struct FTickTaskLevel::FCoolingDownTickFunctionList
{
  FTickFunction *Head;
};

/* 4448 */
struct TArray<FTickTaskLevel::FTickScheduleDetails,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 4449 */
struct __cppobj TArrayWithThreadsafeAdd<FTickTaskLevel::FTickScheduleDetails,FDefaultAllocator> : TArray<FTickTaskLevel::FTickScheduleDetails,FDefaultAllocator>
{
};

/* 67 */
enum ETickingGroup
{
  TG_PrePhysics = 0x0,
  TG_StartPhysics = 0x1,
  TG_DuringPhysics = 0x2,
  TG_EndPhysics = 0x3,
  TG_PostPhysics = 0x4,
  TG_PostUpdateWork = 0x5,
  TG_LastDemotable = 0x6,
  TG_NewlySpawned = 0x7,
  TG_MAX = 0x8,
};

/* 6805 */
struct FTickContext
{
  float DeltaSeconds;
  ELevelTick TickType;
  ETickingGroup TickGroup;
  ENamedThreads::Type Thread;
  UWorld *World;
};

/* 5666 */
struct __declspec(align(8)) FTickTaskLevel
{
  FTickTaskSequencer *TickTaskSequencer;
  TSet<FTickFunction *,DefaultKeyFuncs<FTickFunction *,0>,FDefaultSetAllocator> AllEnabledTickFunctions;
  FTickTaskLevel::FCoolingDownTickFunctionList AllCoolingDownTickFunctions;
  TSet<FTickFunction *,DefaultKeyFuncs<FTickFunction *,0>,FDefaultSetAllocator> AllDisabledTickFunctions;
  TArrayWithThreadsafeAdd<FTickTaskLevel::FTickScheduleDetails,FDefaultAllocator> TickFunctionsToReschedule;
  TSet<FTickFunction *,DefaultKeyFuncs<FTickFunction *,0>,FDefaultSetAllocator> NewlySpawnedTickFunctions;
  FTickContext Context;
  bool bTickNewlySpawned;
};

/* 4196 */
struct IInterface_AssetUserData
{
  IInterface_AssetUserDataVtbl *vfptr;
};

/* 6806 */
struct __cppobj FActorComponentTickFunction : FTickFunction
{
  UActorComponent *Target;
};

/* 4199 */
const struct TArray<UAssetUserData *,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 6807 */
struct TArray<FSimpleMemberReference,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 6808 */
struct __cppobj TBaseDynamicMulticastDelegate<FWeakObjectPtr,void,UActorComponent *,bool> : TMulticastScriptDelegate<FWeakObjectPtr>
{
};

/* 6809 */
struct __cppobj FActorComponentActivatedSignature : TBaseDynamicMulticastDelegate<FWeakObjectPtr,void,UActorComponent *,bool>
{
};

/* 6810 */
struct __cppobj TBaseDynamicMulticastDelegate<FWeakObjectPtr,void,UActorComponent *> : TMulticastScriptDelegate<FWeakObjectPtr>
{
};

/* 6811 */
struct __cppobj FActorComponentDeactivateSignature : TBaseDynamicMulticastDelegate<FWeakObjectPtr,void,UActorComponent *>
{
};

/* 4463 */
struct __cppobj UActorComponent : UObject, IInterface_AssetUserData
{
  FActorComponentTickFunction PrimaryComponentTick;
  TArray<FName,FDefaultAllocator> ComponentTags;
  TArray<UAssetUserData *,FDefaultAllocator> AssetUserData;
  __int8 bRegistered : 1;
  __int8 bRenderStateCreated : 1;
  __int8 bPhysicsStateCreated : 1;
  __int8 bReplicates : 1;
  __int8 bNetAddressable : 1;
  __int8 bRenderStateDirty : 1;
  __int8 bRenderTransformDirty : 1;
  __int8 bRenderDynamicDataDirty : 1;
  __int8 bRoutedPostRename : 1;
  __int8 bAutoRegister : 1;
  __int8 bAllowReregistration : 1;
  __int8 bTickInEditor : 1;
  __int8 bNeverNeedsRenderUpdate : 1;
  __int8 bAllowConcurrentTick : 1;
  __int8 bAllowAnyoneToDestroyMe : 1;
  __int8 bAutoActivate : 1;
  __int8 bIsActive : 1;
  __int8 bEditableWhenInherited : 1;
  __int8 bNavigationRelevant : 1;
  __int8 bCanEverAffectNavigation : 1;
  __int8 bWantsInitializeComponent : 1;
  __int8 bWantsBeginPlay : 1;
  __int8 bIsEditorOnly : 1;
  __int8 bHasBeenCreated : 1;
  __int8 bHasBeenInitialized : 1;
  __int8 bHasBegunPlay : 1;
  __int8 bIsBeingDestroyed : 1;
  __int8 bTickFunctionsRegistered : 1;
  __int8 bIsNetStartupComponent : 1;
  __int8 MarkedForEndOfFrameUpdateState : 2;
  _BYTE CreationMethod[1];
  TArray<FSimpleMemberReference,FDefaultAllocator> UCSModifiedProperties;
  FActorComponentActivatedSignature OnComponentActivated;
  FActorComponentDeactivateSignature OnComponentDeactivated;
  AActor *OwnerPrivate;
  UWorld *WorldPrivate;
};

/* 6812 */
struct __cppobj TWeakObjectPtr<APhysicsVolume,FWeakObjectPtr> : FWeakObjectPtr
{
};

/* 6813 */
struct TArray<USceneComponent *,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 4388 */
union __m128
{
  float m128_f32[4];
  unsigned __int64 m128_u64[2];
  char m128_i8[16];
  __int16 m128_i16[8];
  int m128_i32[4];
  __int64 m128_i64[2];
  char m128_u8[16];
  unsigned __int16 m128_u16[8];
  unsigned int m128_u32[4];
};

/* 4398 */
struct FTransform
{
  __m128 Rotation;
  __m128 Translation;
  __m128 Scale3D;
};

/* 6814 */
struct TEnumAsByte<enum EComponentMobility::Type>
{
  char Value;
};

/* 6152 */
struct TEnumAsByte<enum EDetailMode>
{
  char Value;
};

/* 3829 */
struct FQuat
{
  float X;
  float Y;
  float Z;
  float W;
};

/* 6815 */
struct __declspec(align(8)) FRotationConversionCache
{
  FQuat CachedQuat;
  FRotator CachedRotator;
};

/* 6816 */
struct __cppobj TBaseDynamicMulticastDelegate<FWeakObjectPtr,void,APhysicsVolume *> : TMulticastScriptDelegate<FWeakObjectPtr>
{
};

/* 6817 */
struct __cppobj FPhysicsVolumeChanged : TBaseDynamicMulticastDelegate<FWeakObjectPtr,void,APhysicsVolume *>
{
};

/* 6818 */
struct TArray<FScopedMovementUpdate *,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 4184 */
struct TArray<FDelegateBase,FHeapAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 4185 */
struct FMulticastDelegateBase<FWeakObjectPtr>
{
  TArray<FDelegateBase,FHeapAllocator> InvocationList;
  int CompactionThreshold;
  int InvocationListLockCount;
};

/* 6819 */
struct __cppobj TBaseMulticastDelegate<void,USceneComponent *,enum EUpdateTransformFlags,enum ETeleportType> : FMulticastDelegateBase<FWeakObjectPtr>
{
};

/* 6820 */
struct __cppobj FTransformUpdated : TBaseMulticastDelegate<void,USceneComponent *,enum EUpdateTransformFlags,enum ETeleportType>
{
};

/* 4459 */
struct __cppobj __declspec(align(16)) USceneComponent : UActorComponent
{
  FLevelCollection *CachedLevelCollection;
  TWeakObjectPtr<APhysicsVolume,FWeakObjectPtr> PhysicsVolume;
  USceneComponent *AttachParent;
  FName AttachSocketName;
  TArray<USceneComponent *,FDefaultAllocator> AttachChildren;
  TArray<USceneComponent *,FDefaultAllocator> ClientAttachedChildren;
  FName NetOldAttachSocketName;
  USceneComponent *NetOldAttachParent;
  FBoxSphereBounds Bounds;
  FVector RelativeLocation;
  FRotator RelativeRotation;
  FVector RelativeScale3D;
  FTransform ComponentToWorld;
  FVector ComponentVelocity;
  __int8 bComponentToWorldUpdated : 1;
  __int8 bSkipUpdateOverlaps : 1;
  __int8 bAbsoluteLocation : 1;
  __int8 bAbsoluteRotation : 1;
  __int8 bAbsoluteScale : 1;
  __int8 bVisible : 1;
  __int8 bHiddenInGame : 1;
  __int8 bShouldUpdatePhysicsVolume : 1;
  __int8 bBoundsChangeTriggersStreamingDataRebuild : 1;
  __int8 bUseAttachParentBound : 1;
  __int8 bDisableDetachmentUpdateOverlaps : 1;
  __int8 bWantsOnUpdateTransform : 1;
  __int8 bNetUpdateTransform : 1;
  __int8 bNetUpdateAttachment : 1;
  __int8 bAbsoluteTranslation_DEPRECATED : 1;
  TEnumAsByte<enum EComponentMobility::Type> Mobility;
  TEnumAsByte<enum EDetailMode> DetailMode;
  FRotationConversionCache WorldRotationCache;
  FRotationConversionCache RelativeRotationCache;
  FPhysicsVolumeChanged PhysicsVolumeChangedDelegate;
  TArray<FScopedMovementUpdate *,FDefaultAllocator> ScopedMovementStack;
  FTransformUpdated TransformUpdated;
};

/* 4464 */
struct TArray<FInputKeyBinding,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 4465 */
struct TArray<FInputTouchBinding,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 4466 */
struct TArray<FInputAxisBinding,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 4467 */
struct TArray<FInputAxisKeyBinding,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 4468 */
struct TArray<FInputVectorAxisBinding,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 4469 */
struct TArray<FInputGestureBinding,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 4470 */
struct TArray<TSharedPtr<FInputActionBinding,0>,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 4471 */
struct TArray<FCachedKeyToActionInfo,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 4472 */
struct __cppobj __declspec(align(4)) UInputComponent : UActorComponent
{
  TArray<FInputKeyBinding,FDefaultAllocator> KeyBindings;
  TArray<FInputTouchBinding,FDefaultAllocator> TouchBindings;
  TArray<FInputAxisBinding,FDefaultAllocator> AxisBindings;
  TArray<FInputAxisKeyBinding,FDefaultAllocator> AxisKeyBindings;
  TArray<FInputVectorAxisBinding,FDefaultAllocator> VectorAxisBindings;
  TArray<FInputGestureBinding,FDefaultAllocator> GestureBindings;
  TArray<TSharedPtr<FInputActionBinding,0>,FDefaultAllocator> ActionBindings;
  TArray<FCachedKeyToActionInfo,FDefaultAllocator> CachedKeyToActionInfo;
  int Priority;
  __int8 bBlockInput : 1;
};

/* 4473 */
struct INavAgentInterface
{
  INavAgentInterfaceVtbl *vfptr;
};

/* 4485 */
struct TSubclassOf<AController>
{
  UClass *Class;
};

/* 4501 */
struct __cppobj __declspec(align(8)) APawn : AActor, INavAgentInterface
{
  unsigned __int32 bUseControllerRotationPitch : 1;
  unsigned __int32 bUseControllerRotationYaw : 1;
  unsigned __int32 bUseControllerRotationRoll : 1;
  unsigned __int32 bCanAffectNavigationGeneration : 1;
  unsigned __int32 bInputEnabled : 1;
  unsigned __int32 bProcessingOutsideWorldBounds : 1;
  float BaseEyeHeight;
  TEnumAsByte<enum EAutoReceiveInput::Type> AutoPossessPlayer;
  _BYTE AutoPossessAI[1];
  TSubclassOf<AController> AIControllerClass;
  APlayerState *PlayerState;
  char RemoteViewPitch;
  float BlendedReplayViewPitch;
  AController *LastHitBy;
  AController *Controller;
  float AllowedYawError;
  FVector ControlInputVector;
  FVector LastControlInputVector;
};

/* 4220 */
struct __cppobj FNoncopyable
{
};

/* 4221 */
struct __cppobj FPaddingForCacheContention<0>
{
};

/* 4222 */
struct FIndexedPointer
{
  unsigned __int64 Ptrs;
};

/* 4223 */
struct __cppobj __declspec(align(8)) FLockFreePointerListLIFORoot<0,2> : FNoncopyable
{
  FPaddingForCacheContention<0> PadToAvoidContention1;
  FIndexedPointer Head;
  FPaddingForCacheContention<0> PadToAvoidContention2;
};

/* 4224 */
struct __cppobj FLockFreePointerListLIFOBase<FBaseGraphTask,0,2> : FNoncopyable
{
  FLockFreePointerListLIFORoot<0,2> RootList;
};

/* 4225 */
struct __cppobj TClosableLockFreePointerListUnorderedSingleConsumer<FBaseGraphTask,0> : FLockFreePointerListLIFOBase<FBaseGraphTask,0,2>
{
};

/* 3932 */
struct TAlignedBytes<8,8>::TPadding
{
  char Pad[8];
};

/* 3933 */
struct TAlignedBytes<8,8>
{
  TAlignedBytes<8,8>::TPadding Padding;
};

/* 4226 */
struct __cppobj TTypeCompatibleBytes<TRefCountPtr<FGraphEvent> > : TAlignedBytes<8,8>
{
};

/* 4227 */
struct __cppobj FHeapAllocator::ForElementType<TRefCountPtr<FGraphEvent> > : FHeapAllocator::ForAnyElementType
{
};

/* 4228 */
struct TInlineAllocator<4,FDefaultAllocator>::ForElementType<TRefCountPtr<FGraphEvent> >
{
  TTypeCompatibleBytes<TRefCountPtr<FGraphEvent> > InlineData[4];
  FHeapAllocator::ForElementType<TRefCountPtr<FGraphEvent> > SecondaryData;
};

/* 4229 */
struct TArray<TRefCountPtr<FGraphEvent>,TInlineAllocator<4,FDefaultAllocator> >
{
  TInlineAllocator<4,FDefaultAllocator>::ForElementType<TRefCountPtr<FGraphEvent> > AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 3955 */
struct FThreadSafeCounter
{
  volatile int Counter;
};

/* 4230 */
struct FGraphEvent
{
  TClosableLockFreePointerListUnorderedSingleConsumer<FBaseGraphTask,0> SubsequentList;
  TArray<TRefCountPtr<FGraphEvent>,TInlineAllocator<4,FDefaultAllocator> > EventsToWaitFor;
  FThreadSafeCounter ReferenceCount;
  ENamedThreads::Type ThreadToDoGatherOn;
};

/* 3963 */
union $B796845F025CF5D27070DC0E26DFB5DD
{
  void (__cdecl *~FRunnable)(FRunnable *this);
  void *(__cdecl *__vecDelDtor)(FRunnable *this, unsigned int);
};

/* 3964 */
struct FRunnableVtbl
{
  bool (__cdecl *Init)(FRunnable *this);
  unsigned int (__cdecl *Run)(FRunnable *this);
  void (__cdecl *Stop)(FRunnable *this);
  void (__cdecl *Exit)(FRunnable *this);
  FSingleThreadRunnable *(__cdecl *GetSingleThreadInterface)(FRunnable *this);
  $B796845F025CF5D27070DC0E26DFB5DD ___u5;
};

/* 69111 */
struct SharedMemoryElement
{
  void *hMapFile;
  char *mapFileBuffer;
  int packetId;
  int nullCounts;
};

/* 69112 */
struct __declspec(align(4)) SharedMemoryWriter
{
  SharedMemoryElement sharedMemories[3];
  vec3f lastPosition;
  bool staticWrote;
  float currentDistance;
  bool hotlapMode;
};

/* 3832 */
struct TArray<wchar_t,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 3833 */
struct FString
{
  TArray<wchar_t,FDefaultAllocator> Data;
};

/* 3975 */
struct TArray<FTlsAutoCleanup *,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 396 */
enum EThreadPriority
{
  TPri_Normal = 0x0,
  TPri_AboveNormal = 0x1,
  TPri_BelowNormal = 0x2,
  TPri_Highest = 0x3,
  TPri_Lowest = 0x4,
  TPri_SlightlyBelowNormal = 0x5,
  TPri_TimeCritical = 0x6,
};

/* 3965 */
struct FRunnableThread
{
  FRunnableThreadVtbl *vfptr;
  FString ThreadName;
  FRunnable *Runnable;
  FEvent *ThreadInitSyncEvent;
  unsigned __int64 ThreadAffinityMask;
  TArray<FTlsAutoCleanup *,FDefaultAllocator> TlsInstances;
  EThreadPriority ThreadPriority;
  unsigned int ThreadID;
};

/* 66820 */
struct mat44f
{
  float M11;
  float M12;
  float M13;
  float M14;
  float M21;
  float M22;
  float M23;
  float M24;
  float M31;
  float M32;
  float M33;
  float M34;
  float M41;
  float M42;
  float M43;
  float M44;
};

/* 66906 */
struct SurfaceDef
{
  int audioID;
  void *userPointer;
  float friction;
  float frictionRain;
  float frictionRainGamma;
  float dirtAdditiveK;
  unsigned int collisionCategory;
  bool isValidTrack;
  long double sinHeight;
  long double sinLength;
  bool isPitlane;
  float vibrationGain;
  float vibrationLength;
  float wearMult;
};

/* 66907 */
struct __declspec(align(4)) TyreThermalState
{
  float realtimeIMO[3];
  float coreTemp;
  float thermalInput;
  float dynamicPressure;
  float staticPressure;
  float lastSetIMO[3];
  float cpTemperature;
  float lastGrain;
  float lastBlister;
  float mult;
  bool isHot;
};

/* 66908 */
struct TyreTreadState
{
  float treadMM[3];
};

/* 66909 */
struct __cppobj std::allocator<WingState>
{
};

/* 66911 */
struct __cppobj std::_Vector_val<std::_Simple_types<WingState> > : std::_Container_base0
{
  WingState *_Myfirst;
  WingState *_Mylast;
  WingState *_Myend;
};

/* 66912 */
struct __cppobj std::_Compressed_pair<std::allocator<WingState>,std::_Vector_val<std::_Simple_types<WingState> >,1> : std::allocator<WingState>
{
  std::_Vector_val<std::_Simple_types<WingState> > _Myval2;
};

/* 66913 */
struct std::_Vector_alloc<std::_Vec_base_types<WingState,std::allocator<WingState> > >
{
  std::_Compressed_pair<std::allocator<WingState>,std::_Vector_val<std::_Simple_types<WingState> >,1> _Mypair;
};

/* 66914 */
struct __cppobj std::vector<WingState,std::allocator<WingState> > : std::_Vector_alloc<std::_Vec_base_types<WingState,std::allocator<WingState> > >
{
};

/* 66915 */
struct __cppobj std::allocator<DownForceState>
{
};

/* 66917 */
struct __cppobj std::_Vector_val<std::_Simple_types<DownForceState> > : std::_Container_base0
{
  DownForceState *_Myfirst;
  DownForceState *_Mylast;
  DownForceState *_Myend;
};

/* 66918 */
struct __cppobj std::_Compressed_pair<std::allocator<DownForceState>,std::_Vector_val<std::_Simple_types<DownForceState> >,1> : std::allocator<DownForceState>
{
  std::_Vector_val<std::_Simple_types<DownForceState> > _Myval2;
};

/* 66919 */
struct std::_Vector_alloc<std::_Vec_base_types<DownForceState,std::allocator<DownForceState> > >
{
  std::_Compressed_pair<std::allocator<DownForceState>,std::_Vector_val<std::_Simple_types<DownForceState> >,1> _Mypair;
};

/* 66920 */
struct __cppobj std::vector<DownForceState,std::allocator<DownForceState> > : std::_Vector_alloc<std::_Vec_base_types<DownForceState,std::allocator<DownForceState> > >
{
};

/* 66921 */
struct __cppobj std::allocator<DebugPoint>
{
};

/* 66923 */
struct __cppobj std::_Vector_val<std::_Simple_types<DebugPoint> > : std::_Container_base0
{
  DebugPoint *_Myfirst;
  DebugPoint *_Mylast;
  DebugPoint *_Myend;
};

/* 66924 */
struct __cppobj std::_Compressed_pair<std::allocator<DebugPoint>,std::_Vector_val<std::_Simple_types<DebugPoint> >,1> : std::allocator<DebugPoint>
{
  std::_Vector_val<std::_Simple_types<DebugPoint> > _Myval2;
};

/* 66925 */
struct std::_Vector_alloc<std::_Vec_base_types<DebugPoint,std::allocator<DebugPoint> > >
{
  std::_Compressed_pair<std::allocator<DebugPoint>,std::_Vector_val<std::_Simple_types<DebugPoint> >,1> _Mypair;
};

/* 66926 */
struct __cppobj std::vector<DebugPoint,std::allocator<DebugPoint> > : std::_Vector_alloc<std::_Vec_base_types<DebugPoint,std::allocator<DebugPoint> > >
{
};

/* 66927 */
struct __cppobj std::allocator<DebugLine>
{
};

/* 66929 */
struct __cppobj std::_Vector_val<std::_Simple_types<DebugLine> > : std::_Container_base0
{
  DebugLine *_Myfirst;
  DebugLine *_Mylast;
  DebugLine *_Myend;
};

/* 66930 */
struct __cppobj std::_Compressed_pair<std::allocator<DebugLine>,std::_Vector_val<std::_Simple_types<DebugLine> >,1> : std::allocator<DebugLine>
{
  std::_Vector_val<std::_Simple_types<DebugLine> > _Myval2;
};

/* 66931 */
struct std::_Vector_alloc<std::_Vec_base_types<DebugLine,std::allocator<DebugLine> > >
{
  std::_Compressed_pair<std::allocator<DebugLine>,std::_Vector_val<std::_Simple_types<DebugLine> >,1> _Mypair;
};

/* 66932 */
struct __cppobj std::vector<DebugLine,std::allocator<DebugLine> > : std::_Vector_alloc<std::_Vec_base_types<DebugLine,std::allocator<DebugLine> > >
{
};

/* 66933 */
struct AIState
{
  float currentSteerSignal;
  vec3f steerTarget;
  bool isActive;
  float targetSpeed;
  float targetLateralOffset;
  float brakeTargetSpeed;
  float brakeTargetDist;
  float currentNormalizedSplinePosition;
  float outsideOffset;
  float projDNRPM;
  float understeerFactor;
  float currentPush;
  float currentRadius;
  float currentCamberDEG;
};

/* 66934 */
struct __declspec(align(8)) CarPhysicsState
{
  bool isPlayerControlled;
  mat44f worldMatrix;
  mat44f suspensionMatrix[4];
  mat44f tyreMatrix[4];
  float engineRPM;
  bool isWrongWay;
  float engineTorque;
  bool isEngineLimiterOn;
  float wheelAngularSpeed[4];
  float steer;
  float gas;
  float brake;
  float clutch;
  int gear;
  char engineFlags;
  Speed speed;
  vec3f velocity;
  vec3f angularVelocity;
  float slipAngle[4];
  float slipRatio[4];
  float ndSlip[4];
  float ndSlipSmooth[4];
  float load[4];
  float Dy[4];
  float Mz[4];
  float tyreDirtyLevel[4];
  SurfaceDef tyreSurfaceDef[4];
  float tyreDepth[4];
  float cgHeight;
  vec3f accG;
  float lastFF_Pure;
  float lastFF_Final;
  vec3f tyreContactPoint[4];
  vec3f tyreContactNormal[4];
  float tyreLatFlex[4];
  float tyreLonFlex[4];
  float camberRAD[4];
  float suspensionTravel[4];
  float suspensionBumpStopTravel[4];
  float normalizedSplinePosition;
  float splineLateralOffset;
  float drivetrainSpeed;
  float turboBoost;
  bool isGearGrinding;
  float bodyWorkVolume;
  float damageZoneLevel[5];
  int limiterRPM;
  long double timeStamp;
  float airDensity;
  float fuel;
  float rideHeight[2];
  float engineLifeLeft;
  float turboBov;
  float turboBoostLevel;
  float tyreGrain[4];
  float tyreBlister[4];
  float tyreInflation[4];
  float susDamage[4];
  float tyreFlatSpot[4];
  float water;
  TyreThermalState tyreThermalStates[4];
  float discTemps[4];
  TyreTreadState treadState[4];
  float wearMult[4];
  unsigned int statusBytes;
  char p2pStatus;
  char p2pActivations;
  float rainLevels[4];
  std::vector<WingState,std::allocator<WingState> > wingStates;
  std::vector<DownForceState,std::allocator<DownForceState> > downForceStates;
  std::vector<DebugPoint,std::allocator<DebugPoint> > debugPoints;
  std::vector<DebugLine,std::allocator<DebugLine> > suspDebugLines[4];
  AIState aiState;
  float marblesTyreLevels[4];
  float instantMarbleLevels[4];
  bool isTCInAction;
  bool isABSInAction;
};

/* 69119 */
struct std::pair<ICarPhysicsStateProvider * const,CarPhysicsState>
{
  ICarPhysicsStateProvider *const first;
  CarPhysicsState second;
};

/* 69118 */
struct std::_Tree_node<std::pair<ICarPhysicsStateProvider * const,CarPhysicsState>,void *>
{
  std::_Tree_node<std::pair<ICarPhysicsStateProvider * const,CarPhysicsState>,void *> *_Left;
  std::_Tree_node<std::pair<ICarPhysicsStateProvider * const,CarPhysicsState>,void *> *_Parent;
  std::_Tree_node<std::pair<ICarPhysicsStateProvider * const,CarPhysicsState>,void *> *_Right;
  char _Color;
  char _Isnil;
  std::pair<ICarPhysicsStateProvider * const,CarPhysicsState> _Myval;
};

/* 69127 */
struct TQueue<APhysicsAvatar::PhysicsState,1>::TNode
{
  TQueue<APhysicsAvatar::PhysicsState,1>::TNode *volatile NextNode;
  APhysicsAvatar::PhysicsState Item;
};

/* 67626 */
struct __cppobj std::_Arg_types<>
{
};

/* 67629 */
union std::_Func_class<void>::_Storage
{
  long double _Dummy1;
  char _Dummy2[56];
  std::_Func_base<void> *_Ptrs[8];
};

/* 67630 */
struct __cppobj std::_Func_class<void> : std::_Arg_types<>
{
  std::_Func_class<void>::_Storage _Mystorage;
};

/* 67631 */
struct __cppobj std::function<void __cdecl(void)> : std::_Func_class<void>
{
};

/* 69134 */
struct TQueue<std::function<void __cdecl(void)>,1>::TNode
{
  TQueue<std::function<void __cdecl(void)>,1>::TNode *volatile NextNode;
  std::function<void __cdecl(void)> Item;
};

/* 69136 */
struct TQueue<DynamicTrackStatus,1>::TNode
{
  TQueue<DynamicTrackStatus,1>::TNode *volatile NextNode;
  DynamicTrackStatus Item;
};

/* 66814 */
struct std::pair<float,float>
{
  float first;
  float second;
};

/* 68623 */
struct __cppobj std::allocator<std::pair<bool,unsigned short> >
{
};

/* 68625 */
struct __cppobj std::_Vector_val<std::_Simple_types<std::pair<bool,unsigned short> > > : std::_Container_base0
{
  std::pair<bool,unsigned short> *_Myfirst;
  std::pair<bool,unsigned short> *_Mylast;
  std::pair<bool,unsigned short> *_Myend;
};

/* 68626 */
struct __cppobj std::_Compressed_pair<std::allocator<std::pair<bool,unsigned short> >,std::_Vector_val<std::_Simple_types<std::pair<bool,unsigned short> > >,1> : std::allocator<std::pair<bool,unsigned short> >
{
  std::_Vector_val<std::_Simple_types<std::pair<bool,unsigned short> > > _Myval2;
};

/* 68627 */
struct std::_Vector_alloc<std::_Vec_base_types<std::pair<bool,unsigned short>,std::allocator<std::pair<bool,unsigned short> > > >
{
  std::_Compressed_pair<std::allocator<std::pair<bool,unsigned short> >,std::_Vector_val<std::_Simple_types<std::pair<bool,unsigned short> > >,1> _Mypair;
};

/* 68628 */
struct __cppobj std::vector<std::pair<bool,unsigned short>,std::allocator<std::pair<bool,unsigned short> > > : std::_Vector_alloc<std::_Vec_base_types<std::pair<bool,unsigned short>,std::allocator<std::pair<bool,unsigned short> > > >
{
};

/* 68629 */
struct DynamicTrackData
{
  bool isExternal;
  bool enabled;
  float baseGrip;
  float rubberAccumulationMultiplier;
};

/* 67613 */
struct DynamicTrackStatus
{
  float idealLineGrip;
  float outsideLineGrip;
  float wetLevel;
  float puddlesLevel;
  float wetDryLineLevel;
  float marblesLevel;
};

/* 68630 */
struct DynamicTrackWeatherParams
{
  float waterAccumulationSpeed;
  float waterDissipationSpeed;
  float puddlesAccumulationSpeed;
  float puddlesDissipationSpeed;
};

/* 68631 */
struct DynamicTrack
{
  DynamicTrackData data;
  DynamicTrackStatus status;
  DynamicTrackWeatherParams weatherParams;
  float rubberLevel;
  float wetLevel;
  float puddlesLevel;
  float wetDryLineMod;
};

/* 68632 */
struct __declspec(align(8)) ksRacing::TrackServices
{
  ksRacing::RaceManager *raceManager;
  int trackId;
  std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > trackName;
  std::pair<float,float> greenFlagTriggerRange;
  std::pair<float,float> formationTriggerRange;
  float greenFlagFinalDistance;
  _BYTE trackStartingLight[1];
  _BYTE pitEntryLight[1];
  _BYTE pitExitLight[1];
  std::vector<std::pair<unsigned short,unsigned short>,std::allocator<std::pair<unsigned short,unsigned short> > > fastLaneSpots;
  std::vector<std::pair<bool,unsigned short>,std::allocator<std::pair<bool,unsigned short> > > pitZoneStatus;
  DynamicTrack dynamicTrack;
};

/* 4486 */
struct __cppobj AInfo : AActor
{
};

/* 5741 */
struct TSubclassOf<AGameSession>
{
  UClass *Class;
};

/* 5742 */
struct TSubclassOf<AGameStateBase>
{
  UClass *Class;
};

/* 5743 */
struct TSubclassOf<APlayerController>
{
  UClass *Class;
};

/* 5744 */
struct TSubclassOf<APlayerState>
{
  UClass *Class;
};

/* 5745 */
struct TSubclassOf<AHUD>
{
  UClass *Class;
};

/* 5746 */
struct TSubclassOf<APawn>
{
  UClass *Class;
};

/* 5747 */
struct TSubclassOf<ASpectatorPawn>
{
  UClass *Class;
};

/* 5748 */
struct TSubclassOf<AServerStatReplicator>
{
  UClass *Class;
};

/* 3838 */
struct SharedPointerInternals::FSharedReferencer<1>
{
  SharedPointerInternals::FReferenceControllerBase *ReferenceController;
};

/* 4380 */
struct TSharedRef<ITextData,1>
{
  ITextData *Object;
  SharedPointerInternals::FSharedReferencer<1> SharedReferenceCount;
};

/* 3912 */
struct __declspec(align(8)) FText
{
  TSharedRef<ITextData,1> TextData;
  unsigned int Flags;
};

/* 5752 */
struct TArray<TBaseDelegate<bool>,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 5753 */
struct __cppobj AGameModeBase : AInfo
{
  FString OptionsString;
  TSubclassOf<AGameSession> GameSessionClass;
  TSubclassOf<AGameStateBase> GameStateClass;
  TSubclassOf<APlayerController> PlayerControllerClass;
  TSubclassOf<APlayerState> PlayerStateClass;
  TSubclassOf<AHUD> HUDClass;
  TSubclassOf<APawn> DefaultPawnClass;
  TSubclassOf<ASpectatorPawn> SpectatorClass;
  TSubclassOf<APlayerController> ReplaySpectatorPlayerControllerClass;
  TSubclassOf<AServerStatReplicator> ServerStatReplicatorClass;
  AGameSession *GameSession;
  AGameStateBase *GameState;
  AServerStatReplicator *ServerStatReplicator;
  FText DefaultPlayerName;
  unsigned __int32 bUseSeamlessTravel : 1;
  unsigned __int32 bStartPlayersAsSpectators : 1;
  unsigned __int32 bPauseable : 1;
  TArray<TBaseDelegate<bool>,FDefaultAllocator> Pausers;
};

/* 3826 */
struct FVector2D
{
  float X;
  float Y;
};

/* 69138 */
struct TSubclassOf<URacePausePage>
{
  UClass *Class;
};

/* 69139 */
struct TSubclassOf<URaceTransitionPage>
{
  UClass *Class;
};

/* 69140 */
struct TSubclassOf<URaceIntroPage>
{
  UClass *Class;
};

/* 69141 */
struct TSubclassOf<URaceEndPage>
{
  UClass *Class;
};

/* 69142 */
struct TSubclassOf<UReplayHUD>
{
  UClass *Class;
};

/* 69280 */
struct TSubclassOf<AAcPitstopProcedure>
{
  UClass *Class;
};

/* 5067 */
struct TSubclassOf<AActor>
{
  UClass *Class;
};

/* 69281 */
struct TSubclassOf<AGhostCarManager>
{
  UClass *Class;
};

/* 69382 */
struct __cppobj TDefaultDelete<ksRacing::RaceManager>
{
};

/* 69383 */
struct __cppobj TUniquePtr<ksRacing::RaceManager,TDefaultDelete<ksRacing::RaceManager> > : TDefaultDelete<ksRacing::RaceManager>
{
  ksRacing::RaceManager *Ptr;
};

/* 4179 */
struct SharedPointerInternals::FSharedReferencer<0>
{
  SharedPointerInternals::FReferenceControllerBase *ReferenceController;
};

/* 69438 */
struct TSharedPtr<FWidgetRenderer,0>
{
  FWidgetRenderer *Object;
  SharedPointerInternals::FSharedReferencer<0> SharedReferenceCount;
};

/* 5160 */
struct TSharedPtr<SWidget,0>
{
  SWidget *Object;
  SharedPointerInternals::FSharedReferencer<0> SharedReferenceCount;
};

/* 1823 */
enum EStereoLayerType
{
  SLT_WorldLocked = 0x0,
  SLT_TrackerLocked = 0x1,
  SLT_FaceLocked = 0x2,
  SLT_MAX = 0x3,
};

/* 68455 */
const struct ksRacing::StartSessionEvent
{
  long double timeStamp;
  SessionInfo physicsSessionInfo;
};

/* 69483 */
struct TArray<ACarAvatar *,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 69373 */
struct FCameraType
{
  _BYTE mode[1];
  int subMode;
};

/* 69521 */
struct TSparseArray<TSetElement<TTuple<unsigned short,ACarAvatar *> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<24,8> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 69522 */
struct __declspec(align(8)) TSet<TTuple<unsigned short,ACarAvatar *>,TDefaultMapHashableKeyFuncs<unsigned short,ACarAvatar *,0>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<TTuple<unsigned short,ACarAvatar *> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 69523 */
struct TMapBase<unsigned short,ACarAvatar *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<unsigned short,ACarAvatar *,0> >
{
  TSet<TTuple<unsigned short,ACarAvatar *>,TDefaultMapHashableKeyFuncs<unsigned short,ACarAvatar *,0>,FDefaultSetAllocator> Pairs;
};

/* 69524 */
struct __cppobj TSortableMapBase<unsigned short,ACarAvatar *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<unsigned short,ACarAvatar *,0> > : TMapBase<unsigned short,ACarAvatar *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<unsigned short,ACarAvatar *,0> >
{
};

/* 69525 */
struct __cppobj TMap<unsigned short,ACarAvatar *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<unsigned short,ACarAvatar *,0> > : TSortableMapBase<unsigned short,ACarAvatar *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<unsigned short,ACarAvatar *,0> >
{
};

/* 69224 */
struct __cppobj AAcRaceGameMode : AGameModeBase
{
  FVector2D AiLightsHighBeamSunAngleLimits;
  FVector2D AiLightsEnduranceBeamSunAngleLimits;
  FVector2D AiRainIntensityLimits;
  float AiRainIntensityRandomVariation;
  TSubclassOf<URacePausePage> PausePage;
  TSubclassOf<URaceTransitionPage> TransitionPageClass;
  TSubclassOf<URaceIntroPage> IntroPageClass;
  TSubclassOf<URaceEndPage> EndPageClass;
  TSubclassOf<UReplayHUD> ReplayPageClass;
  float EndSessionReplayMinSeconds;
  float EndSessionReplayOffsetSeconds;
  UDataTable *AudioComms;
  UDataTable *HighLigthEvents;
  UPhysicsSettingsAC *PhysicsSettings;
  UTextureRenderTarget2D *WidgetTarget;
  UAcStereoLayerComponent *StereoLayer;
  AAiCarController *aiTeammate;
  UAcRaceManager *ueRaceManager;
  UAcParticlesManager *ParticlesManager;
  UMaterialParameterCollection *MaterialParameterCollection;
  TSubclassOf<AAcPitstopProcedure> PitstopClass;
  TSubclassOf<APawn> DummyCarClass;
  TSubclassOf<AActor> IdealLineClass;
  UFMODBank *Accessories;
  UFMODBank *Environment;
  UFMODBank *Damage;
  UFMODBank *AudioCommsBank;
  TSubclassOf<AGhostCarManager> GhostCarManager;
  UViewOptionsLibrary *viewOptions;
  FVector2D yellowFlagLimitSpeeds;
  FVector2D yellowFlagLimitRelative;
  float blueFlagLimit;
  float blueFlagDistance;
  UAcGameInstance *GameInstance;
  AAcRaceGameState *RaceGameState;
  TUniquePtr<ksRacing::RaceManager,TDefaultDelete<ksRacing::RaceManager> > raceManager;
  bool areControlsLocked;
  APhysicsAvatar *PhysicsAvatar;
  ATrackAvatar *TrackAvatar;
  AAcPlayerStartManager *PlayerStartManager;
  ADirectionalLight *SunLight;
  AAcIdealLineActor *idealLine;
  AGhostCarManager *ghostCarManager;
  UAcMenuState *menuState;
  ALevelSequenceActor *startSequence;
  bool isInTransitionPage;
  bool isReplayMode;
  bool mustResetCars;
  bool isTickPaused;
  bool canProceed;
  bool hmdEnabled;
  TSharedPtr<FWidgetRenderer,0> WidgetRenderer;
  float StereoLayerDistance;
  float StereoLayerDistStep;
  UAcPageBase *CurrentPage;
  TSharedPtr<SWidget,0> InternalWidget;
  EStereoLayerType currentStereoLayerType;
  ksRacing::StartSessionEvent startSessionEvent;
  FTimerHandle postSessionHandle;
  ACarAvatar *playerCarAvatar;
  UTrackSectionServices *TrackSectionServices;
  UAcTeamStrategyController *TeamStrategyController;
  float SunPitch;
  TArray<ACarAvatar *,FDefaultAllocator> dummyCarList;
  AAudioActor *audioActor;
  AAcSpotter *spotterActor;
  bool endModeState;
  FCameraType beforePauseCamera;
  ACarAvatar *beforePauseCarAvatar;
  TMap<unsigned short,ACarAvatar *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<unsigned short,ACarAvatar *,0> > carAvatarMap;
  TMap<unsigned short,ACarAvatar *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<unsigned short,ACarAvatar *,0> > carAvatarReplayMap;
  FTimerHandle replayHandle;
  ksRacing::AssistRules localAssists;
  ksRacing::RealismRules localRealism;
};

/* 3869 */
struct TSparseArray<TSetElement<TTuple<UObject *,UObject *> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<24,8> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 3873 */
struct __declspec(align(8)) TSet<TTuple<UObject *,UObject *>,TDefaultMapHashableKeyFuncs<UObject *,UObject *,0>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<TTuple<UObject *,UObject *> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 3874 */
struct TMapBase<UObject *,UObject *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<UObject *,UObject *,0> >
{
  TSet<TTuple<UObject *,UObject *>,TDefaultMapHashableKeyFuncs<UObject *,UObject *,0>,FDefaultSetAllocator> Pairs;
};

/* 3875 */
struct __cppobj TSortableMapBase<UObject *,UObject *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<UObject *,UObject *,0> > : TMapBase<UObject *,UObject *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<UObject *,UObject *,0> >
{
};

/* 3876 */
struct __cppobj TMap<UObject *,UObject *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<UObject *,UObject *,0> > : TSortableMapBase<UObject *,UObject *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<UObject *,UObject *,0> >
{
};

/* 3877 */
struct FObjectInstancingGraph
{
  UObject *SourceRoot;
  UObject *DestinationRoot;
  bool bCreatingArchetype;
  bool bEnableSubobjectInstancing;
  bool bLoadingObject;
  TMap<UObject *,UObject *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<UObject *,UObject *,0> > SourceToDestinationMap;
  TMap<UObject *,UObject *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<UObject *,UObject *,0> > ReplaceMap;
};

/* 3893 */
struct FReferenceCollectorVtbl
{
  void *(__cdecl *__vecDelDtor)(FReferenceCollector *this, unsigned int);
  _BYTE gap8[8];
  bool (__cdecl *IsIgnoringTransient)(FReferenceCollector *this);
  void (__cdecl *AllowEliminatingReferences)(FReferenceCollector *this, bool);
  void (__cdecl *SetSerializedProperty)(FReferenceCollector *this, UProperty *);
  UProperty *(__cdecl *GetSerializedProperty)(FReferenceCollector *this);
  bool (__cdecl *MarkWeakObjectReferenceForClearing)(FReferenceCollector *this, UObject **);
  void (__cdecl *HandleObjectReference)(FReferenceCollector *this, UObject **, UObject *, UProperty *);
  void (__cdecl *HandleObjectReferences)(FReferenceCollector *this, UObject **, const int, UObject *, UProperty *);
};

/* 4057 */
struct FArchive::FFastPathLoadBuffer
{
  const char *StartFastPathLoadBuffer;
  const char *EndFastPathLoadBuffer;
  const char *OriginalFastPathLoadBuffer;
};

/* 4031 */
struct FEngineVersionBase
{
  unsigned __int16 Major;
  unsigned __int16 Minor;
  unsigned __int16 Patch;
  unsigned int Changelist;
};

/* 3841 */
struct __declspec(align(8)) FArchive
{
  FArchiveVtbl *vfptr;
  FArchive::FFastPathLoadBuffer *ActiveFPLB;
  FArchive::FFastPathLoadBuffer InlineFPLB;
  __int8 ArIsLoading : 1;
  __int8 ArIsSaving : 1;
  __int8 ArIsTransacting : 1;
  __int8 ArIsTextFormat : 1;
  __int8 ArWantBinaryPropertySerialization : 1;
  __int8 ArForceUnicode : 1;
  __int8 ArIsPersistent : 1;
  __int8 ArIsError : 1;
  __int8 ArIsCriticalError : 1;
  __int8 ArContainsCode : 1;
  __int8 ArContainsMap : 1;
  __int8 ArRequiresLocalizationGather : 1;
  __int8 ArForceByteSwapping : 1;
  __int8 ArIgnoreArchetypeRef : 1;
  __int8 ArNoDelta : 1;
  __int8 ArIgnoreOuterRef : 1;
  __int8 ArIgnoreClassGeneratedByRef : 1;
  __int8 ArIgnoreClassRef : 1;
  __int8 ArAllowLazyLoading : 1;
  __int8 ArIsObjectReferenceCollector : 1;
  __int8 ArIsModifyingWeakAndStrongReferences : 1;
  __int8 ArIsCountingMemory : 1;
  __int8 ArShouldSkipBulkData : 1;
  __int8 ArIsFilterEditorOnly : 1;
  __int8 ArIsSaveGame : 1;
  __int8 ArIsNetArchive : 1;
  __int8 ArUseCustomPropertyList : 1;
  int ArSerializingDefaults;
  unsigned int ArPortFlags;
  __int64 ArMaxSerializeSize;
  int ArUE4Ver;
  int ArLicenseeUE4Ver;
  FEngineVersionBase ArEngineVer;
  unsigned int ArEngineNetVer;
  unsigned int ArGameNetVer;
  FCustomVersionContainer *CustomVersionContainer;
  FCustomPropertyListNode *ArCustomPropertyList;
  ITargetPlatform *CookingTargetPlatform;
  UProperty *SerializedProperty;
  FArchiveSerializedPropertyChain *SerializedPropertyChain;
  bool bCustomVersionsAreReset;
};

/* 3894 */
struct __cppobj FArchiveUObject : FArchive
{
};

/* 3895 */
struct __cppobj FReferenceCollectorArchive : FArchiveUObject
{
  UObject *SerializingObject;
  UObject *SerializedDataContainer;
  const void *SerializedDataPtr;
  FReferenceCollector *Collector;
};

/* 67211 */
struct std::_Func_base<void,CarConnectedEvent const &>Vtbl
{
  std::_Func_base<void,CarConnectedEvent const &> *(__cdecl *_Copy)(std::_Func_base<void,CarConnectedEvent const &> *this, void *);
  std::_Func_base<void,CarConnectedEvent const &> *(__cdecl *_Move)(std::_Func_base<void,CarConnectedEvent const &> *this, void *);
  void (__cdecl *_Do_call)(std::_Func_base<void,CarConnectedEvent const &> *this, CarConnectedEvent *);
  type_info *(__cdecl *_Target_type)(std::_Func_base<void,CarConnectedEvent const &> *this);
  void (__cdecl *_Delete_this)(std::_Func_base<void,CarConnectedEvent const &> *this, bool);
  const void *(__cdecl *_Get)(std::_Func_base<void,CarConnectedEvent const &> *this);
};

/* 67224 */
struct std::_Func_base<void,unsigned char const &>Vtbl
{
  std::_Func_base<void,unsigned char const &> *(__cdecl *_Copy)(std::_Func_base<void,unsigned char const &> *this, void *);
  std::_Func_base<void,unsigned char const &> *(__cdecl *_Move)(std::_Func_base<void,unsigned char const &> *this, void *);
  void (__cdecl *_Do_call)(std::_Func_base<void,unsigned char const &> *this, const char *);
  type_info *(__cdecl *_Target_type)(std::_Func_base<void,unsigned char const &> *this);
  void (__cdecl *_Delete_this)(std::_Func_base<void,unsigned char const &> *this, bool);
  const void *(__cdecl *_Get)(std::_Func_base<void,unsigned char const &> *this);
};

/* 67238 */
struct std::_Func_base<void,ksRacing::OnSplitTimeEvent const &>Vtbl
{
  std::_Func_base<void,ksRacing::OnSplitTimeEvent const &> *(__cdecl *_Copy)(std::_Func_base<void,ksRacing::OnSplitTimeEvent const &> *this, void *);
  std::_Func_base<void,ksRacing::OnSplitTimeEvent const &> *(__cdecl *_Move)(std::_Func_base<void,ksRacing::OnSplitTimeEvent const &> *this, void *);
  void (__cdecl *_Do_call)(std::_Func_base<void,ksRacing::OnSplitTimeEvent const &> *this, ksRacing::OnSplitTimeEvent *);
  type_info *(__cdecl *_Target_type)(std::_Func_base<void,ksRacing::OnSplitTimeEvent const &> *this);
  void (__cdecl *_Delete_this)(std::_Func_base<void,ksRacing::OnSplitTimeEvent const &> *this, bool);
  const void *(__cdecl *_Get)(std::_Func_base<void,ksRacing::OnSplitTimeEvent const &> *this);
};

/* 67252 */
struct std::_Func_base<void,ksRacing::OnRemoteLapEvent const &>Vtbl
{
  std::_Func_base<void,ksRacing::OnRemoteLapEvent const &> *(__cdecl *_Copy)(std::_Func_base<void,ksRacing::OnRemoteLapEvent const &> *this, void *);
  std::_Func_base<void,ksRacing::OnRemoteLapEvent const &> *(__cdecl *_Move)(std::_Func_base<void,ksRacing::OnRemoteLapEvent const &> *this, void *);
  void (__cdecl *_Do_call)(std::_Func_base<void,ksRacing::OnRemoteLapEvent const &> *this, ksRacing::OnRemoteLapEvent *);
  type_info *(__cdecl *_Target_type)(std::_Func_base<void,ksRacing::OnRemoteLapEvent const &> *this);
  void (__cdecl *_Delete_this)(std::_Func_base<void,ksRacing::OnRemoteLapEvent const &> *this, bool);
  const void *(__cdecl *_Get)(std::_Func_base<void,ksRacing::OnRemoteLapEvent const &> *this);
};

/* 67266 */
struct std::_Func_base<void,OnSessionUpdateEvent const &>Vtbl
{
  std::_Func_base<void,OnSessionUpdateEvent const &> *(__cdecl *_Copy)(std::_Func_base<void,OnSessionUpdateEvent const &> *this, void *);
  std::_Func_base<void,OnSessionUpdateEvent const &> *(__cdecl *_Move)(std::_Func_base<void,OnSessionUpdateEvent const &> *this, void *);
  void (__cdecl *_Do_call)(std::_Func_base<void,OnSessionUpdateEvent const &> *this, OnSessionUpdateEvent *);
  type_info *(__cdecl *_Target_type)(std::_Func_base<void,OnSessionUpdateEvent const &> *this);
  void (__cdecl *_Delete_this)(std::_Func_base<void,OnSessionUpdateEvent const &> *this, bool);
  const void *(__cdecl *_Get)(std::_Func_base<void,OnSessionUpdateEvent const &> *this);
};

/* 67189 */
struct rapidjson::GenericValue<rapidjson::UTF16<wchar_t>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator> >::String
{
  unsigned int length;
  unsigned int hashcode;
  const wchar_t *str;
};

/* 67190 */
struct rapidjson::GenericValue<rapidjson::UTF16<wchar_t>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator> >::ShortString
{
  wchar_t str[7];
};

/* 67191 */
struct rapidjson::GenericValue<rapidjson::UTF16<wchar_t>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator> >::Number::I
{
  int i;
  char padding[4];
};

/* 67192 */
struct rapidjson::GenericValue<rapidjson::UTF16<wchar_t>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator> >::Number::U
{
  unsigned int u;
  char padding2[4];
};

/* 67193 */
union rapidjson::GenericValue<rapidjson::UTF16<wchar_t>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator> >::Number
{
  rapidjson::GenericValue<rapidjson::UTF16<wchar_t>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator> >::Number::I i;
  rapidjson::GenericValue<rapidjson::UTF16<wchar_t>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator> >::Number::U u;
  __int64 i64;
  unsigned __int64 u64;
  long double d;
};

/* 67196 */
struct rapidjson::GenericValue<rapidjson::UTF16<wchar_t>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator> >::ObjectData
{
  unsigned int size;
  unsigned int capacity;
  rapidjson::GenericMember<rapidjson::UTF16<wchar_t>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator> > *members;
};

/* 67197 */
struct rapidjson::GenericValue<rapidjson::UTF16<wchar_t>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator> >::ArrayData
{
  unsigned int size;
  unsigned int capacity;
  rapidjson::GenericValue<rapidjson::UTF16<wchar_t>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator> > *elements;
};

/* 67198 */
struct rapidjson::GenericValue<rapidjson::UTF16<wchar_t>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator> >::Flag
{
  char payload[14];
  unsigned __int16 flags;
};

/* 67199 */
union rapidjson::GenericValue<rapidjson::UTF16<wchar_t>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator> >::Data
{
  rapidjson::GenericValue<rapidjson::UTF16<wchar_t>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator> >::String s;
  rapidjson::GenericValue<rapidjson::UTF16<wchar_t>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator> >::ShortString ss;
  rapidjson::GenericValue<rapidjson::UTF16<wchar_t>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator> >::Number n;
  rapidjson::GenericValue<rapidjson::UTF16<wchar_t>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator> >::ObjectData o;
  rapidjson::GenericValue<rapidjson::UTF16<wchar_t>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator> >::ArrayData a;
  rapidjson::GenericValue<rapidjson::UTF16<wchar_t>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator> >::Flag f;
};

/* 67194 */
struct rapidjson::GenericValue<rapidjson::UTF16<wchar_t>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator> >
{
  rapidjson::GenericValue<rapidjson::UTF16<wchar_t>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator> >::Data data_;
};

/* 67201 */
struct rapidjson::internal::Stack<rapidjson::CrtAllocator>
{
  rapidjson::CrtAllocator *allocator_;
  rapidjson::CrtAllocator *ownAllocator_;
  char *stack_;
  char *stackTop_;
  char *stackEnd_;
  unsigned __int64 initialCapacity_;
};

/* 67203 */
struct __declspec(align(4)) rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF16<wchar_t>,rapidjson::CrtAllocator>,rapidjson::UTF16<wchar_t>,rapidjson::UTF16<wchar_t>,rapidjson::CrtAllocator,0>
{
  rapidjson::GenericStringBuffer<rapidjson::UTF16<wchar_t>,rapidjson::CrtAllocator> *os_;
  rapidjson::internal::Stack<rapidjson::CrtAllocator> level_stack_;
  int maxDecimalPlaces_;
  bool hasRoot_;
};

/* 3753 */
enum rapidjson::PrettyFormatOptions
{
  kFormatDefault = 0x0,
  kFormatSingleLineArray = 0x1,
};

/* 67204 */
struct __cppobj __declspec(align(8)) rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF16<wchar_t>,rapidjson::CrtAllocator>,rapidjson::UTF16<wchar_t>,rapidjson::UTF16<wchar_t>,rapidjson::CrtAllocator,0> : rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF16<wchar_t>,rapidjson::CrtAllocator>,rapidjson::UTF16<wchar_t>,rapidjson::UTF16<wchar_t>,rapidjson::CrtAllocator,0>
{
  wchar_t indentChar_;
  unsigned int indentCharCount_;
  rapidjson::PrettyFormatOptions formatOptions_;
};

/* 67206 */
struct UDPPacket
{
  IPAddress targetIP;
  char *data;
  unsigned int currentDataPos;
  unsigned int size;
};

/* 67289 */
struct std::pair<unsigned short,unsigned short>
{
  unsigned __int16 first;
  unsigned __int16 second;
};

/* 67343 */
struct __cppobj ksRacing::TyreSet : ksRacing::WritableRaceStructure
{
  bool isPracticeOnlyReserved;
  bool isSuperpoleSet;
  bool isQualifyRaceStartReserved;
  bool isPracticeReserved;
  bool isWet;
  std::vector<float,std::allocator<float> > avgTreadHeight;
  std::vector<float,std::allocator<float> > avgBlistering;
  std::vector<float,std::allocator<float> > avgGraining;
  std::vector<float,std::allocator<float> > avgPuncture;
  std::vector<float,std::allocator<float> > avgFlatSpot;
};

/* 67400 */
struct __cppobj std::allocator<ksRacing::DriverEntity>
{
};

/* 67402 */
struct __cppobj std::_Vector_val<std::_Simple_types<ksRacing::DriverEntity> > : std::_Container_base0
{
  ksRacing::DriverEntity *_Myfirst;
  ksRacing::DriverEntity *_Mylast;
  ksRacing::DriverEntity *_Myend;
};

/* 67403 */
struct __cppobj std::_Compressed_pair<std::allocator<ksRacing::DriverEntity>,std::_Vector_val<std::_Simple_types<ksRacing::DriverEntity> >,1> : std::allocator<ksRacing::DriverEntity>
{
  std::_Vector_val<std::_Simple_types<ksRacing::DriverEntity> > _Myval2;
};

/* 67404 */
struct std::_Vector_alloc<std::_Vec_base_types<ksRacing::DriverEntity,std::allocator<ksRacing::DriverEntity> > >
{
  std::_Compressed_pair<std::allocator<ksRacing::DriverEntity>,std::_Vector_val<std::_Simple_types<ksRacing::DriverEntity> >,1> _Mypair;
};

/* 67405 */
struct __cppobj std::vector<ksRacing::DriverEntity,std::allocator<ksRacing::DriverEntity> > : std::_Vector_alloc<std::_Vec_base_types<ksRacing::DriverEntity,std::allocator<ksRacing::DriverEntity> > >
{
};

/* 67406 */
struct __cppobj ksRacing::CarEntity : ksRacing::WritableRaceStructure
{
  ksRacing::CarInfo info;
  std::vector<ksRacing::DriverEntity,std::allocator<ksRacing::DriverEntity> > drivers;
};

/* 67414 */
struct __cppobj ksRacing::SessionEntity : ksRacing::WritableRaceStructure
{
  unsigned __int16 date_year;
  char date_month;
  char date_day;
  char date_hour;
  char date_minute;
  _BYTE sessionType[1];
  int sessionDuration;
  float timeMultiplier;
};

/* 67429 */
struct __cppobj std::_Arg_types<UDPMessage const &>
{
};

/* 67433 */
union std::_Func_class<void,UDPMessage const &>::_Storage
{
  long double _Dummy1;
  char _Dummy2[56];
  std::_Func_base<void,UDPMessage const &> *_Ptrs[8];
};

/* 67434 */
struct __cppobj std::_Func_class<void,UDPMessage const &> : std::_Arg_types<UDPMessage const &>
{
  std::_Func_class<void,UDPMessage const &>::_Storage _Mystorage;
};

/* 67435 */
struct __cppobj std::function<void __cdecl(UDPMessage const &)> : std::_Func_class<void,UDPMessage const &>
{
};

/* 67447 */
union $748A53454A20A0BE165A49971D4DC725
{
  void (__cdecl *~_Concurrent_queue_base_v4)(Concurrency::details::_Concurrent_queue_base_v4 *this);
  void *(__cdecl *__vecDelDtor)(Concurrency::details::_Concurrent_queue_base_v4 *this, unsigned int);
};

/* 67448 */
struct Concurrency::details::_Concurrent_queue_base_v4Vtbl
{
  void (__cdecl *_Move_item)(Concurrency::details::_Concurrent_queue_base_v4 *this, Concurrency::details::_Concurrent_queue_base_v4::_Page *, unsigned __int64, void *);
  void (__cdecl *_Copy_item)(Concurrency::details::_Concurrent_queue_base_v4 *this, Concurrency::details::_Concurrent_queue_base_v4::_Page *, unsigned __int64, const void *);
  void (__cdecl *_Assign_and_destroy_item)(Concurrency::details::_Concurrent_queue_base_v4 *this, void *, Concurrency::details::_Concurrent_queue_base_v4::_Page *, unsigned __int64);
  $748A53454A20A0BE165A49971D4DC725 ___u3;
  Concurrency::details::_Concurrent_queue_base_v4::_Page *(__cdecl *_Allocate_page)(Concurrency::details::_Concurrent_queue_base_v4 *this);
  void (__cdecl *_Deallocate_page)(Concurrency::details::_Concurrent_queue_base_v4 *this, Concurrency::details::_Concurrent_queue_base_v4::_Page *);
};

/* 67449 */
struct Concurrency::details::_Subatomic<unsigned __int64>
{
  volatile unsigned __int64 _M_value;
};

/* 67450 */
struct Concurrency::details::_Subatomic<Concurrency::details::_Concurrent_queue_base_v4::_Page *>
{
  Concurrency::details::_Concurrent_queue_base_v4::_Page *volatile _M_value;
};

/* 67451 */
struct __declspec(align(8)) Concurrency::details::_Micro_queue
{
  Concurrency::details::_Subatomic<Concurrency::details::_Concurrent_queue_base_v4::_Page *> _Head_page;
  Concurrency::details::_Subatomic<unsigned __int64> _Head_counter;
  Concurrency::details::_Subatomic<Concurrency::details::_Concurrent_queue_base_v4::_Page *> _Tail_page;
  Concurrency::details::_Subatomic<unsigned __int64> _Tail_counter;
  volatile int _Page_mutex_flag;
};

/* 67452 */
struct Concurrency::details::_Concurrent_queue_rep
{
  Concurrency::details::_Subatomic<unsigned __int64> _Head_counter;
  __declspec(align(64)) Concurrency::details::_Subatomic<unsigned __int64> _Tail_counter;
  __declspec(align(64)) Concurrency::details::_Micro_queue _Array[8];
};

/* 67176 */
struct ICollisionCallbackVtbl
{
  void *(__cdecl *__vecDelDtor)(ICollisionCallback *this, unsigned int);
  void (__cdecl *onCollisionCallBack)(ICollisionCallback *this, CollisionData *);
};

/* 66905 */
struct ICarPhysicsStateProvider
{
  ICarPhysicsStateProviderVtbl *vfptr;
};

/* 66936 */
struct SteerData
{
  float steerLock;
  float steerRatio;
  float linearSteerRodRatio;
  float ffMult;
  float steerAssist;
};

/* 66937 */
struct FuelData
{
  long double fuelKG;
  long double fuelConsumptionK;
  long double maxFuel;
  long double fuel;
  vec3d fuelTankPos;
};

/* 1776 */
typedef __MIDL___MIDL_itf_amstream_0000_0000_0004 EBBMode;

/* 66938 */
struct BrakeDiscData
{
  float t;
  float tCore;
  float coolTransfer;
  float torqueK;
  float coolSpeedFactor;
  float emissivity;
  float surf;
  float thermalCapacity;
  float coreThermalCapacity;
  float kConductivity;
  float condThickness;
  Curve perfCurve;
};

/* 66939 */
struct __declspec(align(8)) BrakesData
{
  float totalTorque;
  float frontBias;
  float minBias;
  float maxBias;
  float handBrakeTorque;
  bool hasCockpitBias;
  float cockpitBiasAdjustStep;
  EBBMode ebbMode;
  float ebbFrontShareMultiplier;
  BrakeDiscData discData[4];
  bool isBrakeTempActive;
};

/* 66940 */
struct __cppobj std::allocator<EngineMap>
{
};

/* 66942 */
struct __cppobj std::_Vector_val<std::_Simple_types<EngineMap> > : std::_Container_base0
{
  EngineMap *_Myfirst;
  EngineMap *_Mylast;
  EngineMap *_Myend;
};

/* 66943 */
struct __cppobj std::_Compressed_pair<std::allocator<EngineMap>,std::_Vector_val<std::_Simple_types<EngineMap> >,1> : std::allocator<EngineMap>
{
  std::_Vector_val<std::_Simple_types<EngineMap> > _Myval2;
};

/* 66944 */
struct std::_Vector_alloc<std::_Vec_base_types<EngineMap,std::allocator<EngineMap> > >
{
  std::_Compressed_pair<std::allocator<EngineMap>,std::_Vector_val<std::_Simple_types<EngineMap> >,1> _Mypair;
};

/* 66945 */
struct __cppobj std::vector<EngineMap,std::allocator<EngineMap> > : std::_Vector_alloc<std::_Vec_base_types<EngineMap,std::allocator<EngineMap> > >
{
};

/* 66946 */
struct __cppobj std::allocator<TurboData>
{
};

/* 66955 */
struct __cppobj std::_Vector_val<std::_Simple_types<TurboData> > : std::_Container_base0
{
  TurboData *_Myfirst;
  TurboData *_Mylast;
  TurboData *_Myend;
};

/* 66956 */
struct __cppobj std::_Compressed_pair<std::allocator<TurboData>,std::_Vector_val<std::_Simple_types<TurboData> >,1> : std::allocator<TurboData>
{
  std::_Vector_val<std::_Simple_types<TurboData> > _Myval2;
};

/* 66957 */
struct std::_Vector_alloc<std::_Vec_base_types<TurboData,std::allocator<TurboData> > >
{
  std::_Compressed_pair<std::allocator<TurboData>,std::_Vector_val<std::_Simple_types<TurboData> >,1> _Mypair;
};

/* 66958 */
struct __cppobj std::vector<TurboData,std::allocator<TurboData> > : std::_Vector_alloc<std::_Vec_base_types<TurboData,std::allocator<TurboData> > >
{
};

/* 66959 */
struct StartECUAssistData
{
  float rpmRange;
  float gain;
  float speedRangeKHM;
};

/* 66960 */
struct __declspec(align(8)) EngineData
{
  float inertia;
  Curve powerCurve;
  Curve coastCurve;
  std::vector<EngineMap,std::allocator<EngineMap> > maps;
  int minimum;
  int limiter;
  int limiterCycles;
  std::vector<TurboData,std::allocator<TurboData> > turbos;
  float defaultTurboAdjustment;
  Curve throttleResponseCurve;
  float rpmDamageThreshold;
  float turboBoostDamageThreshold;
  float turboBoostDamageK;
  float rpmDamageK;
  float bovThreshold;
  float starterTimeS;
  float ignitionTimeS;
  float startupTime;
  float engineDamping;
  float omegaN;
  float omegaGainRPM;
  StartECUAssistData startECUAssist;
  float starterEngineTorque;
};

/* 1779 */
enum TractionType
{
  RWD = 0x0,
  FWD = 0x1,
  AWD = 0x2,
  AWD_2 = 0x3,
};

/* 66961 */
struct DifferentialData
{
  float power;
  float coast;
  float preload;
};

/* 66962 */
struct __declspec(align(4)) DownshiftProtectionData
{
  bool isActive;
  bool isDebug;
  int overrev;
  bool lockN;
};

/* 66963 */
struct __declspec(align(8)) AutoBlipData
{
  Curve blipProfile;
  bool isElectronic;
};

/* 66964 */
struct __declspec(align(8)) AutoClutchData
{
  Curve upshiftProfile;
  Curve downshiftProfile;
  bool isForcedOn;
  float rpmMin;
  float rpmMax;
};

/* 66965 */
struct AutoShifterData
{
  int changeUpRpm;
  int changeDnRpm;
  float slipThreshold;
  float gasCutoffTimeS;
};

/* 66966 */
struct DrivetrainData
{
  TractionType tractionType;
  float driveInertia;
  float clutchInertia;
  float gearR;
  std::vector<float,std::allocator<float> > gears;
  float finalRatio;
  DifferentialData differential;
  float gearUpTimeS;
  float gearDnTimeS;
  float autoCutOffTimeS;
  bool isShifterSupported;
  DownshiftProtectionData downshiftProtection;
  float clutchMaxTorque;
  float validShiftRPMWindow;
  float controlsWindowGain;
  float damageRpmWindow;
  AutoBlipData autoBlip;
  AutoClutchData autoClutch;
  AutoShifterData autoShifter;
};

/* 66967 */
struct __cppobj std::allocator<TyreCompoundSet>
{
};

/* 66973 */
struct __cppobj std::_Vector_val<std::_Simple_types<TyreCompoundSet> > : std::_Container_base0
{
  TyreCompoundSet *_Myfirst;
  TyreCompoundSet *_Mylast;
  TyreCompoundSet *_Myend;
};

/* 66974 */
struct __cppobj std::_Compressed_pair<std::allocator<TyreCompoundSet>,std::_Vector_val<std::_Simple_types<TyreCompoundSet> >,1> : std::allocator<TyreCompoundSet>
{
  std::_Vector_val<std::_Simple_types<TyreCompoundSet> > _Myval2;
};

/* 66975 */
struct std::_Vector_alloc<std::_Vec_base_types<TyreCompoundSet,std::allocator<TyreCompoundSet> > >
{
  std::_Compressed_pair<std::allocator<TyreCompoundSet>,std::_Vector_val<std::_Simple_types<TyreCompoundSet> >,1> _Mypair;
};

/* 66976 */
struct __cppobj std::vector<TyreCompoundSet,std::allocator<TyreCompoundSet> > : std::_Vector_alloc<std::_Vec_base_types<TyreCompoundSet,std::allocator<TyreCompoundSet> > >
{
};

/* 66977 */
struct TyresData
{
  std::vector<TyreCompoundSet,std::allocator<TyreCompoundSet> > compoundSets;
};

/* 66978 */
struct __cppobj std::allocator<WingData>
{
};

/* 66986 */
struct __cppobj std::_Vector_val<std::_Simple_types<WingData> > : std::_Container_base0
{
  WingData *_Myfirst;
  WingData *_Mylast;
  WingData *_Myend;
};

/* 66987 */
struct __cppobj std::_Compressed_pair<std::allocator<WingData>,std::_Vector_val<std::_Simple_types<WingData> >,1> : std::allocator<WingData>
{
  std::_Vector_val<std::_Simple_types<WingData> > _Myval2;
};

/* 66988 */
struct std::_Vector_alloc<std::_Vec_base_types<WingData,std::allocator<WingData> > >
{
  std::_Compressed_pair<std::allocator<WingData>,std::_Vector_val<std::_Simple_types<WingData> >,1> _Mypair;
};

/* 66989 */
struct __cppobj std::vector<WingData,std::allocator<WingData> > : std::_Vector_alloc<std::_Vec_base_types<WingData,std::allocator<WingData> > >
{
};

/* 66990 */
struct __cppobj std::allocator<DownForceData>
{
};

/* 66998 */
struct __cppobj std::_Vector_val<std::_Simple_types<DownForceData> > : std::_Container_base0
{
  DownForceData *_Myfirst;
  DownForceData *_Mylast;
  DownForceData *_Myend;
};

/* 66999 */
struct __cppobj std::_Compressed_pair<std::allocator<DownForceData>,std::_Vector_val<std::_Simple_types<DownForceData> >,1> : std::allocator<DownForceData>
{
  std::_Vector_val<std::_Simple_types<DownForceData> > _Myval2;
};

/* 67000 */
struct std::_Vector_alloc<std::_Vec_base_types<DownForceData,std::allocator<DownForceData> > >
{
  std::_Compressed_pair<std::allocator<DownForceData>,std::_Vector_val<std::_Simple_types<DownForceData> >,1> _Mypair;
};

/* 67001 */
struct __cppobj std::vector<DownForceData,std::allocator<DownForceData> > : std::_Vector_alloc<std::_Vec_base_types<DownForceData,std::allocator<DownForceData> > >
{
};

/* 1780 */
enum SuspType
{
  DWB = 0x0,
  Strut = 0x1,
};

/* 67002 */
struct SuspBumpStopDef
{
  float range;
  float ref;
  float force;
  float gamma;
};

/* 67003 */
struct SuspBumpStop
{
  SuspBumpStopDef up;
  SuspBumpStopDef down;
};

/* 67004 */
struct SuspDamageData
{
  float minSpeed;
  float gain;
  float maxDamage;
};

/* 67005 */
struct DamperData2W
{
  float bump;
  float rebound;
};

/* 67006 */
struct DamperData
{
  DamperData2W slow;
  DamperData2W fast;
  float fastThresholdBump;
  float fastThresholdRebound;
  Curve lut;
};

/* 67007 */
struct SuspHubData
{
  SuspType type;
  float mass;
  float rimOffset;
  SuspBumpStop bumpStop;
  float rodLength;
  float k;
  float progressiveK;
  float toeOut;
  float staticCamber;
  float packerRange;
  SuspDamageData damage;
  DamperData damper;
};

/* 67008 */
struct WishboneData
{
  vec3d carFront;
  vec3d carRear;
  vec3d wheel;
};

/* 67009 */
struct RodData
{
  vec3d car;
  vec3d wheel;
};

/* 67010 */
struct SuspDataDW
{
  WishboneData wbTop;
  WishboneData wbBottom;
  RodData steer;
};

/* 67011 */
struct SuspDataStrut
{
  RodData strut;
  WishboneData wbBottom;
  RodData steer;
};

/* 67012 */
struct SuspData
{
  float wheelbase;
  bool isBumpStopAbsolute;
  float cgLocation;
  float baseYFront;
  float baseYRear;
  float trackFront;
  float trackRear;
  SuspHubData hubs[2];
  SuspDataDW dw[2];
  SuspDataStrut struts[2];
};

/* 67013 */
struct ARBData
{
  float k;
};

/* 67014 */
struct __cppobj std::allocator<ColliderBoxesData>
{
};

/* 67016 */
struct __cppobj std::_Vector_val<std::_Simple_types<ColliderBoxesData> > : std::_Container_base0
{
  ColliderBoxesData *_Myfirst;
  ColliderBoxesData *_Mylast;
  ColliderBoxesData *_Myend;
};

/* 67017 */
struct __cppobj std::_Compressed_pair<std::allocator<ColliderBoxesData>,std::_Vector_val<std::_Simple_types<ColliderBoxesData> >,1> : std::allocator<ColliderBoxesData>
{
  std::_Vector_val<std::_Simple_types<ColliderBoxesData> > _Myval2;
};

/* 67018 */
struct std::_Vector_alloc<std::_Vec_base_types<ColliderBoxesData,std::allocator<ColliderBoxesData> > >
{
  std::_Compressed_pair<std::allocator<ColliderBoxesData>,std::_Vector_val<std::_Simple_types<ColliderBoxesData> >,1> _Mypair;
};

/* 67019 */
struct __cppobj std::vector<ColliderBoxesData,std::allocator<ColliderBoxesData> > : std::_Vector_alloc<std::_Vec_base_types<ColliderBoxesData,std::allocator<ColliderBoxesData> > >
{
};

/* 67020 */
struct TelemetryData
{
  bool exportEntireSession;
  bool debugPhysics;
  bool debugAI;
};

/* 67021 */
struct AIData
{
  float gearChangeUpRpm;
  float gearChangeDownPerc;
  float steerGain;
  float steerMinLookahead;
  float understeerHint;
  float tyresHint;
  float brakeHint;
  float aeroHint;
  float gasHint;
};

/* 67022 */
struct __cppobj std::allocator<TractionControlSettings>
{
};

/* 67024 */
struct __cppobj std::_Vector_val<std::_Simple_types<TractionControlSettings> > : std::_Container_base0
{
  TractionControlSettings *_Myfirst;
  TractionControlSettings *_Mylast;
  TractionControlSettings *_Myend;
};

/* 67025 */
struct __cppobj std::_Compressed_pair<std::allocator<TractionControlSettings>,std::_Vector_val<std::_Simple_types<TractionControlSettings> >,1> : std::allocator<TractionControlSettings>
{
  std::_Vector_val<std::_Simple_types<TractionControlSettings> > _Myval2;
};

/* 67026 */
struct std::_Vector_alloc<std::_Vec_base_types<TractionControlSettings,std::allocator<TractionControlSettings> > >
{
  std::_Compressed_pair<std::allocator<TractionControlSettings>,std::_Vector_val<std::_Simple_types<TractionControlSettings> >,1> _Mypair;
};

/* 67027 */
struct __cppobj std::vector<TractionControlSettings,std::allocator<TractionControlSettings> > : std::_Vector_alloc<std::_Vec_base_types<TractionControlSettings,std::allocator<TractionControlSettings> > >
{
};

/* 67028 */
struct TractionControlData
{
  bool isPresent;
  float intervalS;
  float minSpeedMS;
  std::vector<TractionControlSettings,std::allocator<TractionControlSettings> > settings;
};

/* 67029 */
struct __cppobj std::allocator<ABSSettings>
{
};

/* 67031 */
struct __cppobj std::_Vector_val<std::_Simple_types<ABSSettings> > : std::_Container_base0
{
  ABSSettings *_Myfirst;
  ABSSettings *_Mylast;
  ABSSettings *_Myend;
};

/* 67032 */
struct __cppobj std::_Compressed_pair<std::allocator<ABSSettings>,std::_Vector_val<std::_Simple_types<ABSSettings> >,1> : std::allocator<ABSSettings>
{
  std::_Vector_val<std::_Simple_types<ABSSettings> > _Myval2;
};

/* 67033 */
struct std::_Vector_alloc<std::_Vec_base_types<ABSSettings,std::allocator<ABSSettings> > >
{
  std::_Compressed_pair<std::allocator<ABSSettings>,std::_Vector_val<std::_Simple_types<ABSSettings> >,1> _Mypair;
};

/* 67034 */
struct __cppobj std::vector<ABSSettings,std::allocator<ABSSettings> > : std::_Vector_alloc<std::_Vec_base_types<ABSSettings,std::allocator<ABSSettings> > >
{
};

/* 67035 */
struct __declspec(align(8)) ABSData
{
  bool isPresent;
  float intervalS;
  int channels;
  std::vector<ABSSettings,std::allocator<ABSSettings> > settings;
  float minSpeedMS;
};

/* 67036 */
struct CarData
{
  std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > screenName;
  float massKG;
  vec3d bodyInertia;
  SteerData steerData;
  FuelData fuelData;
  float ridePickupPointHeightF;
  float ridePickupPointHeightR;
  float minHeight;
  BrakesData brakesData;
  EngineData engineData;
  DrivetrainData drivetrain;
  TyresData tyres;
  std::vector<WingData,std::allocator<WingData> > wings;
  std::vector<DownForceData,std::allocator<DownForceData> > downforces;
  SuspData suspensions;
  ARBData arbFront;
  ARBData arbRear;
  std::vector<ColliderBoxesData,std::allocator<ColliderBoxesData> > boxColliders;
  TelemetryData telemetryData;
  AIData ai;
  TractionControlData tractionControl;
  ABSData abs;
  float graphicsPitchRotationRAD;
  vec3f graphicsOffset;
};

/* 67037 */
struct __cppobj std::allocator<std::pair<void *,std::function<void __cdecl(TimeLineEvent const &)> > >
{
};

/* 67046 */
struct __cppobj std::_Vector_val<std::_Simple_types<std::pair<void *,std::function<void __cdecl(TimeLineEvent const &)> > > > : std::_Container_base0
{
  std::pair<void *,std::function<void __cdecl(TimeLineEvent const &)> > *_Myfirst;
  std::pair<void *,std::function<void __cdecl(TimeLineEvent const &)> > *_Mylast;
  std::pair<void *,std::function<void __cdecl(TimeLineEvent const &)> > *_Myend;
};

/* 67047 */
struct __cppobj std::_Compressed_pair<std::allocator<std::pair<void *,std::function<void __cdecl(TimeLineEvent const &)> > >,std::_Vector_val<std::_Simple_types<std::pair<void *,std::function<void __cdecl(TimeLineEvent const &)> > > >,1> : std::allocator<std::pair<void *,std::function<void __cdecl(TimeLineEvent const &)> > >
{
  std::_Vector_val<std::_Simple_types<std::pair<void *,std::function<void __cdecl(TimeLineEvent const &)> > > > _Myval2;
};

/* 67048 */
struct std::_Vector_alloc<std::_Vec_base_types<std::pair<void *,std::function<void __cdecl(TimeLineEvent const &)> >,std::allocator<std::pair<void *,std::function<void __cdecl(TimeLineEvent const &)> > > > >
{
  std::_Compressed_pair<std::allocator<std::pair<void *,std::function<void __cdecl(TimeLineEvent const &)> > >,std::_Vector_val<std::_Simple_types<std::pair<void *,std::function<void __cdecl(TimeLineEvent const &)> > > >,1> _Mypair;
};

/* 67049 */
struct __cppobj std::vector<std::pair<void *,std::function<void __cdecl(TimeLineEvent const &)> >,std::allocator<std::pair<void *,std::function<void __cdecl(TimeLineEvent const &)> > > > : std::_Vector_alloc<std::_Vec_base_types<std::pair<void *,std::function<void __cdecl(TimeLineEvent const &)> >,std::allocator<std::pair<void *,std::function<void __cdecl(TimeLineEvent const &)> > > > >
{
};

/* 67050 */
struct Event<TimeLineEvent>
{
  std::vector<std::pair<void *,std::function<void __cdecl(TimeLineEvent const &)> >,std::allocator<std::pair<void *,std::function<void __cdecl(TimeLineEvent const &)> > > > handlers;
};

/* 67051 */
struct __cppobj std::allocator<std::pair<void *,std::function<void __cdecl(OnStepCompleteEvent const &)> > >
{
};

/* 67061 */
struct __cppobj std::_Vector_val<std::_Simple_types<std::pair<void *,std::function<void __cdecl(OnStepCompleteEvent const &)> > > > : std::_Container_base0
{
  std::pair<void *,std::function<void __cdecl(OnStepCompleteEvent const &)> > *_Myfirst;
  std::pair<void *,std::function<void __cdecl(OnStepCompleteEvent const &)> > *_Mylast;
  std::pair<void *,std::function<void __cdecl(OnStepCompleteEvent const &)> > *_Myend;
};

/* 67062 */
struct __cppobj std::_Compressed_pair<std::allocator<std::pair<void *,std::function<void __cdecl(OnStepCompleteEvent const &)> > >,std::_Vector_val<std::_Simple_types<std::pair<void *,std::function<void __cdecl(OnStepCompleteEvent const &)> > > >,1> : std::allocator<std::pair<void *,std::function<void __cdecl(OnStepCompleteEvent const &)> > >
{
  std::_Vector_val<std::_Simple_types<std::pair<void *,std::function<void __cdecl(OnStepCompleteEvent const &)> > > > _Myval2;
};

/* 67063 */
struct std::_Vector_alloc<std::_Vec_base_types<std::pair<void *,std::function<void __cdecl(OnStepCompleteEvent const &)> >,std::allocator<std::pair<void *,std::function<void __cdecl(OnStepCompleteEvent const &)> > > > >
{
  std::_Compressed_pair<std::allocator<std::pair<void *,std::function<void __cdecl(OnStepCompleteEvent const &)> > >,std::_Vector_val<std::_Simple_types<std::pair<void *,std::function<void __cdecl(OnStepCompleteEvent const &)> > > >,1> _Mypair;
};

/* 67064 */
struct __cppobj std::vector<std::pair<void *,std::function<void __cdecl(OnStepCompleteEvent const &)> >,std::allocator<std::pair<void *,std::function<void __cdecl(OnStepCompleteEvent const &)> > > > : std::_Vector_alloc<std::_Vec_base_types<std::pair<void *,std::function<void __cdecl(OnStepCompleteEvent const &)> >,std::allocator<std::pair<void *,std::function<void __cdecl(OnStepCompleteEvent const &)> > > > >
{
};

/* 67065 */
struct Event<OnStepCompleteEvent>
{
  std::vector<std::pair<void *,std::function<void __cdecl(OnStepCompleteEvent const &)> >,std::allocator<std::pair<void *,std::function<void __cdecl(OnStepCompleteEvent const &)> > > > handlers;
};

/* 67066 */
struct __cppobj std::allocator<std::pair<void *,std::function<void __cdecl(OnControlsProviderChanged const &)> > >
{
};

/* 67080 */
struct __cppobj std::_Vector_val<std::_Simple_types<std::pair<void *,std::function<void __cdecl(OnControlsProviderChanged const &)> > > > : std::_Container_base0
{
  std::pair<void *,std::function<void __cdecl(OnControlsProviderChanged const &)> > *_Myfirst;
  std::pair<void *,std::function<void __cdecl(OnControlsProviderChanged const &)> > *_Mylast;
  std::pair<void *,std::function<void __cdecl(OnControlsProviderChanged const &)> > *_Myend;
};

/* 67081 */
struct __cppobj std::_Compressed_pair<std::allocator<std::pair<void *,std::function<void __cdecl(OnControlsProviderChanged const &)> > >,std::_Vector_val<std::_Simple_types<std::pair<void *,std::function<void __cdecl(OnControlsProviderChanged const &)> > > >,1> : std::allocator<std::pair<void *,std::function<void __cdecl(OnControlsProviderChanged const &)> > >
{
  std::_Vector_val<std::_Simple_types<std::pair<void *,std::function<void __cdecl(OnControlsProviderChanged const &)> > > > _Myval2;
};

/* 67082 */
struct std::_Vector_alloc<std::_Vec_base_types<std::pair<void *,std::function<void __cdecl(OnControlsProviderChanged const &)> >,std::allocator<std::pair<void *,std::function<void __cdecl(OnControlsProviderChanged const &)> > > > >
{
  std::_Compressed_pair<std::allocator<std::pair<void *,std::function<void __cdecl(OnControlsProviderChanged const &)> > >,std::_Vector_val<std::_Simple_types<std::pair<void *,std::function<void __cdecl(OnControlsProviderChanged const &)> > > >,1> _Mypair;
};

/* 67083 */
struct __cppobj std::vector<std::pair<void *,std::function<void __cdecl(OnControlsProviderChanged const &)> >,std::allocator<std::pair<void *,std::function<void __cdecl(OnControlsProviderChanged const &)> > > > : std::_Vector_alloc<std::_Vec_base_types<std::pair<void *,std::function<void __cdecl(OnControlsProviderChanged const &)> >,std::allocator<std::pair<void *,std::function<void __cdecl(OnControlsProviderChanged const &)> > > > >
{
};

/* 67084 */
struct Event<OnControlsProviderChanged>
{
  std::vector<std::pair<void *,std::function<void __cdecl(OnControlsProviderChanged const &)> >,std::allocator<std::pair<void *,std::function<void __cdecl(OnControlsProviderChanged const &)> > > > handlers;
};

/* 67085 */
struct __cppobj std::allocator<std::pair<void *,std::function<void __cdecl(OnLapCompletedEvent const &)> > >
{
};

/* 67094 */
struct __cppobj std::_Vector_val<std::_Simple_types<std::pair<void *,std::function<void __cdecl(OnLapCompletedEvent const &)> > > > : std::_Container_base0
{
  std::pair<void *,std::function<void __cdecl(OnLapCompletedEvent const &)> > *_Myfirst;
  std::pair<void *,std::function<void __cdecl(OnLapCompletedEvent const &)> > *_Mylast;
  std::pair<void *,std::function<void __cdecl(OnLapCompletedEvent const &)> > *_Myend;
};

/* 67095 */
struct __cppobj std::_Compressed_pair<std::allocator<std::pair<void *,std::function<void __cdecl(OnLapCompletedEvent const &)> > >,std::_Vector_val<std::_Simple_types<std::pair<void *,std::function<void __cdecl(OnLapCompletedEvent const &)> > > >,1> : std::allocator<std::pair<void *,std::function<void __cdecl(OnLapCompletedEvent const &)> > >
{
  std::_Vector_val<std::_Simple_types<std::pair<void *,std::function<void __cdecl(OnLapCompletedEvent const &)> > > > _Myval2;
};

/* 67096 */
struct std::_Vector_alloc<std::_Vec_base_types<std::pair<void *,std::function<void __cdecl(OnLapCompletedEvent const &)> >,std::allocator<std::pair<void *,std::function<void __cdecl(OnLapCompletedEvent const &)> > > > >
{
  std::_Compressed_pair<std::allocator<std::pair<void *,std::function<void __cdecl(OnLapCompletedEvent const &)> > >,std::_Vector_val<std::_Simple_types<std::pair<void *,std::function<void __cdecl(OnLapCompletedEvent const &)> > > >,1> _Mypair;
};

/* 67097 */
struct __cppobj std::vector<std::pair<void *,std::function<void __cdecl(OnLapCompletedEvent const &)> >,std::allocator<std::pair<void *,std::function<void __cdecl(OnLapCompletedEvent const &)> > > > : std::_Vector_alloc<std::_Vec_base_types<std::pair<void *,std::function<void __cdecl(OnLapCompletedEvent const &)> >,std::allocator<std::pair<void *,std::function<void __cdecl(OnLapCompletedEvent const &)> > > > >
{
};

/* 67098 */
struct Event<OnLapCompletedEvent>
{
  std::vector<std::pair<void *,std::function<void __cdecl(OnLapCompletedEvent const &)> >,std::allocator<std::pair<void *,std::function<void __cdecl(OnLapCompletedEvent const &)> > > > handlers;
};

/* 67099 */
struct __cppobj std::allocator<std::pair<void *,std::function<void __cdecl(OnSectorSplitEvent const &)> > >
{
};

/* 67108 */
struct __cppobj std::_Vector_val<std::_Simple_types<std::pair<void *,std::function<void __cdecl(OnSectorSplitEvent const &)> > > > : std::_Container_base0
{
  std::pair<void *,std::function<void __cdecl(OnSectorSplitEvent const &)> > *_Myfirst;
  std::pair<void *,std::function<void __cdecl(OnSectorSplitEvent const &)> > *_Mylast;
  std::pair<void *,std::function<void __cdecl(OnSectorSplitEvent const &)> > *_Myend;
};

/* 67109 */
struct __cppobj std::_Compressed_pair<std::allocator<std::pair<void *,std::function<void __cdecl(OnSectorSplitEvent const &)> > >,std::_Vector_val<std::_Simple_types<std::pair<void *,std::function<void __cdecl(OnSectorSplitEvent const &)> > > >,1> : std::allocator<std::pair<void *,std::function<void __cdecl(OnSectorSplitEvent const &)> > >
{
  std::_Vector_val<std::_Simple_types<std::pair<void *,std::function<void __cdecl(OnSectorSplitEvent const &)> > > > _Myval2;
};

/* 67110 */
struct std::_Vector_alloc<std::_Vec_base_types<std::pair<void *,std::function<void __cdecl(OnSectorSplitEvent const &)> >,std::allocator<std::pair<void *,std::function<void __cdecl(OnSectorSplitEvent const &)> > > > >
{
  std::_Compressed_pair<std::allocator<std::pair<void *,std::function<void __cdecl(OnSectorSplitEvent const &)> > >,std::_Vector_val<std::_Simple_types<std::pair<void *,std::function<void __cdecl(OnSectorSplitEvent const &)> > > >,1> _Mypair;
};

/* 67111 */
struct __cppobj std::vector<std::pair<void *,std::function<void __cdecl(OnSectorSplitEvent const &)> >,std::allocator<std::pair<void *,std::function<void __cdecl(OnSectorSplitEvent const &)> > > > : std::_Vector_alloc<std::_Vec_base_types<std::pair<void *,std::function<void __cdecl(OnSectorSplitEvent const &)> >,std::allocator<std::pair<void *,std::function<void __cdecl(OnSectorSplitEvent const &)> > > > >
{
};

/* 67112 */
struct Event<OnSectorSplitEvent>
{
  std::vector<std::pair<void *,std::function<void __cdecl(OnSectorSplitEvent const &)> >,std::allocator<std::pair<void *,std::function<void __cdecl(OnSectorSplitEvent const &)> > > > handlers;
};

/* 67113 */
struct __cppobj std::allocator<std::pair<void *,std::function<void __cdecl(vec3d const &)> > >
{
};

/* 67121 */
struct __cppobj std::_Vector_val<std::_Simple_types<std::pair<void *,std::function<void __cdecl(vec3d const &)> > > > : std::_Container_base0
{
  std::pair<void *,std::function<void __cdecl(vec3d const &)> > *_Myfirst;
  std::pair<void *,std::function<void __cdecl(vec3d const &)> > *_Mylast;
  std::pair<void *,std::function<void __cdecl(vec3d const &)> > *_Myend;
};

/* 67122 */
struct __cppobj std::_Compressed_pair<std::allocator<std::pair<void *,std::function<void __cdecl(vec3d const &)> > >,std::_Vector_val<std::_Simple_types<std::pair<void *,std::function<void __cdecl(vec3d const &)> > > >,1> : std::allocator<std::pair<void *,std::function<void __cdecl(vec3d const &)> > >
{
  std::_Vector_val<std::_Simple_types<std::pair<void *,std::function<void __cdecl(vec3d const &)> > > > _Myval2;
};

/* 67123 */
struct std::_Vector_alloc<std::_Vec_base_types<std::pair<void *,std::function<void __cdecl(vec3d const &)> >,std::allocator<std::pair<void *,std::function<void __cdecl(vec3d const &)> > > > >
{
  std::_Compressed_pair<std::allocator<std::pair<void *,std::function<void __cdecl(vec3d const &)> > >,std::_Vector_val<std::_Simple_types<std::pair<void *,std::function<void __cdecl(vec3d const &)> > > >,1> _Mypair;
};

/* 67124 */
struct __cppobj std::vector<std::pair<void *,std::function<void __cdecl(vec3d const &)> >,std::allocator<std::pair<void *,std::function<void __cdecl(vec3d const &)> > > > : std::_Vector_alloc<std::_Vec_base_types<std::pair<void *,std::function<void __cdecl(vec3d const &)> >,std::allocator<std::pair<void *,std::function<void __cdecl(vec3d const &)> > > > >
{
};

/* 67125 */
struct Event<vec3d>
{
  std::vector<std::pair<void *,std::function<void __cdecl(vec3d const &)> >,std::allocator<std::pair<void *,std::function<void __cdecl(vec3d const &)> > > > handlers;
};

/* 67126 */
struct __cppobj std::allocator<std::pair<void *,std::function<void __cdecl(std::pair<int,int> const &)> > >
{
};

/* 67135 */
struct __cppobj std::_Vector_val<std::_Simple_types<std::pair<void *,std::function<void __cdecl(std::pair<int,int> const &)> > > > : std::_Container_base0
{
  std::pair<void *,std::function<void __cdecl(std::pair<int,int> const &)> > *_Myfirst;
  std::pair<void *,std::function<void __cdecl(std::pair<int,int> const &)> > *_Mylast;
  std::pair<void *,std::function<void __cdecl(std::pair<int,int> const &)> > *_Myend;
};

/* 67136 */
struct __cppobj std::_Compressed_pair<std::allocator<std::pair<void *,std::function<void __cdecl(std::pair<int,int> const &)> > >,std::_Vector_val<std::_Simple_types<std::pair<void *,std::function<void __cdecl(std::pair<int,int> const &)> > > >,1> : std::allocator<std::pair<void *,std::function<void __cdecl(std::pair<int,int> const &)> > >
{
  std::_Vector_val<std::_Simple_types<std::pair<void *,std::function<void __cdecl(std::pair<int,int> const &)> > > > _Myval2;
};

/* 67137 */
struct std::_Vector_alloc<std::_Vec_base_types<std::pair<void *,std::function<void __cdecl(std::pair<int,int> const &)> >,std::allocator<std::pair<void *,std::function<void __cdecl(std::pair<int,int> const &)> > > > >
{
  std::_Compressed_pair<std::allocator<std::pair<void *,std::function<void __cdecl(std::pair<int,int> const &)> > >,std::_Vector_val<std::_Simple_types<std::pair<void *,std::function<void __cdecl(std::pair<int,int> const &)> > > >,1> _Mypair;
};

/* 67138 */
struct __cppobj std::vector<std::pair<void *,std::function<void __cdecl(std::pair<int,int> const &)> >,std::allocator<std::pair<void *,std::function<void __cdecl(std::pair<int,int> const &)> > > > : std::_Vector_alloc<std::_Vec_base_types<std::pair<void *,std::function<void __cdecl(std::pair<int,int> const &)> >,std::allocator<std::pair<void *,std::function<void __cdecl(std::pair<int,int> const &)> > > > >
{
};

/* 67139 */
struct Event<std::pair<int,int> >
{
  std::vector<std::pair<void *,std::function<void __cdecl(std::pair<int,int> const &)> >,std::allocator<std::pair<void *,std::function<void __cdecl(std::pair<int,int> const &)> > > > handlers;
};

/* 67140 */
struct __cppobj std::allocator<std::pair<void *,std::function<void __cdecl(OnCollisionEvent const &)> > >
{
};

/* 67152 */
struct __cppobj std::_Vector_val<std::_Simple_types<std::pair<void *,std::function<void __cdecl(OnCollisionEvent const &)> > > > : std::_Container_base0
{
  std::pair<void *,std::function<void __cdecl(OnCollisionEvent const &)> > *_Myfirst;
  std::pair<void *,std::function<void __cdecl(OnCollisionEvent const &)> > *_Mylast;
  std::pair<void *,std::function<void __cdecl(OnCollisionEvent const &)> > *_Myend;
};

/* 67153 */
struct __cppobj std::_Compressed_pair<std::allocator<std::pair<void *,std::function<void __cdecl(OnCollisionEvent const &)> > >,std::_Vector_val<std::_Simple_types<std::pair<void *,std::function<void __cdecl(OnCollisionEvent const &)> > > >,1> : std::allocator<std::pair<void *,std::function<void __cdecl(OnCollisionEvent const &)> > >
{
  std::_Vector_val<std::_Simple_types<std::pair<void *,std::function<void __cdecl(OnCollisionEvent const &)> > > > _Myval2;
};

/* 67154 */
struct std::_Vector_alloc<std::_Vec_base_types<std::pair<void *,std::function<void __cdecl(OnCollisionEvent const &)> >,std::allocator<std::pair<void *,std::function<void __cdecl(OnCollisionEvent const &)> > > > >
{
  std::_Compressed_pair<std::allocator<std::pair<void *,std::function<void __cdecl(OnCollisionEvent const &)> > >,std::_Vector_val<std::_Simple_types<std::pair<void *,std::function<void __cdecl(OnCollisionEvent const &)> > > >,1> _Mypair;
};

/* 67155 */
struct __cppobj std::vector<std::pair<void *,std::function<void __cdecl(OnCollisionEvent const &)> >,std::allocator<std::pair<void *,std::function<void __cdecl(OnCollisionEvent const &)> > > > : std::_Vector_alloc<std::_Vec_base_types<std::pair<void *,std::function<void __cdecl(OnCollisionEvent const &)> >,std::allocator<std::pair<void *,std::function<void __cdecl(OnCollisionEvent const &)> > > > >
{
};

/* 67156 */
struct Event<OnCollisionEvent>
{
  std::vector<std::pair<void *,std::function<void __cdecl(OnCollisionEvent const &)> >,std::allocator<std::pair<void *,std::function<void __cdecl(OnCollisionEvent const &)> > > > handlers;
};

/* 67070 */
struct CarControls
{
  bool gearUp;
  bool gearDn;
  bool drs;
  bool kers;
  bool brakeBalanceUp;
  bool brakeBalanceDn;
  int requestedGearIndex;
  bool isShifterSupported;
  float handBrake;
  float gas;
  float brake;
  float steer;
  float clutch;
};

/* 67646 */
struct __cppobj std::allocator<TimeLineStatus>
{
};

/* 67648 */
struct __cppobj std::_Vector_val<std::_Simple_types<TimeLineStatus> > : std::_Container_base0
{
  TimeLineStatus *_Myfirst;
  TimeLineStatus *_Mylast;
  TimeLineStatus *_Myend;
};

/* 67649 */
struct __cppobj std::_Compressed_pair<std::allocator<TimeLineStatus>,std::_Vector_val<std::_Simple_types<TimeLineStatus> >,1> : std::allocator<TimeLineStatus>
{
  std::_Vector_val<std::_Simple_types<TimeLineStatus> > _Myval2;
};

/* 67650 */
struct std::_Vector_alloc<std::_Vec_base_types<TimeLineStatus,std::allocator<TimeLineStatus> > >
{
  std::_Compressed_pair<std::allocator<TimeLineStatus>,std::_Vector_val<std::_Simple_types<TimeLineStatus> >,1> _Mypair;
};

/* 67651 */
struct __cppobj std::vector<TimeLineStatus,std::allocator<TimeLineStatus> > : std::_Vector_alloc<std::_Vec_base_types<TimeLineStatus,std::allocator<TimeLineStatus> > >
{
};

/* 67652 */
struct TimeTransponder
{
  std::vector<TimeLineStatus,std::allocator<TimeLineStatus> > status;
  Car *car;
};

/* 67653 */
struct __cppobj std::allocator<CarCollisionBox>
{
};

/* 67655 */
struct __cppobj std::_Vector_val<std::_Simple_types<CarCollisionBox> > : std::_Container_base0
{
  CarCollisionBox *_Myfirst;
  CarCollisionBox *_Mylast;
  CarCollisionBox *_Myend;
};

/* 67656 */
struct __cppobj std::_Compressed_pair<std::allocator<CarCollisionBox>,std::_Vector_val<std::_Simple_types<CarCollisionBox> >,1> : std::allocator<CarCollisionBox>
{
  std::_Vector_val<std::_Simple_types<CarCollisionBox> > _Myval2;
};

/* 67657 */
struct std::_Vector_alloc<std::_Vec_base_types<CarCollisionBox,std::allocator<CarCollisionBox> > >
{
  std::_Compressed_pair<std::allocator<CarCollisionBox>,std::_Vector_val<std::_Simple_types<CarCollisionBox> >,1> _Mypair;
};

/* 67658 */
struct __cppobj std::vector<CarCollisionBox,std::allocator<CarCollisionBox> > : std::_Vector_alloc<std::_Vec_base_types<CarCollisionBox,std::allocator<CarCollisionBox> > >
{
};

/* 67659 */
struct CarColliderManager
{
  bool isLive;
  std::vector<CarCollisionBox,std::allocator<CarCollisionBox> > boxes;
  std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > carModel;
  IRigidBody *carBody;
  Car *car;
};

/* 67660 */
struct GearElement
{
  long double velocity;
  long double inertia;
  long double oldVelocity;
};

/* 67661 */
struct __cppobj std::allocator<SGearRatio>
{
};

/* 67663 */
struct __cppobj std::_Vector_val<std::_Simple_types<SGearRatio> > : std::_Container_base0
{
  SGearRatio *_Myfirst;
  SGearRatio *_Mylast;
  SGearRatio *_Myend;
};

/* 67664 */
struct __cppobj std::_Compressed_pair<std::allocator<SGearRatio>,std::_Vector_val<std::_Simple_types<SGearRatio> >,1> : std::allocator<SGearRatio>
{
  std::_Vector_val<std::_Simple_types<SGearRatio> > _Myval2;
};

/* 67665 */
struct std::_Vector_alloc<std::_Vec_base_types<SGearRatio,std::allocator<SGearRatio> > >
{
  std::_Compressed_pair<std::allocator<SGearRatio>,std::_Vector_val<std::_Simple_types<SGearRatio> >,1> _Mypair;
};

/* 67666 */
struct __cppobj std::vector<SGearRatio,std::allocator<SGearRatio> > : std::_Vector_alloc<std::_Vec_base_types<SGearRatio,std::allocator<SGearRatio> > >
{
};

/* 1860 */
enum DifferentialType
{
  LSD = 0x0,
  Spool = 0x1,
};

/* 67667 */
struct EngineStatus
{
  long double outTorque;
  float torqueAntiTCS;
  float externalCoastTorque;
  float turboBoost;
  bool isLimiterOn;
  float ignitionActivationTimeS;
  float starterTimeS;
};

/* 67668 */
struct __cppobj std::allocator<Turbo>
{
};

/* 67670 */
struct __cppobj std::_Vector_val<std::_Simple_types<Turbo> > : std::_Container_base0
{
  Turbo *_Myfirst;
  Turbo *_Mylast;
  Turbo *_Myend;
};

/* 67671 */
struct __cppobj std::_Compressed_pair<std::allocator<Turbo>,std::_Vector_val<std::_Simple_types<Turbo> >,1> : std::allocator<Turbo>
{
  std::_Vector_val<std::_Simple_types<Turbo> > _Myval2;
};

/* 67672 */
struct std::_Vector_alloc<std::_Vec_base_types<Turbo,std::allocator<Turbo> > >
{
  std::_Compressed_pair<std::allocator<Turbo>,std::_Vector_val<std::_Simple_types<Turbo> >,1> _Mypair;
};

/* 67673 */
struct __cppobj std::vector<Turbo,std::allocator<Turbo> > : std::_Vector_alloc<std::_Vec_base_types<Turbo,std::allocator<Turbo> > >
{
};

/* 67674 */
struct EngineCommands
{
  bool starter;
  bool stop;
};

/* 67675 */
struct __cppobj std::allocator<ITorqueGenerator *>
{
};

/* 67678 */
struct __cppobj std::_Vector_val<std::_Simple_types<ITorqueGenerator *> > : std::_Container_base0
{
  ITorqueGenerator **_Myfirst;
  ITorqueGenerator **_Mylast;
  ITorqueGenerator **_Myend;
};

/* 67679 */
struct __cppobj std::_Compressed_pair<std::allocator<ITorqueGenerator *>,std::_Vector_val<std::_Simple_types<ITorqueGenerator *> >,1> : std::allocator<ITorqueGenerator *>
{
  std::_Vector_val<std::_Simple_types<ITorqueGenerator *> > _Myval2;
};

/* 67680 */
struct std::_Vector_alloc<std::_Vec_base_types<ITorqueGenerator *,std::allocator<ITorqueGenerator *> > >
{
  std::_Compressed_pair<std::allocator<ITorqueGenerator *>,std::_Vector_val<std::_Simple_types<ITorqueGenerator *> >,1> _Mypair;
};

/* 67681 */
struct __cppobj std::vector<ITorqueGenerator *,std::allocator<ITorqueGenerator *> > : std::_Vector_alloc<std::_Vec_base_types<ITorqueGenerator *,std::allocator<ITorqueGenerator *> > >
{
};

/* 67682 */
struct __cppobj std::allocator<ICoastGenerator *>
{
};

/* 67685 */
struct __cppobj std::_Vector_val<std::_Simple_types<ICoastGenerator *> > : std::_Container_base0
{
  ICoastGenerator **_Myfirst;
  ICoastGenerator **_Mylast;
  ICoastGenerator **_Myend;
};

/* 67686 */
struct __cppobj std::_Compressed_pair<std::allocator<ICoastGenerator *>,std::_Vector_val<std::_Simple_types<ICoastGenerator *> >,1> : std::allocator<ICoastGenerator *>
{
  std::_Vector_val<std::_Simple_types<ICoastGenerator *> > _Myval2;
};

/* 67687 */
struct std::_Vector_alloc<std::_Vec_base_types<ICoastGenerator *,std::allocator<ICoastGenerator *> > >
{
  std::_Compressed_pair<std::allocator<ICoastGenerator *>,std::_Vector_val<std::_Simple_types<ICoastGenerator *> >,1> _Mypair;
};

/* 67688 */
struct __cppobj std::vector<ICoastGenerator *,std::allocator<ICoastGenerator *> > : std::_Vector_alloc<std::_Vec_base_types<ICoastGenerator *,std::allocator<ICoastGenerator *> > >
{
};

/* 67689 */
struct SACEngineInput
{
  float gasInput;
  float fuelInput;
  float carSpeed;
  float altitude;
  float rpm;
};

/* 67690 */
struct __cppobj std::allocator<TurboDynamicController>
{
};

/* 67693 */
struct __cppobj std::_Vector_val<std::_Simple_types<TurboDynamicController> > : std::_Container_base0
{
  TurboDynamicController *_Myfirst;
  TurboDynamicController *_Mylast;
  TurboDynamicController *_Myend;
};

/* 67694 */
struct __cppobj std::_Compressed_pair<std::allocator<TurboDynamicController>,std::_Vector_val<std::_Simple_types<TurboDynamicController> >,1> : std::allocator<TurboDynamicController>
{
  std::_Vector_val<std::_Simple_types<TurboDynamicController> > _Myval2;
};

/* 67695 */
struct std::_Vector_alloc<std::_Vec_base_types<TurboDynamicController,std::allocator<TurboDynamicController> > >
{
  std::_Compressed_pair<std::allocator<TurboDynamicController>,std::_Vector_val<std::_Simple_types<TurboDynamicController> >,1> _Mypair;
};

/* 67696 */
struct __cppobj std::vector<TurboDynamicController,std::allocator<TurboDynamicController> > : std::_Vector_alloc<std::_Vec_base_types<TurboDynamicController,std::allocator<TurboDynamicController> > >
{
};

/* 67697 */
struct __declspec(align(4)) Engine
{
  EngineStatus status;
  float coastTorqueMultiplier;
  float limiterMultiplier;
  float fuelPressure;
  float bov;
  std::vector<Turbo,std::allocator<Turbo> > turbos;
  float starterTorque;
  float restrictor;
  EngineCommands commands;
  bool isEngineStallEnabled;
  EngineData *data;
  std::vector<ITorqueGenerator *,std::allocator<ITorqueGenerator *> > torqueGenerators;
  std::vector<ICoastGenerator *,std::allocator<ICoastGenerator *> > coastGenerators;
  bool turboAdjustableFromCockpit;
  SACEngineInput lastInput;
  int limiterOn;
  float electronicOverride;
  float maxPowerW_Dynamic;
  float maxPowerW;
  float maxTorqueNM;
  float maxPowerRPM;
  float maxTorqueRPM;
  long double torque0;
  long double dtorque0;
  PhysicsEngine *physicsEngine;
  float gasUsage;
  long double lifeLeft;
  Car *car;
  std::vector<TurboDynamicController,std::allocator<TurboDynamicController> > turboControllers;
  unsigned int currentMapIndex;
  bool ignition;
};

/* 67698 */
struct DifferentialSetting
{
  float power;
  float coast;
  float preload;
  DifferentialType type;
};

/* 67699 */
struct __declspec(align(8)) AWD2Data
{
  long double ramp;
  long double maxTorque;
  float currentLockTorque;
};

/* 67700 */
struct __cppobj std::allocator<std::pair<void *,std::function<void __cdecl(OnGearRequestEvent const &)> > >
{
};

/* 67709 */
struct __cppobj std::_Vector_val<std::_Simple_types<std::pair<void *,std::function<void __cdecl(OnGearRequestEvent const &)> > > > : std::_Container_base0
{
  std::pair<void *,std::function<void __cdecl(OnGearRequestEvent const &)> > *_Myfirst;
  std::pair<void *,std::function<void __cdecl(OnGearRequestEvent const &)> > *_Mylast;
  std::pair<void *,std::function<void __cdecl(OnGearRequestEvent const &)> > *_Myend;
};

/* 67710 */
struct __cppobj std::_Compressed_pair<std::allocator<std::pair<void *,std::function<void __cdecl(OnGearRequestEvent const &)> > >,std::_Vector_val<std::_Simple_types<std::pair<void *,std::function<void __cdecl(OnGearRequestEvent const &)> > > >,1> : std::allocator<std::pair<void *,std::function<void __cdecl(OnGearRequestEvent const &)> > >
{
  std::_Vector_val<std::_Simple_types<std::pair<void *,std::function<void __cdecl(OnGearRequestEvent const &)> > > > _Myval2;
};

/* 67711 */
struct std::_Vector_alloc<std::_Vec_base_types<std::pair<void *,std::function<void __cdecl(OnGearRequestEvent const &)> >,std::allocator<std::pair<void *,std::function<void __cdecl(OnGearRequestEvent const &)> > > > >
{
  std::_Compressed_pair<std::allocator<std::pair<void *,std::function<void __cdecl(OnGearRequestEvent const &)> > >,std::_Vector_val<std::_Simple_types<std::pair<void *,std::function<void __cdecl(OnGearRequestEvent const &)> > > >,1> _Mypair;
};

/* 67712 */
struct __cppobj std::vector<std::pair<void *,std::function<void __cdecl(OnGearRequestEvent const &)> >,std::allocator<std::pair<void *,std::function<void __cdecl(OnGearRequestEvent const &)> > > > : std::_Vector_alloc<std::_Vec_base_types<std::pair<void *,std::function<void __cdecl(OnGearRequestEvent const &)> >,std::allocator<std::pair<void *,std::function<void __cdecl(OnGearRequestEvent const &)> > > > >
{
};

/* 67713 */
struct Event<OnGearRequestEvent>
{
  std::vector<std::pair<void *,std::function<void __cdecl(OnGearRequestEvent const &)> >,std::allocator<std::pair<void *,std::function<void __cdecl(OnGearRequestEvent const &)> > > > handlers;
};

/* 1859 */
enum GearChangeRequest
{
  eNoGearRequest = 0x0,
  eChangeUp = 0x1,
  eChangeDown = 0x2,
  eChangeToGear = 0x3,
};

/* 67748 */
struct __declspec(align(8)) GearRequestStatus
{
  GearChangeRequest request;
  long double timeAccumulator;
  long double timeout;
  int requestedGear;
};

/* 67749 */
struct __cppobj std::default_delete<DynamicController>
{
};

/* 67750 */
struct __cppobj std::_Compressed_pair<std::default_delete<DynamicController>,DynamicController *,1> : std::default_delete<DynamicController>
{
  DynamicController *_Myval2;
};

/* 67751 */
struct std::_Unique_ptr_base<DynamicController,std::default_delete<DynamicController> >
{
  std::_Compressed_pair<std::default_delete<DynamicController>,DynamicController *,1> _Mypair;
};

/* 67752 */
struct __cppobj std::unique_ptr<DynamicController,std::default_delete<DynamicController> > : std::_Unique_ptr_base<DynamicController,std::default_delete<DynamicController> >
{
};

/* 67753 */
struct DrivetrainControllers
{
  std::unique_ptr<DynamicController,std::default_delete<DynamicController> > awdFrontShare;
  std::unique_ptr<DynamicController,std::default_delete<DynamicController> > awdCenterLock;
  std::unique_ptr<DynamicController,std::default_delete<DynamicController> > singleDiffLock;
  std::unique_ptr<DynamicController,std::default_delete<DynamicController> > awd2;
};

/* 67754 */
struct Drivetrain
{
  bool isGearGrinding;
  GearElement engine;
  GearElement drive;
  GearElement outShaftL;
  GearElement outShaftR;
  GearElement outShaftLF;
  GearElement outShaftRF;
  std::vector<SGearRatio,std::allocator<SGearRatio> > gears;
  long double rootVelocity;
  bool clutchOpenState;
  float ratio;
  DifferentialType diffType;
  long double cutOff;
  Engine acEngine;
  long double totalTorque;
  float awdFrontShare;
  DifferentialSetting awdFrontDiff;
  DifferentialSetting awdRearDiff;
  DifferentialSetting awdCenterDiff;
  AWD2Data awd2;
  long double currentClutchTorque;
  std::function<void __cdecl(void)> downshiftProtectionFunction;
  Event<OnGearRequestEvent> evOnGearRequest;
  Car *car;
  int currentGear;
  long double lastRatio;
  Tyre *tyreLeft;
  Tyre *tyreRight;
  GearRequestStatus gearRequest;
  std::vector<ITorqueGenerator *,std::allocator<ITorqueGenerator *> > wheelTorqueGenerators;
  float orgRpmWindow;
  int lockCounter[4];
  DrivetrainControllers controllers;
  float locClutch;
  DrivetrainData *data;
  long double dogPosition;
  long double phase;
};

/* 67030 */
struct ABSSettings
{
  float minSlipRatio;
  float maxSlipRatio;
  float refSlipAngleRAD;
  float cutLevel;
};

/* 67755 */
struct ABS
{
  bool isInAction;
  Car *car;
  long double timeAccumulator;
  unsigned int currentMode;
  ABSSettings currentSettings;
  ABSData *data;
};

/* 67023 */
struct TractionControlSettings
{
  float minSlipRatio;
  float maxSlipRatio;
  float refSlipAngleRAD;
  float engineCutLevel;
};

/* 67756 */
struct __declspec(align(8)) TractionControl
{
  bool isInAction;
  TractionControlSettings currentSetting;
  TractionControlData *data;
  Car *car;
  long double timeAccumulator;
  unsigned int currentMode;
};

/* 67757 */
struct __declspec(align(4)) SpeedLimiter
{
  bool limitCommand;
  bool isLimiting;
  Car *car;
  float gain;
  bool shouldLimit;
};

/* 67758 */
struct __cppobj std::allocator<Wing>
{
};

/* 67767 */
struct __cppobj std::_Vector_val<std::_Simple_types<Wing> > : std::_Container_base0
{
  Wing *_Myfirst;
  Wing *_Mylast;
  Wing *_Myend;
};

/* 67768 */
struct __cppobj std::_Compressed_pair<std::allocator<Wing>,std::_Vector_val<std::_Simple_types<Wing> >,1> : std::allocator<Wing>
{
  std::_Vector_val<std::_Simple_types<Wing> > _Myval2;
};

/* 67769 */
struct std::_Vector_alloc<std::_Vec_base_types<Wing,std::allocator<Wing> > >
{
  std::_Compressed_pair<std::allocator<Wing>,std::_Vector_val<std::_Simple_types<Wing> >,1> _Mypair;
};

/* 67770 */
struct __cppobj std::vector<Wing,std::allocator<Wing> > : std::_Vector_alloc<std::_Vec_base_types<Wing,std::allocator<Wing> > >
{
};

/* 67771 */
struct __cppobj std::allocator<DownForce>
{
};

/* 67780 */
struct __cppobj std::_Vector_val<std::_Simple_types<DownForce> > : std::_Container_base0
{
  DownForce *_Myfirst;
  DownForce *_Mylast;
  DownForce *_Myend;
};

/* 67781 */
struct __cppobj std::_Compressed_pair<std::allocator<DownForce>,std::_Vector_val<std::_Simple_types<DownForce> >,1> : std::allocator<DownForce>
{
  std::_Vector_val<std::_Simple_types<DownForce> > _Myval2;
};

/* 67782 */
struct std::_Vector_alloc<std::_Vec_base_types<DownForce,std::allocator<DownForce> > >
{
  std::_Compressed_pair<std::allocator<DownForce>,std::_Vector_val<std::_Simple_types<DownForce> >,1> _Mypair;
};

/* 67783 */
struct __cppobj std::vector<DownForce,std::allocator<DownForce> > : std::_Vector_alloc<std::_Vec_base_types<DownForce,std::allocator<DownForce> > >
{
};

/* 67784 */
struct __cppobj std::default_delete<RaceEngineer>
{
};

/* 67785 */
struct __cppobj std::_Compressed_pair<std::default_delete<RaceEngineer>,RaceEngineer *,1> : std::default_delete<RaceEngineer>
{
  RaceEngineer *_Myval2;
};

/* 67786 */
struct std::_Unique_ptr_base<RaceEngineer,std::default_delete<RaceEngineer> >
{
  std::_Compressed_pair<std::default_delete<RaceEngineer>,RaceEngineer *,1> _Mypair;
};

/* 67787 */
struct __cppobj std::unique_ptr<RaceEngineer,std::default_delete<RaceEngineer> > : std::_Unique_ptr_base<RaceEngineer,std::default_delete<RaceEngineer> >
{
};

/* 67788 */
struct AeroMap
{
  float airDensity;
  int nFrontElem;
  int nRearElem;
  int nElem;
  std::vector<Wing,std::allocator<Wing> > wings;
  std::vector<DownForce,std::allocator<DownForce> > downforces;
  Car *car;
  std::unique_ptr<RaceEngineer,std::default_delete<RaceEngineer> > engineer;
};

/* 67714 */
struct TyreInputs
{
  float brakeTorque;
  float handBrakeTorque;
  float electricTorque;
};

/* 66969 */
struct TyreData
{
  float width;
  float radius;
  float k;
  float d;
  float angularInertia;
  float thermalFrictionK;
  float thermalRollingK;
  float thermalRollingSurfaceK;
  float grainThreshold;
  float blisterThreshold;
  float grainGamma;
  float blisterGamma;
  float grainGain;
  float blisterGain;
  float rimRadius;
  float optimumTemp;
  float blanketTemp;
  float softnessIndex;
  float radiusRaiseK;
  float maxWearMult;
  float treadHeightMM;
  float treadConsumptionK;
  float tyreMass;
  float flexC;
  float flexK;
  float longitudinalFlexC;
  float longitudinalFlexK;
};

/* 66968 */
struct __declspec(align(8)) TyreModelData
{
  float Dy0;
  float Dx0;
  float Fz0;
  float speedSensitivity;
  float relaxationLength;
  float rr0;
  float rr1;
  float rr_slip;
  float camberGain;
  float pressureFlexGain;
  float pressureRRGain;
  float pressureGainD;
  float idealPressure;
  float pressureReference;
  Curve wearCurve;
  Curve pressureSpringCurve;
  float camberVerticalKRangeRAD;
  float camberVerticalKGain;
  float dcamber0;
  float dcamber1;
  float lsMultY;
  float lsExpY;
  float lsMultX;
  float lsExpX;
  float falloffLevelY;
  float asyX;
  float cfXmult;
  float brakeDXMod;
  float falloffSpeedY;
  float falloffSpeedX;
  float maxSlip0;
  float maxSlip1;
  float maxSlipAngleRAD;
  float grooveFactor;
  float grooveSAFactor;
  float combinedFactor;
  float gripSlipFactor;
  float thermalVerticalSpringK;
  float thermalVerticalDampK;
  float thermalWearMult;
  float rrWearMult;
};

/* 67715 */
struct TyreStatus
{
  float depth;
  float load;
  float camberRAD;
  float slipAngleRAD;
  float slipRatio;
  float angularVelocity;
  float Fy;
  float Fx;
  float Mz;
  bool isLocked;
  float slipFactor;
  float ndSlip;
  float ndSlipSmooth;
  float distToGround;
  float Dy;
  float Dx;
  float D;
  float dirtyLevel;
  float rollingResistence;
  float thermalInput;
  float feedbackTorque;
  float loadedRadius;
  float effectiveRadius;
  float liveRadius;
  float pressureStatic;
  float pressureDynamic;
  long double treadMM[3];
  float lastTempIMO[3];
  float peakSA;
  float grain;
  float blister;
  float inflation;
  float flatSpot;
  float lastGrain;
  float lastBlister;
  float normalizedSlideX;
  float normalizedSlideY;
  float finalDY;
  float wearMult;
  float wetLevel;
  float Fy0;
  long double yfl0;
  long double yfl;
  long double vyfl0;
  long double vyfl;
  float Fx1;
  float Fx0;
  long double xfl0;
  long double xfl;
  long double vxfl0;
  long double vxfl;
  float flexForce;
  float longFlexForce;
  float verticalK;
  float verticalDamp;
  float marblesLevel;
  bool isOnMarbles;
  float normalizedWear;
  float releaseTime;
};

/* 66823 */
struct mat44d
{
  long double M11;
  long double M12;
  long double M13;
  long double M14;
  long double M21;
  long double M22;
  long double M23;
  long double M24;
  long double M31;
  long double M32;
  long double M33;
  long double M34;
  long double M41;
  long double M42;
  long double M43;
  long double M44;
};

/* 67720 */
struct __cppobj std::allocator<TyreThermalPatch>
{
};

/* 67727 */
struct __cppobj std::_Vector_val<std::_Simple_types<TyreThermalPatch> > : std::_Container_base0
{
  TyreThermalPatch *_Myfirst;
  TyreThermalPatch *_Mylast;
  TyreThermalPatch *_Myend;
};

/* 67728 */
struct __cppobj std::_Compressed_pair<std::allocator<TyreThermalPatch>,std::_Vector_val<std::_Simple_types<TyreThermalPatch> >,1> : std::allocator<TyreThermalPatch>
{
  std::_Vector_val<std::_Simple_types<TyreThermalPatch> > _Myval2;
};

/* 67729 */
struct std::_Vector_alloc<std::_Vec_base_types<TyreThermalPatch,std::allocator<TyreThermalPatch> > >
{
  std::_Compressed_pair<std::allocator<TyreThermalPatch>,std::_Vector_val<std::_Simple_types<TyreThermalPatch> >,1> _Mypair;
};

/* 67730 */
struct __cppobj std::vector<TyreThermalPatch,std::allocator<TyreThermalPatch> > : std::_Vector_alloc<std::_Vec_base_types<TyreThermalPatch,std::allocator<TyreThermalPatch> > >
{
};

/* 66970 */
struct TyreThermalPatchData
{
  float surfaceTransfer;
  float patchTransfer;
  float patchCoreTransfer;
  float internalCoreTransfer;
  float coolFactorSpeedGain;
  float coolFactorRain;
  float coolFactorBase;
  float practicalTempSource;
  float brakeTransferFactor;
  float angularSpeedToSpeedK;
};

/* 67731 */
struct TyreThermalModel
{
  int elements;
  int stripes;
  std::vector<TyreThermalPatch,std::allocator<TyreThermalPatch> > patches;
  long double phase;
  TyreThermalPatchData patchData;
  float coreTemp;
  Curve performanceCurve;
  bool isActive;
  float thermalMultD;
  float practicalTemp;
  float coreTInput;
};

/* 67732 */
struct __cppobj std::allocator<TyreCompoundData>
{
};

/* 67733 */
struct __cppobj std::_Vector_val<std::_Simple_types<TyreCompoundData> > : std::_Container_base0
{
  TyreCompoundData *_Myfirst;
  TyreCompoundData *_Mylast;
  TyreCompoundData *_Myend;
};

/* 67734 */
struct __cppobj std::_Compressed_pair<std::allocator<TyreCompoundData>,std::_Vector_val<std::_Simple_types<TyreCompoundData> >,1> : std::allocator<TyreCompoundData>
{
  std::_Vector_val<std::_Simple_types<TyreCompoundData> > _Myval2;
};

/* 67735 */
struct std::_Vector_alloc<std::_Vec_base_types<TyreCompoundData,std::allocator<TyreCompoundData> > >
{
  std::_Compressed_pair<std::allocator<TyreCompoundData>,std::_Vector_val<std::_Simple_types<TyreCompoundData> >,1> _Mypair;
};

/* 67736 */
struct __cppobj std::vector<TyreCompoundData,std::allocator<TyreCompoundData> > : std::_Vector_alloc<std::_Vec_base_types<TyreCompoundData,std::allocator<TyreCompoundData> > >
{
};

/* 67737 */
struct SignalGenerator
{
  SignalGeneratorVtbl *vfptr;
  float freqScale;
  int value;
};

/* 67739 */
struct __cppobj SinSignalGenerator : SignalGenerator
{
};

/* 67740 */
struct ITyreModel
{
  ITyreModelVtbl *vfptr;
};

/* 67744 */
struct __cppobj SCTM : ITyreModel
{
  float lsMultY;
  float lsExpY;
  float lsMultX;
  float lsExpX;
  float Fz0;
  float maxSlip0;
  float maxSlip1;
  float falloffLevelY;
  float asyX;
  float falloffSpeedY;
  float falloffSpeedX;
  float speedSensitivity;
  float camberGain;
  float dcamber0;
  float dcamber1;
  float cfXmult;
  float pressureCfGain;
  float brakeDXMod;
  float grooveFactor;
  float grooveSAFactor;
  float combinedFactor;
  float gripSlipFactor;
};

/* 67745 */
struct PerlinNoise
{
  int p[512];
};

/* 67747 */
struct Tyre
{
  TyreInputs inputs;
  TyreData data;
  TyreModelData modelData;
  TyreStatus status;
  ISuspension *hub;
  mat44d worldRotation;
  vec3d unmodifiedContactPoint;
  vec3d contactPoint;
  vec3d contactNormal;
  SurfaceDef *surfaceDef;
  bool debugOutput;
  float absOverride;
  TyreThermalModel thermalModel;
  std::vector<TyreCompoundData,std::allocator<TyreCompoundData> > compoundDefs;
  float aiMult;
  vec3d roadRight;
  vec3d roadHeading;
  bool driven;
  float oldAngularVelocity;
  mat44d localWheelRotation;
  vec3d worldPosition;
  float slidingVelocityY;
  float slidingVelocityX;
  float roadVelocityX;
  float roadVelocityY;
  float totalHubVelocity;
  IRayCaster *rayCaster;
  int index;
  SinSignalGenerator shakeGenerator;
  Car *car;
  int currentCompoundIndex;
  bool tyreBlanketsOn;
  const float flatSpotK;
  SCTM scTM;
  float explosionTemperature;
  float vibrationPhase;
  long double rotationPhase;
  float localMX;
  PerlinNoise perlin;
  float surfaceDefGripMod;
  ColliderWheel *collider;
  const float dirtyAddK;
  const float dirtyCleanK;
  const float dirtyGripK;
  const float dirtyGripMin;
};

/* 67789 */
struct __cppobj std::allocator<ISuspension *>
{
};

/* 67790 */
struct __cppobj std::_Vector_val<std::_Simple_types<ISuspension *> > : std::_Container_base0
{
  ISuspension **_Myfirst;
  ISuspension **_Mylast;
  ISuspension **_Myend;
};

/* 67791 */
struct __cppobj std::_Compressed_pair<std::allocator<ISuspension *>,std::_Vector_val<std::_Simple_types<ISuspension *> >,1> : std::allocator<ISuspension *>
{
  std::_Vector_val<std::_Simple_types<ISuspension *> > _Myval2;
};

/* 67792 */
struct std::_Vector_alloc<std::_Vec_base_types<ISuspension *,std::allocator<ISuspension *> > >
{
  std::_Compressed_pair<std::allocator<ISuspension *>,std::_Vector_val<std::_Simple_types<ISuspension *> >,1> _Mypair;
};

/* 67793 */
struct __cppobj std::vector<ISuspension *,std::allocator<ISuspension *> > : std::_Vector_alloc<std::_Vec_base_types<ISuspension *,std::allocator<ISuspension *> > >
{
};

/* 66947 */
struct __cppobj std::allocator<DynamicControllerStage>
{
};

/* 66949 */
struct __cppobj std::_Vector_val<std::_Simple_types<DynamicControllerStage> > : std::_Container_base0
{
  DynamicControllerStage *_Myfirst;
  DynamicControllerStage *_Mylast;
  DynamicControllerStage *_Myend;
};

/* 66950 */
struct __cppobj std::_Compressed_pair<std::allocator<DynamicControllerStage>,std::_Vector_val<std::_Simple_types<DynamicControllerStage> >,1> : std::allocator<DynamicControllerStage>
{
  std::_Vector_val<std::_Simple_types<DynamicControllerStage> > _Myval2;
};

/* 66951 */
struct std::_Vector_alloc<std::_Vec_base_types<DynamicControllerStage,std::allocator<DynamicControllerStage> > >
{
  std::_Compressed_pair<std::allocator<DynamicControllerStage>,std::_Vector_val<std::_Simple_types<DynamicControllerStage> >,1> _Mypair;
};

/* 66952 */
struct __cppobj std::vector<DynamicControllerStage,std::allocator<DynamicControllerStage> > : std::_Vector_alloc<std::_Vec_base_types<DynamicControllerStage,std::allocator<DynamicControllerStage> > >
{
};

/* 67691 */
struct __declspec(align(8)) DynamicController
{
  Car *car;
  std::vector<DynamicControllerStage,std::allocator<DynamicControllerStage> > stages;
  bool ready;
};

/* 67794 */
struct SteerBrake
{
  bool isActive;
  DynamicController controller;
};

/* 62345 */
struct __cppobj std::basic_ostream<char,std::char_traits<char> >
{
  _BYTE gap0[112];
};

/* 67796 */
struct __cppobj __declspec(align(8)) std::basic_ofstream<char,std::char_traits<char> > : std::basic_ostream<char,std::char_traits<char> >
{
  _BYTE _Filebuffer[48];
  _BYTE gapA0[104];
};

/* 67797 */
struct __declspec(align(8)) BrakeSystem
{
  float brakePowerMultiplier;
  float electronicOverride;
  float ebbInstant;
  bool enableThermalModel;
  float rearCorrectionTorque;
  BrakesData *data;
  Car *car;
  SteerBrake steerBrake;
  std::basic_ofstream<char,std::char_traits<char> > tempRunFile;
  DynamicController ebbController;
  float timeAccumulator;
  float coreFrequency;
  float corePeriod;
  float condC[4];
  float irrC[4];
  float convC[4];
  float power[4];
};

/* 67798 */
struct __declspec(align(8)) ClutchSequence
{
  Curve clutchCurve;
  long double currentTime;
  bool isDone;
};

/* 67799 */
struct Autoclutch
{
  float clutchSpeed;
  bool useAutoOnStart;
  bool useAutoOnChange;
  Car *car;
  ClutchSequence clutchSequence;
  float clutchValueSignal;
  AutoClutchData *data;
};

/* 67800 */
struct __cppobj std::allocator<TelemetryChannel>
{
};

/* 67803 */
struct __cppobj std::_Vector_val<std::_Simple_types<TelemetryChannel> > : std::_Container_base0
{
  TelemetryChannel *_Myfirst;
  TelemetryChannel *_Mylast;
  TelemetryChannel *_Myend;
};

/* 67804 */
struct __cppobj std::_Compressed_pair<std::allocator<TelemetryChannel>,std::_Vector_val<std::_Simple_types<TelemetryChannel> >,1> : std::allocator<TelemetryChannel>
{
  std::_Vector_val<std::_Simple_types<TelemetryChannel> > _Myval2;
};

/* 67805 */
struct std::_Vector_alloc<std::_Vec_base_types<TelemetryChannel,std::allocator<TelemetryChannel> > >
{
  std::_Compressed_pair<std::allocator<TelemetryChannel>,std::_Vector_val<std::_Simple_types<TelemetryChannel> >,1> _Mypair;
};

/* 67806 */
struct __cppobj std::vector<TelemetryChannel,std::allocator<TelemetryChannel> > : std::_Vector_alloc<std::_Vec_base_types<TelemetryChannel,std::allocator<TelemetryChannel> > >
{
};

/* 67807 */
struct Telemetry
{
  std::vector<TelemetryChannel,std::allocator<TelemetryChannel> > channels;
  bool isEnabled;
  bool recording;
  std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > driverName;
  Car *car;
  float totLift;
  float totDrag;
  float lapBeacon;
  float carSpeedMS;
  float roty;
  float steerAngle;
  float gas;
  float brake;
  float gear;
  float clutch;
  float aiTargetSpeed;
  float aiBGTargetSpeed;
  float aiOutsideOffset;
  TelemetryData *data;
  float rpms;
  float susTravel[4];
  float wheelSpeed[4];
  TimeTransponder *timeTransponder;
  float awdFrontShare;
  float awdCenterLock;
  float oversteerFactor;
  float rearSpeedRatio;
  float control;
  float controlOld;
  float slipError;
  float ebbInstant;
  float clutchOpenState;
  float engineVel;
  float engineTorque;
  float driveVel;
  float rootVel;
  float clutchSlip;
  float avgSurfaceTemps[4];
  float practicalTemps[4];
  long double timeAccumulator;
  std::vector<int,std::allocator<int> > laps;
};

/* 67808 */
struct AutoBlip
{
  bool isActive;
  Car *car;
  long double blipStartTime;
  long double blipPerformTime;
  AutoBlipData *data;
};

/* 67809 */
struct AutoShifter
{
  bool isActive;
  Car *car;
  bool butGearUp;
  bool butGearDn;
  bool isGasCutoff;
  float gasCutoff;
  AutoShifterData *data;
};

/* 67810 */
struct __declspec(align(8)) GearChanger
{
  bool wasGearUpTriggered;
  bool wasGearDnTriggered;
  Car *car;
  bool lastGearUp;
  bool lastGearDn;
};

/* 67811 */
struct EDL
{
  bool isPresent;
  bool isActive;
  float wheelSpeedGainPower;
  float wheelSpeedGainCoast;
  float deadZonePower;
  float deadZoneCoast;
  float brakeTorquePower;
  float brakeTorqueCoast;
  float outLevel;
  float outBrakeTorque;
  float speedDiff;
  Car *car;
  int leftTyreIndex;
  int rightTyreIndex;
};

/* 67812 */
struct StabilityControl
{
  float gain;
  bool useBeta;
  BrakesData *data;
  Car *car;
  long double maxGain;
};

/* 67813 */
struct __cppobj std::allocator<DRSWingConnection>
{
};

/* 67815 */
struct __cppobj std::_Vector_val<std::_Simple_types<DRSWingConnection> > : std::_Container_base0
{
  DRSWingConnection *_Myfirst;
  DRSWingConnection *_Mylast;
  DRSWingConnection *_Myend;
};

/* 67816 */
struct __cppobj std::_Compressed_pair<std::allocator<DRSWingConnection>,std::_Vector_val<std::_Simple_types<DRSWingConnection> >,1> : std::allocator<DRSWingConnection>
{
  std::_Vector_val<std::_Simple_types<DRSWingConnection> > _Myval2;
};

/* 67817 */
struct std::_Vector_alloc<std::_Vec_base_types<DRSWingConnection,std::allocator<DRSWingConnection> > >
{
  std::_Compressed_pair<std::allocator<DRSWingConnection>,std::_Vector_val<std::_Simple_types<DRSWingConnection> >,1> _Mypair;
};

/* 67818 */
struct __cppobj std::vector<DRSWingConnection,std::allocator<DRSWingConnection> > : std::_Vector_alloc<std::_Vec_base_types<DRSWingConnection,std::allocator<DRSWingConnection> > >
{
};

/* 67819 */
struct DRS
{
  bool isPresent;
  bool isActive;
  bool isAvailable;
  bool ignoreZones;
  std::vector<DRSWingConnection,std::allocator<DRSWingConnection> > wings;
  Car *car;
  bool lastState;
  float limitG;
};

/* 67676 */
struct ITorqueGenerator
{
  ITorqueGeneratorVtbl *vfptr;
};

/* 614 */
enum ELocalizedTextSourceCategory
{
  Game = 0x0,
  Engine = 0x1,
  Editor = 0x2,
};

/* 1858 */
typedef ELocalizedTextSourceCategory KersAttachment;

/* 67820 */
struct __cppobj __declspec(align(8)) Kers : ITorqueGenerator
{
  KersAttachment attachment;
  Car *car;
  bool present;
  float input;
  float brakeForMaxCharge;
  float charge;
  float chargeK;
  float dischargeK;
  float angularVelocity;
  float negativeInputChargeK;
  bool hasButtonOverride;
  float currentJ;
  float maxJ;
  Curve torqueLUT;
  DynamicController controller;
  bool hasController;
};

/* 67683 */
struct ICoastGenerator
{
  ICoastGeneratorVtbl *vfptr;
};

/* 67821 */
struct ERSStatus
{
  float kineticRecovery;
  float heatRecovery;
};

/* 67822 */
struct __cppobj std::allocator<ERSPowerController>
{
};

/* 67824 */
struct __cppobj std::_Vector_val<std::_Simple_types<ERSPowerController> > : std::_Container_base0
{
  ERSPowerController *_Myfirst;
  ERSPowerController *_Mylast;
  ERSPowerController *_Myend;
};

/* 67825 */
struct __cppobj std::_Compressed_pair<std::allocator<ERSPowerController>,std::_Vector_val<std::_Simple_types<ERSPowerController> >,1> : std::allocator<ERSPowerController>
{
  std::_Vector_val<std::_Simple_types<ERSPowerController> > _Myval2;
};

/* 67826 */
struct std::_Vector_alloc<std::_Vec_base_types<ERSPowerController,std::allocator<ERSPowerController> > >
{
  std::_Compressed_pair<std::allocator<ERSPowerController>,std::_Vector_val<std::_Simple_types<ERSPowerController> >,1> _Mypair;
};

/* 67827 */
struct __cppobj std::vector<ERSPowerController,std::allocator<ERSPowerController> > : std::_Vector_alloc<std::_Vec_base_types<ERSPowerController,std::allocator<ERSPowerController> > >
{
};

/* 67828 */
struct ERSCockpitControls
{
  bool recovery;
  bool mguHMode;
  bool deliveryProfile;
};

/* 67829 */
struct __cppobj __declspec(align(8)) ERS : ITorqueGenerator, ICoastGenerator
{
  bool present;
  float kineticRecovery;
  ERSStatus status;
  bool isHeatCharginBattery;
  std::vector<ERSPowerController,std::allocator<ERSPowerController> > ersPowerControllers;
  std::vector<ERSPowerController,std::allocator<ERSPowerController> > ersPowerControllersFront;
  int defaultPowerControllerIndex;
  bool isCharging;
  ERSCockpitControls cockpitControls;
  Car *car;
  float chargeK;
  float dischargeK;
  float dischargeKFront;
  bool hasButtonOverride;
  Curve torqueLUT;
  Curve coastLUT;
  DynamicController controller;
  DynamicController controllerFront;
  float charge;
  float maxJ;
  float currentJ;
  float input;
  float heatChargeK;
  float heatTorque;
  float rearCorrectionTorque;
  DynamicController frontController;
  Curve frontTorqueLUT;
  float frontTorqueVectoringBias;
};

/* 67830 */
struct SplineLocatorData
{
  float npos;
  unsigned int currentIndex;
  float lateralOffset;
  long double splineLength;
  float sides[2];
  float sidesFromIL[2];
  float sideVelocity;
  bool isOutsideTrackLimits;
  float tyreLateralOffsets[4];
};

/* 67831 */
struct HeaveSpringStatus
{
  long double travel;
};

/* 67832 */
struct Damper
{
  float reboundSlow;
  float reboundFast;
  float bumpSlow;
  float bumpFast;
  float fastThresholdBump;
  float fastThresholdRebound;
};

/* 67839 */
struct HeaveSpring
{
  bool isPresent;
  float rodLength;
  HeaveSpringStatus status;
  float k;
  float progressiveK;
  float packerRange;
  float bumpStopRate;
  float bumpStopUp;
  float bumpStopDn;
  Damper damper;
  bool isFront;
  Suspension *suspensions[2];
  Car *car;
};

/* 67840 */
struct SteeringSystem
{
  float linearRatio;
  Car *car;
  bool has4ws;
  DynamicController ctrl4ws;
};

/* 67841 */
struct ThermalObject
{
  ThermalObjectVtbl *vfptr;
  float tmass;
  float coolSpeedK;
  float coolFactor;
  float heatFactor;
  float t;
  float heatAccumulator;
};

/* 67485 */
struct plane4d
{
  vec3d normal;
  long double d;
};

/* 67483 */
struct Triangle
{
  TriangleVtbl *vfptr;
  vec3d points[3];
  plane4d plane;
};

/* 67486 */
struct SlipStream
{
  Triangle triangle;
  float speedFactorMult;
  vec3d dir;
  PhysicsEngine *physicsEngine;
  float length;
  float speedFactor;
};

/* 240 */
enum EWindowTitleAlignment::Type
{
  Left = 0x0,
  Center = 0x1,
  Right = 0x2,
};

/* 1856 */
typedef EWindowTitleAlignment::Type FormationLapSide;

/* 67843 */
struct __declspec(align(8)) SplineLocator
{
  AISpline *currentSpline;
  Car *car;
  int currentIndex;
  Track *track;
  float normalizedPos;
  float offset;
  float tyreOffsets[4];
  bool isOutsideLimits;
};

/* 67844 */
struct PitStopTimings
{
  float tyreChangeTimeSec;
  float fuelChangeTimeSec;
  float bodyRepairTimeSec;
  float engineRepairTimeSec;
  float suspRepairTimeSec;
};

/* 67845 */
struct PhysicsValueCache
{
  Speed speed;
};

/* 67054 */
struct __cppobj Car : ICarPhysicsStateProvider
{
  float finalSteerAngleSignal;
  float powerClassIndex;
  CarData data;
  float brakesTotalTorque;
  Event<TimeLineEvent> evOnTimelinePassed;
  Event<OnStepCompleteEvent> evOnStepComplete;
  Event<OnControlsProviderChanged> evOnControlsProviderChanged;
  Event<OnLapCompletedEvent> evOnLapCompleted;
  Event<OnSectorSplitEvent> evOnSectorSplit;
  Event<vec3d> evOnForcedPositionCompleted;
  Event<std::pair<int,int> > evOnTyreCompoundChanged;
  Event<OnCollisionEvent> evOnCollisionEvent;
  Event<double> evOnJumpStartEvent;
  Event<std::pair<int,int> > evOnPush2Pass;
  float carHalfWidth;
  float userFFGain;
  bool isRetired;
  void *tag;
  IRigidBody *body;
  IRigidBody *fuelTankBody;
  IRigidBody *rigidAxle;
  FixedJointODE *fuelTankJoint;
  PhysicsEngine *ksPhysics;
  CarControls controls;
  std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > unixName;
  std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > configName;
  std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > carDataPath;
  vec3d accG;
  TimeTransponder transponder;
  CarColliderManager colliderManager;
  Drivetrain drivetrain;
  ABS abs;
  TractionControl tractionControl;
  SpeedLimiter speedLimiter;
  AeroMap aeroMap;
  Tyre tyres[4];
  std::vector<ISuspension *,std::allocator<ISuspension *> > suspensions;
  BrakeSystem brakeSystem;
  Autoclutch autoClutch;
  unsigned int physicsGUID;
  Telemetry telemetry;
  AutoBlip autoBlip;
  AutoShifter autoShift;
  GearChanger gearChanger;
  EDL edl;
  StabilityControl stabilityControl;
  long double lastCollisionTime;
  DRS drs;
  Kers kers;
  ERS ers;
  bool isGearboxLocked;
  bool isGentleStopping;
  long double penaltyPerfTarget;
  mat44d pitStart45Location;
  mat44d pitEndLocation;
  mat44d pitZoneLocation;
  SplineLocatorData splineLocatorData;
  HeaveSpring heaveSprings[2];
  SteeringSystem steeringSystem;
  long double lastCollisionWithCarTime;
  long double axleTorqueReaction;
  float lastGyroFF;
  float lastFF;
  float lastPureMZFF;
  ThermalObject water;
  bool isRequestingPitStop;
  int aiLapsToComplete;
  SlipStream slipStream;
  unsigned __int16 startingPosition;
  FormationLapSide formationLapSide;
  bool isControlsLocked;
  float expectedFuelPerLap;
  mat44f meshColliderBodyMatrix;
  bool ownsControllerProvider;
  ICarControlsProvider *controlsProvider;
  vec3d lastVelocity;
  vec3f graphicsOffset;
  float graphicsPitchRotation;
  int sleepingFrames;
  float mzCurrent;
  float requestedFuel;
  long double lastBodyMassUpdateTime;
  float damageZoneLevel[5];
  vec3d ridePickupPoint[2];
  long double vibrationPhase;
  float slipStreamEffectGain;
  int framesToSleep;
  float ballastKG;
  float lastSteerPosition;
  SplineLocator splineLocator;
  bool isCollisionOffForPits;
  PitStopTimings pitTimings;
  vec3d gridPosition;
  bool hasGridPosition;
  PhysicsValueCache valueCache;
  bool externalControl;
  char pakSequenceIndex;
  bool isFlashingCache;
  bool bIsInPitlane;
  bool bIsInPitzone;
  bool bIsInPitstart;
  bool playerControlled;
  float totalMassCache;
  float smoothBrake;
  bool forceFlatPlane;
  long double forcedPlaneY;
};

/* 64913 */
struct __cppobj std::allocator<unsigned int>
{
};

/* 64914 */
struct __cppobj std::_Vector_val<std::_Simple_types<unsigned int> > : std::_Container_base0
{
  unsigned int *_Myfirst;
  unsigned int *_Mylast;
  unsigned int *_Myend;
};

/* 64915 */
struct __cppobj std::_Compressed_pair<std::allocator<unsigned int>,std::_Vector_val<std::_Simple_types<unsigned int> >,1> : std::allocator<unsigned int>
{
  std::_Vector_val<std::_Simple_types<unsigned int> > _Myval2;
};

/* 64916 */
struct std::_Vector_alloc<std::_Vec_base_types<unsigned int,std::allocator<unsigned int> > >
{
  std::_Compressed_pair<std::allocator<unsigned int>,std::_Vector_val<std::_Simple_types<unsigned int> >,1> _Mypair;
};

/* 64917 */
struct __cppobj std::vector<unsigned int,std::allocator<unsigned int> > : std::_Vector_alloc<std::_Vec_base_types<unsigned int,std::allocator<unsigned int> > >
{
};

/* 67183 */
struct NetCarQoS
{
  int goodPackets;
  int badPackets;
};

/* 67475 */
struct NetCarState
{
  char pakSequenceId;
  long double timeStamp;
  long double rcvTime;
  vec3f pos;
  vec3f rotation;
  vec3f velocity;
  float tyreAngularSpeed[4];
  unsigned __int16 engineRPM;
  float steerAngle;
  float wheelAngle;
  int gearIndex;
  unsigned int statusBytes;
  float performanceDelta;
  float gas;
  float targetHeight;
  float aoa;
  vec3f aoaAxis;
  int ping;
};

/* 67487 */
struct __cppobj std::allocator<CarPhysicsState>
{
};

/* 67488 */
struct __cppobj std::_Vector_val<std::_Simple_types<CarPhysicsState> > : std::_Container_base0
{
  CarPhysicsState *_Myfirst;
  CarPhysicsState *_Mylast;
  CarPhysicsState *_Myend;
};

/* 67489 */
struct __cppobj std::_Compressed_pair<std::allocator<CarPhysicsState>,std::_Vector_val<std::_Simple_types<CarPhysicsState> >,1> : std::allocator<CarPhysicsState>
{
  std::_Vector_val<std::_Simple_types<CarPhysicsState> > _Myval2;
};

/* 67490 */
struct std::_Vector_alloc<std::_Vec_base_types<CarPhysicsState,std::allocator<CarPhysicsState> > >
{
  std::_Compressed_pair<std::allocator<CarPhysicsState>,std::_Vector_val<std::_Simple_types<CarPhysicsState> >,1> _Mypair;
};

/* 67491 */
struct __cppobj std::vector<CarPhysicsState,std::allocator<CarPhysicsState> > : std::_Vector_alloc<std::_Vec_base_types<CarPhysicsState,std::allocator<CarPhysicsState> > >
{
};

/* 67492 */
struct SplineLocationData
{
  int currentIndex;
};

/* 67493 */
struct __declspec(align(8)) NetCarStateProvider::LagDebug
{
  long double rcvTime;
  long double physicsTime;
  bool wasLagging;
};

/* 67468 */
struct __cppobj __declspec(align(8)) NetCarStateProvider : ICarPhysicsStateProvider
{
  char sessionID;
  vec3f errorVector;
  int guid;
  int ping;
  unsigned int lastLap;
  unsigned int bestLap;
  std::vector<unsigned int,std::allocator<unsigned int> > currentSplits;
  std::vector<unsigned int,std::allocator<unsigned int> > personalBestSplits;
  long double lastUpdateTime;
  long double lastTime;
  bool hasEverReceivedAPacket;
  float ballastKG;
  float restrictor;
  float hasCollisionInThisStep;
  char connectedCarId;
  CarData data;
  NetCarQoS qos;
  PhysicsEngine *physicsEngine;
  AC2Client *client;
  mat44f bodyMatrix;
  mat44f wheelMatrix[4];
  mat44f suspMatrix[4];
  NetCarState netStates[3];
  vec3f lastScreenPos;
  mat44f wheelBasePosLS[4];
  std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > unixName;
  IRayTrackCollisionProvider *rayCastProvider;
  vec3f lastVelocity;
  vec3f instantVelocity;
  vec3f currentVelocity;
  CarPhysicsState state;
  mat44f pitPosition;
  SlipStream slipStream;
  bool isDisconnected;
  float lastStepSpeedkmh;
  float lastStepGas;
  vec3f smoothVelocity;
  std::vector<CarPhysicsState,std::allocator<CarPhysicsState> > stateCache;
  long double lastIntegrationTime;
  float tyreRadius[4];
  mat44f tyreLocalRotation[4];
  IRigidBody *body;
  vec3f lastDistanceV;
  vec3f lastAxis;
  SplineLocationData splineLocationData;
  long double lastSliceTimeStamp;
  float currentAOA;
  float carVerticalOffset;
  bool useLog;
  NetCarStateProvider::LagDebug lagDebug;
  bool isReady;
};

/* 67158 */
struct __cppobj std::_Arg_types<double const &>
{
};

/* 67161 */
union std::_Func_class<void,double const &>::_Storage
{
  long double _Dummy1;
  char _Dummy2[56];
  std::_Func_base<void,double const &> *_Ptrs[8];
};

/* 67162 */
struct __cppobj std::_Func_class<void,double const &> : std::_Arg_types<double const &>
{
  std::_Func_class<void,double const &>::_Storage _Mystorage;
};

/* 67163 */
struct __cppobj std::function<void __cdecl(double const &)> : std::_Func_class<void,double const &>
{
};

/* 67164 */
struct std::pair<void *,std::function<void __cdecl(double const &)> >
{
  void *first;
  std::function<void __cdecl(double const &)> second;
};

/* 67500 */
struct __cppobj std::_Arg_types<SessionInfo const &>
{
};

/* 67504 */
union std::_Func_class<void,SessionInfo const &>::_Storage
{
  long double _Dummy1;
  char _Dummy2[56];
  std::_Func_base<void,SessionInfo const &> *_Ptrs[8];
};

/* 67505 */
struct __cppobj std::_Func_class<void,SessionInfo const &> : std::_Arg_types<SessionInfo const &>
{
  std::_Func_class<void,SessionInfo const &>::_Storage _Mystorage;
};

/* 67506 */
struct __cppobj std::function<void __cdecl(SessionInfo const &)> : std::_Func_class<void,SessionInfo const &>
{
};

/* 67507 */
struct std::pair<void *,std::function<void __cdecl(SessionInfo const &)> >
{
  void *first;
  std::function<void __cdecl(SessionInfo const &)> second;
};

/* 67516 */
struct __cppobj std::allocator<_GUID>
{
};

/* 67517 */
struct __cppobj std::_Vector_val<std::_Simple_types<_GUID> > : std::_Container_base0
{
  _GUID *_Myfirst;
  _GUID *_Mylast;
  _GUID *_Myend;
};

/* 67518 */
struct __cppobj std::_Compressed_pair<std::allocator<_GUID>,std::_Vector_val<std::_Simple_types<_GUID> >,1> : std::allocator<_GUID>
{
  std::_Vector_val<std::_Simple_types<_GUID> > _Myval2;
};

/* 67519 */
struct std::_Vector_alloc<std::_Vec_base_types<_GUID,std::allocator<_GUID> > >
{
  std::_Compressed_pair<std::allocator<_GUID>,std::_Vector_val<std::_Simple_types<_GUID> >,1> _Mypair;
};

/* 67520 */
struct __cppobj std::vector<_GUID,std::allocator<_GUID> > : std::_Vector_alloc<std::_Vec_base_types<_GUID,std::allocator<_GUID> > >
{
};

/* 67522 */
struct __cppobj std::allocator<InputDevice *>
{
};

/* 67528 */
struct __cppobj std::_Vector_val<std::_Simple_types<InputDevice *> > : std::_Container_base0
{
  InputDevice **_Myfirst;
  InputDevice **_Mylast;
  InputDevice **_Myend;
};

/* 67529 */
struct __cppobj std::_Compressed_pair<std::allocator<InputDevice *>,std::_Vector_val<std::_Simple_types<InputDevice *> >,1> : std::allocator<InputDevice *>
{
  std::_Vector_val<std::_Simple_types<InputDevice *> > _Myval2;
};

/* 67530 */
struct std::_Vector_alloc<std::_Vec_base_types<InputDevice *,std::allocator<InputDevice *> > >
{
  std::_Compressed_pair<std::allocator<InputDevice *>,std::_Vector_val<std::_Simple_types<InputDevice *> >,1> _Mypair;
};

/* 67531 */
struct __cppobj std::vector<InputDevice *,std::allocator<InputDevice *> > : std::_Vector_alloc<std::_Vec_base_types<InputDevice *,std::allocator<InputDevice *> > >
{
};

/* 67514 */
struct DirectInput
{
  DirectInputVtbl *vfptr;
  std::vector<_GUID,std::allocator<_GUID> > guids;
  std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > productIds;
  std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > productNames;
  IDirectInput8W *lpDI;
  bool isThrustmaster;
  bool isUsingFF;
  std::vector<InputDevice *,std::allocator<InputDevice *> > devices;
};

/* 67541 */
struct __cppobj std::less<unsigned int>
{
};

/* 67542 */
struct __cppobj std::allocator<std::_Tree_node<std::pair<unsigned int const ,dxSpace *>,void *> >
{
};

/* 67545 */
struct __cppobj std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned int const ,dxSpace *> > > : std::_Container_base0
{
  std::_Tree_node<std::pair<unsigned int const ,dxSpace *>,void *> *_Myhead;
  unsigned __int64 _Mysize;
};

/* 67546 */
struct __cppobj std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<unsigned int const ,dxSpace *>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned int const ,dxSpace *> > >,1> : std::allocator<std::_Tree_node<std::pair<unsigned int const ,dxSpace *>,void *> >
{
  std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned int const ,dxSpace *> > > _Myval2;
};

/* 67547 */
struct __cppobj std::_Compressed_pair<std::less<unsigned int>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<unsigned int const ,dxSpace *>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned int const ,dxSpace *> > >,1>,1> : std::less<unsigned int>
{
  std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<unsigned int const ,dxSpace *>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned int const ,dxSpace *> > >,1> _Myval2;
};

/* 67548 */
struct std::_Tree_comp_alloc<std::_Tmap_traits<unsigned int,dxSpace *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,dxSpace *> >,0> >
{
  std::_Compressed_pair<std::less<unsigned int>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<unsigned int const ,dxSpace *>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned int const ,dxSpace *> > >,1>,1> _Mypair;
};

/* 67549 */
struct __cppobj std::_Tree<std::_Tmap_traits<unsigned int,dxSpace *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,dxSpace *> >,0> > : std::_Tree_comp_alloc<std::_Tmap_traits<unsigned int,dxSpace *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,dxSpace *> >,0> >
{
};

/* 67550 */
struct __cppobj std::map<unsigned int,dxSpace *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,dxSpace *> > > : std::_Tree<std::_Tmap_traits<unsigned int,dxSpace *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,dxSpace *> >,0> >
{
};

/* 67551 */
struct __declspec(align(8)) PhysicsCore
{
  struct dxWorld *id;
  struct dxSpace *spaceStatic;
  struct dxSpace *spaceDynamic;
  struct dxSpace *spaceWheels;
  CoreCPUTimes coreCPUTimes;
  struct dxJointGroup *contactGroup;
  struct dxJointGroup *contactGroupDynamic;
  struct dxJointGroup *currentContactGroup;
  struct dxGeom *ray;
  ICollisionCallback *collisionCallback;
  int noCollisionCounter;
  std::map<unsigned int,dxSpace *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,dxSpace *> > > staticSubSpaces;
  std::map<unsigned int,dxSpace *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,dxSpace *> > > dynamicSubSpaces;
  struct dxThreadingImplementation *threading;
  struct dxThreadingThreadPool *pool;
  long double totRayTime;
  unsigned int currentFrame;
};

/* 67476 */
struct IRayTrackCollisionProvider
{
  IRayTrackCollisionProviderVtbl *vfptr;
};

/* 67552 */
struct __cppobj std::allocator<ICollisionObject *>
{
};

/* 67553 */
struct __cppobj std::_Vector_val<std::_Simple_types<ICollisionObject *> > : std::_Container_base0
{
  ICollisionObject **_Myfirst;
  ICollisionObject **_Mylast;
  ICollisionObject **_Myend;
};

/* 67554 */
struct __cppobj std::_Compressed_pair<std::allocator<ICollisionObject *>,std::_Vector_val<std::_Simple_types<ICollisionObject *> >,1> : std::allocator<ICollisionObject *>
{
  std::_Vector_val<std::_Simple_types<ICollisionObject *> > _Myval2;
};

/* 67555 */
struct std::_Vector_alloc<std::_Vec_base_types<ICollisionObject *,std::allocator<ICollisionObject *> > >
{
  std::_Compressed_pair<std::allocator<ICollisionObject *>,std::_Vector_val<std::_Simple_types<ICollisionObject *> >,1> _Mypair;
};

/* 67556 */
struct __cppobj std::vector<ICollisionObject *,std::allocator<ICollisionObject *> > : std::_Vector_alloc<std::_Vec_base_types<ICollisionObject *,std::allocator<ICollisionObject *> > >
{
};

/* 67557 */
struct __cppobj std::allocator<TimeLine>
{
};

/* 67560 */
struct __cppobj std::_Vector_val<std::_Simple_types<TimeLine> > : std::_Container_base0
{
  TimeLine *_Myfirst;
  TimeLine *_Mylast;
  TimeLine *_Myend;
};

/* 67561 */
struct __cppobj std::_Compressed_pair<std::allocator<TimeLine>,std::_Vector_val<std::_Simple_types<TimeLine> >,1> : std::allocator<TimeLine>
{
  std::_Vector_val<std::_Simple_types<TimeLine> > _Myval2;
};

/* 67562 */
struct std::_Vector_alloc<std::_Vec_base_types<TimeLine,std::allocator<TimeLine> > >
{
  std::_Compressed_pair<std::allocator<TimeLine>,std::_Vector_val<std::_Simple_types<TimeLine> >,1> _Mypair;
};

/* 67563 */
struct __cppobj std::vector<TimeLine,std::allocator<TimeLine> > : std::_Vector_alloc<std::_Vec_base_types<TimeLine,std::allocator<TimeLine> > >
{
};

/* 67564 */
struct __cppobj std::default_delete<AISplineRecorder>
{
};

/* 67603 */
struct __cppobj std::_Compressed_pair<std::default_delete<AISplineRecorder>,AISplineRecorder *,1> : std::default_delete<AISplineRecorder>
{
  AISplineRecorder *_Myval2;
};

/* 67604 */
struct std::_Unique_ptr_base<AISplineRecorder,std::default_delete<AISplineRecorder> >
{
  std::_Compressed_pair<std::default_delete<AISplineRecorder>,AISplineRecorder *,1> _Mypair;
};

/* 67605 */
struct __cppobj std::unique_ptr<AISplineRecorder,std::default_delete<AISplineRecorder> > : std::_Unique_ptr_base<AISplineRecorder,std::default_delete<AISplineRecorder> >
{
};

/* 67606 */
struct __cppobj std::allocator<TrackGene>
{
};

/* 67608 */
struct __cppobj std::_Vector_val<std::_Simple_types<TrackGene> > : std::_Container_base0
{
  TrackGene *_Myfirst;
  TrackGene *_Mylast;
  TrackGene *_Myend;
};

/* 67609 */
struct __cppobj std::_Compressed_pair<std::allocator<TrackGene>,std::_Vector_val<std::_Simple_types<TrackGene> >,1> : std::allocator<TrackGene>
{
  std::_Vector_val<std::_Simple_types<TrackGene> > _Myval2;
};

/* 67610 */
struct std::_Vector_alloc<std::_Vec_base_types<TrackGene,std::allocator<TrackGene> > >
{
  std::_Compressed_pair<std::allocator<TrackGene>,std::_Vector_val<std::_Simple_types<TrackGene> >,1> _Mypair;
};

/* 67611 */
struct __cppobj std::vector<TrackGene,std::allocator<TrackGene> > : std::_Vector_alloc<std::_Vec_base_types<TrackGene,std::allocator<TrackGene> > >
{
};

/* 67612 */
struct TrackGenome
{
  std::vector<TrackGene,std::allocator<TrackGene> > genes;
};

/* 67602 */
struct __cppobj Track : IRayTrackCollisionProvider
{
  PhysicsEngine *ksPhysics;
  std::vector<ICollisionObject *,std::allocator<ICollisionObject *> > surfaces;
  std::vector<TimeLine,std::allocator<TimeLine> > timeLines;
  mat44f worldMatrix;
  std::unique_ptr<AISplineRecorder,std::default_delete<AISplineRecorder> > aiSplineRecorder;
  TrackGenome genome;
  DynamicTrackStatus dynamicTrackStatus;
  std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > name;
  std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > config;
  std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > dataFolder;
  std::vector<float,std::allocator<float> > sectorsNormalizedPositions;
};

/* 67614 */
struct IDebugVisualizer
{
  IDebugVisualizerVtbl *vfptr;
};

/* 67620 */
struct __cppobj std::allocator<std::thread>
{
};

/* 67621 */
struct __cppobj std::_Vector_val<std::_Simple_types<std::thread> > : std::_Container_base0
{
  std::thread *_Myfirst;
  std::thread *_Mylast;
  std::thread *_Myend;
};

/* 67622 */
struct __cppobj std::_Compressed_pair<std::allocator<std::thread>,std::_Vector_val<std::_Simple_types<std::thread> >,1> : std::allocator<std::thread>
{
  std::_Vector_val<std::_Simple_types<std::thread> > _Myval2;
};

/* 67623 */
struct std::_Vector_alloc<std::_Vec_base_types<std::thread,std::allocator<std::thread> > >
{
  std::_Compressed_pair<std::allocator<std::thread>,std::_Vector_val<std::_Simple_types<std::thread> >,1> _Mypair;
};

/* 67624 */
struct __cppobj std::vector<std::thread,std::allocator<std::thread> > : std::_Vector_alloc<std::_Vec_base_types<std::thread,std::allocator<std::thread> > >
{
};

/* 67625 */
struct __cppobj std::allocator<Task *>
{
};

/* 58285 */
const struct std::_Container_base12
{
  std::_Container_proxy *_Myproxy;
};

/* 67633 */
struct __cppobj std::_Deque_val<std::_Deque_simple_types<Task *> > : std::_Container_base12
{
  Task ***_Map;
  unsigned __int64 _Mapsize;
  unsigned __int64 _Myoff;
  unsigned __int64 _Mysize;
};

/* 67634 */
struct __cppobj std::_Compressed_pair<std::allocator<Task *>,std::_Deque_val<std::_Deque_simple_types<Task *> >,1> : std::allocator<Task *>
{
  std::_Deque_val<std::_Deque_simple_types<Task *> > _Myval2;
};

/* 67635 */
struct std::_Deque_alloc<std::_Deque_base_types<Task *,std::allocator<Task *> > >
{
  std::_Compressed_pair<std::allocator<Task *>,std::_Deque_val<std::_Deque_simple_types<Task *> >,1> _Mypair;
};

/* 67636 */
struct __cppobj std::deque<Task *,std::allocator<Task *> > : std::_Deque_alloc<std::_Deque_base_types<Task *,std::allocator<Task *> > >
{
};

/* 67637 */
union std::_Align_type<double,80>
{
  long double _Val;
  char _Pad[80];
};

/* 67638 */
struct std::_Mutex_base
{
  std::_Align_type<double,80> _Mtx_storage;
};

/* 67639 */
struct __cppobj std::mutex : std::_Mutex_base
{
};

/* 67640 */
union std::_Align_type<double,72>
{
  long double _Val;
  char _Pad[72];
};

/* 67641 */
struct std::condition_variable
{
  std::_Align_type<double,72> _Cnd_storage;
};

/* 67618 */
struct ThreadPool
{
  ThreadPoolVtbl *vfptr;
  int numThreads;
  std::vector<std::thread,std::allocator<std::thread> > workers;
  bool stop;
  std::deque<Task *,std::allocator<Task *> > tasks;
  std::mutex queue_mutex;
  std::condition_variable condition;
};

/* 66798 */
struct CurveVtbl
{
  void *(__cdecl *__vecDelDtor)(Curve *this, unsigned int);
};

/* 66800 */
struct CubicSpline<float,float>Vtbl
{
  void *(__cdecl *__vecDelDtor)(CubicSpline<float,float> *this, unsigned int);
};

/* 66802 */
struct CubicSpline<float,float>::Element
{
  float x;
  float a;
  float b;
  float c;
  float d;
};

/* 4441 */
struct __cppobj TArrayWithThreadsafeAdd<TRefCountPtr<FGraphEvent>,TInlineAllocator<4,FDefaultAllocator> > : TArray<TRefCountPtr<FGraphEvent>,TInlineAllocator<4,FDefaultAllocator> >
{
};

/* 4442 */
struct TArray<TGraphTask<FTickFunctionTask> *,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 4443 */
struct __cppobj TArrayWithThreadsafeAdd<TGraphTask<FTickFunctionTask> *,FDefaultAllocator> : TArray<TGraphTask<FTickFunctionTask> *,FDefaultAllocator>
{
};

/* 4444 */
struct __declspec(align(2)) FTickTaskSequencer
{
  TArrayWithThreadsafeAdd<TRefCountPtr<FGraphEvent>,TInlineAllocator<4,FDefaultAllocator> > TickCompletionEvents[8];
  TArrayWithThreadsafeAdd<TGraphTask<FTickFunctionTask> *,FDefaultAllocator> HiPriTickTasks[8][8];
  TArrayWithThreadsafeAdd<TGraphTask<FTickFunctionTask> *,FDefaultAllocator> TickTasks[8][8];
  TArray<TRefCountPtr<FGraphEvent>,TInlineAllocator<4,FDefaultAllocator> > CleanupTasks;
  ETickingGroup WaitForTickGroup;
  bool bAllowConcurrentTicks;
  bool bLogTicks;
  bool bLogTicksShowPrerequistes;
};

/* 4450 */
struct FNetworkNotify
{
  FNetworkNotifyVtbl *vfptr;
};

/* 5860 */
struct TArray<ULevelStreaming *,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 5861 */
struct TSparseArray<TSetElement<ULevelStreaming *>,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<16,8> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 5862 */
struct __declspec(align(8)) TSet<ULevelStreaming *,DefaultKeyFuncs<ULevelStreaming *,0>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<ULevelStreaming *>,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 4146 */
struct TArray<FVector,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 5884 */
struct TArray<ULevel *,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 5885 */
struct TArray<FLevelCollection,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 6654 */
struct TArray<UMaterialParameterCollectionInstance *,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 135 */
enum EMaterialQualityLevel::Type
{
  Low = 0x0,
  High = 0x1,
  Medium = 0x2,
  Num = 0x3,
};

/* 336 */
typedef EMaterialQualityLevel::Type ERHIFeatureLevel::Type;

/* 6655 */
struct TArray<TWeakObjectPtr<AController,FWeakObjectPtr>,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 6656 */
struct TArray<TWeakObjectPtr<APlayerController,FWeakObjectPtr>,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 6657 */
struct TArray<TWeakObjectPtr<APawn,FWeakObjectPtr>,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 6658 */
struct TArray<TWeakObjectPtr<ACameraActor,FWeakObjectPtr>,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 6659 */
struct TArray<TWeakObjectPtr<APhysicsVolume,FWeakObjectPtr>,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 4254 */
struct TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<16,4> >,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 6770 */
struct TSparseArray<TSetElement<TWeakObjectPtr<UActorComponent,FWeakObjectPtr> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<16,4> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 6771 */
struct __declspec(align(8)) TSet<TWeakObjectPtr<UActorComponent,FWeakObjectPtr>,DefaultKeyFuncs<TWeakObjectPtr<UActorComponent,FWeakObjectPtr>,0>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<TWeakObjectPtr<UActorComponent,FWeakObjectPtr> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 6772 */
struct TArray<TUniquePtr<TTraceThreadData<FTraceDatum>,TDefaultDelete<TTraceThreadData<FTraceDatum> > >,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 6773 */
struct TArray<TUniquePtr<TTraceThreadData<FOverlapDatum>,TDefaultDelete<TTraceThreadData<FOverlapDatum> > >,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 6774 */
struct __cppobj AsyncTraceData : FNoncopyable
{
  TArray<TUniquePtr<TTraceThreadData<FTraceDatum>,TDefaultDelete<TTraceThreadData<FTraceDatum> > >,FDefaultAllocator> TraceData;
  TArray<TUniquePtr<TTraceThreadData<FOverlapDatum>,TDefaultDelete<TTraceThreadData<FOverlapDatum> > >,FDefaultAllocator> OverlapData;
  int NumQueuedTraceData;
  int NumQueuedOverlapData;
  bool bAsyncAllowed;
  TArray<TRefCountPtr<FGraphEvent>,TInlineAllocator<4,FDefaultAllocator> > AsyncTraceCompletionEvent;
};

/* 6775 */
struct __declspec(align(8)) FWorldAsyncTraceState
{
  AsyncTraceData DataBuffer[2];
  int CurrentFrame;
};

/* 5400 */
struct TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<24,4> >,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 6776 */
struct TSparseArray<TSetElement<TTuple<TWeakObjectPtr<UBlueprint,FWeakObjectPtr>,TWeakObjectPtr<UObject,FWeakObjectPtr> > >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<24,4> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 6777 */
struct __declspec(align(8)) TSet<TTuple<TWeakObjectPtr<UBlueprint,FWeakObjectPtr>,TWeakObjectPtr<UObject,FWeakObjectPtr> >,TDefaultMapHashableKeyFuncs<TWeakObjectPtr<UBlueprint,FWeakObjectPtr>,TWeakObjectPtr<UObject,FWeakObjectPtr>,0>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<TTuple<TWeakObjectPtr<UBlueprint,FWeakObjectPtr>,TWeakObjectPtr<UObject,FWeakObjectPtr> > >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 6778 */
struct TMapBase<TWeakObjectPtr<UBlueprint,FWeakObjectPtr>,TWeakObjectPtr<UObject,FWeakObjectPtr>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<TWeakObjectPtr<UBlueprint,FWeakObjectPtr>,TWeakObjectPtr<UObject,FWeakObjectPtr>,0> >
{
  TSet<TTuple<TWeakObjectPtr<UBlueprint,FWeakObjectPtr>,TWeakObjectPtr<UObject,FWeakObjectPtr> >,TDefaultMapHashableKeyFuncs<TWeakObjectPtr<UBlueprint,FWeakObjectPtr>,TWeakObjectPtr<UObject,FWeakObjectPtr>,0>,FDefaultSetAllocator> Pairs;
};

/* 6779 */
struct __cppobj TSortableMapBase<TWeakObjectPtr<UBlueprint,FWeakObjectPtr>,TWeakObjectPtr<UObject,FWeakObjectPtr>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<TWeakObjectPtr<UBlueprint,FWeakObjectPtr>,TWeakObjectPtr<UObject,FWeakObjectPtr>,0> > : TMapBase<TWeakObjectPtr<UBlueprint,FWeakObjectPtr>,TWeakObjectPtr<UObject,FWeakObjectPtr>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<TWeakObjectPtr<UBlueprint,FWeakObjectPtr>,TWeakObjectPtr<UObject,FWeakObjectPtr>,0> >
{
};

/* 6780 */
struct __cppobj TMap<TWeakObjectPtr<UBlueprint,FWeakObjectPtr>,TWeakObjectPtr<UObject,FWeakObjectPtr>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<TWeakObjectPtr<UBlueprint,FWeakObjectPtr>,TWeakObjectPtr<UObject,FWeakObjectPtr>,0> > : TSortableMapBase<TWeakObjectPtr<UBlueprint,FWeakObjectPtr>,TWeakObjectPtr<UObject,FWeakObjectPtr>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<TWeakObjectPtr<UBlueprint,FWeakObjectPtr>,TWeakObjectPtr<UObject,FWeakObjectPtr>,0> >
{
};

/* 6781 */
struct __cppobj TBaseMulticastDelegate<void,AActor *> : FMulticastDelegateBase<FWeakObjectPtr>
{
};

/* 6782 */
struct __cppobj TMulticastDelegate<void,AActor *> : TBaseMulticastDelegate<void,AActor *>
{
};

/* 3917 */
struct TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<32,8> >,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 6643 */
struct TSparseArray<TSetElement<TTuple<TWeakObjectPtr<UObject,FWeakObjectPtr>,TSharedPtr<TMultiMap<int,FPendingLatentAction *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<int,FPendingLatentAction *,1> >,0> > >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<32,8> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 6644 */
struct __declspec(align(8)) TSet<TTuple<TWeakObjectPtr<UObject,FWeakObjectPtr>,TSharedPtr<TMultiMap<int,FPendingLatentAction *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<int,FPendingLatentAction *,1> >,0> >,TDefaultMapHashableKeyFuncs<TWeakObjectPtr<UObject,FWeakObjectPtr>,TSharedPtr<TMultiMap<int,FPendingLatentAction *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<int,FPendingLatentAction *,1> >,0>,0>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<TTuple<TWeakObjectPtr<UObject,FWeakObjectPtr>,TSharedPtr<TMultiMap<int,FPendingLatentAction *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<int,FPendingLatentAction *,1> >,0> > >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 6645 */
struct TMapBase<TWeakObjectPtr<UObject,FWeakObjectPtr>,TSharedPtr<TMultiMap<int,FPendingLatentAction *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<int,FPendingLatentAction *,1> >,0>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<TWeakObjectPtr<UObject,FWeakObjectPtr>,TSharedPtr<TMultiMap<int,FPendingLatentAction *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<int,FPendingLatentAction *,1> >,0>,0> >
{
  TSet<TTuple<TWeakObjectPtr<UObject,FWeakObjectPtr>,TSharedPtr<TMultiMap<int,FPendingLatentAction *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<int,FPendingLatentAction *,1> >,0> >,TDefaultMapHashableKeyFuncs<TWeakObjectPtr<UObject,FWeakObjectPtr>,TSharedPtr<TMultiMap<int,FPendingLatentAction *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<int,FPendingLatentAction *,1> >,0>,0>,FDefaultSetAllocator> Pairs;
};

/* 6646 */
struct __cppobj TSortableMapBase<TWeakObjectPtr<UObject,FWeakObjectPtr>,TSharedPtr<TMultiMap<int,FPendingLatentAction *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<int,FPendingLatentAction *,1> >,0>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<TWeakObjectPtr<UObject,FWeakObjectPtr>,TSharedPtr<TMultiMap<int,FPendingLatentAction *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<int,FPendingLatentAction *,1> >,0>,0> > : TMapBase<TWeakObjectPtr<UObject,FWeakObjectPtr>,TSharedPtr<TMultiMap<int,FPendingLatentAction *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<int,FPendingLatentAction *,1> >,0>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<TWeakObjectPtr<UObject,FWeakObjectPtr>,TSharedPtr<TMultiMap<int,FPendingLatentAction *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<int,FPendingLatentAction *,1> >,0>,0> >
{
};

/* 6647 */
struct __cppobj TMap<TWeakObjectPtr<UObject,FWeakObjectPtr>,TSharedPtr<TMultiMap<int,FPendingLatentAction *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<int,FPendingLatentAction *,1> >,0>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<TWeakObjectPtr<UObject,FWeakObjectPtr>,TSharedPtr<TMultiMap<int,FPendingLatentAction *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<int,FPendingLatentAction *,1> >,0>,0> > : TSortableMapBase<TWeakObjectPtr<UObject,FWeakObjectPtr>,TSharedPtr<TMultiMap<int,FPendingLatentAction *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<int,FPendingLatentAction *,1> >,0>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<TWeakObjectPtr<UObject,FWeakObjectPtr>,TSharedPtr<TMultiMap<int,FPendingLatentAction *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<int,FPendingLatentAction *,1> >,0>,0> >
{
};

/* 3958 */
struct TSparseArray<TSetElement<UObject *>,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<16,8> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 3959 */
struct __declspec(align(8)) TSet<UObject *,DefaultKeyFuncs<UObject *,0>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<UObject *>,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 6648 */
struct TSparseArray<TSetElement<TTuple<TWeakObjectPtr<UObject,FWeakObjectPtr>,TSharedPtr<TArray<TTuple<int,FPendingLatentAction *>,FDefaultAllocator>,0> > >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<32,8> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 6649 */
struct __declspec(align(8)) TSet<TTuple<TWeakObjectPtr<UObject,FWeakObjectPtr>,TSharedPtr<TArray<TTuple<int,FPendingLatentAction *>,FDefaultAllocator>,0> >,TDefaultMapHashableKeyFuncs<TWeakObjectPtr<UObject,FWeakObjectPtr>,TSharedPtr<TArray<TTuple<int,FPendingLatentAction *>,FDefaultAllocator>,0>,0>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<TTuple<TWeakObjectPtr<UObject,FWeakObjectPtr>,TSharedPtr<TArray<TTuple<int,FPendingLatentAction *>,FDefaultAllocator>,0> > >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 6650 */
struct TMapBase<TWeakObjectPtr<UObject,FWeakObjectPtr>,TSharedPtr<TArray<TTuple<int,FPendingLatentAction *>,FDefaultAllocator>,0>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<TWeakObjectPtr<UObject,FWeakObjectPtr>,TSharedPtr<TArray<TTuple<int,FPendingLatentAction *>,FDefaultAllocator>,0>,0> >
{
  TSet<TTuple<TWeakObjectPtr<UObject,FWeakObjectPtr>,TSharedPtr<TArray<TTuple<int,FPendingLatentAction *>,FDefaultAllocator>,0> >,TDefaultMapHashableKeyFuncs<TWeakObjectPtr<UObject,FWeakObjectPtr>,TSharedPtr<TArray<TTuple<int,FPendingLatentAction *>,FDefaultAllocator>,0>,0>,FDefaultSetAllocator> Pairs;
};

/* 6651 */
struct __cppobj TSortableMapBase<TWeakObjectPtr<UObject,FWeakObjectPtr>,TSharedPtr<TArray<TTuple<int,FPendingLatentAction *>,FDefaultAllocator>,0>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<TWeakObjectPtr<UObject,FWeakObjectPtr>,TSharedPtr<TArray<TTuple<int,FPendingLatentAction *>,FDefaultAllocator>,0>,0> > : TMapBase<TWeakObjectPtr<UObject,FWeakObjectPtr>,TSharedPtr<TArray<TTuple<int,FPendingLatentAction *>,FDefaultAllocator>,0>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<TWeakObjectPtr<UObject,FWeakObjectPtr>,TSharedPtr<TArray<TTuple<int,FPendingLatentAction *>,FDefaultAllocator>,0>,0> >
{
};

/* 6652 */
struct __cppobj TMap<TWeakObjectPtr<UObject,FWeakObjectPtr>,TSharedPtr<TArray<TTuple<int,FPendingLatentAction *>,FDefaultAllocator>,0>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<TWeakObjectPtr<UObject,FWeakObjectPtr>,TSharedPtr<TArray<TTuple<int,FPendingLatentAction *>,FDefaultAllocator>,0>,0> > : TSortableMapBase<TWeakObjectPtr<UObject,FWeakObjectPtr>,TSharedPtr<TArray<TTuple<int,FPendingLatentAction *>,FDefaultAllocator>,0>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<TWeakObjectPtr<UObject,FWeakObjectPtr>,TSharedPtr<TArray<TTuple<int,FPendingLatentAction *>,FDefaultAllocator>,0>,0> >
{
};

/* 6653 */
struct FLatentActionManager
{
  TMap<TWeakObjectPtr<UObject,FWeakObjectPtr>,TSharedPtr<TMultiMap<int,FPendingLatentAction *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<int,FPendingLatentAction *,1> >,0>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<TWeakObjectPtr<UObject,FWeakObjectPtr>,TSharedPtr<TMultiMap<int,FPendingLatentAction *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<int,FPendingLatentAction *,1> >,0>,0> > ObjectToActionListMap;
  TSet<UObject *,DefaultKeyFuncs<UObject *,0>,FDefaultSetAllocator> ProcessedThisFrame;
  TMap<TWeakObjectPtr<UObject,FWeakObjectPtr>,TSharedPtr<TArray<TTuple<int,FPendingLatentAction *>,FDefaultAllocator>,0>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<TWeakObjectPtr<UObject,FWeakObjectPtr>,TSharedPtr<TArray<TTuple<int,FPendingLatentAction *>,FDefaultAllocator>,0>,0> > ActionsToRemoveMap;
};

/* 6623 */
struct __cppobj TBaseMulticastDelegate<void,float> : FMulticastDelegateBase<FWeakObjectPtr>
{
};

/* 6783 */
struct __cppobj UWorld::FOnNetTickEvent : TBaseMulticastDelegate<void,float>
{
};

/* 4588 */
struct __cppobj TBaseMulticastDelegate<void> : FMulticastDelegateBase<FWeakObjectPtr>
{
};

/* 6784 */
struct __cppobj UWorld::FOnTickFlushEvent : TBaseMulticastDelegate<void>
{
};

/* 6785 */
struct __cppobj UWorld::FOnLevelsChangedEvent : TBaseMulticastDelegate<void>
{
};

/* 4357 */
struct TArray<FString,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 5604 */
struct __declspec(align(8)) FURL
{
  FString Protocol;
  FString Host;
  int Port;
  FString Map;
  FString RedirectURL;
  TArray<FString,FDefaultAllocator> Op;
  FString Portal;
  int Valid;
};

/* 6786 */
struct __cppobj FStartPhysicsTickFunction : FTickFunction
{
  UWorld *Target;
};

/* 6787 */
struct __cppobj FEndPhysicsTickFunction : FTickFunction
{
  UWorld *Target;
};

/* 6788 */
struct __cppobj FStartAsyncSimulationFunction : FTickFunction
{
  UWorld *Target;
};

/* 183 */
typedef _PaddingMode EWorldType::Type;

/* 6789 */
struct TArray<IInterface_PostProcessVolume *,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 6790 */
struct TSparseArray<TSetElement<AAudioVolume *>,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<16,8> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 6791 */
struct __declspec(align(8)) TSet<AAudioVolume *,DefaultKeyFuncs<AAudioVolume *,0>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<AAudioVolume *>,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 3823 */
struct FIntVector
{
  int X;
  int Y;
  int Z;
};

/* 780 */
typedef _PaddingMode EFlushLevelStreamingType;

/* 179 */
enum ETravelType
{
  TRAVEL_Absolute = 0x0,
  TRAVEL_Partial = 0x1,
  TRAVEL_Relative = 0x2,
  TRAVEL_MAX = 0x3,
};

/* 6797 */
struct __cppobj TBaseMulticastDelegate<void,UWorld::FActorsInitializedParams const &> : FMulticastDelegateBase<FWeakObjectPtr>
{
};

/* 6798 */
struct __cppobj TMulticastDelegate<void,UWorld::FActorsInitializedParams const &> : TBaseMulticastDelegate<void,UWorld::FActorsInitializedParams const &>
{
};

/* 5684 */
struct TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<72,8> >,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 6799 */
struct TSparseArray<TSetElement<TTuple<UParticleSystem *,FPSCPool> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<72,8> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 6800 */
struct __declspec(align(8)) TSet<TTuple<UParticleSystem *,FPSCPool>,TDefaultMapHashableKeyFuncs<UParticleSystem *,FPSCPool,0>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<TTuple<UParticleSystem *,FPSCPool> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 6801 */
struct TMapBase<UParticleSystem *,FPSCPool,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<UParticleSystem *,FPSCPool,0> >
{
  TSet<TTuple<UParticleSystem *,FPSCPool>,TDefaultMapHashableKeyFuncs<UParticleSystem *,FPSCPool,0>,FDefaultSetAllocator> Pairs;
};

/* 6802 */
struct __cppobj TSortableMapBase<UParticleSystem *,FPSCPool,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<UParticleSystem *,FPSCPool,0> > : TMapBase<UParticleSystem *,FPSCPool,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<UParticleSystem *,FPSCPool,0> >
{
};

/* 6803 */
struct __cppobj TMap<UParticleSystem *,FPSCPool,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<UParticleSystem *,FPSCPool,0> > : TSortableMapBase<UParticleSystem *,FPSCPool,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<UParticleSystem *,FPSCPool,0> >
{
};

/* 6804 */
struct FWorldPSCPool
{
  TMap<UParticleSystem *,FPSCPool,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<UParticleSystem *,FPSCPool,0> > WorldParticleSystemPools;
  float LastParticleSytemPoolCleanTime;
  float CachedWorldTime;
};

/* 4452 */
struct __cppobj UWorld : UObject, FNetworkNotify
{
  ULevel *PersistentLevel;
  UNetDriver *NetDriver;
  ULineBatchComponent *LineBatcher;
  ULineBatchComponent *PersistentLineBatcher;
  ULineBatchComponent *ForegroundLineBatcher;
  AGameNetworkManager *NetworkManager;
  UPhysicsCollisionHandler *PhysicsCollisionHandler;
  TArray<UObject *,FDefaultAllocator> ExtraReferencedObjects;
  TArray<UObject *,FDefaultAllocator> PerModuleDataObjects;
  TArray<ULevelStreaming *,FDefaultAllocator> StreamingLevels;
  TSet<ULevelStreaming *,DefaultKeyFuncs<ULevelStreaming *,0>,FDefaultSetAllocator> StreamingLevelsToConsider;
  FString StreamingLevelsPrefix;
  ULevel *CurrentLevelPendingVisibility;
  ULevel *CurrentLevelPendingInvisibility;
  UDemoNetDriver *DemoNetDriver;
  AParticleEventManager *MyParticleEventManager;
  APhysicsVolume *DefaultPhysicsVolume;
  TArray<FVector,FDefaultAllocator> ViewLocationsRenderedLastFrame;
  unsigned __int32 bWorldWasLoadedThisTick : 1;
  unsigned __int32 bTriggerPostLoadMap : 1;
  UNavigationSystemBase *NavigationSystem;
  AGameModeBase *AuthorityGameMode;
  AGameStateBase *GameState;
  UAISystemBase *AISystem;
  UAvoidanceManager *AvoidanceManager;
  TArray<ULevel *,FDefaultAllocator> Levels;
  TArray<FLevelCollection,FDefaultAllocator> LevelCollections;
  int ActiveLevelCollectionIndex;
  ULevel *CurrentLevel;
  UGameInstance *OwningGameInstance;
  TArray<UMaterialParameterCollectionInstance *,FDefaultAllocator> ParameterCollectionInstances;
  UCanvas *CanvasForRenderingToTarget;
  UCanvas *CanvasForDrawMaterialToRenderTarget;
  FSceneInterface *Scene;
  ERHIFeatureLevel::Type FeatureLevel;
  TArray<TWeakObjectPtr<AController,FWeakObjectPtr>,FDefaultAllocator> ControllerList;
  TArray<TWeakObjectPtr<APlayerController,FWeakObjectPtr>,FDefaultAllocator> PlayerControllerList;
  TArray<TWeakObjectPtr<APawn,FWeakObjectPtr>,FDefaultAllocator> PawnList;
  TArray<TWeakObjectPtr<ACameraActor,FWeakObjectPtr>,FDefaultAllocator> AutoCameraActorList;
  TArray<TWeakObjectPtr<APhysicsVolume,FWeakObjectPtr>,FDefaultAllocator> NonDefaultPhysicsVolumeList;
  FPhysScene *PhysicsScene;
  TSet<TWeakObjectPtr<UActorComponent,FWeakObjectPtr>,DefaultKeyFuncs<TWeakObjectPtr<UActorComponent,FWeakObjectPtr>,0>,FDefaultSetAllocator> ComponentsThatNeedEndOfFrameUpdate;
  TSet<TWeakObjectPtr<UActorComponent,FWeakObjectPtr>,DefaultKeyFuncs<TWeakObjectPtr<UActorComponent,FWeakObjectPtr>,0>,FDefaultSetAllocator> ComponentsThatNeedEndOfFrameUpdate_OnGameThread;
  FWorldAsyncTraceState AsyncTraceState;
  TMap<TWeakObjectPtr<UBlueprint,FWeakObjectPtr>,TWeakObjectPtr<UObject,FWeakObjectPtr>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<TWeakObjectPtr<UBlueprint,FWeakObjectPtr>,TWeakObjectPtr<UObject,FWeakObjectPtr>,0> > BlueprintObjectsBeingDebugged;
  bool bRequiresHitProxies;
  bool bShouldTick;
  TMulticastDelegate<void,AActor *> OnActorSpawned;
  FTimerManager *TimerManager;
  FLatentActionManager LatentActionManager;
  unsigned __int32 bStreamingDataDirty : 1;
  long double BuildStreamingDataTimer;
  UWorld::FOnNetTickEvent TickDispatchEvent;
  UWorld::FOnNetTickEvent TickFlushEvent;
  UWorld::FOnTickFlushEvent PostTickFlushEvent;
  UWorld::FOnLevelsChangedEvent LevelsChangedEvent;
  FURL URL;
  FFXSystemInterface *FXSystem;
  FTickTaskLevel *TickTaskLevel;
  bool bInTick;
  bool bIsBuilt;
  bool bTickNewlySpawned;
  ETickingGroup TickGroup;
  FStartPhysicsTickFunction StartPhysicsTickFunction;
  FEndPhysicsTickFunction EndPhysicsTickFunction;
  FStartAsyncSimulationFunction StartAsyncTickFunction;
  bool bPostTickComponentUpdate;
  int PlayerNum;
  bool bIsWorldInitialized;
  int StreamingVolumeUpdateDelay;
  bool bIsLevelStreamingFrozen;
  bool bShouldForceUnloadStreamingLevels;
  bool bShouldForceVisibleStreamingLevels;
  __int8 bMaterialParameterCollectionInstanceNeedsDeferredUpdate : 1;
  bool bDoDelayedUpdateCullDistanceVolumes;
  EWorldType::Type WorldType;
  bool bHack_Force_UsesGameHiddenFlags_True;
  bool bIsRunningConstructionScript;
  bool bShouldSimulatePhysics;
  FName DebugDrawTraceTag;
  bool bDebugDrawAllTraceTags;
  TArray<IInterface_PostProcessVolume *,FDefaultAllocator> PostProcessVolumes;
  TSet<AAudioVolume *,DefaultKeyFuncs<AAudioVolume *,0>,FDefaultSetAllocator> AudioVolumes;
  unsigned int AudioDeviceHandle;
  long double LastTimeUnbuiltLightingWasEncountered;
  float TimeSeconds;
  float UnpausedTimeSeconds;
  float RealTimeSeconds;
  float AudioTimeSeconds;
  float DeltaTimeSeconds;
  float PauseDelay;
  FIntVector OriginLocation;
  FIntVector RequestedOriginLocation;
  FVector OriginOffsetThisFrame;
  UWorldComposition *WorldComposition;
  EFlushLevelStreamingType FlushLevelStreamingType;
  ETravelType NextTravelType;
  FString NextURL;
  float NextSwitchCountdown;
  TArray<FName,FDefaultAllocator> PreparingLevelNames;
  FName CommittedPersistentLevelName;
  unsigned int NumLightingUnbuiltObjects;
  unsigned int NumUnbuiltReflectionCaptures;
  int NumTextureStreamingUnbuiltComponents;
  int NumTextureStreamingDirtyResources;
  unsigned __int32 bDropDetail : 1;
  unsigned __int32 bAggressiveLOD : 1;
  unsigned __int32 bIsDefaultLevel : 1;
  unsigned __int32 bRequestedBlockOnAsyncLoading : 1;
  unsigned __int32 bActorsInitialized : 1;
  unsigned __int32 bBegunPlay : 1;
  unsigned __int32 bMatchStarted : 1;
  unsigned __int32 bPlayersOnly : 1;
  unsigned __int32 bPlayersOnlyPending : 1;
  unsigned __int32 bStartup : 1;
  unsigned __int32 bIsTearingDown : 1;
  unsigned __int32 bKismetScriptError : 1;
  unsigned __int32 bDebugPauseExecution : 1;
  unsigned __int32 bIsCameraMoveableWhenPaused : 1;
  unsigned __int32 bAllowAudioPlayback : 1;
  unsigned __int32 bDebugFrameStepExecution : 1;
  unsigned __int32 bAreConstraintsDirty : 1;
  FWorldInGamePerformanceTrackers *PerfTrackers;
  TMulticastDelegate<void,UWorld::FActorsInitializedParams const &> OnActorsInitialized;
  FWorldPSCPool PSCPool;
};

/* 4198 */
struct TSubclassOf<UAssetUserData>
{
  UClass *Class;
};

/* 4200 */
struct IInterface_AssetUserDataVtbl
{
  void *(__cdecl *__vecDelDtor)(IInterface_AssetUserData *this, unsigned int);
  UObject *(__cdecl *_getUObject)(IInterface_AssetUserData *this);
  void (__cdecl *AddAssetUserData)(IInterface_AssetUserData *this, UAssetUserData *);
  UAssetUserData *(__cdecl *GetAssetUserDataOfClass)(IInterface_AssetUserData *this, TSubclassOf<UAssetUserData>);
  TArray<UAssetUserData *,FDefaultAllocator> *(__cdecl *GetAssetUserDataArray)(IInterface_AssetUserData *this);
  void (__cdecl *RemoveUserDataOfClass)(IInterface_AssetUserData *this, TSubclassOf<UAssetUserData>);
};

/* 490 */
enum ELevelCollectionType
{
  DynamicSourceLevels = 0x0,
  DynamicDuplicatedLevels = 0x1,
  StaticLevels = 0x2,
};

/* 5849 */
struct TSparseArray<TSetElement<ULevel *>,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<16,8> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 5850 */
struct __declspec(align(8)) TSet<ULevel *,DefaultKeyFuncs<ULevel *,0>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<ULevel *>,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 5851 */
struct __declspec(align(8)) FLevelCollection
{
  ELevelCollectionType CollectionType;
  AGameStateBase *GameState;
  UNetDriver *NetDriver;
  UDemoNetDriver *DemoNetDriver;
  ULevel *PersistentLevel;
  TSet<ULevel *,DefaultKeyFuncs<ULevel *,0>,FDefaultSetAllocator> Levels;
  bool bIsVisible;
};

/* 4598 */
struct FBoxSphereBounds
{
  FVector Origin;
  FVector BoxExtent;
  float SphereRadius;
};

/* 4484 */
struct INavAgentInterfaceVtbl
{
  void *(__cdecl *__vecDelDtor)(INavAgentInterface *this, unsigned int);
  _BYTE gap8[8];
  FNavAgentProperties *(__cdecl *GetNavAgentPropertiesRef)(INavAgentInterface *this);
  FVector *(__cdecl *GetNavAgentLocation)(INavAgentInterface *this, FVector *result);
  FVector *(__cdecl *GetMoveGoalOffset)(INavAgentInterface *this, FVector *result, AActor *);
  FVector *(__cdecl *GetMoveGoalOffset)(INavAgentInterface *this, FVector *result, AActor *);
  void (__cdecl *GetMoveGoalReachTest)(INavAgentInterface *this, AActor *, FVector *, FVector *, float *, float *);
  void (__cdecl *GetMoveGoalReachTest)(INavAgentInterface *this, AActor *, FVector *, FVector *, float *, float *);
  bool (__cdecl *ShouldPostponePathUpdates)(INavAgentInterface *this);
  bool (__cdecl *IsFollowingAPath)(INavAgentInterface *this);
  IPathFollowingAgentInterface *(__cdecl *GetPathFollowingAgent)(INavAgentInterface *this);
};

/* 4487 */
struct TSubclassOf<ULocalMessage>
{
  UClass *Class;
};

/* 4495 */
const struct TSharedPtr<FUniqueNetId const ,0>
{
  FUniqueNetId *Object;
  SharedPointerInternals::FSharedReferencer<0> SharedReferenceCount;
};

/* 4488 */
struct FUniqueNetIdWrapper
{
  FUniqueNetIdWrapperVtbl *vfptr;
  TSharedPtr<FUniqueNetId const ,0> UniqueNetId;
};

/* 4497 */
struct __cppobj FUniqueNetIdRepl : FUniqueNetIdWrapper
{
  TArray<unsigned char,FDefaultAllocator> ReplicationBytes;
};

/* 4498 */
struct PingAvgData
{
  unsigned __int16 PingSum : 13;
  __int8 PingCount : 3;
};

/* 4499 */
struct __cppobj __declspec(align(8)) APlayerState : AInfo
{
  float Score;
  char Ping;
  FString PlayerName;
  FString OldName;
  int PlayerId;
  unsigned __int32 bIsSpectator : 1;
  unsigned __int32 bOnlySpectator : 1;
  unsigned __int32 bIsABot : 1;
  unsigned __int32 bHasBeenWelcomed : 1;
  unsigned __int32 bIsInactive : 1;
  unsigned __int32 bFromPreviousLevel : 1;
  unsigned __int32 bUseCustomPlayerNames : 1;
  int StartTime;
  TSubclassOf<ULocalMessage> EngineMessageClass;
  float ExactPing;
  FString SavedNetworkAddress;
  FUniqueNetIdRepl UniqueId;
  FName SessionName;
  PingAvgData PingBucket[4];
  char CurPingBucket;
  float CurPingBucketTimestamp;
  FString PlayerNamePrivate;
  FString OldNamePrivate;
  bool bShouldUpdateReplicatedPing;
};

/* 4481 */
struct __cppobj TWeakObjectPtr<AActor,FWeakObjectPtr> : FWeakObjectPtr
{
};

/* 4534 */
struct __cppobj TBaseDynamicMulticastDelegate<FWeakObjectPtr,void,float,UDamageType const *,AActor *,AActor *> : TMulticastScriptDelegate<FWeakObjectPtr>
{
};

/* 4535 */
struct __cppobj FInstigatedAnyDamageSignature : TBaseDynamicMulticastDelegate<FWeakObjectPtr,void,float,UDamageType const *,AActor *,AActor *>
{
};

/* 4536 */
struct __cppobj TWeakObjectPtr<APawn,FWeakObjectPtr> : FWeakObjectPtr
{
};

/* 4924 */
struct __cppobj TBaseMulticastDelegate<void,APawn *> : FMulticastDelegateBase<FWeakObjectPtr>
{
};

/* 4925 */
struct __cppobj TMulticastDelegate<void,APawn *> : TBaseMulticastDelegate<void,APawn *>
{
};

/* 4500 */
struct __cppobj __declspec(align(8)) AController : AActor, INavAgentInterface
{
  APlayerState *PlayerState;
  TWeakObjectPtr<AActor,FWeakObjectPtr> StartSpot;
  FInstigatedAnyDamageSignature OnInstigatedAnyDamage;
  FName StateName;
  APawn *Pawn;
  TWeakObjectPtr<APawn,FWeakObjectPtr> OldPawn;
  ACharacter *Character;
  USceneComponent *TransformComponent;
  TMulticastDelegate<void,APawn *> OnNewPawn;
  FRotator ControlRotation;
  unsigned __int32 bAttachToPawn : 1;
  unsigned __int32 bIsPlayerController : 1;
  char IgnoreMoveInput;
  char IgnoreLookInput;
};

/* 3961 */
struct FSingleThreadRunnable
{
  FSingleThreadRunnableVtbl *vfptr;
};

/* 3966 */
union $10504E9DFA190CE358784990C1D87BF4
{
  void (__cdecl *~FRunnableThread)(FRunnableThread *this);
  void *(__cdecl *__vecDelDtor)(FRunnableThread *this, unsigned int);
};

/* 3967 */
struct FRunnableThreadVtbl
{
  void (__cdecl *SetThreadPriority)(FRunnableThread *this, EThreadPriority);
  void (__cdecl *Suspend)(FRunnableThread *this, bool);
  bool (__cdecl *Kill)(FRunnableThread *this, bool);
  void (__cdecl *WaitForCompletion)(FRunnableThread *this);
  $10504E9DFA190CE358784990C1D87BF4 ___u4;
  bool (__cdecl *CreateInternal)(FRunnableThread *this, FRunnable *, const wchar_t *, unsigned int, EThreadPriority, unsigned __int64);
  void (__cdecl *Tick)(FRunnableThread *this);
};

/* 3971 */
struct TAtomicBase_Basic<unsigned int>
{
  volatile unsigned int Element;
};

/* 3972 */
struct __cppobj TAtomicBase_Arithmetic<unsigned int,unsigned int> : TAtomicBase_Basic<unsigned int>
{
};

/* 3973 */
struct __cppobj TAtomicBase_Integral<unsigned int> : TAtomicBase_Arithmetic<unsigned int,unsigned int>
{
};

/* 3974 */
struct __cppobj TAtomic<unsigned int> : TAtomicBase_Integral<unsigned int>
{
};

/* 3968 */
struct FEvent
{
  FEventVtbl *vfptr;
  unsigned int EventId;
  TAtomic<unsigned int> EventStartCycles;
};

/* 66910 */
struct WingState
{
  float aoa;
  float cd;
  float cl;
  float angle;
  float inputAngle;
  float groundHeight;
  float frontShare;
  float dragKG;
  float liftKG;
  float angleMult;
  float groundEffectLift;
  float groundEffectDrag;
  float yawAngle;
  bool isVertical;
  vec3d liftVector;
};

/* 66916 */
struct __declspec(align(8)) DownForceState
{
  float downForce;
  float unsteadyDownForce;
  float aoa;
  float angle;
  float dragForce;
  float rideHeightAxleMM;
  float rideHeightMM;
  float otherAxleRideHeight;
  float dragKG;
  float liftKG;
  float yawAngle;
  float deltaH;
  vec3d liftVector;
  float frontShare;
  float yawGain;
  float clGain;
};

/* 66922 */
struct DebugPoint
{
  vec3f position;
  vec3f color;
};

/* 66818 */
struct vec4f
{
  float x;
  float y;
  float z;
  float w;
};

/* 66928 */
struct DebugLine
{
  vec3f p0;
  vec3f p1;
  vec4f color;
  float seconds;
};

/* 67627 */
struct std::_Func_base<void>
{
  std::_Func_base<void>Vtbl *vfptr;
};

/* 68411 */
struct __cppobj std::allocator<std::pair<void *,std::function<void __cdecl(enum ksRacing::TrackFlagLights const &)> > >
{
};

/* 68419 */
struct __cppobj std::_Vector_val<std::_Simple_types<std::pair<void *,std::function<void __cdecl(enum ksRacing::TrackFlagLights const &)> > > > : std::_Container_base0
{
  std::pair<void *,std::function<void __cdecl(enum ksRacing::TrackFlagLights const &)> > *_Myfirst;
  std::pair<void *,std::function<void __cdecl(enum ksRacing::TrackFlagLights const &)> > *_Mylast;
  std::pair<void *,std::function<void __cdecl(enum ksRacing::TrackFlagLights const &)> > *_Myend;
};

/* 68420 */
struct __cppobj std::_Compressed_pair<std::allocator<std::pair<void *,std::function<void __cdecl(enum ksRacing::TrackFlagLights const &)> > >,std::_Vector_val<std::_Simple_types<std::pair<void *,std::function<void __cdecl(enum ksRacing::TrackFlagLights const &)> > > >,1> : std::allocator<std::pair<void *,std::function<void __cdecl(enum ksRacing::TrackFlagLights const &)> > >
{
  std::_Vector_val<std::_Simple_types<std::pair<void *,std::function<void __cdecl(enum ksRacing::TrackFlagLights const &)> > > > _Myval2;
};

/* 68421 */
struct std::_Vector_alloc<std::_Vec_base_types<std::pair<void *,std::function<void __cdecl(enum ksRacing::TrackFlagLights const &)> >,std::allocator<std::pair<void *,std::function<void __cdecl(enum ksRacing::TrackFlagLights const &)> > > > >
{
  std::_Compressed_pair<std::allocator<std::pair<void *,std::function<void __cdecl(enum ksRacing::TrackFlagLights const &)> > >,std::_Vector_val<std::_Simple_types<std::pair<void *,std::function<void __cdecl(enum ksRacing::TrackFlagLights const &)> > > >,1> _Mypair;
};

/* 68422 */
struct __cppobj std::vector<std::pair<void *,std::function<void __cdecl(enum ksRacing::TrackFlagLights const &)> >,std::allocator<std::pair<void *,std::function<void __cdecl(enum ksRacing::TrackFlagLights const &)> > > > : std::_Vector_alloc<std::_Vec_base_types<std::pair<void *,std::function<void __cdecl(enum ksRacing::TrackFlagLights const &)> >,std::allocator<std::pair<void *,std::function<void __cdecl(enum ksRacing::TrackFlagLights const &)> > > > >
{
};

/* 68423 */
struct Event<enum ksRacing::TrackFlagLights>
{
  std::vector<std::pair<void *,std::function<void __cdecl(enum ksRacing::TrackFlagLights const &)> >,std::allocator<std::pair<void *,std::function<void __cdecl(enum ksRacing::TrackFlagLights const &)> > > > handlers;
};

/* 68424 */
struct __cppobj std::allocator<std::pair<void *,std::function<void __cdecl(ksRacing::RaceStateEvent const &)> > >
{
};

/* 68433 */
struct __cppobj std::_Vector_val<std::_Simple_types<std::pair<void *,std::function<void __cdecl(ksRacing::RaceStateEvent const &)> > > > : std::_Container_base0
{
  std::pair<void *,std::function<void __cdecl(ksRacing::RaceStateEvent const &)> > *_Myfirst;
  std::pair<void *,std::function<void __cdecl(ksRacing::RaceStateEvent const &)> > *_Mylast;
  std::pair<void *,std::function<void __cdecl(ksRacing::RaceStateEvent const &)> > *_Myend;
};

/* 68434 */
struct __cppobj std::_Compressed_pair<std::allocator<std::pair<void *,std::function<void __cdecl(ksRacing::RaceStateEvent const &)> > >,std::_Vector_val<std::_Simple_types<std::pair<void *,std::function<void __cdecl(ksRacing::RaceStateEvent const &)> > > >,1> : std::allocator<std::pair<void *,std::function<void __cdecl(ksRacing::RaceStateEvent const &)> > >
{
  std::_Vector_val<std::_Simple_types<std::pair<void *,std::function<void __cdecl(ksRacing::RaceStateEvent const &)> > > > _Myval2;
};

/* 68435 */
struct std::_Vector_alloc<std::_Vec_base_types<std::pair<void *,std::function<void __cdecl(ksRacing::RaceStateEvent const &)> >,std::allocator<std::pair<void *,std::function<void __cdecl(ksRacing::RaceStateEvent const &)> > > > >
{
  std::_Compressed_pair<std::allocator<std::pair<void *,std::function<void __cdecl(ksRacing::RaceStateEvent const &)> > >,std::_Vector_val<std::_Simple_types<std::pair<void *,std::function<void __cdecl(ksRacing::RaceStateEvent const &)> > > >,1> _Mypair;
};

/* 68436 */
struct __cppobj std::vector<std::pair<void *,std::function<void __cdecl(ksRacing::RaceStateEvent const &)> >,std::allocator<std::pair<void *,std::function<void __cdecl(ksRacing::RaceStateEvent const &)> > > > : std::_Vector_alloc<std::_Vec_base_types<std::pair<void *,std::function<void __cdecl(ksRacing::RaceStateEvent const &)> >,std::allocator<std::pair<void *,std::function<void __cdecl(ksRacing::RaceStateEvent const &)> > > > >
{
};

/* 68437 */
struct Event<ksRacing::RaceStateEvent>
{
  std::vector<std::pair<void *,std::function<void __cdecl(ksRacing::RaceStateEvent const &)> >,std::allocator<std::pair<void *,std::function<void __cdecl(ksRacing::RaceStateEvent const &)> > > > handlers;
};

/* 68438 */
struct __cppobj std::allocator<std::pair<void *,std::function<void __cdecl(ksRacing::RaceStartTimeEvent const &)> > >
{
};

/* 68447 */
struct __cppobj std::_Vector_val<std::_Simple_types<std::pair<void *,std::function<void __cdecl(ksRacing::RaceStartTimeEvent const &)> > > > : std::_Container_base0
{
  std::pair<void *,std::function<void __cdecl(ksRacing::RaceStartTimeEvent const &)> > *_Myfirst;
  std::pair<void *,std::function<void __cdecl(ksRacing::RaceStartTimeEvent const &)> > *_Mylast;
  std::pair<void *,std::function<void __cdecl(ksRacing::RaceStartTimeEvent const &)> > *_Myend;
};

/* 68448 */
struct __cppobj std::_Compressed_pair<std::allocator<std::pair<void *,std::function<void __cdecl(ksRacing::RaceStartTimeEvent const &)> > >,std::_Vector_val<std::_Simple_types<std::pair<void *,std::function<void __cdecl(ksRacing::RaceStartTimeEvent const &)> > > >,1> : std::allocator<std::pair<void *,std::function<void __cdecl(ksRacing::RaceStartTimeEvent const &)> > >
{
  std::_Vector_val<std::_Simple_types<std::pair<void *,std::function<void __cdecl(ksRacing::RaceStartTimeEvent const &)> > > > _Myval2;
};

/* 68449 */
struct std::_Vector_alloc<std::_Vec_base_types<std::pair<void *,std::function<void __cdecl(ksRacing::RaceStartTimeEvent const &)> >,std::allocator<std::pair<void *,std::function<void __cdecl(ksRacing::RaceStartTimeEvent const &)> > > > >
{
  std::_Compressed_pair<std::allocator<std::pair<void *,std::function<void __cdecl(ksRacing::RaceStartTimeEvent const &)> > >,std::_Vector_val<std::_Simple_types<std::pair<void *,std::function<void __cdecl(ksRacing::RaceStartTimeEvent const &)> > > >,1> _Mypair;
};

/* 68450 */
struct __cppobj std::vector<std::pair<void *,std::function<void __cdecl(ksRacing::RaceStartTimeEvent const &)> >,std::allocator<std::pair<void *,std::function<void __cdecl(ksRacing::RaceStartTimeEvent const &)> > > > : std::_Vector_alloc<std::_Vec_base_types<std::pair<void *,std::function<void __cdecl(ksRacing::RaceStartTimeEvent const &)> >,std::allocator<std::pair<void *,std::function<void __cdecl(ksRacing::RaceStartTimeEvent const &)> > > > >
{
};

/* 68451 */
struct Event<ksRacing::RaceStartTimeEvent>
{
  std::vector<std::pair<void *,std::function<void __cdecl(ksRacing::RaceStartTimeEvent const &)> >,std::allocator<std::pair<void *,std::function<void __cdecl(ksRacing::RaceStartTimeEvent const &)> > > > handlers;
};

/* 68452 */
struct __cppobj std::allocator<std::pair<void *,std::function<void __cdecl(ksRacing::StartSessionEvent const &)> > >
{
};

/* 68461 */
struct __cppobj std::_Vector_val<std::_Simple_types<std::pair<void *,std::function<void __cdecl(ksRacing::StartSessionEvent const &)> > > > : std::_Container_base0
{
  std::pair<void *,std::function<void __cdecl(ksRacing::StartSessionEvent const &)> > *_Myfirst;
  std::pair<void *,std::function<void __cdecl(ksRacing::StartSessionEvent const &)> > *_Mylast;
  std::pair<void *,std::function<void __cdecl(ksRacing::StartSessionEvent const &)> > *_Myend;
};

/* 68462 */
struct __cppobj std::_Compressed_pair<std::allocator<std::pair<void *,std::function<void __cdecl(ksRacing::StartSessionEvent const &)> > >,std::_Vector_val<std::_Simple_types<std::pair<void *,std::function<void __cdecl(ksRacing::StartSessionEvent const &)> > > >,1> : std::allocator<std::pair<void *,std::function<void __cdecl(ksRacing::StartSessionEvent const &)> > >
{
  std::_Vector_val<std::_Simple_types<std::pair<void *,std::function<void __cdecl(ksRacing::StartSessionEvent const &)> > > > _Myval2;
};

/* 68463 */
struct std::_Vector_alloc<std::_Vec_base_types<std::pair<void *,std::function<void __cdecl(ksRacing::StartSessionEvent const &)> >,std::allocator<std::pair<void *,std::function<void __cdecl(ksRacing::StartSessionEvent const &)> > > > >
{
  std::_Compressed_pair<std::allocator<std::pair<void *,std::function<void __cdecl(ksRacing::StartSessionEvent const &)> > >,std::_Vector_val<std::_Simple_types<std::pair<void *,std::function<void __cdecl(ksRacing::StartSessionEvent const &)> > > >,1> _Mypair;
};

/* 68464 */
struct __cppobj std::vector<std::pair<void *,std::function<void __cdecl(ksRacing::StartSessionEvent const &)> >,std::allocator<std::pair<void *,std::function<void __cdecl(ksRacing::StartSessionEvent const &)> > > > : std::_Vector_alloc<std::_Vec_base_types<std::pair<void *,std::function<void __cdecl(ksRacing::StartSessionEvent const &)> >,std::allocator<std::pair<void *,std::function<void __cdecl(ksRacing::StartSessionEvent const &)> > > > >
{
};

/* 68465 */
struct Event<ksRacing::StartSessionEvent>
{
  std::vector<std::pair<void *,std::function<void __cdecl(ksRacing::StartSessionEvent const &)> >,std::allocator<std::pair<void *,std::function<void __cdecl(ksRacing::StartSessionEvent const &)> > > > handlers;
};

/* 68466 */
struct __cppobj std::allocator<std::pair<void *,std::function<void __cdecl(ksRacing::SwapDriverEvent const &)> > >
{
};

/* 68475 */
struct __cppobj std::_Vector_val<std::_Simple_types<std::pair<void *,std::function<void __cdecl(ksRacing::SwapDriverEvent const &)> > > > : std::_Container_base0
{
  std::pair<void *,std::function<void __cdecl(ksRacing::SwapDriverEvent const &)> > *_Myfirst;
  std::pair<void *,std::function<void __cdecl(ksRacing::SwapDriverEvent const &)> > *_Mylast;
  std::pair<void *,std::function<void __cdecl(ksRacing::SwapDriverEvent const &)> > *_Myend;
};

/* 68476 */
struct __cppobj std::_Compressed_pair<std::allocator<std::pair<void *,std::function<void __cdecl(ksRacing::SwapDriverEvent const &)> > >,std::_Vector_val<std::_Simple_types<std::pair<void *,std::function<void __cdecl(ksRacing::SwapDriverEvent const &)> > > >,1> : std::allocator<std::pair<void *,std::function<void __cdecl(ksRacing::SwapDriverEvent const &)> > >
{
  std::_Vector_val<std::_Simple_types<std::pair<void *,std::function<void __cdecl(ksRacing::SwapDriverEvent const &)> > > > _Myval2;
};

/* 68477 */
struct std::_Vector_alloc<std::_Vec_base_types<std::pair<void *,std::function<void __cdecl(ksRacing::SwapDriverEvent const &)> >,std::allocator<std::pair<void *,std::function<void __cdecl(ksRacing::SwapDriverEvent const &)> > > > >
{
  std::_Compressed_pair<std::allocator<std::pair<void *,std::function<void __cdecl(ksRacing::SwapDriverEvent const &)> > >,std::_Vector_val<std::_Simple_types<std::pair<void *,std::function<void __cdecl(ksRacing::SwapDriverEvent const &)> > > >,1> _Mypair;
};

/* 68478 */
struct __cppobj std::vector<std::pair<void *,std::function<void __cdecl(ksRacing::SwapDriverEvent const &)> >,std::allocator<std::pair<void *,std::function<void __cdecl(ksRacing::SwapDriverEvent const &)> > > > : std::_Vector_alloc<std::_Vec_base_types<std::pair<void *,std::function<void __cdecl(ksRacing::SwapDriverEvent const &)> >,std::allocator<std::pair<void *,std::function<void __cdecl(ksRacing::SwapDriverEvent const &)> > > > >
{
};

/* 68479 */
struct Event<ksRacing::SwapDriverEvent>
{
  std::vector<std::pair<void *,std::function<void __cdecl(ksRacing::SwapDriverEvent const &)> >,std::allocator<std::pair<void *,std::function<void __cdecl(ksRacing::SwapDriverEvent const &)> > > > handlers;
};

/* 68480 */
struct __cppobj std::allocator<std::pair<void *,std::function<void __cdecl(bool const &)> > >
{
};

/* 68488 */
struct __cppobj std::_Vector_val<std::_Simple_types<std::pair<void *,std::function<void __cdecl(bool const &)> > > > : std::_Container_base0
{
  std::pair<void *,std::function<void __cdecl(bool const &)> > *_Myfirst;
  std::pair<void *,std::function<void __cdecl(bool const &)> > *_Mylast;
  std::pair<void *,std::function<void __cdecl(bool const &)> > *_Myend;
};

/* 68489 */
struct __cppobj std::_Compressed_pair<std::allocator<std::pair<void *,std::function<void __cdecl(bool const &)> > >,std::_Vector_val<std::_Simple_types<std::pair<void *,std::function<void __cdecl(bool const &)> > > >,1> : std::allocator<std::pair<void *,std::function<void __cdecl(bool const &)> > >
{
  std::_Vector_val<std::_Simple_types<std::pair<void *,std::function<void __cdecl(bool const &)> > > > _Myval2;
};

/* 68490 */
struct std::_Vector_alloc<std::_Vec_base_types<std::pair<void *,std::function<void __cdecl(bool const &)> >,std::allocator<std::pair<void *,std::function<void __cdecl(bool const &)> > > > >
{
  std::_Compressed_pair<std::allocator<std::pair<void *,std::function<void __cdecl(bool const &)> > >,std::_Vector_val<std::_Simple_types<std::pair<void *,std::function<void __cdecl(bool const &)> > > >,1> _Mypair;
};

/* 68491 */
struct __cppobj std::vector<std::pair<void *,std::function<void __cdecl(bool const &)> >,std::allocator<std::pair<void *,std::function<void __cdecl(bool const &)> > > > : std::_Vector_alloc<std::_Vec_base_types<std::pair<void *,std::function<void __cdecl(bool const &)> >,std::allocator<std::pair<void *,std::function<void __cdecl(bool const &)> > > > >
{
};

/* 68492 */
struct Event<bool>
{
  std::vector<std::pair<void *,std::function<void __cdecl(bool const &)> >,std::allocator<std::pair<void *,std::function<void __cdecl(bool const &)> > > > handlers;
};

/* 68493 */
struct __cppobj std::allocator<std::pair<void *,std::function<void __cdecl(ksRacing::AddOnlineEvent const &)> > >
{
};

/* 68502 */
struct __cppobj std::_Vector_val<std::_Simple_types<std::pair<void *,std::function<void __cdecl(ksRacing::AddOnlineEvent const &)> > > > : std::_Container_base0
{
  std::pair<void *,std::function<void __cdecl(ksRacing::AddOnlineEvent const &)> > *_Myfirst;
  std::pair<void *,std::function<void __cdecl(ksRacing::AddOnlineEvent const &)> > *_Mylast;
  std::pair<void *,std::function<void __cdecl(ksRacing::AddOnlineEvent const &)> > *_Myend;
};

/* 68503 */
struct __cppobj std::_Compressed_pair<std::allocator<std::pair<void *,std::function<void __cdecl(ksRacing::AddOnlineEvent const &)> > >,std::_Vector_val<std::_Simple_types<std::pair<void *,std::function<void __cdecl(ksRacing::AddOnlineEvent const &)> > > >,1> : std::allocator<std::pair<void *,std::function<void __cdecl(ksRacing::AddOnlineEvent const &)> > >
{
  std::_Vector_val<std::_Simple_types<std::pair<void *,std::function<void __cdecl(ksRacing::AddOnlineEvent const &)> > > > _Myval2;
};

/* 68504 */
struct std::_Vector_alloc<std::_Vec_base_types<std::pair<void *,std::function<void __cdecl(ksRacing::AddOnlineEvent const &)> >,std::allocator<std::pair<void *,std::function<void __cdecl(ksRacing::AddOnlineEvent const &)> > > > >
{
  std::_Compressed_pair<std::allocator<std::pair<void *,std::function<void __cdecl(ksRacing::AddOnlineEvent const &)> > >,std::_Vector_val<std::_Simple_types<std::pair<void *,std::function<void __cdecl(ksRacing::AddOnlineEvent const &)> > > >,1> _Mypair;
};

/* 68505 */
struct __cppobj std::vector<std::pair<void *,std::function<void __cdecl(ksRacing::AddOnlineEvent const &)> >,std::allocator<std::pair<void *,std::function<void __cdecl(ksRacing::AddOnlineEvent const &)> > > > : std::_Vector_alloc<std::_Vec_base_types<std::pair<void *,std::function<void __cdecl(ksRacing::AddOnlineEvent const &)> >,std::allocator<std::pair<void *,std::function<void __cdecl(ksRacing::AddOnlineEvent const &)> > > > >
{
};

/* 68506 */
struct Event<ksRacing::AddOnlineEvent>
{
  std::vector<std::pair<void *,std::function<void __cdecl(ksRacing::AddOnlineEvent const &)> >,std::allocator<std::pair<void *,std::function<void __cdecl(ksRacing::AddOnlineEvent const &)> > > > handlers;
};

/* 68507 */
struct __cppobj std::default_delete<ksRacing::EntryList>
{
};

/* 68509 */
struct __cppobj std::_Compressed_pair<std::default_delete<ksRacing::EntryList>,ksRacing::EntryList *,1> : std::default_delete<ksRacing::EntryList>
{
  ksRacing::EntryList *_Myval2;
};

/* 68510 */
struct std::_Unique_ptr_base<ksRacing::EntryList,std::default_delete<ksRacing::EntryList> >
{
  std::_Compressed_pair<std::default_delete<ksRacing::EntryList>,ksRacing::EntryList *,1> _Mypair;
};

/* 68511 */
struct __cppobj std::unique_ptr<ksRacing::EntryList,std::default_delete<ksRacing::EntryList> > : std::_Unique_ptr_base<ksRacing::EntryList,std::default_delete<ksRacing::EntryList> >
{
};

/* 68512 */
struct __cppobj std::default_delete<ksRacing::CarStateServices>
{
};

/* 68577 */
struct __cppobj std::_Compressed_pair<std::default_delete<ksRacing::CarStateServices>,ksRacing::CarStateServices *,1> : std::default_delete<ksRacing::CarStateServices>
{
  ksRacing::CarStateServices *_Myval2;
};

/* 68578 */
struct std::_Unique_ptr_base<ksRacing::CarStateServices,std::default_delete<ksRacing::CarStateServices> >
{
  std::_Compressed_pair<std::default_delete<ksRacing::CarStateServices>,ksRacing::CarStateServices *,1> _Mypair;
};

/* 68579 */
struct __cppobj std::unique_ptr<ksRacing::CarStateServices,std::default_delete<ksRacing::CarStateServices> > : std::_Unique_ptr_base<ksRacing::CarStateServices,std::default_delete<ksRacing::CarStateServices> >
{
};

/* 68580 */
struct __cppobj std::default_delete<ksRacing::DriverStateServices>
{
};

/* 68592 */
struct __cppobj std::_Compressed_pair<std::default_delete<ksRacing::DriverStateServices>,ksRacing::DriverStateServices *,1> : std::default_delete<ksRacing::DriverStateServices>
{
  ksRacing::DriverStateServices *_Myval2;
};

/* 68593 */
struct std::_Unique_ptr_base<ksRacing::DriverStateServices,std::default_delete<ksRacing::DriverStateServices> >
{
  std::_Compressed_pair<std::default_delete<ksRacing::DriverStateServices>,ksRacing::DriverStateServices *,1> _Mypair;
};

/* 68594 */
struct __cppobj std::unique_ptr<ksRacing::DriverStateServices,std::default_delete<ksRacing::DriverStateServices> > : std::_Unique_ptr_base<ksRacing::DriverStateServices,std::default_delete<ksRacing::DriverStateServices> >
{
};

/* 68595 */
struct __cppobj std::default_delete<ksRacing::WeatherServices>
{
};

/* 68597 */
struct __cppobj std::_Compressed_pair<std::default_delete<ksRacing::WeatherServices>,ksRacing::WeatherServices *,1> : std::default_delete<ksRacing::WeatherServices>
{
  ksRacing::WeatherServices *_Myval2;
};

/* 68598 */
struct std::_Unique_ptr_base<ksRacing::WeatherServices,std::default_delete<ksRacing::WeatherServices> >
{
  std::_Compressed_pair<std::default_delete<ksRacing::WeatherServices>,ksRacing::WeatherServices *,1> _Mypair;
};

/* 68599 */
struct __cppobj std::unique_ptr<ksRacing::WeatherServices,std::default_delete<ksRacing::WeatherServices> > : std::_Unique_ptr_base<ksRacing::WeatherServices,std::default_delete<ksRacing::WeatherServices> >
{
};

/* 68600 */
struct __cppobj std::default_delete<ksRacing::ResultServices>
{
};

/* 68608 */
struct __cppobj std::_Compressed_pair<std::default_delete<ksRacing::ResultServices>,ksRacing::ResultServices *,1> : std::default_delete<ksRacing::ResultServices>
{
  ksRacing::ResultServices *_Myval2;
};

/* 68609 */
struct std::_Unique_ptr_base<ksRacing::ResultServices,std::default_delete<ksRacing::ResultServices> >
{
  std::_Compressed_pair<std::default_delete<ksRacing::ResultServices>,ksRacing::ResultServices *,1> _Mypair;
};

/* 68610 */
struct __cppobj std::unique_ptr<ksRacing::ResultServices,std::default_delete<ksRacing::ResultServices> > : std::_Unique_ptr_base<ksRacing::ResultServices,std::default_delete<ksRacing::ResultServices> >
{
};

/* 68611 */
struct __cppobj std::default_delete<ksRacing::GarageServices>
{
};

/* 68619 */
struct __cppobj std::_Compressed_pair<std::default_delete<ksRacing::GarageServices>,ksRacing::GarageServices *,1> : std::default_delete<ksRacing::GarageServices>
{
  ksRacing::GarageServices *_Myval2;
};

/* 68620 */
struct std::_Unique_ptr_base<ksRacing::GarageServices,std::default_delete<ksRacing::GarageServices> >
{
  std::_Compressed_pair<std::default_delete<ksRacing::GarageServices>,ksRacing::GarageServices *,1> _Mypair;
};

/* 68621 */
struct __cppobj std::unique_ptr<ksRacing::GarageServices,std::default_delete<ksRacing::GarageServices> > : std::_Unique_ptr_base<ksRacing::GarageServices,std::default_delete<ksRacing::GarageServices> >
{
};

/* 68622 */
struct __cppobj std::default_delete<ksRacing::TrackServices>
{
};

/* 68633 */
struct __cppobj std::_Compressed_pair<std::default_delete<ksRacing::TrackServices>,ksRacing::TrackServices *,1> : std::default_delete<ksRacing::TrackServices>
{
  ksRacing::TrackServices *_Myval2;
};

/* 68634 */
struct std::_Unique_ptr_base<ksRacing::TrackServices,std::default_delete<ksRacing::TrackServices> >
{
  std::_Compressed_pair<std::default_delete<ksRacing::TrackServices>,ksRacing::TrackServices *,1> _Mypair;
};

/* 68635 */
struct __cppobj std::unique_ptr<ksRacing::TrackServices,std::default_delete<ksRacing::TrackServices> > : std::_Unique_ptr_base<ksRacing::TrackServices,std::default_delete<ksRacing::TrackServices> >
{
};

/* 68636 */
struct __cppobj std::default_delete<ksRacing::TimingServices>
{
};

/* 68665 */
struct __cppobj std::_Compressed_pair<std::default_delete<ksRacing::TimingServices>,ksRacing::TimingServices *,1> : std::default_delete<ksRacing::TimingServices>
{
  ksRacing::TimingServices *_Myval2;
};

/* 68666 */
struct std::_Unique_ptr_base<ksRacing::TimingServices,std::default_delete<ksRacing::TimingServices> >
{
  std::_Compressed_pair<std::default_delete<ksRacing::TimingServices>,ksRacing::TimingServices *,1> _Mypair;
};

/* 68667 */
struct __cppobj std::unique_ptr<ksRacing::TimingServices,std::default_delete<ksRacing::TimingServices> > : std::_Unique_ptr_base<ksRacing::TimingServices,std::default_delete<ksRacing::TimingServices> >
{
};

/* 68668 */
struct __cppobj std::default_delete<ksRacing::RaceDirectorServices>
{
};

/* 68729 */
struct __cppobj std::_Compressed_pair<std::default_delete<ksRacing::RaceDirectorServices>,ksRacing::RaceDirectorServices *,1> : std::default_delete<ksRacing::RaceDirectorServices>
{
  ksRacing::RaceDirectorServices *_Myval2;
};

/* 68730 */
struct std::_Unique_ptr_base<ksRacing::RaceDirectorServices,std::default_delete<ksRacing::RaceDirectorServices> >
{
  std::_Compressed_pair<std::default_delete<ksRacing::RaceDirectorServices>,ksRacing::RaceDirectorServices *,1> _Mypair;
};

/* 68731 */
struct __cppobj std::unique_ptr<ksRacing::RaceDirectorServices,std::default_delete<ksRacing::RaceDirectorServices> > : std::_Unique_ptr_base<ksRacing::RaceDirectorServices,std::default_delete<ksRacing::RaceDirectorServices> >
{
};

/* 68554 */
struct ksRacing::RaceManager
{
  Event<enum ksRacing::TrackFlagLights> onTrackLightsEvent;
  Event<ksRacing::RaceStateEvent> onRaceStateEvent;
  Event<ksRacing::RaceStartTimeEvent> onRaceStartTimeEvent;
  Event<ksRacing::StartSessionEvent> onStartSessionEvent;
  Event<ksRacing::SwapDriverEvent> onSwapDriverEvent;
  Event<bool> onSessionOverEvent;
  Event<bool> onSeasonOverEvent;
  Event<bool> onCheckCarInitializatedEvent;
  Event<ksRacing::AddOnlineEvent> onAddOnlineEvent;
  char sectorCount;
  std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > exportFileName;
  long double physicsTime;
  long double sessionStartTimeStamp;
  long double receivedServerTime;
  long double serverTimeOffset;
  bool isServer;
  bool isClient;
  bool canProceed;
  bool canTick;
  bool areCarsInitializated;
  bool isTimeStopped;
  std::unique_ptr<ksRacing::EntryList,std::default_delete<ksRacing::EntryList> > entryList;
  std::unique_ptr<ksRacing::CarStateServices,std::default_delete<ksRacing::CarStateServices> > carStateServices;
  std::unique_ptr<ksRacing::DriverStateServices,std::default_delete<ksRacing::DriverStateServices> > driverStateServices;
  std::unique_ptr<ksRacing::WeatherServices,std::default_delete<ksRacing::WeatherServices> > weatherServices;
  std::unique_ptr<ksRacing::ResultServices,std::default_delete<ksRacing::ResultServices> > resultServices;
  std::unique_ptr<ksRacing::GarageServices,std::default_delete<ksRacing::GarageServices> > garageServices;
  std::unique_ptr<ksRacing::TrackServices,std::default_delete<ksRacing::TrackServices> > trackServices;
  std::unique_ptr<ksRacing::TimingServices,std::default_delete<ksRacing::TimingServices> > timingServices;
  std::unique_ptr<ksRacing::RaceDirectorServices,std::default_delete<ksRacing::RaceDirectorServices> > raceDirectorServices;
  ksRacing::SeasonEntity seasonEntity;
  ksRacing::GameplayRules sessionGameplayRules;
  ksRacing::OnlineRules sessionOnlineRules;
  ksRacing::RealismRules sessionRealismRules;
  ksRacing::SeasonResult originalSeasonResult;
  float sessionStartTime;
  float sessionEndTime;
  unsigned __int16 currentEventIndex;
  unsigned __int16 currentSessionIndex;
  _BYTE currentSessionType[1];
  _BYTE currentSessionPhase[1];
  bool isEventInitializated;
  bool isSessionInitializated;
};

/* 68624 */
struct std::pair<bool,unsigned short>
{
  bool first;
  unsigned __int16 second;
};

/* 5749 */
struct __cppobj AGameSession : AInfo
{
  int MaxSpectators;
  int MaxPlayers;
  int MaxPartySize;
  char MaxSplitscreensPerConnection;
  bool bRequiresPushToTalk;
  FName SessionName;
};

/* 5722 */
struct TSubclassOf<AGameModeBase>
{
  UClass *Class;
};

/* 5754 */
struct TArray<APlayerState *,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 5750 */
struct __cppobj AGameStateBase : AInfo
{
  TSubclassOf<AGameModeBase> GameModeClass;
  AGameModeBase *AuthorityGameMode;
  TSubclassOf<ASpectatorPawn> SpectatorClass;
  TArray<APlayerState *,FDefaultAllocator> PlayerArray;
  bool bReplicatedHasBegunPlay;
  float ReplicatedWorldTimeSeconds;
  float ServerWorldTimeSecondsDelta;
  float ServerWorldTimeSecondsUpdateFrequency;
  FTimerHandle TimerHandle_UpdateServerTimeSeconds;
};

/* 5751 */
struct __cppobj __declspec(align(8)) AServerStatReplicator : AInfo
{
  bool bUpdateStatNet;
  bool bOverwriteClientStats;
  unsigned int Channels;
  unsigned int InRate;
  unsigned int OutRate;
  unsigned int OutSaturation;
  unsigned int MaxPacketOverhead;
  unsigned int InRateClientMax;
  unsigned int InRateClientMin;
  unsigned int InRateClientAvg;
  unsigned int InPacketsClientMax;
  unsigned int InPacketsClientMin;
  unsigned int InPacketsClientAvg;
  unsigned int OutRateClientMax;
  unsigned int OutRateClientMin;
  unsigned int OutRateClientAvg;
  unsigned int OutPacketsClientMax;
  unsigned int OutPacketsClientMin;
  unsigned int OutPacketsClientAvg;
  unsigned int NetNumClients;
  unsigned int InPackets;
  unsigned int OutPackets;
  unsigned int InBunches;
  unsigned int OutBunches;
  unsigned int OutLoss;
  unsigned int InLoss;
  unsigned int VoiceBytesSent;
  unsigned int VoiceBytesRecv;
  unsigned int VoicePacketsSent;
  unsigned int VoicePacketsRecv;
  unsigned int PercentInVoice;
  unsigned int PercentOutVoice;
  unsigned int NumActorChannels;
  unsigned int NumConsideredActors;
  unsigned int PrioritizedActors;
  unsigned int NumRelevantActors;
  unsigned int NumRelevantDeletedActors;
  unsigned int NumReplicatedActorAttempts;
  unsigned int NumReplicatedActors;
  unsigned int NumActors;
  unsigned int NumNetActors;
  unsigned int NumDormantActors;
  unsigned int NumInitiallyDormantActors;
  unsigned int NumNetGUIDsAckd;
  unsigned int NumNetGUIDsPending;
  unsigned int NumNetGUIDsUnAckd;
  unsigned int ObjPathBytes;
  unsigned int NetGUIDOutRate;
  unsigned int NetGUIDInRate;
  unsigned int NetSaturated;
};

/* 3834 */
struct ITextData
{
  ITextDataVtbl *vfptr;
};

/* 3835 */
struct SharedPointerInternals::FReferenceControllerBase
{
  SharedPointerInternals::FReferenceControllerBaseVtbl *vfptr;
  int SharedReferenceCount;
  int WeakReferenceCount;
};

/* 66827 */
struct TSparseArray<TSetElement<TTuple<FName,unsigned char *> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<24,8> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 66828 */
struct __declspec(align(8)) TSet<TTuple<FName,unsigned char *>,TDefaultMapHashableKeyFuncs<FName,unsigned char *,0>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<TTuple<FName,unsigned char *> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 66829 */
struct TMapBase<FName,unsigned char *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,unsigned char *,0> >
{
  TSet<TTuple<FName,unsigned char *>,TDefaultMapHashableKeyFuncs<FName,unsigned char *,0>,FDefaultSetAllocator> Pairs;
};

/* 66830 */
struct __cppobj TSortableMapBase<FName,unsigned char *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,unsigned char *,0> > : TMapBase<FName,unsigned char *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,unsigned char *,0> >
{
};

/* 66831 */
struct __cppobj TMap<FName,unsigned char *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,unsigned char *,0> > : TSortableMapBase<FName,unsigned char *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,unsigned char *,0> >
{
};

/* 66832 */
const struct __cppobj __declspec(align(8)) UDataTable : UObject
{
  UScriptStruct *RowStruct;
  TMap<FName,unsigned char *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,unsigned char *,0> > RowMap;
  bool bStripFromClientBuilds;
};

/* 14797 */
struct TSubclassOf<UDataAsset>
{
  UClass *Class;
};

/* 14798 */
struct __cppobj UDataAsset : UObject
{
  TSubclassOf<UDataAsset> NativeClass;
};

/* 69143 */
struct __cppobj __declspec(align(8)) UPhysicsSettingsAC : UDataAsset
{
  float PuddlesGain;
  float TyreSlipVibrationThresholdMin;
  float TyreSlipVibrationThresholdMax;
  float TyreSlipVibrationStrength;
  float MarblesAccumulationGain;
  float MarblesDissipationGain;
  float MarblesMuK;
  float MarblesGrooveK;
  bool UseRaycastWheels;
};

/* 3849 */
struct FGuid
{
  unsigned int A;
  unsigned int B;
  unsigned int C;
  unsigned int D;
};

/* 4201 */
struct TEnumAsByte<enum TextureCompressionSettings>
{
  char Value;
};

/* 4202 */
struct TEnumAsByte<enum TextureFilter>
{
  char Value;
};

/* 4203 */
struct TEnumAsByte<enum TextureGroup>
{
  char Value;
};

/* 4071 */
struct TLinkedListBase<TLinkedList<FRenderResource *>,FRenderResource *,TLinkedListIterator>
{
  TLinkedList<FRenderResource *> *NextLink;
  TLinkedList<FRenderResource *> **PrevLink;
};

/* 4070 */
struct __cppobj TLinkedList<FRenderResource *> : TLinkedListBase<TLinkedList<FRenderResource *>,FRenderResource *,TLinkedListIterator>
{
  FRenderResource *Element;
};

/* 4068 */
struct __declspec(align(8)) FRenderResource
{
  FRenderResourceVtbl *vfptr;
  ERHIFeatureLevel::Type FeatureLevel;
  TLinkedList<FRenderResource *> ResourceLink;
  bool bInitialized;
};

/* 4218 */
struct TRefCountPtr<FRHITextureReference>
{
  FRHITextureReference *Reference;
};

/* 4209 */
struct FLastRenderTimeContainer
{
  long double LastRenderTime;
};

/* 4219 */
struct __cppobj __declspec(align(8)) FTextureReference : FRenderResource
{
  TRefCountPtr<FRHITextureReference> TextureReferenceRHI;
  FLastRenderTimeContainer LastRenderTimeRHI;
  bool bInitialized_GameThread;
};

/* 4233 */
const struct __cppobj UTexture : UObject, IInterface_AssetUserData
{
  FGuid LightingGuid;
  int LODBias;
  int NumCinematicMipLevels;
  TEnumAsByte<enum TextureCompressionSettings> CompressionSettings;
  TEnumAsByte<enum TextureFilter> Filter;
  TEnumAsByte<enum TextureGroup> LODGroup;
  __int8 SRGB : 1;
  __int8 NeverStream : 1;
  __int8 bNoTiling : 1;
  __int8 bUseCinematicMipLevels : 1;
  __int8 bAsyncResourceReleaseHasBeenStarted : 1;
  int CachedCombinedLODBias;
  TArray<UAssetUserData *,FDefaultAllocator> AssetUserData;
  FTextureResource *Resource;
  FTextureReference TextureReference;
  FRenderCommandFence ReleaseFence;
};

/* 6881 */
struct __cppobj UTextureRenderTarget : UTexture
{
  float TargetGamma;
  unsigned __int32 bNeedsTwoCopies : 1;
};

/* 3824 */
struct FLinearColor
{
  float R;
  float G;
  float B;
  float A;
};

/* 4929 */
struct TEnumAsByte<enum TextureAddress>
{
  char Value;
};

/* 6884 */
struct TEnumAsByte<enum ETextureRenderTargetFormat>
{
  char Value;
};

/* 6882 */
struct TEnumAsByte<enum EPixelFormat>
{
  char Value;
};

/* 6885 */
struct __cppobj __declspec(align(8)) UTextureRenderTarget2D : UTextureRenderTarget
{
  int SizeX;
  int SizeY;
  FLinearColor ClearColor;
  TEnumAsByte<enum TextureAddress> AddressX;
  TEnumAsByte<enum TextureAddress> AddressY;
  __int8 bForceLinearGamma : 1;
  __int8 bHDR_DEPRECATED : 1;
  __int8 bGPUSharedFlag : 1;
  __int8 bAutoGenerateMips : 1;
  TEnumAsByte<enum ETextureRenderTargetFormat> RenderTargetFormat;
  TEnumAsByte<enum EPixelFormat> OverrideFormat;
  int NumMips;
};

/* 5313 */
struct __declspec(align(4)) FBox2D
{
  FVector2D Min;
  FVector2D Max;
  bool bIsValid;
};

/* 69082 */
struct TEnumAsByte<enum EStereoLayerType>
{
  char Value;
};

/* 69083 */
struct TEnumAsByte<enum EStereoLayerShape>
{
  char Value;
};

/* 69084 */
struct __cppobj __declspec(align(16)) UStereoLayerComponent : USceneComponent
{
  UTexture *Texture;
  UTexture *LeftTexture;
  unsigned __int32 bQuadPreserveTextureRatio : 1;
  FVector2D QuadSize;
  FBox2D UVRect;
  float CylinderRadius;
  float CylinderOverlayArc;
  int CylinderHeight;
  TEnumAsByte<enum EStereoLayerType> StereoLayerType;
  TEnumAsByte<enum EStereoLayerShape> StereoLayerShape;
  int Priority;
  bool bIsDirty;
  bool bTextureNeedsUpdate;
  unsigned int LayerId;
  FTransform LastTransform;
  bool bLastVisible;
};

/* 69085 */
struct __cppobj UAcStereoLayerComponent : UStereoLayerComponent
{
};

/* 69144 */
struct IAIPerceptionListenerInterface
{
  IAIPerceptionListenerInterfaceVtbl *vfptr;
};

/* 69163 */
struct IGameplayTaskOwnerInterface
{
  IGameplayTaskOwnerInterfaceVtbl *vfptr;
};

/* 69174 */
struct IGenericTeamAgentInterface
{
  IGenericTeamAgentInterfaceVtbl *vfptr;
};

/* 69177 */
struct IVisualLoggerDebugSnapshotInterface
{
  IVisualLoggerDebugSnapshotInterfaceVtbl *vfptr;
};

/* 69166 */
struct FGameplayResourceSet
{
  unsigned __int16 Flags;
};

/* 69180 */
struct TArray<FFocusKnowledge::FFocusItem,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 69181 */
struct FFocusKnowledge
{
  TArray<FFocusKnowledge::FFocusItem,FDefaultAllocator> Priorities;
};

/* 69221 */
struct TSubclassOf<UNavigationQueryFilter>
{
  UClass *Class;
};

/* 69222 */
struct __cppobj TBaseDynamicMulticastDelegate<FWeakObjectPtr,void,FAIRequestID,enum EPathFollowingResult::Type> : TMulticastScriptDelegate<FWeakObjectPtr>
{
};

/* 69223 */
struct __cppobj FAIMoveCompletedSignature : TBaseDynamicMulticastDelegate<FWeakObjectPtr,void,FAIRequestID,enum EPathFollowingResult::Type>
{
};

/* 69175 */
const struct FGenericTeamId
{
  char TeamID;
};

/* 69148 */
struct __cppobj __declspec(align(8)) AAIController : AController, IAIPerceptionListenerInterface, IGameplayTaskOwnerInterface, IGenericTeamAgentInterface, IVisualLoggerDebugSnapshotInterface
{
  FGameplayResourceSet ScriptClaimedResources;
  FFocusKnowledge FocusInformation;
  unsigned __int32 bStopAILogicOnUnposses : 1;
  unsigned __int32 bLOSflag : 1;
  unsigned __int32 bSkipExtraLOSChecks : 1;
  unsigned __int32 bAllowStrafe : 1;
  unsigned __int32 bWantsPlayerState : 1;
  unsigned __int32 bSetControlRotationFromPawnOrientation : 1;
  UPathFollowingComponent *PathFollowingComponent;
  UBrainComponent *BrainComponent;
  UAIPerceptionComponent *PerceptionComponent;
  UPawnActionsComponent *ActionsComp;
  UBlackboardComponent *Blackboard;
  UGameplayTasksComponent *CachedGameplayTasksComponent;
  TSubclassOf<UNavigationQueryFilter> DefaultNavigationFilterClass;
  FAIMoveCompletedSignature ReceiveMoveCompleted;
  FGenericTeamId TeamID;
};

/* 69276 */
struct __cppobj AAiCarController : AAIController
{
  UAcAssistController *assistController;
  ACarAvatar *CarAvatar;
  AAcRaceGameMode *RaceGameMode;
  bool mustPossess;
  AIDriver *aiDriver;
};

/* 69277 */
struct TSparseArray<TSetElement<ACarAvatar *>,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<16,8> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 69278 */
struct __declspec(align(8)) TSet<ACarAvatar *,DefaultKeyFuncs<ACarAvatar *,0>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<ACarAvatar *>,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 69279 */
struct __cppobj __declspec(align(8)) UAcRaceManager : UObject
{
  UAcGameInstance *gameInstance;
  AAcRaceGameMode *rgm;
  _BYTE currentPlayerStartType[1];
  SessionType currentPhysicsSessionType;
  TSet<ACarAvatar *,DefaultKeyFuncs<ACarAvatar *,0>,FDefaultSetAllocator> fastLaneCars;
  bool isPreparationLap;
};

/* 66883 */
struct __cppobj UAcParticlesManager : UDataAsset
{
  UParticleSystem *Sparks;
  UDataTable *WaterCurves;
  UDataTable *WaterParticles;
  UDataTable *SmokeDirtCurves;
  UDataTable *SmokeDirtParticles;
};

/* 7089 */
struct TArray<FCollectionScalarParameter,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 7090 */
struct TArray<FCollectionVectorParameter,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 7092 */
struct __cppobj TDefaultDelete<FUniformBufferStruct>
{
};

/* 7093 */
struct __cppobj TUniquePtr<FUniformBufferStruct,TDefaultDelete<FUniformBufferStruct> > : TDefaultDelete<FUniformBufferStruct>
{
  FUniformBufferStruct *Ptr;
};

/* 7094 */
struct __cppobj UMaterialParameterCollection : UObject
{
  FGuid StateId;
  TArray<FCollectionScalarParameter,FDefaultAllocator> ScalarParameters;
  TArray<FCollectionVectorParameter,FDefaultAllocator> VectorParameters;
  FMaterialParameterCollectionInstanceResource *DefaultResource;
  TUniquePtr<FUniformBufferStruct,TDefaultDelete<FUniformBufferStruct> > UniformBufferStruct;
};

/* 39726 */
struct __cppobj UFMODAsset : UObject
{
  FGuid AssetGuid;
  bool bShowAsAsset;
  FString FileName;
};

/* 39949 */
struct __cppobj UFMODBank : UFMODAsset
{
};

/* 69101 */
struct __cppobj __declspec(align(8)) UViewOptionsLibrary : UObject
{
  APlayerController *playerController;
  char MirrorQualityLevel;
  char MaxCarsVisible;
  bool isMotionBlurEnabled;
  bool isTemporalAAEnabled;
  float ColorSaturation;
  bool IsHDRVideoEnabled;
};

/* 4451 */
struct FExec
{
  FExecVtbl *vfptr;
};

/* 6631 */
struct TArray<ULocalPlayer *,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 6633 */
struct __cppobj TBaseMulticastDelegate<void,FString const &,enum ETravelType,bool> : FMulticastDelegateBase<FWeakObjectPtr>
{
};

/* 6634 */
struct __cppobj TMulticastDelegate<void,FString const &,enum ETravelType,bool> : TBaseMulticastDelegate<void,FString const &,enum ETravelType,bool>
{
};

/* 4420 */
struct FDelegateHandle
{
  unsigned __int64 ID;
};

/* 6590 */
struct __cppobj UGameInstance : UObject, FExec
{
  FWorldContext *WorldContext;
  TArray<ULocalPlayer *,FDefaultAllocator> LocalPlayers;
  UOnlineSession *OnlineSession;
  TArray<UObject *,FDefaultAllocator> ReferencedObjects;
  TMulticastDelegate<void,FString const &,enum ETravelType,bool> NotifyPreClientTravelDelegates;
  FDelegateHandle OnPlayTogetherEventReceivedDelegateHandle;
  FString PIEMapName;
  FTimerManager *TimerManager;
  FLatentActionManager *LatentActionManager;
};

/* 68007 */
struct TSubclassOf<UUserWidget>
{
  UClass *Class;
};

/* 69535 */
struct TSubclassOf<UAcPageBase>
{
  UClass *Class;
};

/* 69536 */
struct FDebugWeatherOverride
{
  char overrideWeather;
  float rainLevel;
  float wetLevel;
  float cloudLevel;
  float puddlesLevel;
  float ambientTemp;
  float roadTemp;
};

/* 69537 */
struct __declspec(align(8)) FDebugEventOverride
{
  char OverrideEvent;
  char CarCount;
  char SessionType;
  char raceEventType;
  char usableCarsOnly;
  char UseRaceFastStart;
  int OfflineSpecialEventID;
  int MaxDriversCount;
  FDebugWeatherOverride Weather;
  FString TrackName;
  float IdealLineGrip;
};

/* 69538 */
struct __declspec(align(8)) FDebugCarOverride
{
  char OverrideCarModel;
  FName CarRowName;
  FName DriverRowName;
  int CarNumber;
};

/* 69539 */
struct __declspec(align(4)) FDebugOnline
{
  _BYTE AcOnlineServer[1];
  int Port;
  FString DriverName;
  int IdentitySwitchSimulatorNumber;
  char UseRaceDirectorPenalties;
};

/* 69540 */
struct __declspec(align(4)) FDebugVideoEditing
{
  char bUseGamepadForFreeCamera;
  float CameraTVCenterHeight;
  char UseExperimentalCameraTV;
  char ShowPhotomodeButton;
};

/* 69541 */
struct FAudioModules
{
  char UseAudio;
  char UseAmbientSounds;
  char UseCollisionSounds;
  char UseRayCastAudio;
};

/* 69542 */
struct FCarModules
{
  char UseDigitalDisplays;
  char UseLedSystem;
  char UseDriverAnimation;
  char UseCarAnimation;
  char UseBrakeGlow;
  char UseLightingSystem;
  char UseDistanceSaving;
  char UseCarParticles;
  char UseLumirank;
};

/* 69543 */
struct FTelemetryModules
{
  char exportEntireSession;
  char debugPhysics;
  char debugAI;
};

/* 69544 */
struct __declspec(align(4)) FModulesEnabler
{
  char UseReplay;
  char UseHUD;
  char UseSpotter;
  FAudioModules AudioModules;
  FCarModules CarModules;
  FTelemetryModules TelemetryModules;
  int PhysicsThreadsCount;
  char UseHMD;
};

/* 69545 */
struct FReplayConfiguration
{
  char PausePhysicsDuringReplay;
  int MaxTimeReplaySeconds;
  char ReplayQuality;
  char FarAIReplayQuality;
  int HighlightsRecTimeBefore;
  int HighlightsRecTimeAfter;
  float ExperimentalMinQualityFactor;
};

/* 69546 */
struct FUIConfiguration
{
  float TransitionStartLevelTime;
  float TransitionOtherTime;
  char DrawHUDDebugVisuals;
  char ChildHudEnabled;
  char ShowElectronicsActivityOnPedals1;
  char ShowGameIntroPages;
  char DebugShuffleLeaderboards;
  float DebugRebroadcastLeaderboardSeconds;
};

/* 69547 */
struct __declspec(align(8)) FDebugStruct
{
  char StartupLocation;
  FDebugEventOverride EventOverride;
  FDebugCarOverride CarOverride;
  FDebugOnline Online;
  FDebugVideoEditing VideoEditing;
  FModulesEnabler ModulesEnabler;
  FReplayConfiguration ReplayConfiguration;
  FUIConfiguration UIConfiguration;
  int IsDeveloper;
  int IsTester;
};

/* 69635 */
struct __declspec(align(8)) ReplayStartInfo
{
  std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > name;
  bool loadOnStart;
};

/* 69017 */
struct __cppobj UAcGameInstance : UGameInstance
{
  UAcInfoManager *InfoManager;
  UAcPresetManager *PresetManager;
  UAcCarGraphicData *CarGraphicData;
  UMenuManager *MenuManager;
  FName MenuLevel;
  TSubclassOf<UUserWidget> LoadingWidgetClass;
  TSubclassOf<UUserWidget> StartSessionsLoadingClass;
  TSubclassOf<UUserWidget> LaunchGameLoadingClass;
  TSubclassOf<UUserWidget> ReturnToMenuLoadingClass;
  UClass *PageToLoadOnStart;
  TSubclassOf<UAcPageBase> ExpoModeOutroPage;
  UUserWidget *LoadingWidget;
  FDebugStruct DebugStruct;
  bool isOnline;
  bool IsFirstLaunch;
  int ForcedEventIndex;
  int ForcedSessionIndex;
  ksRacing::DriverInfo driverInfo;
  ksRacing::CarInfo carInfo;
  UFMODEvent *guiEvent;
  UFMODEvent *musicEvent;
  UAcInputDeviceManager *InputDeviceManager;
  ksRacing::WeatherStatus guiWeatherStatus;
  ksRacing::WeatherData guiWeatherData;
  UClientAvatar *ClientAvatar;
  UAcMenuData *MenuData;
  UOnlineServices *onlineServices;
  UAudioManager *AudioManager;
  UFMODBank *MasterBank;
  UFMODBank *GuiBank;
  UFMODBank *MusicBank;
  UExpoModeManager *ExpoModeManager;
  UAcUserOptionsManager *UserOptions;
  UGamePlatformServices *GamePlatformServices;
  ksRacing::SeasonEntity seasonEntity;
  ksRacing::SeasonResult seasonResult;
  bool isInitializated;
  ReplayStartInfo replayToLoad;
};

/* 69282 */
struct TSubclassOf<ARainBase>
{
  UClass *Class;
};

/* 69283 */
struct __cppobj __declspec(align(8)) AAcRaceGameState : AGameStateBase
{
  float MaxWindSpeed;
  TSubclassOf<ARainBase> RainActorClass;
  int MaxNumCarsCastingShadows;
  UReplayManager *ReplayManager;
  AReplayActor *replayActor;
  float AudioInternalScale;
  float VolumeFadeInTime;
  float AudioStartingTime;
  float CameraStartRampVolume;
  float PuddleLevelSmoothValue;
  float PuddleGain;
  float OpponentEngineVolume;
  float VolumeMinDistance;
  float VolumeMaxDistance;
  float AudioScaleMaxSpeed;
  int AudioFadingCars;
  int AudioListenerCars;
  float DistanceFadingCars;
  float MaxDistanceListenerCars;
  float EngineExtVolumeSmoothOn;
  float EngineExtVolumeSmoothOff;
  float PassByFactorVariation;
  float DirectionalFactorVariation;
  int NumOpponentsVolumeReductionInt;
  float OpponentListenerReductionFactorInt;
  float OpponentListenerDistanceInt;
  int NumOpponentsVolumeReductionExt;
  float OpponentListenerReductionFactorExt;
  float TestMinOpponentDirt;
  bool LogAudio;
  bool EngineExtEnabled;
  bool EngineIntEnabled;
  bool BodyWorkEnabled;
  bool WheelEnabled;
  bool WindEnabled;
  AWindDirectionalSource *WindSource;
  ARainBase *RainActor;
  AAcParticles *ParticlesActor;
  ksRacing::RaceManager *raceManager;
  APlayerController *DefaultController;
  APlayerController *ReplayController;
  APawn *SpectatorPawn;
  AACPlayerCameraManager *CameraManager;
  bool m_bMaxCarVisibleCheckEnabled;
  FCameraType currentIngameCameraType;
  FTimerHandle StartReplayHandle;
  float audioSpeedFactor;
  float audioCurrentMaxDistance;
  UAudioManager *AudioManager;
  int listenerCars;
};

/* 69386 */
struct TArray<FCameraSet,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 69389 */
struct TArray<USurfaceData *,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 4630 */
struct TArray<float,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 69395 */
struct __cppobj TDefaultDelete<SurfacesManager>
{
};

/* 69407 */
struct __cppobj TUniquePtr<SurfacesManager,TDefaultDelete<SurfacesManager> > : TDefaultDelete<SurfacesManager>
{
  SurfacesManager *Ptr;
};

/* 3926 */
struct TArray<int,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 69415 */
struct TArray<ALight *,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 69416 */
struct TArray<ASpotLight *,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 69417 */
struct TArray<AReflectionCapture *,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 69374 */
struct TArray<AFMODAmbientSound *,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 69391 */
struct __cppobj __declspec(align(8)) ATrackAvatar : AActor
{
  FString TrackName;
  FString ConfigName;
  UTrackPhysicsDataCache *PhysicsDataCache;
  TArray<FCameraSet,FDefaultAllocator> TVCameraSets;
  UCurveFloat *ReflectionBrightnessCurve;
  UCurveFloat *ReflBrightnessCloudDensity;
  UCurveFloat *SunShadowBiasCurve;
  UTrackGenome *Genome;
  TArray<USurfaceData *,FDefaultAllocator> SurfaceData;
  UTrackPeopleController *TrackPeopleController;
  int currentTVCameraSet;
  UMaterialInstanceDynamic *StartingLightsMaterial;
  FVector2D GreenFlagTriggerRange;
  FVector2D FormationLapTriggerRange;
  TArray<float,FDefaultAllocator> normalizedSectorLimits;
  APhysicsAvatar *physicsAvatar;
  TUniquePtr<SurfacesManager,TDefaultDelete<SurfacesManager> > surfacesManager;
  Track *track;
  AAcRaceGameMode *RaceGameMode;
  AAcRaceGameState *RaceGameState;
  AAcCarLocationManager *CarLocationManager;
  AACPlayerCameraManager *CameraManager;
  AAcTrackSpline *FastLane;
  float FastLaneLength;
  TArray<int,FDefaultAllocator> speedAvgs;
  TArray<int,FDefaultAllocator> microSectorTimes;
  float startYellowFlagTime;
  TArray<ALight *,FDefaultAllocator> StartingLights;
  TArray<float,FDefaultAllocator> TrackFlagLightsColors;
  TArray<ASpotLight *,FDefaultAllocator> LightsWithCastTag;
  TArray<AReflectionCapture *,FDefaultAllocator> ReflectionCaptures;
  float ReflCapBrightenssLastVal;
  float SunShadowBiasLastVal;
  ASceneCapture2D *mapCapture;
  ADirectionalLight *pSunLight;
  UCurveFloat *pSunElevationCurve;
  float sunElevation;
  TArray<ALight *,FDefaultAllocator> TrackLights;
  TArray<AFMODAmbientSound *,FDefaultAllocator> PitlaneAlarms;
  bool bIsTVCameraOn;
  bool bAreTrackLightsOn;
  bool bIsPolesitterOnLeft;
  float lastRainGlobalLevel;
  float lastWetGlobalLevel;
  float lastPuddlesGlobalLevel;
  float lastCloudGlobalLevel;
  float lastRubberLineLevel;
  float lastDryLineGraphics;
  float lastMarblesLevel;
  float lastTVCameraDistance;
  float minDistanceTVCamera;
  float deltaSectorStep;
  float deltaSectorLength;
  float orthoDimension;
};

/* 69411 */
struct TArray<TArray<AAcPlayerStart *,FDefaultAllocator>,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 69412 */
struct __cppobj __declspec(align(8)) AAcPlayerStartManager : AActor
{
  TArray<TArray<AAcPlayerStart *,FDefaultAllocator>,FDefaultAllocator> Actors;
  bool bIsPitlaneOnLeft;
  USplineComponent *SplineComponent;
  float PitAlignmentRange;
  FString PlayerStartPrefix;
  bool bIsFirstZero;
};

/* 69420 */
struct __cppobj __declspec(align(8)) ALight : AActor
{
  ULightComponent *LightComponent;
  unsigned __int32 bEnabled : 1;
};

/* 69421 */
struct __cppobj ADirectionalLight : ALight
{
};

/* 69422 */
struct __cppobj __declspec(align(4)) AAcIdealLineActor : AActor
{
  int IdealLineSpacing;
  int IdealLineWidth;
  float GroundOffset;
  int SecondsToNextPoint;
  int SpeedLimitOver;
  int SpeedLimitUnder;
  FLinearColor ColorOver;
  FLinearColor ColorUnder;
  FLinearColor ColorMiddle;
  UMaterialInterface *Material;
  UProceduralMeshComponent *LineMesh;
  AAcRaceGameMode *GameMode;
  ACarAvatar *carAvatar;
  ATrackAvatar *TrackAvatar;
  USplineComponent *Spline;
  UInstancedStaticMeshComponent *baseMesh;
  AACPlayerCameraManager *CameraManager;
  UMaterialInstanceDynamic *DynMaterial;
  FLinearColor currentColor;
  FVector2D speedInput;
  bool isActivated;
  float deltaStep;
  float SplineLength;
  unsigned __int16 lastDeltaSectorIndex;
};

/* 69423 */
struct __cppobj std::allocator<ksRacing::ReplayFrame<GhostCarMatrix> >
{
};

/* 69426 */
struct __cppobj std::_Vector_val<std::_Simple_types<ksRacing::ReplayFrame<GhostCarMatrix> > > : std::_Container_base0
{
  ksRacing::ReplayFrame<GhostCarMatrix> *_Myfirst;
  ksRacing::ReplayFrame<GhostCarMatrix> *_Mylast;
  ksRacing::ReplayFrame<GhostCarMatrix> *_Myend;
};

/* 69427 */
struct __cppobj std::_Compressed_pair<std::allocator<ksRacing::ReplayFrame<GhostCarMatrix> >,std::_Vector_val<std::_Simple_types<ksRacing::ReplayFrame<GhostCarMatrix> > >,1> : std::allocator<ksRacing::ReplayFrame<GhostCarMatrix> >
{
  std::_Vector_val<std::_Simple_types<ksRacing::ReplayFrame<GhostCarMatrix> > > _Myval2;
};

/* 69428 */
struct std::_Vector_alloc<std::_Vec_base_types<ksRacing::ReplayFrame<GhostCarMatrix>,std::allocator<ksRacing::ReplayFrame<GhostCarMatrix> > > >
{
  std::_Compressed_pair<std::allocator<ksRacing::ReplayFrame<GhostCarMatrix> >,std::_Vector_val<std::_Simple_types<ksRacing::ReplayFrame<GhostCarMatrix> > >,1> _Mypair;
};

/* 69429 */
struct __cppobj std::vector<ksRacing::ReplayFrame<GhostCarMatrix>,std::allocator<ksRacing::ReplayFrame<GhostCarMatrix> > > : std::_Vector_alloc<std::_Vec_base_types<ksRacing::ReplayFrame<GhostCarMatrix>,std::allocator<ksRacing::ReplayFrame<GhostCarMatrix> > > >
{
};

/* 69430 */
struct ksRacing::ReplayChannel<GhostCarMatrix>
{
  std::vector<ksRacing::ReplayFrame<GhostCarMatrix>,std::allocator<ksRacing::ReplayFrame<GhostCarMatrix> > > frames;
  unsigned int currentFrame;
  int lastFrame;
  long double minTime;
  long double lastTime;
  long double frequency;
};

/* 69431 */
struct __declspec(align(8)) GhostCarData
{
  unsigned __int16 index;
  char carModelType;
  int circuitId;
  int lapTime;
  int hotlapevent;
  ksRacing::ReplayChannel<GhostCarMatrix> carMatricesChannel;
  std::vector<unsigned int,std::allocator<unsigned int> > deltaTimes;
  std::vector<float,std::allocator<float> > deltaSpeeds;
  CarPhysicsState lastState;
  _BYTE currentQuality[1];
  FString circuitName;
  bool initialized;
};

/* 66826 */
struct FTableRowBase
{
  FTableRowBaseVtbl *vfptr;
};

/* 69432 */
struct TArray<FCircuitCornerInfo,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 69433 */
struct TArray<FCircuitSectionDefinition,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 3846 */
struct FSoftObjectPath
{
  FName AssetPathName;
  FString SubPathString;
};

/* 3847 */
struct TPersistentObjectPtr<FSoftObjectPath>
{
  FWeakObjectPtr WeakPtr;
  int TagAtLastTest;
  FSoftObjectPath ObjectID;
};

/* 3848 */
struct __cppobj FSoftObjectPtr : TPersistentObjectPtr<FSoftObjectPath>
{
};

/* 68860 */
struct TSoftObjectPtr<UTexture2D>
{
  FSoftObjectPtr SoftObjectPtr;
};

/* 69434 */
struct TArray<TSoftObjectPtr<UTexture2D>,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 69435 */
struct __cppobj FCircuitInfo : FTableRowBase
{
  FString CircuitName;
  int CircuitId;
  _BYTE Nationality[1];
  FString DisplayName;
  char PitNumber;
  _BYTE RaceEventType[1];
  FVector2D FormationTriggerNormalizedRange;
  FVector2D GreenFlagTriggerNormalizedRange;
  float BaseGrip;
  _BYTE TrackBopType[1];
  TArray<FCircuitCornerInfo,FDefaultAllocator> CornerInfos;
  TArray<FCircuitSectionDefinition,FDefaultAllocator> Sections;
  TArray<int,FDefaultAllocator> IdealLineSpeeds;
  int ReferenceLaptime;
  TArray<int,FDefaultAllocator> MicroSectorTimes;
  float StartYellowFlagTime;
  bool bIsPolesitterOnLeft;
  char Corners;
  bool isClockWise;
  int Length;
  FText InfoText;
  TSoftObjectPtr<UTexture2D> TitleBanner;
  TSoftObjectPtr<UTexture2D> SmallMap;
  TSoftObjectPtr<UTexture2D> LargeMap;
  TArray<TSoftObjectPtr<UTexture2D>,FDefaultAllocator> DayDryTrackImages;
  TArray<TSoftObjectPtr<UTexture2D>,FDefaultAllocator> NightDryTrackImages;
  TArray<TSoftObjectPtr<UTexture2D>,FDefaultAllocator> DayWetTrackImages;
  TArray<TSoftObjectPtr<UTexture2D>,FDefaultAllocator> NightWetTrackImages;
  TArray<TSoftObjectPtr<UTexture2D>,FDefaultAllocator> DayCloudyTrackImages;
  TArray<TSoftObjectPtr<UTexture2D>,FDefaultAllocator> NightCloudyTrackImages;
};

/* 69436 */
struct __declspec(align(4)) FGhostCarOptions
{
  char Enabled;
  char UseInPractice;
  char UseDifferentOpponent;
  _BYTE OpponentModelType[1];
  char UseExperimentalStateColor;
  int OffsetTimeMS;
  char GhostQuality;
};

/* 69437 */
struct __cppobj __declspec(align(8)) AGhostCarManager : AActor
{
  float MinDistance;
  float MaxDistance;
  float MaxOpacity;
  float StartingFadeExtension;
  FLinearColor BaseColor;
  float RedVariation;
  float GreenVariation;
  GhostCarData dataPlaying;
  GhostCarData dataRecording;
  GhostCarData dataToSave;
  _BYTE defaultReplayQuality[1];
  long double currentPlayingTime;
  long double currentRecordingTime;
  long double startLapTime;
  AAcRaceGameMode *RaceGameMode;
  AAcRaceGameState *RaceGameState;
  ACarAvatar *carAvatar;
  ACarAvatar *ghostCarAvatar;
  FCircuitInfo circuitInfo;
  _BYTE carModelType[1];
  bool recording;
  bool playing;
  __int16 fadeFrames;
  float fadeFactor;
  int referLapTime;
  bool usingDifferentOpponent;
  bool isPaused;
  bool pauseRequest;
  float brakeValue;
  float gasValue;
  bool useStateColor;
  float offsetTime;
  long double lastPhysicsTime;
  FString wetString;
  bool disabledByPause;
  FGhostCarOptions ghostOptions;
};

/* 44358 */
struct __cppobj USaveGame : UObject
{
};

/* 9901 */
struct TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<80,8> >,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 68970 */
struct TSparseArray<TSetElement<TTuple<enum EGuiGameModes,FGuiRaceEventData> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<80,8> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 68971 */
struct __declspec(align(8)) TSet<TTuple<enum EGuiGameModes,FGuiRaceEventData>,TDefaultMapHashableKeyFuncs<enum EGuiGameModes,FGuiRaceEventData,0>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<TTuple<enum EGuiGameModes,FGuiRaceEventData> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 68972 */
struct TMapBase<enum EGuiGameModes,FGuiRaceEventData,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<enum EGuiGameModes,FGuiRaceEventData,0> >
{
  TSet<TTuple<enum EGuiGameModes,FGuiRaceEventData>,TDefaultMapHashableKeyFuncs<enum EGuiGameModes,FGuiRaceEventData,0>,FDefaultSetAllocator> Pairs;
};

/* 68973 */
struct __cppobj TSortableMapBase<enum EGuiGameModes,FGuiRaceEventData,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<enum EGuiGameModes,FGuiRaceEventData,0> > : TMapBase<enum EGuiGameModes,FGuiRaceEventData,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<enum EGuiGameModes,FGuiRaceEventData,0> >
{
};

/* 68974 */
struct __cppobj TMap<enum EGuiGameModes,FGuiRaceEventData,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<enum EGuiGameModes,FGuiRaceEventData,0> > : TSortableMapBase<enum EGuiGameModes,FGuiRaceEventData,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<enum EGuiGameModes,FGuiRaceEventData,0> >
{
};

/* 3822 */
struct FIntPoint
{
  int X;
  int Y;
};

/* 68975 */
struct FAudioSave
{
  float Main;
  float EngineExt;
  float EngineInt;
  float Wheel;
  float Wind;
  float Environment;
  float Damage;
  float Comms;
  float Music;
  float Opponent;
};

/* 68976 */
struct __declspec(align(4)) FGuiRaceEventData
{
  int PositionOnGrid;
  char OpponentCount;
  int TimeOfDay;
  int PracticeLength;
  int QualifyLength;
  int RaceLength;
  _BYTE RaceEventType[1];
  int TimeMultiplier;
  FName TrackName;
  FName CarName;
  FName DriverName;
  float IdealLineGrip;
  char skillMultiplier;
  char aggroMultiplier;
};

/* 68977 */
struct FGuiLoadingScreenInfo
{
  FText TrackDisplayName;
  FText TrackName;
  int TrackId;
  FText CarName;
  FText DriverName;
  FText LapTime;
  FText TeamName;
  FText TypeSession;
  FText InfoLine;
  bool IsInfoFromSpecialEvent;
  _BYTE LoadingType[1];
  _BYTE GameMode[1];
  __declspec(align(8)) FGuiRaceEventData RaceData;
};

/* 68978 */
struct __cppobj __declspec(align(8)) UAcMenuState : USaveGame
{
  TMap<enum EGuiGameModes,FGuiRaceEventData,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<enum EGuiGameModes,FGuiRaceEventData,0> > RaceEventData;
  FName CarEntryRowName;
  FName DriverRowName;
  _BYTE GameMode[1];
  _BYTE SetupSection[1];
  FIntPoint Resolution;
  bool UseFullscreen;
  FVector Weather;
  _BYTE WeatherType[1];
  _BYTE ModelType[1];
  bool bUseEnduranceKit;
  FAudioSave Audio;
  FGuiLoadingScreenInfo LoadingScreenInfo;
  _BYTE CurrentLanguage[1];
};

/* 69039 */
struct IMovieSceneBindingOwnerInterface
{
  IMovieSceneBindingOwnerInterfaceVtbl *vfptr;
};

/* 10235 */
struct FScriptInterface
{
  UObject *ObjectPointer;
  void *InterfacePointer;
};

/* 64199 */
struct __cppobj TScriptInterface<IMovieSceneBindingOverridesInterface> : FScriptInterface
{
};

/* 64198 */
struct TSharedPtr<FMovieSceneTimeController,0>
{
  FMovieSceneTimeController *Object;
  SharedPointerInternals::FSharedReferencer<0> SharedReferenceCount;
};

/* 64200 */
struct FMovieSceneSequencePlaybackSettings
{
  int LoopCount;
  float PlayRate;
  bool bRandomStartTime;
  float StartTime;
  bool bRestoreState;
  bool bDisableMovementInput;
  bool bDisableLookAtInput;
  bool bHidePlayer;
  bool bHideHud;
  bool bDisableCameraCuts;
  bool bPauseAtEnd;
  UObject *InstanceData;
  TScriptInterface<IMovieSceneBindingOverridesInterface> BindingOverrides;
  TSharedPtr<FMovieSceneTimeController,0> TimeController;
};

/* 69057 */
struct __cppobj ALevelSequenceActor : AActor, IMovieSceneBindingOwnerInterface
{
  bool bAutoPlay;
  FMovieSceneSequencePlaybackSettings PlaybackSettings;
  ULevelSequencePlayer *SequencePlayer;
  FSoftObjectPath LevelSequence;
  TArray<AActor *,FDefaultAllocator> AdditionalEventReceivers;
  ULevelSequenceBurnInOptions *BurnInOptions;
  UMovieSceneBindingOverrides *BindingOverrides;
  bool bOverrideInstanceData;
  UObject *DefaultInstanceData;
  ULevelSequenceBurnIn *BurnInInstance;
};

/* 4633 */
struct FDeferredCleanupInterface
{
  FDeferredCleanupInterfaceVtbl *vfptr;
};

/* 5235 */
struct TArray<TSharedPtr<FSlateWindowElementList::FDeferredPaint,0>,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 36382 */
struct TSharedPtr<ISlate3DRenderer,1>
{
  ISlate3DRenderer *Object;
  SharedPointerInternals::FSharedReferencer<1> SharedReferenceCount;
};

/* 68016 */
struct __cppobj __declspec(align(8)) FWidgetRenderer : FDeferredCleanupInterface
{
  TArray<TSharedPtr<FSlateWindowElementList::FDeferredPaint,0>,FDefaultAllocator> DeferredPaints;
  TSharedPtr<ISlate3DRenderer,1> Renderer;
  bool bPrepassNeeded;
  bool bClearHitTestGrid;
  bool bUseGammaSpace;
  bool bClearTarget;
  FVector2D ViewOffset;
};

/* 30627 */
struct __cppobj UVisual : UObject
{
};

/* 6638 */
struct TScriptDelegate<FWeakObjectPtr>
{
  FWeakObjectPtr Object;
  FName FunctionName;
};

/* 30632 */
struct __cppobj TBaseDynamicDelegate<FWeakObjectPtr,bool> : TScriptDelegate<FWeakObjectPtr>
{
};

/* 30633 */
struct __cppobj UWidget::FGetBool : TBaseDynamicDelegate<FWeakObjectPtr,bool>
{
};

/* 30634 */
struct __cppobj TBaseDynamicDelegate<FWeakObjectPtr,FText> : TScriptDelegate<FWeakObjectPtr>
{
};

/* 30635 */
struct __cppobj UWidget::FGetText : TBaseDynamicDelegate<FWeakObjectPtr,FText>
{
};

/* 30638 */
struct __cppobj TBaseDynamicDelegate<FWeakObjectPtr,enum ESlateVisibility> : TScriptDelegate<FWeakObjectPtr>
{
};

/* 30639 */
struct __cppobj UWidget::FGetSlateVisibility : TBaseDynamicDelegate<FWeakObjectPtr,enum ESlateVisibility>
{
};

/* 30640 */
struct FWidgetTransform
{
  FVector2D Translation;
  FVector2D Scale;
  FVector2D Shear;
  float Angle;
};

/* 5453 */
struct TEnumAsByte<enum EMouseCursor::Type>
{
  char Value;
};

/* 13053 */
struct __cppobj TWeakObjectPtr<UClass,FWeakObjectPtr> : FWeakObjectPtr
{
};

/* 4490 */
struct SharedPointerInternals::FWeakReferencer<0>
{
  SharedPointerInternals::FReferenceControllerBase *ReferenceController;
};

/* 5114 */
struct TWeakPtr<SWidget,0>
{
  SWidget *Object;
  SharedPointerInternals::FWeakReferencer<0> WeakReferenceCount;
};

/* 30648 */
struct TWeakPtr<SObjectWidget,0>
{
  SObjectWidget *Object;
  SharedPointerInternals::FWeakReferencer<0> WeakReferenceCount;
};

/* 30649 */
struct TArray<UPropertyBinding *,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 30628 */
struct __cppobj UWidget : UVisual
{
  UPanelSlot *Slot;
  UWidget::FGetBool bIsEnabledDelegate;
  FText ToolTipText;
  UWidget::FGetText ToolTipTextDelegate;
  UWidget *ToolTipWidget;
  UWidget::FGetWidget ToolTipWidgetDelegate;
  UWidget::FGetSlateVisibility VisibilityDelegate;
  FWidgetTransform RenderTransform;
  FVector2D RenderTransformPivot;
  __int8 bIsVariable : 1;
  __int8 bCreatedByConstructionScript : 1;
  __int8 bIsEnabled : 1;
  __int8 bOverride_Cursor : 1;
  __int8 bIsVolatile : 1;
  TEnumAsByte<enum EMouseCursor::Type> Cursor;
  _BYTE Clipping[1];
  _BYTE Visibility[1];
  float RenderOpacity;
  UWidgetNavigation *Navigation;
  TWeakObjectPtr<UClass,FWeakObjectPtr> WidgetGeneratedByClass;
  TWeakPtr<SWidget,0> MyWidget;
  TWeakPtr<SObjectWidget,0> MyGCWidget;
  TArray<UPropertyBinding *,FDefaultAllocator> NativeBindings;
};

/* 30650 */
struct INamedSlotInterface
{
  INamedSlotInterfaceVtbl *vfptr;
};

/* 30652 */
struct __cppobj TBaseDynamicDelegate<FWeakObjectPtr,FLinearColor> : TScriptDelegate<FWeakObjectPtr>
{
};

/* 30653 */
struct __cppobj UWidget::FGetLinearColor : TBaseDynamicDelegate<FWeakObjectPtr,FLinearColor>
{
};

/* 5178 */
struct TEnumAsByte<enum ESlateColorStylingMode::Type>
{
  char Value;
};

/* 5179 */
struct TSharedPtr<FLinearColor,0>
{
  FLinearColor *Object;
  SharedPointerInternals::FSharedReferencer<0> SharedReferenceCount;
};

/* 5180 */
struct FSlateColor
{
  FLinearColor SpecifiedColor;
  TEnumAsByte<enum ESlateColorStylingMode::Type> ColorUseRule;
  TSharedPtr<FLinearColor,0> LinkedSpecifiedColor;
};

/* 30654 */
struct __cppobj TBaseDynamicDelegate<FWeakObjectPtr,FSlateColor> : TScriptDelegate<FWeakObjectPtr>
{
};

/* 30655 */
struct __cppobj UWidget::FGetSlateColor : TBaseDynamicDelegate<FWeakObjectPtr,FSlateColor>
{
};

/* 5116 */
struct FMargin
{
  float Left;
  float Top;
  float Right;
  float Bottom;
};

/* 30656 */
struct TArray<UUMGSequencePlayer *,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 30657 */
struct TArray<FNamedSlotBinding,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 30659 */
struct FAnchors
{
  FVector2D Minimum;
  FVector2D Maximum;
};

/* 29079 */
struct __cppobj TWeakObjectPtr<ULocalPlayer,FWeakObjectPtr> : FWeakObjectPtr
{
};

/* 7450 */
struct __cppobj TWeakObjectPtr<UWorld,FWeakObjectPtr> : FWeakObjectPtr
{
};

/* 29080 */
struct FLocalPlayerContext
{
  TWeakObjectPtr<ULocalPlayer,FWeakObjectPtr> LocalPlayer;
  TWeakObjectPtr<UWorld,FWeakObjectPtr> World;
};

/* 30646 */
struct __cppobj UUserWidget : UWidget, INamedSlotInterface
{
  FLinearColor ColorAndOpacity;
  UWidget::FGetLinearColor ColorAndOpacityDelegate;
  FSlateColor ForegroundColor;
  UWidget::FGetSlateColor ForegroundColorDelegate;
  FMargin Padding;
  TArray<UUMGSequencePlayer *,FDefaultAllocator> ActiveSequencePlayers;
  TArray<UUMGSequencePlayer *,FDefaultAllocator> StoppedSequencePlayers;
  TArray<FNamedSlotBinding,FDefaultAllocator> NamedSlotBindings;
  UWidgetTree *WidgetTree;
  int Priority;
  __int8 bSupportsKeyboardFocus_DEPRECATED : 1;
  __int8 bIsFocusable : 1;
  __int8 bStopAction : 1;
  __int8 bHasScriptImplementedTick : 1;
  __int8 bHasScriptImplementedPaint : 1;
  __int8 bInitialized : 1;
  __int8 bStoppingAllAnimations : 1;
  __int8 bCookedWidgetTree : 1;
  _BYTE TickFrequency[1];
  UInputComponent *InputComponent;
  FAnchors ViewportAnchors;
  FMargin ViewportOffsets;
  FVector2D ViewportAlignment;
  TWeakPtr<SWidget,0> FullScreenWidget;
  FLocalPlayerContext PlayerContext;
  TWeakObjectPtr<UWorld,FWeakObjectPtr> CachedWorld;
};

/* 68979 */
struct __cppobj TDefaultDelete<UAcPageBase>
{
};

/* 68981 */
struct __cppobj TUniquePtr<UAcPageBase,TDefaultDelete<UAcPageBase> > : TDefaultDelete<UAcPageBase>
{
  UAcPageBase *Ptr;
};

/* 68997 */
struct TSparseArray<TSetElement<TTuple<FName,UWidgetAnimation *> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<24,8> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 68998 */
struct __declspec(align(8)) TSet<TTuple<FName,UWidgetAnimation *>,TDefaultMapHashableKeyFuncs<FName,UWidgetAnimation *,0>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<TTuple<FName,UWidgetAnimation *> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 68999 */
struct TMapBase<FName,UWidgetAnimation *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,UWidgetAnimation *,0> >
{
  TSet<TTuple<FName,UWidgetAnimation *>,TDefaultMapHashableKeyFuncs<FName,UWidgetAnimation *,0>,FDefaultSetAllocator> Pairs;
};

/* 69000 */
struct __cppobj TSortableMapBase<FName,UWidgetAnimation *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,UWidgetAnimation *,0> > : TMapBase<FName,UWidgetAnimation *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,UWidgetAnimation *,0> >
{
};

/* 69001 */
struct __cppobj TMap<FName,UWidgetAnimation *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,UWidgetAnimation *,0> > : TSortableMapBase<FName,UWidgetAnimation *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,UWidgetAnimation *,0> >
{
};

/* 69002 */
struct TSparseArray<TSetElement<TTuple<FName,UButton *> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<24,8> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 69003 */
struct __declspec(align(8)) TSet<TTuple<FName,UButton *>,TDefaultMapHashableKeyFuncs<FName,UButton *,0>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<TTuple<FName,UButton *> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 69004 */
struct TMapBase<FName,UButton *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,UButton *,0> >
{
  TSet<TTuple<FName,UButton *>,TDefaultMapHashableKeyFuncs<FName,UButton *,0>,FDefaultSetAllocator> Pairs;
};

/* 69005 */
struct __cppobj TSortableMapBase<FName,UButton *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,UButton *,0> > : TMapBase<FName,UButton *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,UButton *,0> >
{
};

/* 69006 */
struct __cppobj TMap<FName,UButton *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,UButton *,0> > : TSortableMapBase<FName,UButton *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,UButton *,0> >
{
};

/* 68992 */
struct TSparseArray<TSetElement<TTuple<FName,UTextBlock *> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<24,8> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 68993 */
struct __declspec(align(8)) TSet<TTuple<FName,UTextBlock *>,TDefaultMapHashableKeyFuncs<FName,UTextBlock *,0>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<TTuple<FName,UTextBlock *> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 68994 */
struct TMapBase<FName,UTextBlock *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,UTextBlock *,0> >
{
  TSet<TTuple<FName,UTextBlock *>,TDefaultMapHashableKeyFuncs<FName,UTextBlock *,0>,FDefaultSetAllocator> Pairs;
};

/* 68995 */
struct __cppobj TSortableMapBase<FName,UTextBlock *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,UTextBlock *,0> > : TMapBase<FName,UTextBlock *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,UTextBlock *,0> >
{
};

/* 68996 */
struct __cppobj TMap<FName,UTextBlock *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,UTextBlock *,0> > : TSortableMapBase<FName,UTextBlock *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,UTextBlock *,0> >
{
};

/* 69019 */
struct TArray<UAcPanelBase *,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 68982 */
struct TSparseArray<TSetElement<TTuple<FName,TSubclassOf<UAcPageBase> > >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<24,8> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 68983 */
struct __declspec(align(8)) TSet<TTuple<FName,TSubclassOf<UAcPageBase> >,TDefaultMapHashableKeyFuncs<FName,TSubclassOf<UAcPageBase>,0>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<TTuple<FName,TSubclassOf<UAcPageBase> > >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 68984 */
struct TMapBase<FName,TSubclassOf<UAcPageBase>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,TSubclassOf<UAcPageBase>,0> >
{
  TSet<TTuple<FName,TSubclassOf<UAcPageBase> >,TDefaultMapHashableKeyFuncs<FName,TSubclassOf<UAcPageBase>,0>,FDefaultSetAllocator> Pairs;
};

/* 68985 */
struct __cppobj TSortableMapBase<FName,TSubclassOf<UAcPageBase>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,TSubclassOf<UAcPageBase>,0> > : TMapBase<FName,TSubclassOf<UAcPageBase>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,TSubclassOf<UAcPageBase>,0> >
{
};

/* 68986 */
struct __cppobj TMap<FName,TSubclassOf<UAcPageBase>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,TSubclassOf<UAcPageBase>,0> > : TSortableMapBase<FName,TSubclassOf<UAcPageBase>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,TSubclassOf<UAcPageBase>,0> >
{
};

/* 68980 */
struct __cppobj UAcPageBase : UUserWidget
{
  TUniquePtr<UAcPageBase,TDefaultDelete<UAcPageBase> > ParentPage;
  UClass *CallingPage;
  UAcPanelBase *CurrentPanel;
  TMap<FName,UWidgetAnimation *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,UWidgetAnimation *,0> > Animations;
  TMap<FName,UButton *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,UButton *,0> > Buttons;
  TMap<FName,UTextBlock *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,UTextBlock *,0> > TextBlocks;
  TArray<UAcPanelBase *,FDefaultAllocator> CurrentPanels;
  UTextBlock *InfoLine;
  UHelpInMenu *HelpWidget;
  bool canHandleForward;
  bool canHandleBackward;
  bool HasShowroomTimer;
  float ShowroomTimeOut;
  bool IsShowroomPlaying;
  FTimerHandle ShowroomTimer;
  ALevelSequenceActor *ShowroomLevelSequence;
  TMap<FName,TSubclassOf<UAcPageBase>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,TSubclassOf<UAcPageBase>,0> > PageClasses;
  UAcGameInstance *GameInstance;
  AAcMenuGameMode *GameMode;
  float MenuFadeAnimation;
  float TimeToFirstClick;
  float TimeToSecondClick;
  float TimeStepFirstClick;
  float TimeStepSecondClick;
  bool bIsUpPressed;
  bool bCanHandleUpReleased;
  bool bIsDownPressed;
  bool bCanHandleDownReleased;
  bool bIsLeftPressed;
  bool bCanHandleLeftReleased;
  bool bIsRightPressed;
  bool bCanHandleRightReleased;
  bool bIsShoulderLeftPressed;
  bool bCanHandleShoulderLeftReleased;
  bool bIsShoulderRightPressed;
  bool bCanHandleShoulderRightReleased;
  float ShoulderPressedTime;
  float ShoulderCurrentTimeStep;
  float PressedTime;
  float CurrentTimeStep;
  FString newFileToLoad;
  FString newDescription;
  _BYTE fileAction[1];
  APlayerController *playerController;
  FVector2D CurrentMouse;
  FVector2D PreviousMouse;
};

/* 5111 */
struct FSlateControlledConstruction
{
  FSlateControlledConstructionVtbl *vfptr;
};

/* 5115 */
struct TSharedFromThis<SWidget,0>
{
  TWeakPtr<SWidget,0> WeakThis;
};

/* 4904 */
struct TAlignedBytes<8,4>::TPadding
{
  char Pad[8];
};

/* 4905 */
struct TAlignedBytes<8,4>
{
  TAlignedBytes<8,4>::TPadding Padding;
};

/* 5117 */
struct __cppobj TTypeCompatibleBytes<FVector2D> : TAlignedBytes<8,4>
{
};

/* 5118 */
struct __declspec(align(4)) TOptional<FVector2D>
{
  TTypeCompatibleBytes<FVector2D> Value;
  bool bIsSet;
};

/* 5119 */
struct FMatrix2x2
{
  float M[2][2];
};

/* 5120 */
struct FTransform2D
{
  FMatrix2x2 M;
  FVector2D Trans;
};

/* 5121 */
struct __declspec(align(4)) FGeometry
{
  FVector2D Size;
  const float Scale;
  FVector2D AbsolutePosition;
  FVector2D Position;
  FTransform2D AccumulatedRenderTransform;
  __int8 bHasRenderTransform : 1;
};

/* 5122 */
struct TArray<TSharedRef<FActiveTimerHandle,0>,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 3944 */
struct __cppobj FHeapAllocator::ForElementType<TAlignedBytes<16,16> > : FHeapAllocator::ForAnyElementType
{
};

/* 3945 */
struct __declspec(align(8)) FDelegateBase
{
  FHeapAllocator::ForElementType<TAlignedBytes<16,16> > DelegateAllocator;
  int DelegateSize;
};

/* 5123 */
struct __cppobj TBaseDelegate<bool> : FDelegateBase
{
};

/* 5124 */
struct TAttribute<bool>
{
  bool Value;
  bool bIsSet;
  TBaseDelegate<bool> Getter;
};

/* 5125 */
struct TEnumAsByte<enum EVisibility::Private>
{
  char Value;
};

/* 5126 */
struct EVisibility
{
  TEnumAsByte<enum EVisibility::Private> Value;
};

/* 5127 */
struct __cppobj TBaseDelegate<EVisibility> : FDelegateBase
{
};

/* 5128 */
struct TAttribute<EVisibility>
{
  EVisibility Value;
  bool bIsSet;
  TBaseDelegate<EVisibility> Getter;
};

/* 4373 */
struct TAlignedBytes<24,4>::TPadding
{
  char Pad[24];
};

/* 4374 */
struct TAlignedBytes<24,4>
{
  TAlignedBytes<24,4>::TPadding Padding;
};

/* 4424 */
struct __cppobj TTypeCompatibleBytes<FTransform2D> : TAlignedBytes<24,4>
{
};

/* 4425 */
struct __declspec(align(4)) TOptional<FTransform2D>
{
  TTypeCompatibleBytes<FTransform2D> Value;
  bool bIsSet;
};

/* 5129 */
struct __cppobj TBaseDelegate<TOptional<FTransform2D> > : FDelegateBase
{
};

/* 5130 */
struct TAttribute<TOptional<FTransform2D> >
{
  TOptional<FTransform2D> Value;
  bool bIsSet;
  TBaseDelegate<TOptional<FTransform2D> > Getter;
};

/* 5131 */
struct __cppobj TBaseDelegate<FVector2D> : FDelegateBase
{
};

/* 5132 */
struct TAttribute<FVector2D>
{
  FVector2D Value;
  bool bIsSet;
  TBaseDelegate<FVector2D> Getter;
};

/* 5133 */
struct TArray<TSharedRef<ISlateMetaData,0>,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 5134 */
struct __cppobj TTypeCompatibleBytes<enum EMouseCursor::Type> : TAlignedBytes<4,4>
{
};

/* 5135 */
struct __declspec(align(4)) TOptional<enum EMouseCursor::Type>
{
  TTypeCompatibleBytes<enum EMouseCursor::Type> Value;
  bool bIsSet;
};

/* 5136 */
struct __cppobj TBaseDelegate<TOptional<enum EMouseCursor::Type> > : FDelegateBase
{
};

/* 5137 */
struct TAttribute<TOptional<enum EMouseCursor::Type> >
{
  TOptional<enum EMouseCursor::Type> Value;
  bool bIsSet;
  TBaseDelegate<TOptional<enum EMouseCursor::Type> > Getter;
};

/* 5142 */
struct TSharedPtr<IToolTip,0>
{
  IToolTip *Object;
  SharedPointerInternals::FSharedReferencer<0> SharedReferenceCount;
};

/* 5150 */
struct TWeakPtr<ILayoutCache,0>
{
  ILayoutCache *Object;
  SharedPointerInternals::FWeakReferencer<0> WeakReferenceCount;
};

/* 5151 */
struct TSparseArray<TSetElement<TTuple<FName,TBaseDelegate<FReply,FGeometry const &,FPointerEvent const &> > >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<32,8> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 5152 */
struct __declspec(align(8)) TSet<TTuple<FName,TBaseDelegate<FReply,FGeometry const &,FPointerEvent const &> >,TDefaultMapHashableKeyFuncs<FName,TBaseDelegate<FReply,FGeometry const &,FPointerEvent const &>,0>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<TTuple<FName,TBaseDelegate<FReply,FGeometry const &,FPointerEvent const &> > >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 5153 */
struct TMapBase<FName,TBaseDelegate<FReply,FGeometry const &,FPointerEvent const &>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,TBaseDelegate<FReply,FGeometry const &,FPointerEvent const &>,0> >
{
  TSet<TTuple<FName,TBaseDelegate<FReply,FGeometry const &,FPointerEvent const &> >,TDefaultMapHashableKeyFuncs<FName,TBaseDelegate<FReply,FGeometry const &,FPointerEvent const &>,0>,FDefaultSetAllocator> Pairs;
};

/* 5154 */
struct __cppobj TSortableMapBase<FName,TBaseDelegate<FReply,FGeometry const &,FPointerEvent const &>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,TBaseDelegate<FReply,FGeometry const &,FPointerEvent const &>,0> > : TMapBase<FName,TBaseDelegate<FReply,FGeometry const &,FPointerEvent const &>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,TBaseDelegate<FReply,FGeometry const &,FPointerEvent const &>,0> >
{
};

/* 5155 */
struct __cppobj TMap<FName,TBaseDelegate<FReply,FGeometry const &,FPointerEvent const &>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,TBaseDelegate<FReply,FGeometry const &,FPointerEvent const &>,0> > : TSortableMapBase<FName,TBaseDelegate<FReply,FGeometry const &,FPointerEvent const &>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,TBaseDelegate<FReply,FGeometry const &,FPointerEvent const &>,0> >
{
};

/* 5156 */
struct __cppobj TBaseDelegate<TTypeWrapper<void>,FGeometry const &,FPointerEvent const &> : FDelegateBase
{
};

/* 5157 */
struct __cppobj TBaseDelegate<void,FGeometry const &,FPointerEvent const &> : TBaseDelegate<TTypeWrapper<void>,FGeometry const &,FPointerEvent const &>
{
};

/* 5158 */
struct __cppobj TBaseDelegate<TTypeWrapper<void>,FPointerEvent const &> : FDelegateBase
{
};

/* 5159 */
struct __cppobj TBaseDelegate<void,FPointerEvent const &> : TBaseDelegate<TTypeWrapper<void>,FPointerEvent const &>
{
};

/* 5113 */
struct __cppobj SWidget : FSlateControlledConstruction, TSharedFromThis<SWidget,0>
{
  __int8 bIsHovered : 1;
  __int8 bCanTick : 1;
  __int8 bCanSupportFocus : 1;
  __int8 bCanHaveChildren : 1;
  __int8 bClippingProxy : 1;
  __int8 bIsWindow : 1;
  __int8 bToolTipForceFieldEnabled : 1;
  __int8 bForceVolatile : 1;
  __int8 bCachedVolatile : 1;
  __int8 bInheritedVolatility : 1;
  _BYTE Clipping[1];
  FMargin CullingBoundsExtension;
  TOptional<FVector2D> DesiredSize;
  TOptional<FVector2D> VolatileDesiredSize;
  float PrepassLayoutScaleMultiplier;
  __int8 bNeedsPrepass : 1;
  __int8 bNeedsDesiredSize : 1;
  __int8 bNeedsVolatileDesiredSize : 1;
  __int8 bUpdatingDesiredSize : 1;
  FGeometry CachedGeometry;
  TArray<TSharedRef<FActiveTimerHandle,0>,FDefaultAllocator> ActiveTimers;
  TAttribute<bool> EnabledState;
  TAttribute<EVisibility> Visibility;
  float RenderOpacity;
  TAttribute<TOptional<FTransform2D> > RenderTransform;
  TAttribute<FVector2D> RenderTransformPivot;
  FName TypeOfWidget;
  FName Tag;
  TArray<TSharedRef<ISlateMetaData,0>,FDefaultAllocator> MetaData;
  TAttribute<TOptional<enum EMouseCursor::Type> > Cursor;
  TSharedPtr<IToolTip,0> ToolTip;
  TWeakPtr<ILayoutCache,0> LayoutCache;
  TWeakPtr<SWidget,0> ParentWidgetPtr;
  TMap<FName,TBaseDelegate<FReply,FGeometry const &,FPointerEvent const &>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,TBaseDelegate<FReply,FGeometry const &,FPointerEvent const &>,0> > PointerEvents;
  TBaseDelegate<void,FGeometry const &,FPointerEvent const &> MouseEnterHandler;
  TBaseDelegate<void,FPointerEvent const &> MouseLeaveHandler;
};

/* 69668 */
struct TArray<FTyreCompoundSetDefinition,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 69669 */
struct TArray<FWingState,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 69670 */
struct __cppobj __declspec(align(8)) FModelCockpitCamInfo : FTableRowBase
{
  float LeftMirrorYaw;
  float RightMirrorYaw;
  float LeftMirrorPitch;
  float RightMirrorPitch;
  float RearMirrorYaw;
  float RearMirrorPitch;
  float E3DemoExtraSmoothness;
};

/* 69688 */
struct TSoftObjectPtr<USkeletalMesh>
{
  FSoftObjectPtr SoftObjectPtr;
};

/* 43631 */
struct TArray<UStaticMesh *,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 4117 */
struct TArray<unsigned short,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 12110 */
struct TArray<UStaticMeshComponent *,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 5954 */
struct TArray<UMaterialInstanceDynamic *,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 69693 */
struct TArray<UAcCarDigitalDisplay *,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 69694 */
struct TArray<enum ECarDigitalDisplayPages,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 68857 */
struct TArray<enum ERaceEventType,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 68858 */
struct __cppobj __declspec(align(8)) FCarInfo : FTableRowBase
{
  int RaceNumber;
  bool useEnduranceKit;
  bool isPlayerCar;
  bool isNetCar;
  bool bUsable;
  TArray<enum ERaceEventType,FDefaultAllocator> CarRaceEventType;
  _BYTE CarModel[1];
  _BYTE CupCategory[1];
  _BYTE LicenseType[1];
  FString TeamName;
  _BYTE Nationality[1];
  FString DisplayName;
  FString CompetitorName;
  _BYTE CompetitorNationality[1];
  char TeamTemplateKey;
  char AuxLightKey;
  int AuxLightColor;
  char SkinTemplateKey;
  int SkinColor1Id;
  _BYTE SkinMaterialType1[1];
  int SkinColor2Id;
  _BYTE SkinMaterialType2[1];
  int SkinColor3Id;
  _BYTE SkinMaterialType3[1];
  int RimColor1Id;
  _BYTE RimMaterialType1[1];
  int RimColor2Id;
  _BYTE RimMaterialType2[1];
};

/* 68861 */
struct __cppobj FDriverInfo : FTableRowBase
{
  FString FirstName;
  FString SecondName;
  FString LastName;
  FString NickName;
  FString ShortName;
  char Weight;
  _BYTE Nationality[1];
  _BYTE DriverCategory[1];
  FName DriverRow;
  TSoftObjectPtr<UTexture2D> Picture;
  int HelmetTemplateKey;
  int HelmetBaseColor;
  int HelmetDetailColor;
  _BYTE HelmetMaterialType[1];
  int HelmetGlassColor;
  float HelmetGlassMetallic;
  int GlovesTemplateKey;
  int SuitTemplateKey;
  int SuitDetailColor1;
  int SuitDetailColor2;
  char SkillLevel;
  char AggroLevel;
  FString PlayerID;
};

/* 69706 */
struct TSparseArray<TSetElement<UMeshComponent *>,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<16,8> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 69707 */
struct __declspec(align(8)) TSet<UMeshComponent *,DefaultKeyFuncs<UMeshComponent *,0>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<UMeshComponent *>,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 69713 */
struct TArray<SLODVisInfo,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 67852 */
struct KPI
{
  float angleRAD;
  float scrubRadius;
};

/* 69714 */
struct CarPhysicsConstantsInfo
{
  float steerLock;
  int maxGear;
  float caster;
  float tyreRadius[4];
  float tyreWidth[4];
  float totalMass;
  float bodyMass;
  float unsprungWeights[4];
  float packerRange[4];
  float maxTorqueNM;
  float maxPowerW;
  float bumpStopsUp[4];
  float bumpStopsDn[4];
  long double maxFuel;
  vec3d ridePickupPoint[2];
  vec3d susBasePos[4];
  std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > tyreCompounds;
  vec3d fuelTankPosition;
  float minHeightM;
  float wheelAngularInertia[4];
  KPI kpi;
  float maxTurboBoost;
  int turboCount;
  float powerClassIndex;
  bool hasCockpitEngineBrake;
  int engineBrakeSettingsCount;
  int engineDamageRPM;
  bool hasAdjustableTurbo;
  std::vector<DownForceData,std::allocator<DownForceData> > downForceData;
};

/* 1774 */
enum ACarAvatar::ERainStreaksFadeMode
{
  FadeOff = 0x0,
  FadeIn = 0x1,
  FadeOut = 0x2,
};

/* 69715 */
struct __cppobj std::allocator<vec3f>
{
};

/* 69716 */
struct __cppobj std::_Vector_val<std::_Simple_types<vec3f> > : std::_Container_base0
{
  vec3f *_Myfirst;
  vec3f *_Mylast;
  vec3f *_Myend;
};

/* 69717 */
struct __cppobj std::_Compressed_pair<std::allocator<vec3f>,std::_Vector_val<std::_Simple_types<vec3f> >,1> : std::allocator<vec3f>
{
  std::_Vector_val<std::_Simple_types<vec3f> > _Myval2;
};

/* 69718 */
struct std::_Vector_alloc<std::_Vec_base_types<vec3f,std::allocator<vec3f> > >
{
  std::_Compressed_pair<std::allocator<vec3f>,std::_Vector_val<std::_Simple_types<vec3f> >,1> _Mypair;
};

/* 69719 */
struct __cppobj std::vector<vec3f,std::allocator<vec3f> > : std::_Vector_alloc<std::_Vec_base_types<vec3f,std::allocator<vec3f> > >
{
};

/* 69720 */
struct LineRecorder
{
  std::vector<vec3f,std::allocator<vec3f> > points;
  bool isRecording;
  bool isLapStarted;
  int lapCounter;
};

/* 69721 */
struct TArray<UWidgetComponent *,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 69722 */
struct __cppobj TBaseMulticastDelegate<void,enum ECarStarter const > : FMulticastDelegateBase<FWeakObjectPtr>
{
};

/* 69723 */
struct __cppobj ACarAvatar::FCarStarter : TBaseMulticastDelegate<void,enum ECarStarter const >
{
};

/* 68828 */
struct ksRacing::CarGraphicsState
{
  char wiperLevel;
  char lightStage;
  char lightFlags;
  char tyreCompound;
};

/* 68557 */
struct ksRacing::CarSystemsStruct
{
  __int8 rainLights : 1;
  __int8 directionLightLeft : 1;
  __int8 directionLightRight : 1;
  __int8 flashingLights : 1;
  __int8 pitLimiterOn : 1;
  __int8 hazardLights : 1;
  __int8 leftDoorOpen : 1;
  __int8 rightDoorOpen : 1;
  unsigned __int32 lightStage : 2;
  unsigned __int32 wiperLevel : 2;
  unsigned __int32 display : 3;
  unsigned __int32 fuelMixture : 3;
  unsigned __int32 engineMap : 3;
  unsigned __int32 TC_Level : 4;
  unsigned __int32 ABS_Level : 4;
  unsigned __int32 brakeBias : 7;
};

/* 68558 */
union ksRacing::carSystemsUnion
{
  ksRacing::CarSystemsStruct c;
  unsigned __int64 i;
};

/* 68829 */
struct ksRacing::FAdditionalHFState
{
  char bottoming;
};

/* 68960 */
struct __cppobj ACarAvatar : APawn
{
  Event<TimeLineEvent> evOnTimelinePassed;
  UCarData *CarData;
  UAIDataAsset *AIData;
  USetupManager *SetupManager;
  UAcCarAnimations *CarAnimations;
  UStaticMeshComponent *ColliderMesh;
  UAcCarLightingSystem *CarLightingSystem;
  UAcCarSystems *CarSystems;
  UAcLedSystem *CarLedSystem;
  std::unique_ptr<RaceEngineer,std::default_delete<RaceEngineer> > raceEngineer;
  UAcCarTimingServices *CarTimingServices;
  UCarAudio *CarAudio;
  TArray<FTyreCompoundSetDefinition,FDefaultAllocator> TyreCompounds;
  TArray<FWingState,FDefaultAllocator> uwingstate;
  bool isRecordingTelemetry;
  FModelCockpitCamInfo MirrorViewInfo;
  FRotator MirrorViewLookAtTarget;
  FRotator MirrorViewLookAtAdditionalRotation;
  bool isLooking180Behind;
  bool bIsLeftHandedDrive;
  bool bIsDummyCar;
  UAcExhaustComponent *ExhaustComponent;
  UAcCarPitstopManager *PitstopManager;
  float TyreBlurMinSpeed;
  float TyreBlurMaxSpeed;
  float TempSlickRainBase;
  TSoftObjectPtr<USkeletalMesh> SprintExternalMesh;
  TSoftObjectPtr<USkeletalMesh> EnduranceExternalMesh;
  TArray<UStaticMesh *,FDefaultAllocator> StaticRims_LF_RF_LR_RR;
  FName StaticRimSlotName;
  FName StaticRimDecalsSlotName;
  TArray<UStaticMesh *,FDefaultAllocator> BlurredRims_LF_RF_LR_RR;
  FName BlurredRimSlotName;
  FName BlurredRimDecalsSlotName;
  FName BlurredRimBlurSlotName;
  float SuspGraphicsOffsetFront;
  float SuspGraphicsOffsetRear;
  FString CarName;
  FString ConfigName;
  FVector GraphicsOffset;
  float GraphicsPitchRotation;
  TArray<unsigned short,FDefaultAllocator> NextNetCarState;
  USkidmarks *Skidmarks;
  UCameraComponent *VRCamera;
  UAC2WaterSpray *spray;
  UAC2TyreSmoke *smoke;
  TArray<UStaticMeshComponent *,FDefaultAllocator> TyreMeshComponents;
  TArray<UStaticMeshComponent *,FDefaultAllocator> StaticRimMeshComponents;
  TArray<UStaticMeshComponent *,FDefaultAllocator> BlurredRimMeshComponents;
  TArray<UMaterialInstanceDynamic *,FDefaultAllocator> StaticRimMaterials;
  TArray<UMaterialInstanceDynamic *,FDefaultAllocator> BlurredRimMaterials;
  TArray<UMaterialInstanceDynamic *,FDefaultAllocator> StaticRimDecalsMaterials;
  TArray<UMaterialInstanceDynamic *,FDefaultAllocator> BlurredRimDecalsMaterials;
  TArray<UMaterialInstanceDynamic *,FDefaultAllocator> BlurredRimBlurMaterials;
  UMaterialInstanceDynamic *ShadowPlaneMaterial;
  UMaterialInstanceDynamic *ShadowTyresMaterial;
  FName ShadowPlaneMaterialName;
  FName ShadowTyresMaterialName;
  float ShadowPlaneCompScale;
  float ShadowTyresCompScale;
  float ShadowPlaneOffset;
  float ShadowTyresOffset;
  float ShadowOffRoad;
  FName BrakeDiskMaterialName;
  UMaterialInstanceDynamic *BrakeDiskMaterial;
  bool usePhysicsTemp;
  float BrakeDiscEmissiveMult;
  float BrakeDiscTemperature;
  UCurveLinearColor *BrakeDiskColorCurve;
  FName IntWindowsMaterialName;
  UMaterialInstanceDynamic *IntWindowsMaterial;
  float RainStreaksSpeedMult;
  UCurveLinearColor *RainStreaksColorCurve;
  float RainStreaksDeltaSpeedFade;
  float RainStreaksFadeTime;
  float RainStreaksRandRange;
  FName CarPaintMaterialName;
  UCurveLinearColor *DirtPerChannelCurve;
  UTexture2D *DirtTexture;
  UTexture2D *IntWindowsDirtTexture;
  UMaterialInstanceDynamic *CarPaintMaterial;
  UMaterialInstanceDynamic *NumberPlateMaterial;
  UTexture2D *NumberPlateDigits;
  UTextureRenderTarget2D *NumberPlateRT;
  char MainDisplayIndex;
  TArray<UAcCarDigitalDisplay *,FDefaultAllocator> DigitalDisplays;
  TArray<enum ECarDigitalDisplayPages,FDefaultAllocator> DisplayPages;
  TArray<enum ECarDigitalDisplayPages,FDefaultAllocator> PracticeDefaultPage;
  TArray<enum ECarDigitalDisplayPages,FDefaultAllocator> QualifyingDefaultPage;
  TArray<enum ECarDigitalDisplayPages,FDefaultAllocator> RaceDefaultPage;
  UCurveFloat *DigitalDisplayOpacityMask;
  UCurveFloat *DigitalDisplayCloudMask;
  UCurveFloat *DigitalDisplayCloudInfluenceMask;
  FCarInfo CarEntryInfo;
  FDriverInfo DriverInfo;
  unsigned __int16 carIndex;
  unsigned __int16 driverIndex;
  float GearTimeToIgnoreNeutralBase;
  FString NeutralGearText;
  bool hasEnduranceAnimation;
  UMaterialInstance *GhostCarMaterial;
  UMaterialInterface *VirtualMirrorMaterial;
  UProceduralMeshComponent *VirtualMirrorMesh;
  UCarAvatarRatingCalculator *RatingCalculator;
  USkeletalMeshComponent *ExternalMeshComponent;
  UAcGameInstance *GameInstance;
  AAcRaceGameMode *RaceGameMode;
  TSet<UMeshComponent *,DefaultKeyFuncs<UMeshComponent *,0>,FDefaultSetAllocator> PitstopLodComponents;
  AACPlayerCameraManager *CameraManager;
  UCameraComponent *CurrentCamera;
  UCameraComponent *ChaseCameraComponent;
  UCameraComponent *BonnetCameraComponent;
  UCameraComponent *CockpitCameraComponent;
  UCameraComponent *DashCameraComponent;
  UCameraComponent *HelmetCameraComponent;
  ADirectionalLight *SunLight;
  AAcParticles *ParticlesActor;
  UParticleSystemComponent *SparkComponent;
  FVector GamepadMovementInput;
  FVector GamepadCameraInput;
  FVector MouseMovementInput;
  FVector MouseCameraInput;
  FTransform PitStart45;
  FTransform PitZone;
  FTransform PitEnd;
  USkeletalMeshComponent *DriverMeshComponent;
  USkeletalMeshComponent *DriverHelmetComponent;
  UStaticMeshComponent *DriverHeadComponent;
  USkeletalMeshComponent *SteerMeshComponent;
  USkeletalMeshComponent *InternalMeshComponent;
  USkeletalMeshComponent *ProtectionNetComponent;
  USkeletalMeshComponent *SteerCableComponent;
  USkeletalMeshComponent *NumberPlateComponent;
  USkeletalMeshComponent *BeltMeshComponent;
  UStaticMeshComponent *ShadowPlaneComponent;
  UStaticMeshComponent *ShadowTyresComponent;
  UAcLumirankComponent *LumirankComponent;
  USkeletalMeshComponent *AuxLightsComponent;
  UAcGlassDropletsComponent *ExtGlassDropletsComponent;
  UAcGlassDropletsComponent *IntGlassDropletsComponent;
  TArray<SLODVisInfo,FDefaultAllocator> LODVisMeshComponents;
  TArray<FVector,FDefaultAllocator> SuspensionOffsets;
  TArray<float,FDefaultAllocator> SuspensionHeights;
  TArray<float,FDefaultAllocator> WheelHeights;
  APhysicsAvatar *physicsAvatar;
  Car *car;
  bool isInitializated;
  bool isPhysicsDriven;
  float fakeTyreAngularSpeed;
  bool postInitializated;
  bool isForcedOnFlatPlane;
  NetCarStateProvider *netCar;
  ICarPhysicsStateProvider *stateProvider;
  long double lastSend;
  unsigned int packetSequenceId;
  CarPhysicsState carPhysicsState;
  CarPhysicsState carReplayPhysicsState;
  CarPhysicsConstantsInfo physicsConstantsInfo;
  int currentTyreCompoundIndex;
  char LastGear;
  float GearTimeToIgnoreNeutral;
  int ForcedLOD;
  float RainStreaksStartPos;
  float PrevSpeed;
  ACarAvatar::ERainStreaksFadeMode RainStreaksFadeMode;
  float RainStreaksAlphaFade;
  float RainStreaksOffset1;
  float RainStreaksOffset2;
  float currentBrakeTargetDistance;
  TArray<float,FDefaultAllocator> TyreAngle;
  LineRecorder lineRecorder;
  USceneCaptureComponent2D *MirrorSceneCapture;
  TArray<UWidgetComponent *,FDefaultAllocator> DisplayComponents;
  char pakSequenceIndex;
  _BYTE carType[1];
  ACarAvatar::FCarStarter CarStarterEvent;
  UReplayManager *ReplayManager;
  ksRacing::CarGraphicsState replayGraphicsState;
  ksRacing::carSystemsUnion carSystemStatus;
  bool humanMotorControlInUse;
  _BYTE controllerType[1];
  float distanceFromPlayer;
  AAcRaceGameState *RaceGameState;
  ksRacing::FAdditionalHFState replayAdditionalState;
  AGhostCarManager *ghostCarManager;
  UMaterialInstanceDynamic *GhostCarDynamicMaterial;
  bool isDriverHidden;
  bool isDriverForced;
  bool paused;
  bool currentShoulderViewLeftIsPressed;
  bool currentShoulderViewRightIsPressed;
  float currentShoulderViewYawTarget;
  float currentShoulderViewPitchTarget;
  bool aiSteerSmoothing;
  TArray<unsigned char,FDefaultAllocator> randomNumbers;
  int randomNumberIndex;
  bool isDummyInitialized;
  float replaySparksCooldown;
  float resetTimeAccumulator;
};

/* 69439 */
struct __cppobj std::allocator<std::pair<void *,std::function<void __cdecl(FCornerSectionCarResult const &)> > >
{
};

/* 69449 */
struct __cppobj std::_Vector_val<std::_Simple_types<std::pair<void *,std::function<void __cdecl(FCornerSectionCarResult const &)> > > > : std::_Container_base0
{
  std::pair<void *,std::function<void __cdecl(FCornerSectionCarResult const &)> > *_Myfirst;
  std::pair<void *,std::function<void __cdecl(FCornerSectionCarResult const &)> > *_Mylast;
  std::pair<void *,std::function<void __cdecl(FCornerSectionCarResult const &)> > *_Myend;
};

/* 69450 */
struct __cppobj std::_Compressed_pair<std::allocator<std::pair<void *,std::function<void __cdecl(FCornerSectionCarResult const &)> > >,std::_Vector_val<std::_Simple_types<std::pair<void *,std::function<void __cdecl(FCornerSectionCarResult const &)> > > >,1> : std::allocator<std::pair<void *,std::function<void __cdecl(FCornerSectionCarResult const &)> > >
{
  std::_Vector_val<std::_Simple_types<std::pair<void *,std::function<void __cdecl(FCornerSectionCarResult const &)> > > > _Myval2;
};

/* 69451 */
struct std::_Vector_alloc<std::_Vec_base_types<std::pair<void *,std::function<void __cdecl(FCornerSectionCarResult const &)> >,std::allocator<std::pair<void *,std::function<void __cdecl(FCornerSectionCarResult const &)> > > > >
{
  std::_Compressed_pair<std::allocator<std::pair<void *,std::function<void __cdecl(FCornerSectionCarResult const &)> > >,std::_Vector_val<std::_Simple_types<std::pair<void *,std::function<void __cdecl(FCornerSectionCarResult const &)> > > >,1> _Mypair;
};

/* 69452 */
struct __cppobj std::vector<std::pair<void *,std::function<void __cdecl(FCornerSectionCarResult const &)> >,std::allocator<std::pair<void *,std::function<void __cdecl(FCornerSectionCarResult const &)> > > > : std::_Vector_alloc<std::_Vec_base_types<std::pair<void *,std::function<void __cdecl(FCornerSectionCarResult const &)> >,std::allocator<std::pair<void *,std::function<void __cdecl(FCornerSectionCarResult const &)> > > > >
{
};

/* 69453 */
struct Event<FCornerSectionCarResult>
{
  std::vector<std::pair<void *,std::function<void __cdecl(FCornerSectionCarResult const &)> >,std::allocator<std::pair<void *,std::function<void __cdecl(FCornerSectionCarResult const &)> > > > handlers;
};

/* 4568 */
struct TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<40,8> >,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 69454 */
struct TSparseArray<TSetElement<TTuple<unsigned short,FCornerSectionLapDataStack> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<40,8> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 69455 */
struct __declspec(align(8)) TSet<TTuple<unsigned short,FCornerSectionLapDataStack>,TDefaultMapHashableKeyFuncs<unsigned short,FCornerSectionLapDataStack,0>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<TTuple<unsigned short,FCornerSectionLapDataStack> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 69456 */
struct TMapBase<unsigned short,FCornerSectionLapDataStack,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<unsigned short,FCornerSectionLapDataStack,0> >
{
  TSet<TTuple<unsigned short,FCornerSectionLapDataStack>,TDefaultMapHashableKeyFuncs<unsigned short,FCornerSectionLapDataStack,0>,FDefaultSetAllocator> Pairs;
};

/* 69457 */
struct __cppobj TSortableMapBase<unsigned short,FCornerSectionLapDataStack,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<unsigned short,FCornerSectionLapDataStack,0> > : TMapBase<unsigned short,FCornerSectionLapDataStack,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<unsigned short,FCornerSectionLapDataStack,0> >
{
};

/* 69458 */
struct __cppobj TMap<unsigned short,FCornerSectionLapDataStack,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<unsigned short,FCornerSectionLapDataStack,0> > : TSortableMapBase<unsigned short,FCornerSectionLapDataStack,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<unsigned short,FCornerSectionLapDataStack,0> >
{
};

/* 69459 */
struct TSparseArray<TSetElement<TTuple<unsigned short,FCornerSectionCarResultArray> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<32,8> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 69460 */
struct __declspec(align(8)) TSet<TTuple<unsigned short,FCornerSectionCarResultArray>,TDefaultMapHashableKeyFuncs<unsigned short,FCornerSectionCarResultArray,0>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<TTuple<unsigned short,FCornerSectionCarResultArray> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 69461 */
struct TMapBase<unsigned short,FCornerSectionCarResultArray,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<unsigned short,FCornerSectionCarResultArray,0> >
{
  TSet<TTuple<unsigned short,FCornerSectionCarResultArray>,TDefaultMapHashableKeyFuncs<unsigned short,FCornerSectionCarResultArray,0>,FDefaultSetAllocator> Pairs;
};

/* 69462 */
struct __cppobj TSortableMapBase<unsigned short,FCornerSectionCarResultArray,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<unsigned short,FCornerSectionCarResultArray,0> > : TMapBase<unsigned short,FCornerSectionCarResultArray,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<unsigned short,FCornerSectionCarResultArray,0> >
{
};

/* 69463 */
struct __cppobj TMap<unsigned short,FCornerSectionCarResultArray,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<unsigned short,FCornerSectionCarResultArray,0> > : TSortableMapBase<unsigned short,FCornerSectionCarResultArray,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<unsigned short,FCornerSectionCarResultArray,0> >
{
};

/* 69464 */
struct TSparseArray<TSetElement<TTuple<unsigned short,float> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<16,4> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 69465 */
struct __declspec(align(8)) TSet<TTuple<unsigned short,float>,TDefaultMapHashableKeyFuncs<unsigned short,float,0>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<TTuple<unsigned short,float> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 69466 */
struct TMapBase<unsigned short,float,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<unsigned short,float,0> >
{
  TSet<TTuple<unsigned short,float>,TDefaultMapHashableKeyFuncs<unsigned short,float,0>,FDefaultSetAllocator> Pairs;
};

/* 69467 */
struct __cppobj TSortableMapBase<unsigned short,float,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<unsigned short,float,0> > : TMapBase<unsigned short,float,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<unsigned short,float,0> >
{
};

/* 69468 */
struct __cppobj TMap<unsigned short,float,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<unsigned short,float,0> > : TSortableMapBase<unsigned short,float,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<unsigned short,float,0> >
{
};

/* 69469 */
struct __cppobj UTrackSectionServices : UObject
{
  Event<FCornerSectionCarResult> onCornerCompletedEvent;
  int CurrentCircuitId;
  TMap<unsigned short,FCornerSectionLapDataStack,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<unsigned short,FCornerSectionLapDataStack,0> > lapdataStack;
  TArray<FCircuitSectionDefinition,FDefaultAllocator> cornerSections;
  TArray<FCircuitCornerInfo,FDefaultAllocator> cornerInfos;
  TMap<unsigned short,FCornerSectionCarResultArray,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<unsigned short,FCornerSectionCarResultArray,0> > results2ndLastLap;
  TMap<unsigned short,FCornerSectionCarResultArray,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<unsigned short,FCornerSectionCarResultArray,0> > resultsLastLap;
  TMap<unsigned short,FCornerSectionCarResultArray,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<unsigned short,FCornerSectionCarResultArray,0> > resultsThisLap;
  TMap<unsigned short,float,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<unsigned short,float,0> > lastSplinePositions;
  FCircuitInfo cInfo;
};

/* 69470 */
struct FSetupTyre
{
  int tyreSet;
  int tyreCompound;
  int tyrePressure[4];
};

/* 69471 */
struct FSetupAlignment
{
  int Camber[4];
  int Toe[4];
  float StaticCamber[4];
  float ToeOutLinear[4];
  int SteerRatio;
};

/* 69472 */
struct FSetupElectronics
{
  int TC1;
  int TC2;
  int ABS;
  int ECUMap;
  int FuelMix;
};

/* 69473 */
struct FPitStrategy
{
  int FuelToAdd;
  FSetupTyre Tyres[4];
};

/* 69474 */
struct FSetupStrategy
{
  int Fuel;
  FPitStrategy pitStrategy;
};

/* 69475 */
struct FBasicCarSetup
{
  FSetupTyre Tyres;
  FSetupAlignment Alignment;
  FSetupElectronics Electronics;
  FSetupStrategy Strategy;
};

/* 69476 */
struct FSetupMechanicalBalance
{
  int ARBFront;
  int ARBRear;
  int WheelRate[4];
  int BumpStopRateUp[4];
  int BumpStopRateDn[4];
  int BumpStopWindow[4];
  int BrakeTorque;
  int BrakeBias;
};

/* 69477 */
struct FSetupDampers
{
  int BumpSlow[4];
  int BumpFast[4];
  int ReboundSlow[4];
  int ReboundFast[4];
};

/* 69478 */
struct FSetupAeroBalance
{
  int RideHeight[4];
  float RodLength[4];
  int Splitter;
  int RearWing;
};

/* 69479 */
struct FSetupDrivetrain
{
  int Preload;
};

/* 69480 */
struct FAdvancedCarSetup
{
  FSetupMechanicalBalance MechanicalBalance;
  FSetupDampers Dampers;
  FSetupAeroBalance AeroBalance;
  FSetupDrivetrain Drivetrain;
};

/* 69481 */
struct FCarSetup
{
  FBasicCarSetup BasicSetup;
  FAdvancedCarSetup AdvancedSetup;
};

/* 69482 */
struct __cppobj UAcTeamStrategyController : UActorComponent
{
  FCarSetup playerCarSetup;
  bool isSetupChanged;
  AAcRaceGameMode *RaceGameMode;
};

/* 69484 */
struct __cppobj AAudioActor : AActor
{
  UAudioManager *audioManager;
};

/* 69485 */
struct __cppobj TBaseDynamicMulticastDelegate<FWeakObjectPtr,void,FAudioCommsData const &,int,float> : TMulticastScriptDelegate<FWeakObjectPtr>
{
};

/* 69486 */
struct __cppobj FSpotterAudioEventStarted : TBaseDynamicMulticastDelegate<FWeakObjectPtr,void,FAudioCommsData const &,int,float>
{
};

/* 4842 */
struct __cppobj TBaseDynamicMulticastDelegate<FWeakObjectPtr,void,int> : TMulticastScriptDelegate<FWeakObjectPtr>
{
};

/* 69487 */
struct __cppobj FSpotterAudioEventEnded : TBaseDynamicMulticastDelegate<FWeakObjectPtr,void,int>
{
};

/* 69508 */
struct TSparseArray<TSetElement<TTuple<FAudioCommsData *,CommLogData> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<24,8> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 69509 */
struct __declspec(align(8)) TSet<TTuple<FAudioCommsData *,CommLogData>,TDefaultMapHashableKeyFuncs<FAudioCommsData *,CommLogData,0>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<TTuple<FAudioCommsData *,CommLogData> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 69510 */
struct TMapBase<FAudioCommsData *,CommLogData,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FAudioCommsData *,CommLogData,0> >
{
  TSet<TTuple<FAudioCommsData *,CommLogData>,TDefaultMapHashableKeyFuncs<FAudioCommsData *,CommLogData,0>,FDefaultSetAllocator> Pairs;
};

/* 69511 */
struct __cppobj TSortableMapBase<FAudioCommsData *,CommLogData,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FAudioCommsData *,CommLogData,0> > : TMapBase<FAudioCommsData *,CommLogData,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FAudioCommsData *,CommLogData,0> >
{
};

/* 69512 */
struct __cppobj TMap<FAudioCommsData *,CommLogData,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FAudioCommsData *,CommLogData,0> > : TSortableMapBase<FAudioCommsData *,CommLogData,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FAudioCommsData *,CommLogData,0> >
{
};

/* 4591 */
struct TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<20,4> >,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 69513 */
struct TSparseArray<TSetElement<TTuple<enum EAudioCommsLevel,CommLevelValues> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<20,4> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 69514 */
struct __declspec(align(8)) TSet<TTuple<enum EAudioCommsLevel,CommLevelValues>,TDefaultMapHashableKeyFuncs<enum EAudioCommsLevel,CommLevelValues,0>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<TTuple<enum EAudioCommsLevel,CommLevelValues> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 69515 */
struct TMapBase<enum EAudioCommsLevel,CommLevelValues,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<enum EAudioCommsLevel,CommLevelValues,0> >
{
  TSet<TTuple<enum EAudioCommsLevel,CommLevelValues>,TDefaultMapHashableKeyFuncs<enum EAudioCommsLevel,CommLevelValues,0>,FDefaultSetAllocator> Pairs;
};

/* 69516 */
struct __cppobj TSortableMapBase<enum EAudioCommsLevel,CommLevelValues,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<enum EAudioCommsLevel,CommLevelValues,0> > : TMapBase<enum EAudioCommsLevel,CommLevelValues,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<enum EAudioCommsLevel,CommLevelValues,0> >
{
};

/* 69517 */
struct __cppobj TMap<enum EAudioCommsLevel,CommLevelValues,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<enum EAudioCommsLevel,CommLevelValues,0> > : TSortableMapBase<enum EAudioCommsLevel,CommLevelValues,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<enum EAudioCommsLevel,CommLevelValues,0> >
{
};

/* 69518 */
struct MarshalBitFlag
{
  __int8 flagColor : 4;
};

/* 69519 */
struct TArray<MarshalState,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 69520 */
struct __cppobj __declspec(align(8)) AAcSpotter : AActor
{
  FSpotterAudioEventStarted OnAudioEventStarted;
  FSpotterAudioEventEnded OnAudioEventEnded;
  UAudioComms *audioComms;
  AAcRaceGameMode *RaceGameMode;
  float toGoValue;
  float wetLevel;
  TMap<FAudioCommsData *,CommLogData,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FAudioCommsData *,CommLogData,0> > audioPlayedData;
  TMap<enum EAudioCommsLevel,CommLevelValues,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<enum EAudioCommsLevel,CommLevelValues,0> > levelValues;
  ATrackAvatar *trackAvatar;
  MarshalBitFlag lastMarshalBitField[32];
  TArray<MarshalState,FDefaultAllocator> marshalState;
  float lastTimeMarshalUpdate;
};

/* 60 */
enum ECompressionFlags
{
  COMPRESS_None = 0x0,
  COMPRESS_ZLIB = 0x1,
  COMPRESS_GZIP = 0x2,
  COMPRESS_Custom = 0x4,
  COMPRESS_BiasMemory = 0x10,
  COMPRESS_BiasSpeed = 0x20,
  COMPRESS_OverridePlatform = 0x40,
};

/* 4056 */
struct FArchiveVtbl
{
  void *(__cdecl *__vecDelDtor)(FArchive *this, unsigned int);
  _BYTE gap8[56];
  void (__cdecl *ForceBlueprintFinalization)(FArchive *this);
  void (__cdecl *Serialize)(FArchive *this, void *, __int64);
  void (__cdecl *SerializeBits)(FArchive *this, void *, __int64);
  void (__cdecl *SerializeInt)(FArchive *this, unsigned int *, unsigned int);
  void (__cdecl *SerializeIntPacked)(FArchive *this, unsigned int *);
  void (__cdecl *Preload)(FArchive *this, UObject *);
  void (__cdecl *CountBytes)(FArchive *this, unsigned __int64, unsigned __int64);
  FString *(__cdecl *GetArchiveName)(FArchive *this, FString *result);
  FLinker *(__cdecl *GetLinker)(FArchive *this);
  __int64 (__cdecl *Tell)(FArchive *this);
  __int64 (__cdecl *TotalSize)(FArchive *this);
  bool (__cdecl *AtEnd)(FArchive *this);
  void (__cdecl *Seek)(FArchive *this, __int64);
  void (__cdecl *AttachBulkData)(FArchive *this, UObject *, FUntypedBulkData *);
  void (__cdecl *DetachBulkData)(FArchive *this, FUntypedBulkData *, bool);
  bool (__cdecl *IsProxyOf)(FArchive *this, FArchive *);
  bool (__cdecl *Precache)(FArchive *this, __int64, __int64);
  void (__cdecl *FlushCache)(FArchive *this);
  bool (__cdecl *SetCompressionMap)(FArchive *this, TArray<FCompressedChunk,FDefaultAllocator> *, ECompressionFlags);
  void (__cdecl *Flush)(FArchive *this);
  bool (__cdecl *Close)(FArchive *this);
  bool (__cdecl *GetError)(FArchive *this);
  void (__cdecl *MarkScriptSerializationStart)(FArchive *this, UObject *);
  void (__cdecl *MarkScriptSerializationEnd)(FArchive *this, UObject *);
  void (__cdecl *MarkSearchableName)(FArchive *this, UObject *, FName *);
  UObject *(__cdecl *GetArchetypeFromLoader)(FArchive *this, UObject *);
  FArchive *(__cdecl *GetCacheableArchive)(FArchive *this);
  FCustomVersionContainer *(__cdecl *GetCustomVersions)(FArchive *this);
  void (__cdecl *SetCustomVersions)(FArchive *this, FCustomVersionContainer *);
  void (__cdecl *ResetCustomVersions)(FArchive *this);
  void (__cdecl *SetFilterEditorOnly)(FArchive *this, bool);
  bool (__cdecl *UseToResolveEnumerators)(FArchive *this);
  bool (__cdecl *ShouldSkipProperty)(FArchive *this, UProperty *);
  void (__cdecl *PushSerializedProperty)(FArchive *this, UProperty *, const bool);
  void (__cdecl *PopSerializedProperty)(FArchive *this, UProperty *, const bool);
  bool (__cdecl *AttachExternalReadDependency)(FArchive *this, TFunction<bool __cdecl(double)> *);
  void (__cdecl *Reset)(FArchive *this);
  void (__cdecl *SetIsLoading)(FArchive *this, bool);
  void (__cdecl *SetIsSaving)(FArchive *this, bool);
  void (__cdecl *SetIsTransacting)(FArchive *this, bool);
  void (__cdecl *SetIsTextFormat)(FArchive *this, bool);
  void (__cdecl *SetWantBinaryPropertySerialization)(FArchive *this, bool);
  void (__cdecl *SetForceUnicode)(FArchive *this, bool);
  void (__cdecl *SetIsPersistent)(FArchive *this, bool);
  void (__cdecl *SetUE4Ver)(FArchive *this, int);
  void (__cdecl *SetLicenseeUE4Ver)(FArchive *this, int);
  void (__cdecl *SetEngineVer)(FArchive *this, FEngineVersionBase *);
  void (__cdecl *SetEngineNetVer)(FArchive *this, const unsigned int);
  void (__cdecl *SetGameNetVer)(FArchive *this, const unsigned int);
};

/* 4022 */
struct TArray<FCustomVersion,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 4023 */
struct FCustomVersionContainer
{
  TArray<FCustomVersion,FDefaultAllocator> Versions;
};

/* 4058 */
const struct FCustomPropertyListNode
{
  UProperty *Property;
  int ArrayIndex;
  FCustomPropertyListNode *SubPropertyList;
  FCustomPropertyListNode *PropertyListNext;
};

/* 4059 */
const struct ITargetPlatform
{
  ITargetPlatformVtbl *vfptr;
};

/* 4363 */
struct __cppobj TTypeCompatibleBytes<UProperty *> : TAlignedBytes<8,8>
{
};

/* 4364 */
struct __cppobj FHeapAllocator::ForElementType<UProperty *> : FHeapAllocator::ForAnyElementType
{
};

/* 4365 */
struct TInlineAllocator<8,FDefaultAllocator>::ForElementType<UProperty *>
{
  TTypeCompatibleBytes<UProperty *> InlineData[8];
  FHeapAllocator::ForElementType<UProperty *> SecondaryData;
};

/* 4366 */
struct TArray<UProperty *,TInlineAllocator<8,FDefaultAllocator> >
{
  TInlineAllocator<8,FDefaultAllocator>::ForElementType<UProperty *> AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 4367 */
struct __declspec(align(8)) FArchiveSerializedPropertyChain
{
  TArray<UProperty *,TInlineAllocator<8,FDefaultAllocator> > SerializedPropertyChain;
  unsigned int SerializedPropertyChainUpdateCount;
};

/* 67210 */
const struct __declspec(align(8)) CarConnectedEvent
{
  ksRacing::CarInfo carInfo;
  unsigned __int16 carIndex;
  ksRacing::DriverInfo driverInfo;
  unsigned __int16 driverIndex;
  char connectedCarId;
};

/* 33350 */
struct __declspec(align(8)) __std_type_info_data
{
  const char *_UndecoratedName;
  const char _DecoratedName[1];
};

/* 33348 */
struct type_info
{
  type_infoVtbl *vfptr;
  __std_type_info_data _Data;
};

/* 67237 */
const struct __declspec(align(4)) ksRacing::OnSplitTimeEvent
{
  unsigned int timeStamp;
  unsigned __int16 carIndex;
  unsigned __int16 driverIndex;
  unsigned int splitTime;
  char sector;
};

/* 67251 */
const struct ksRacing::OnRemoteLapEvent
{
  unsigned int timeStamp;
  unsigned __int16 carIndex;
  unsigned __int16 driverIndex;
  unsigned int splitTime;
};

/* 67265 */
const struct OnSessionUpdateEvent
{
  _BYTE phase[1];
  float sessionStartTime;
  float sessionEndTime;
  float serverTime;
};

/* 67195 */
struct rapidjson::GenericMember<rapidjson::UTF16<wchar_t>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator> >
{
  rapidjson::GenericValue<rapidjson::UTF16<wchar_t>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator> > name;
  rapidjson::GenericValue<rapidjson::UTF16<wchar_t>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator> > value;
};

/* 67202 */
struct rapidjson::GenericStringBuffer<rapidjson::UTF16<wchar_t>,rapidjson::CrtAllocator>
{
  rapidjson::internal::Stack<rapidjson::CrtAllocator> stack_;
};

/* 67200 */
struct __cppobj rapidjson::CrtAllocator
{
};

/* 67401 */
struct __cppobj ksRacing::DriverEntity : ksRacing::WritableRaceStructure
{
  ksRacing::DriverInfo info;
};

/* 67430 */
struct std::_Func_base<void,UDPMessage const &>
{
  std::_Func_base<void,UDPMessage const &>Vtbl *vfptr;
};

/* 67445 */
struct Concurrency::details::_Concurrent_queue_base_v4::_Page
{
  Concurrency::details::_Concurrent_queue_base_v4::_Page *_Next;
  unsigned __int64 _Mask;
};

/* 67175 */
const struct CollisionData
{
  vec3d pos;
  vec3d normal;
  long double depth;
  ICollisionObject *shapes[2];
  IRigidBody *bodies[2];
};

/* 66935 */
struct ICarPhysicsStateProviderVtbl
{
  void *(__cdecl *__vecDelDtor)(ICarPhysicsStateProvider *this, unsigned int);
  void (__cdecl *getPhysicsState)(ICarPhysicsStateProvider *this, CarPhysicsState *);
};

/* 66941 */
struct EngineMap
{
  float powerMult;
  float consumptionMult;
};

/* 66953 */
struct DynamicControllerData
{
  std::vector<DynamicControllerStage,std::allocator<DynamicControllerStage> > stages;
};

/* 66954 */
struct TurboData
{
  float maxBoost;
  float lagUP;
  float lagDN;
  float rpmRef;
  float gammaRpm;
  float gammaGas;
  float wastegate;
  bool isAdjustable;
  DynamicControllerData controller;
};

/* 66971 */
struct TyreCompoundData
{
  TyreModelData modelData;
  TyreData data;
  TyreThermalPatchData thermalPatchData;
  Curve thermalPerformanceCurve;
};

/* 66972 */
struct TyreCompoundSet
{
  std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > name;
  std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > shortName;
  TyreCompoundData compounds[2];
};

/* 66979 */
struct __cppobj std::allocator<DynamicWingControllerData>
{
};

/* 66981 */
struct __cppobj std::_Vector_val<std::_Simple_types<DynamicWingControllerData> > : std::_Container_base0
{
  DynamicWingControllerData *_Myfirst;
  DynamicWingControllerData *_Mylast;
  DynamicWingControllerData *_Myend;
};

/* 66982 */
struct __cppobj std::_Compressed_pair<std::allocator<DynamicWingControllerData>,std::_Vector_val<std::_Simple_types<DynamicWingControllerData> >,1> : std::allocator<DynamicWingControllerData>
{
  std::_Vector_val<std::_Simple_types<DynamicWingControllerData> > _Myval2;
};

/* 66983 */
struct std::_Vector_alloc<std::_Vec_base_types<DynamicWingControllerData,std::allocator<DynamicWingControllerData> > >
{
  std::_Compressed_pair<std::allocator<DynamicWingControllerData>,std::_Vector_val<std::_Simple_types<DynamicWingControllerData> >,1> _Mypair;
};

/* 66984 */
struct __cppobj std::vector<DynamicWingControllerData,std::allocator<DynamicWingControllerData> > : std::_Vector_alloc<std::_Vec_base_types<DynamicWingControllerData,std::allocator<DynamicWingControllerData> > >
{
};

/* 66985 */
struct WingData
{
  std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > name;
  float chord;
  float span;
  vec3d position;
  Curve lutAOA_CL;
  Curve lutAOA_CD;
  Curve lutGH_CL;
  Curve lutGH_CD;
  float clGain;
  float cdGain;
  bool hasController;
  float yawGain;
  float area;
  bool isVertical;
  float defaultAngle;
  float damageCL[5];
  float damageCD[5];
  std::vector<DynamicWingControllerData,std::allocator<DynamicWingControllerData> > wingControllerData;
};

/* 66991 */
struct __cppobj std::allocator<DynamicDownForceControllerData>
{
};

/* 66993 */
struct __cppobj std::_Vector_val<std::_Simple_types<DynamicDownForceControllerData> > : std::_Container_base0
{
  DynamicDownForceControllerData *_Myfirst;
  DynamicDownForceControllerData *_Mylast;
  DynamicDownForceControllerData *_Myend;
};

/* 66994 */
struct __cppobj std::_Compressed_pair<std::allocator<DynamicDownForceControllerData>,std::_Vector_val<std::_Simple_types<DynamicDownForceControllerData> >,1> : std::allocator<DynamicDownForceControllerData>
{
  std::_Vector_val<std::_Simple_types<DynamicDownForceControllerData> > _Myval2;
};

/* 66995 */
struct std::_Vector_alloc<std::_Vec_base_types<DynamicDownForceControllerData,std::allocator<DynamicDownForceControllerData> > >
{
  std::_Compressed_pair<std::allocator<DynamicDownForceControllerData>,std::_Vector_val<std::_Simple_types<DynamicDownForceControllerData> >,1> _Mypair;
};

/* 66996 */
struct __cppobj std::vector<DynamicDownForceControllerData,std::allocator<DynamicDownForceControllerData> > : std::_Vector_alloc<std::_Vec_base_types<DynamicDownForceControllerData,std::allocator<DynamicDownForceControllerData> > >
{
};

/* 66997 */
struct __declspec(align(8)) DownForceData
{
  int positionIndex;
  vec3d position;
  int coupledElement;
  Curve lutDFRideHeight;
  Curve lutDFOtherRideHeight;
  Curve lutDragRideHeight;
  Curve lutDragOtherRideHeight;
  std::vector<DynamicDownForceControllerData,std::allocator<DynamicDownForceControllerData> > dfControllerData;
  float clGain;
  float cdGain;
  float yawGain;
  bool hasController;
  float angle;
  float liftPerFrontAngle;
  float liftPerRearAngle;
  float dragPerFrontAngle;
  float dragPerRearAngle;
  float damageCL[5];
  float damageCD[5];
  float aiReferenceHeight;
  float aiReferenceDeltaH;
};

/* 67015 */
struct ColliderBoxesData
{
  vec3f centre;
  vec3f size;
  bool bLoaded;
  float pitchRAD;
};

/* 67038 */
struct __cppobj std::_Arg_types<TimeLineEvent const &>
{
};

/* 67042 */
union std::_Func_class<void,TimeLineEvent const &>::_Storage
{
  long double _Dummy1;
  char _Dummy2[56];
  std::_Func_base<void,TimeLineEvent const &> *_Ptrs[8];
};

/* 67043 */
struct __cppobj std::_Func_class<void,TimeLineEvent const &> : std::_Arg_types<TimeLineEvent const &>
{
  std::_Func_class<void,TimeLineEvent const &>::_Storage _Mystorage;
};

/* 67044 */
struct __cppobj std::function<void __cdecl(TimeLineEvent const &)> : std::_Func_class<void,TimeLineEvent const &>
{
};

/* 67045 */
struct std::pair<void *,std::function<void __cdecl(TimeLineEvent const &)> >
{
  void *first;
  std::function<void __cdecl(TimeLineEvent const &)> second;
};

/* 67052 */
struct __cppobj std::_Arg_types<OnStepCompleteEvent const &>
{
};

/* 67057 */
union std::_Func_class<void,OnStepCompleteEvent const &>::_Storage
{
  long double _Dummy1;
  char _Dummy2[56];
  std::_Func_base<void,OnStepCompleteEvent const &> *_Ptrs[8];
};

/* 67058 */
struct __cppobj std::_Func_class<void,OnStepCompleteEvent const &> : std::_Arg_types<OnStepCompleteEvent const &>
{
  std::_Func_class<void,OnStepCompleteEvent const &>::_Storage _Mystorage;
};

/* 67059 */
struct __cppobj std::function<void __cdecl(OnStepCompleteEvent const &)> : std::_Func_class<void,OnStepCompleteEvent const &>
{
};

/* 67060 */
struct std::pair<void *,std::function<void __cdecl(OnStepCompleteEvent const &)> >
{
  void *first;
  std::function<void __cdecl(OnStepCompleteEvent const &)> second;
};

/* 67067 */
struct __cppobj std::_Arg_types<OnControlsProviderChanged const &>
{
};

/* 67076 */
union std::_Func_class<void,OnControlsProviderChanged const &>::_Storage
{
  long double _Dummy1;
  char _Dummy2[56];
  std::_Func_base<void,OnControlsProviderChanged const &> *_Ptrs[8];
};

/* 67077 */
struct __cppobj std::_Func_class<void,OnControlsProviderChanged const &> : std::_Arg_types<OnControlsProviderChanged const &>
{
  std::_Func_class<void,OnControlsProviderChanged const &>::_Storage _Mystorage;
};

/* 67078 */
struct __cppobj std::function<void __cdecl(OnControlsProviderChanged const &)> : std::_Func_class<void,OnControlsProviderChanged const &>
{
};

/* 67079 */
struct std::pair<void *,std::function<void __cdecl(OnControlsProviderChanged const &)> >
{
  void *first;
  std::function<void __cdecl(OnControlsProviderChanged const &)> second;
};

/* 67086 */
struct __cppobj std::_Arg_types<OnLapCompletedEvent const &>
{
};

/* 67090 */
union std::_Func_class<void,OnLapCompletedEvent const &>::_Storage
{
  long double _Dummy1;
  char _Dummy2[56];
  std::_Func_base<void,OnLapCompletedEvent const &> *_Ptrs[8];
};

/* 67091 */
struct __cppobj std::_Func_class<void,OnLapCompletedEvent const &> : std::_Arg_types<OnLapCompletedEvent const &>
{
  std::_Func_class<void,OnLapCompletedEvent const &>::_Storage _Mystorage;
};

/* 67092 */
struct __cppobj std::function<void __cdecl(OnLapCompletedEvent const &)> : std::_Func_class<void,OnLapCompletedEvent const &>
{
};

/* 67093 */
struct std::pair<void *,std::function<void __cdecl(OnLapCompletedEvent const &)> >
{
  void *first;
  std::function<void __cdecl(OnLapCompletedEvent const &)> second;
};

/* 67100 */
struct __cppobj std::_Arg_types<OnSectorSplitEvent const &>
{
};

/* 67104 */
union std::_Func_class<void,OnSectorSplitEvent const &>::_Storage
{
  long double _Dummy1;
  char _Dummy2[56];
  std::_Func_base<void,OnSectorSplitEvent const &> *_Ptrs[8];
};

/* 67105 */
struct __cppobj std::_Func_class<void,OnSectorSplitEvent const &> : std::_Arg_types<OnSectorSplitEvent const &>
{
  std::_Func_class<void,OnSectorSplitEvent const &>::_Storage _Mystorage;
};

/* 67106 */
struct __cppobj std::function<void __cdecl(OnSectorSplitEvent const &)> : std::_Func_class<void,OnSectorSplitEvent const &>
{
};

/* 67107 */
struct std::pair<void *,std::function<void __cdecl(OnSectorSplitEvent const &)> >
{
  void *first;
  std::function<void __cdecl(OnSectorSplitEvent const &)> second;
};

/* 67114 */
struct __cppobj std::_Arg_types<vec3d const &>
{
};

/* 67117 */
union std::_Func_class<void,vec3d const &>::_Storage
{
  long double _Dummy1;
  char _Dummy2[56];
  std::_Func_base<void,vec3d const &> *_Ptrs[8];
};

/* 67118 */
struct __cppobj std::_Func_class<void,vec3d const &> : std::_Arg_types<vec3d const &>
{
  std::_Func_class<void,vec3d const &>::_Storage _Mystorage;
};

/* 67119 */
struct __cppobj std::function<void __cdecl(vec3d const &)> : std::_Func_class<void,vec3d const &>
{
};

/* 67120 */
struct std::pair<void *,std::function<void __cdecl(vec3d const &)> >
{
  void *first;
  std::function<void __cdecl(vec3d const &)> second;
};

/* 67127 */
struct __cppobj std::_Arg_types<std::pair<int,int> const &>
{
};

/* 67131 */
union std::_Func_class<void,std::pair<int,int> const &>::_Storage
{
  long double _Dummy1;
  char _Dummy2[56];
  std::_Func_base<void,std::pair<int,int> const &> *_Ptrs[8];
};

/* 67132 */
struct __cppobj std::_Func_class<void,std::pair<int,int> const &> : std::_Arg_types<std::pair<int,int> const &>
{
  std::_Func_class<void,std::pair<int,int> const &>::_Storage _Mystorage;
};

/* 67133 */
struct __cppobj std::function<void __cdecl(std::pair<int,int> const &)> : std::_Func_class<void,std::pair<int,int> const &>
{
};

/* 67134 */
struct std::pair<void *,std::function<void __cdecl(std::pair<int,int> const &)> >
{
  void *first;
  std::function<void __cdecl(std::pair<int,int> const &)> second;
};

/* 67141 */
struct __cppobj std::_Arg_types<OnCollisionEvent const &>
{
};

/* 67148 */
union std::_Func_class<void,OnCollisionEvent const &>::_Storage
{
  long double _Dummy1;
  char _Dummy2[56];
  std::_Func_base<void,OnCollisionEvent const &> *_Ptrs[8];
};

/* 67149 */
struct __cppobj std::_Func_class<void,OnCollisionEvent const &> : std::_Arg_types<OnCollisionEvent const &>
{
  std::_Func_class<void,OnCollisionEvent const &>::_Storage _Mystorage;
};

/* 67150 */
struct __cppobj std::function<void __cdecl(OnCollisionEvent const &)> : std::_Func_class<void,OnCollisionEvent const &>
{
};

/* 67151 */
struct std::pair<void *,std::function<void __cdecl(OnCollisionEvent const &)> >
{
  void *first;
  std::function<void __cdecl(OnCollisionEvent const &)> second;
};

/* 67143 */
struct IRigidBody
{
  IRigidBodyVtbl *vfptr;
};

/* 67170 */
struct FixedJointODE
{
  struct dxJoint *id;
};

/* 1832 */
enum eTimeLineCheckResponse
{
  eOutOfRange = 0x0,
  eNegativeSide = 0x1,
  ePositiveSide = 0x2,
};

/* 67647 */
struct TimeLineStatus
{
  bool isValid;
  eTimeLineCheckResponse lastResponse;
  unsigned int lastTime;
};

/* 67654 */
struct __declspec(align(8)) CarCollisionBox
{
  vec3f centre;
  vec3f size;
  unsigned __int64 id;
  float pitchRAD;
};

/* 67662 */
struct SGearRatio
{
  float ratio;
  std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > name;
};

/* 67669 */
struct Turbo
{
  TurboData data;
  float userSetting;
  float rotation;
};

/* 67692 */
struct __declspec(align(8)) TurboDynamicController
{
  Turbo *turbo;
  DynamicController controller;
  bool isWastegate;
};

/* 67701 */
struct __cppobj std::_Arg_types<OnGearRequestEvent const &>
{
};

/* 67705 */
union std::_Func_class<void,OnGearRequestEvent const &>::_Storage
{
  long double _Dummy1;
  char _Dummy2[56];
  std::_Func_base<void,OnGearRequestEvent const &> *_Ptrs[8];
};

/* 67706 */
struct __cppobj std::_Func_class<void,OnGearRequestEvent const &> : std::_Arg_types<OnGearRequestEvent const &>
{
  std::_Func_class<void,OnGearRequestEvent const &>::_Storage _Mystorage;
};

/* 67707 */
struct __cppobj std::function<void __cdecl(OnGearRequestEvent const &)> : std::_Func_class<void,OnGearRequestEvent const &>
{
};

/* 67708 */
struct std::pair<void *,std::function<void __cdecl(OnGearRequestEvent const &)> >
{
  void *first;
  std::function<void __cdecl(OnGearRequestEvent const &)> second;
};

/* 67759 */
struct __cppobj std::allocator<DynamicWingController>
{
};

/* 67761 */
struct __cppobj std::_Vector_val<std::_Simple_types<DynamicWingController> > : std::_Container_base0
{
  DynamicWingController *_Myfirst;
  DynamicWingController *_Mylast;
  DynamicWingController *_Myend;
};

/* 67762 */
struct __cppobj std::_Compressed_pair<std::allocator<DynamicWingController>,std::_Vector_val<std::_Simple_types<DynamicWingController> >,1> : std::allocator<DynamicWingController>
{
  std::_Vector_val<std::_Simple_types<DynamicWingController> > _Myval2;
};

/* 67763 */
struct std::_Vector_alloc<std::_Vec_base_types<DynamicWingController,std::allocator<DynamicWingController> > >
{
  std::_Compressed_pair<std::allocator<DynamicWingController>,std::_Vector_val<std::_Simple_types<DynamicWingController> >,1> _Mypair;
};

/* 67764 */
struct __cppobj std::vector<DynamicWingController,std::allocator<DynamicWingController> > : std::_Vector_alloc<std::_Vec_base_types<DynamicWingController,std::allocator<DynamicWingController> > >
{
};

/* 67846 */
struct RECache
{
  float weightDistribution;
  float wheelbase;
  float trackFront;
  float trackRear;
};

/* 66903 */
struct __declspec(align(8)) RaceEngineer
{
  RaceEngineerVtbl *vfptr;
  Car *car;
  float fuelPerLapEvaluated;
  RECache cache;
};

/* 67765 */
struct __declspec(align(4)) WingOverrideDef
{
  float overrideAngle;
  bool isActive;
};

/* 67766 */
struct __declspec(align(8)) Wing
{
  WingData *data;
  WingState status;
  std::vector<DynamicWingController,std::allocator<DynamicWingController> > dynamicControllers;
  Car *car;
  RaceEngineer engineer;
  bool hasDamage;
  WingOverrideDef overrideStatus;
  const float SPEED_DAMAGE_COEFF;
  const float SURFACE_DAMAGE_COEFF;
};

/* 67772 */
struct __cppobj std::allocator<DynamicDownForceController>
{
};

/* 67775 */
struct __cppobj std::_Vector_val<std::_Simple_types<DynamicDownForceController> > : std::_Container_base0
{
  DynamicDownForceController *_Myfirst;
  DynamicDownForceController *_Mylast;
  DynamicDownForceController *_Myend;
};

/* 67776 */
struct __cppobj std::_Compressed_pair<std::allocator<DynamicDownForceController>,std::_Vector_val<std::_Simple_types<DynamicDownForceController> >,1> : std::allocator<DynamicDownForceController>
{
  std::_Vector_val<std::_Simple_types<DynamicDownForceController> > _Myval2;
};

/* 67777 */
struct std::_Vector_alloc<std::_Vec_base_types<DynamicDownForceController,std::allocator<DynamicDownForceController> > >
{
  std::_Compressed_pair<std::allocator<DynamicDownForceController>,std::_Vector_val<std::_Simple_types<DynamicDownForceController> >,1> _Mypair;
};

/* 67778 */
struct __cppobj std::vector<DynamicDownForceController,std::allocator<DynamicDownForceController> > : std::_Vector_alloc<std::_Vec_base_types<DynamicDownForceController,std::allocator<DynamicDownForceController> > >
{
};

/* 67779 */
struct __declspec(align(4)) DownForceOverrideDef
{
  float overrideHeight;
  float overrideOtherHeight;
  bool isActive;
};

/* 67773 */
struct DownForce
{
  DownForceData *data;
  DownForceState status;
  std::vector<DynamicDownForceController,std::allocator<DynamicDownForceController> > dynamicControllers;
  Car *car;
  RaceEngineer engineer;
  bool hasDamage;
  DownForceOverrideDef overrideStatus;
  const float SPEED_DAMAGE_COEFF;
  const float SURFACE_DAMAGE_COEFF;
};

/* 67719 */
struct SuspensionBumpStop
{
  float range;
  float ref;
  float force;
  float gamma;
  float outTangent;
};

/* 67716 */
struct ISuspension
{
  ISuspensionVtbl *vfptr;
  float k;
  float progressiveK;
  float staticCamber;
  float rodLength;
  float toeOUT_Linear;
  float packerRange;
  float packerRate;
  SuspensionBumpStop bumpStopUp;
  SuspensionBumpStop bumpStopDn;
  long double baseCFM;
  DamperData damperData;
};

/* 67721 */
struct __cppobj std::allocator<TyreThermalPatch *>
{
};

/* 67723 */
struct __cppobj std::_Vector_val<std::_Simple_types<TyreThermalPatch *> > : std::_Container_base0
{
  TyreThermalPatch **_Myfirst;
  TyreThermalPatch **_Mylast;
  TyreThermalPatch **_Myend;
};

/* 67724 */
struct __cppobj std::_Compressed_pair<std::allocator<TyreThermalPatch *>,std::_Vector_val<std::_Simple_types<TyreThermalPatch *> >,1> : std::allocator<TyreThermalPatch *>
{
  std::_Vector_val<std::_Simple_types<TyreThermalPatch *> > _Myval2;
};

/* 67725 */
struct std::_Vector_alloc<std::_Vec_base_types<TyreThermalPatch *,std::allocator<TyreThermalPatch *> > >
{
  std::_Compressed_pair<std::allocator<TyreThermalPatch *>,std::_Vector_val<std::_Simple_types<TyreThermalPatch *> >,1> _Mypair;
};

/* 67726 */
struct __cppobj std::vector<TyreThermalPatch *,std::allocator<TyreThermalPatch *> > : std::_Vector_alloc<std::_Vec_base_types<TyreThermalPatch *,std::allocator<TyreThermalPatch *> > >
{
};

/* 67722 */
struct __declspec(align(8)) TyreThermalPatch
{
  std::vector<TyreThermalPatch *,std::allocator<TyreThermalPatch *> > connections;
  float T;
  float T0;
  float inputT;
  int elementIndex;
  int stripeIndex;
};

/* 67479 */
struct IRayCaster
{
  IRayCasterVtbl *vfptr;
};

/* 67738 */
struct SignalGeneratorVtbl
{
  void *(__cdecl *__vecDelDtor)(SignalGenerator *this, unsigned int);
  void (__cdecl *step)(SignalGenerator *this, float);
  float (__cdecl *getValue)(SignalGenerator *this);
};

/* 67743 */
struct ITyreModelVtbl
{
  void *(__cdecl *__vecDelDtor)(ITyreModel *this, unsigned int);
  TyreModelOutput *(__cdecl *solve)(ITyreModel *this, TyreModelOutput *result, TyreModelInput *);
};

/* 67746 */
struct ColliderWheel
{
  struct dxGeom *id;
};

/* 959 */
enum EUnitType
{
  Distance = 0x0,
  Angle = 0x1,
  Speed = 0x2,
  Temperature = 0x3,
  Mass = 0x4,
  Force = 0x5,
  Frequency = 0x6,
  DataSize = 0x7,
  LuminousFlux = 0x8,
  Time = 0x9,
  PixelDensity = 0xA,
  Multipliers = 0xB,
  Arbitrary = 0xC,
  NumberOf = 0xD,
};

/* 1777 */
typedef EUnitType DynamicControllerInput;

/* 1778 */
enum DynamicControllerCombinatorMode
{
  Add = 0x0,
  Mult = 0x1,
};

/* 66948 */
struct __declspec(align(8)) DynamicControllerStage
{
  DynamicControllerInput inputVar;
  DynamicControllerCombinatorMode combinatorMode;
  Curve lut;
  float filter;
  float upLimit;
  float downLimit;
  float currentValue;
  float constValue;
};

/* 58291 */
union std::_String_val<std::_Simple_types<char> >::_Bxty
{
  char _Buf[16];
  char *_Ptr;
  char _Alias[16];
};

/* 58292 */
struct __cppobj std::_String_val<std::_Simple_types<char> > : std::_Container_base0
{
  std::_String_val<std::_Simple_types<char> >::_Bxty _Bx;
  unsigned __int64 _Mysize;
  unsigned __int64 _Myres;
};

/* 58293 */
struct __cppobj std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1> : std::allocator<char>
{
  std::_String_val<std::_Simple_types<char> > _Myval2;
};

/* 58294 */
struct std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >
{
  std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1> _Mypair;
};

/* 58299 */
struct __cppobj std::basic_string<char,std::char_traits<char>,std::allocator<char> > : std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >
{
};

/* 1853 */
enum TelemetryUnits
{
  eUnitMeters = 0x0,
  eUnitC = 0x1,
  eUnitG = 0x2,
  eUnitRadSec = 0x3,
  eUnitGeneric = 0x4,
  eUnitMeterSec = 0x5,
  eUnitBar = 0x6,
  eUnitMS = 0x7,
  eUnitNumber = 0x8,
  eUnitPercentage = 0x9,
  eUnitPowerWatt = 0xA,
  eUnitVolumeMQ = 0xB,
  eUnitVoltageV = 0xC,
  eUnitTorqueNM = 0xD,
  eUnitRad = 0xE,
  eUnitForceN = 0xF,
  eUnitMillimiters = 0x10,
  eUnitDeg = 0x11,
  eUnitForceKG = 0x12,
  eUnitRPM = 0x13,
};

/* 67801 */
struct TelemetryChannelData
{
  std::vector<float,std::allocator<float> > values;
  TelemetryUnits units;
  int frequency;
};

/* 67802 */
struct __declspec(align(8)) TelemetryChannel
{
  std::basic_string<char,std::char_traits<char>,std::allocator<char> > name;
  TelemetryChannelData data;
  float *dataSource;
  long double *dataSourceD;
  long double lastTickTime;
  float scale;
};

/* 1857 */
enum DRWWingConnectionMode
{
  UseEffect = 0x0,
  UseAngle = 0x1,
};

/* 67814 */
struct __declspec(align(8)) DRSWingConnection
{
  Wing *wing;
  float effect;
  float angle;
  DRWWingConnectionMode mode;
};

/* 67677 */
struct ITorqueGeneratorVtbl
{
  void *(__cdecl *__vecDelDtor)(ITorqueGenerator *this, unsigned int);
  float (__cdecl *getOutputTorque)(ITorqueGenerator *this);
};

/* 67684 */
struct ICoastGeneratorVtbl
{
  void *(__cdecl *__vecDelDtor)(ICoastGenerator *this, unsigned int);
  float (__cdecl *getCoastTorque)(ICoastGenerator *this);
};

/* 67823 */
struct ERSPowerController
{
  std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > name;
  DynamicController ctrl;
};

/* 67834 */
struct SDWSuspensionData
{
  vec3d carTopWB_F;
  vec3d carTopWB_R;
  vec3d carBottomWB_F;
  vec3d carBottomWB_R;
  vec3d tyreTopWB;
  vec3d tyreBottomWB;
  vec3d carSteer;
  vec3d tyreSteer;
  vec3d refPoint;
  long double hubMass;
  vec3d hubInertiaBox;
};

/* 67835 */
struct PIDController
{
  float P;
  float I;
  float D;
  float currentError;
  float integral;
};

/* 67836 */
struct ActiveActuator
{
  float targetTravel;
  PIDController pid;
};

/* 67717 */
struct SuspensionStatus
{
  float travel;
  float damperSpeedMS;
  float bumpStopTravel;
};

/* 67837 */
struct SusDamageDef
{
  SuspDamageData data;
  long double damageAmount;
  long double damageDirection;
  bool isDebug;
  long double lastAmount;
};

/* 67838 */
struct __cppobj Suspension : ISuspension
{
  IRigidBody *carBody;
  IRigidBody *hub;
  vec3d basePosition;
  Car *car;
  bool useActiveActuator;
  DistanceJointODE *joints[5];
  SDWSuspensionData dataRelToWheel;
  SDWSuspensionData dataRelToBody;
  ActiveActuator activeActuator;
  SuspensionStatus status;
  int index;
  PhysicsEngine *physicsEngine;
  long double steerLinkBaseLength;
  long double steerTorque;
  vec3d baseCarSteerPosition;
  float steerAngle;
  SusDamageDef damageData;
};

/* 67842 */
struct ThermalObjectVtbl
{
  void *(__cdecl *__vecDelDtor)(ThermalObject *this, unsigned int);
};

/* 67484 */
struct TriangleVtbl
{
  void *(__cdecl *__vecDelDtor)(Triangle *this, unsigned int);
};

/* 67069 */
struct __declspec(align(8)) ICarControlsProvider
{
  ICarControlsProviderVtbl *vfptr;
  bool ffEnabled;
  float ffFilter;
  bool suppressPenalties;
  bool isAutoclutchNeeded;
  bool needsToPollEveryFrame;
  bool keyboardEnabled;
};

/* 67569 */
struct __cppobj std::allocator<AIStraightData>
{
};

/* 67571 */
struct __cppobj std::_Vector_val<std::_Simple_types<AIStraightData> > : std::_Container_base0
{
  AIStraightData *_Myfirst;
  AIStraightData *_Mylast;
  AIStraightData *_Myend;
};

/* 67572 */
struct __cppobj std::_Compressed_pair<std::allocator<AIStraightData>,std::_Vector_val<std::_Simple_types<AIStraightData> >,1> : std::allocator<AIStraightData>
{
  std::_Vector_val<std::_Simple_types<AIStraightData> > _Myval2;
};

/* 67573 */
struct std::_Vector_alloc<std::_Vec_base_types<AIStraightData,std::allocator<AIStraightData> > >
{
  std::_Compressed_pair<std::allocator<AIStraightData>,std::_Vector_val<std::_Simple_types<AIStraightData> >,1> _Mypair;
};

/* 67574 */
struct __cppobj std::vector<AIStraightData,std::allocator<AIStraightData> > : std::_Vector_alloc<std::_Vec_base_types<AIStraightData,std::allocator<AIStraightData> > >
{
};

/* 67577 */
struct __cppobj std::allocator<SplinePoint>
{
};

/* 67579 */
struct __cppobj std::_Vector_val<std::_Simple_types<SplinePoint> > : std::_Container_base0
{
  SplinePoint *_Myfirst;
  SplinePoint *_Mylast;
  SplinePoint *_Myend;
};

/* 67580 */
struct __cppobj std::_Compressed_pair<std::allocator<SplinePoint>,std::_Vector_val<std::_Simple_types<SplinePoint> >,1> : std::allocator<SplinePoint>
{
  std::_Vector_val<std::_Simple_types<SplinePoint> > _Myval2;
};

/* 67581 */
struct std::_Vector_alloc<std::_Vec_base_types<SplinePoint,std::allocator<SplinePoint> > >
{
  std::_Compressed_pair<std::allocator<SplinePoint>,std::_Vector_val<std::_Simple_types<SplinePoint> >,1> _Mypair;
};

/* 67582 */
struct __cppobj std::vector<SplinePoint,std::allocator<SplinePoint> > : std::_Vector_alloc<std::_Vec_base_types<SplinePoint,std::allocator<SplinePoint> > >
{
};

/* 67575 */
struct __declspec(align(8)) Spline
{
  SplineVtbl *vfptr;
  std::vector<SplinePoint,std::allocator<SplinePoint> > points;
  long double m_length;
  bool m_closed;
};

/* 67583 */
struct __cppobj std::allocator<std::vector<GridElement,std::allocator<GridElement> > >
{
};

/* 67590 */
struct __cppobj std::_Vector_val<std::_Simple_types<std::vector<GridElement,std::allocator<GridElement> > > > : std::_Container_base0
{
  std::vector<GridElement,std::allocator<GridElement> > *_Myfirst;
  std::vector<GridElement,std::allocator<GridElement> > *_Mylast;
  std::vector<GridElement,std::allocator<GridElement> > *_Myend;
};

/* 67591 */
struct __cppobj std::_Compressed_pair<std::allocator<std::vector<GridElement,std::allocator<GridElement> > >,std::_Vector_val<std::_Simple_types<std::vector<GridElement,std::allocator<GridElement> > > >,1> : std::allocator<std::vector<GridElement,std::allocator<GridElement> > >
{
  std::_Vector_val<std::_Simple_types<std::vector<GridElement,std::allocator<GridElement> > > > _Myval2;
};

/* 67592 */
struct std::_Vector_alloc<std::_Vec_base_types<std::vector<GridElement,std::allocator<GridElement> >,std::allocator<std::vector<GridElement,std::allocator<GridElement> > > > >
{
  std::_Compressed_pair<std::allocator<std::vector<GridElement,std::allocator<GridElement> > >,std::_Vector_val<std::_Simple_types<std::vector<GridElement,std::allocator<GridElement> > > >,1> _Mypair;
};

/* 67593 */
struct __cppobj std::vector<std::vector<GridElement,std::allocator<GridElement> >,std::allocator<std::vector<GridElement,std::allocator<GridElement> > > > : std::_Vector_alloc<std::_Vec_base_types<std::vector<GridElement,std::allocator<GridElement> >,std::allocator<std::vector<GridElement,std::allocator<GridElement> > > > >
{
};

/* 67594 */
struct GridData
{
  vec3f maxExtreme;
  vec3f minExtreme;
  float samplingDensity;
  unsigned int neighborsConsideredNumber;
};

/* 1896 */
enum eAISplineInterpolationMode
{
  eLinear = 0x0,
  eBezier = 0x1,
  eCatmulRom = 0x2,
  eBSpline = 0x3,
  eNThBezier = 0x4,
};

/* 67595 */
struct __cppobj __declspec(align(8)) InterpolatingSpline : Spline
{
  std::vector<std::vector<GridElement,std::allocator<GridElement> >,std::allocator<std::vector<GridElement,std::allocator<GridElement> > > > grid;
  bool hasData;
  GridData gridData;
  bool isSplineReady;
  eAISplineInterpolationMode interpolationMode;
};

/* 67596 */
struct __cppobj std::allocator<AISplinePayload>
{
};

/* 67598 */
struct __cppobj std::_Vector_val<std::_Simple_types<AISplinePayload> > : std::_Container_base0
{
  AISplinePayload *_Myfirst;
  AISplinePayload *_Mylast;
  AISplinePayload *_Myend;
};

/* 67599 */
struct __cppobj std::_Compressed_pair<std::allocator<AISplinePayload>,std::_Vector_val<std::_Simple_types<AISplinePayload> >,1> : std::allocator<AISplinePayload>
{
  std::_Vector_val<std::_Simple_types<AISplinePayload> > _Myval2;
};

/* 67600 */
struct std::_Vector_alloc<std::_Vec_base_types<AISplinePayload,std::allocator<AISplinePayload> > >
{
  std::_Compressed_pair<std::allocator<AISplinePayload>,std::_Vector_val<std::_Simple_types<AISplinePayload> >,1> _Mypair;
};

/* 67601 */
struct __cppobj std::vector<AISplinePayload,std::allocator<AISplinePayload> > : std::_Vector_alloc<std::_Vec_base_types<AISplinePayload,std::allocator<AISplinePayload> > >
{
};

/* 67567 */
struct __declspec(align(8)) AISpline
{
  AISplineVtbl *vfptr;
  unsigned int lapTime;
  std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > filename;
  int version;
  std::vector<AIStraightData,std::allocator<AIStraightData> > straights;
  InterpolatingSpline spline;
  std::vector<AISplinePayload,std::allocator<AISplinePayload> > payloads;
  float straightFactor;
};

/* 67159 */
struct std::_Func_base<void,double const &>
{
  std::_Func_base<void,double const &>Vtbl *vfptr;
};

/* 67501 */
struct std::_Func_base<void,SessionInfo const &>
{
  std::_Func_base<void,SessionInfo const &>Vtbl *vfptr;
};

/* 67515 */
struct DirectInputVtbl
{
  void *(__cdecl *__vecDelDtor)(DirectInput *this, unsigned int);
};

/* 20964 */
struct _GUID
{
  unsigned int Data1;
  unsigned __int16 Data2;
  unsigned __int16 Data3;
  char Data4[8];
};

/* 38010 */
struct IUnknown
{
  IUnknownVtbl *vfptr;
};

/* 67521 */
struct __cppobj IDirectInput8W : IUnknown
{
};

/* 67527 */
struct __declspec(align(8)) InputDevice
{
  DirectInput *directInput;
  THMRS *thmrs;
  bool isUsingFF;
  IDirectInputEffect *lpFFConstantForce;
  IDirectInputDevice8W *lpDirectInputDevice;
  IDirectInputEffect *lpFFDamp;
  bool isFFStarted;
  bool isDamperStarted;
  int lastMagnitude;
  float lastDampGain;
  long double ledBlinkTime;
  bool isNormalized;
  int lightCounter;
  int damperStartCounter;
};

/* 67544 */
struct std::pair<unsigned int const ,dxSpace *>
{
  const unsigned int first;
  struct dxSpace *second;
};

/* 67543 */
struct std::_Tree_node<std::pair<unsigned int const ,dxSpace *>,void *>
{
  std::_Tree_node<std::pair<unsigned int const ,dxSpace *>,void *> *_Left;
  std::_Tree_node<std::pair<unsigned int const ,dxSpace *>,void *> *_Parent;
  std::_Tree_node<std::pair<unsigned int const ,dxSpace *>,void *> *_Right;
  char _Color;
  char _Isnil;
  std::pair<unsigned int const ,dxSpace *> _Myval;
};

/* 67482 */
struct IRayTrackCollisionProviderVtbl
{
  void *(__cdecl *__vecDelDtor)(IRayTrackCollisionProvider *this, unsigned int);
  bool (__cdecl *rayCast)(IRayTrackCollisionProvider *this, vec3d *, vec3d *, RayCastResult *, long double);
  bool (__cdecl *rayCastWithRayCaster)(IRayTrackCollisionProvider *this, vec3d *, vec3d *, RayCastResult *, long double, IRayCaster *);
};

/* 67172 */
struct ICollisionObject
{
  ICollisionObjectVtbl *vfptr;
};

/* 67558 */
struct TimeLine
{
  TimeLineVtbl *vfptr;
  vec3d points[2];
  int id;
  long double length;
  vec3d planeNormal;
};

/* 67565 */
struct AISplineRecorder
{
  AISplineRecorderVtbl *vfptr;
  bool isActive;
  AISpline splineCurrent;
  AISpline bestLapSpline;
  AISpline pitLaneSpline;
  PhysicsEngine *physicsEngine;
  float recordingStep;
  bool isSaveNeeded;
  Track *track;
  Car *car;
  bool isRecordingPitlane;
  float pitLaneSplineAttachPoint;
};

/* 67607 */
struct TrackGene
{
  float push;
};

/* 67616 */
struct IDebugVisualizerVtbl
{
  void *(__cdecl *__vecDelDtor)(IDebugVisualizer *this, unsigned int);
  void (__cdecl *addLine)(IDebugVisualizer *this, DebugLine *, int);
  void (__cdecl *addString)(IDebugVisualizer *this, DebugString *, int);
};

/* 67619 */
struct ThreadPoolVtbl
{
  void *(__cdecl *__vecDelDtor)(ThreadPool *this, unsigned int);
};

/* 58284 */
struct std::_Container_proxy
{
  std::_Container_base12 *_Mycont;
  std::_Iterator_base12 *_Myfirstiter;
};

/* 67632 */
struct Task
{
  volatile bool isDone;
  std::function<void __cdecl(void)> function;
};

/* 42 */
enum EAcceptConnection::Type
{
  Reject = 0x0,
  Accept = 0x1,
  Ignore = 0x2,
};

/* 5647 */
struct FNetworkNotifyVtbl
{
  EAcceptConnection::Type (__cdecl *NotifyAcceptingConnection)(FNetworkNotify *this);
  void (__cdecl *NotifyAcceptedConnection)(FNetworkNotify *this, UNetConnection *);
  bool (__cdecl *NotifyAcceptingChannel)(FNetworkNotify *this, UChannel *);
  void (__cdecl *NotifyControlMessage)(FNetworkNotify *this, UNetConnection *, char, FInBunch *);
};

/* 5660 */
struct TArray<UModelComponent *,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 5665 */
struct TArray<UNavigationDataChunk *,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 4834 */
struct TArray<FGuid,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 5680 */
struct TArray<FPrecomputedVisibilityBucket,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 5681 */
struct FPrecomputedVisibilityHandler
{
  FVector2D PrecomputedVisibilityCellBucketOriginXY;
  float PrecomputedVisibilityCellSizeXY;
  float PrecomputedVisibilityCellSizeZ;
  int PrecomputedVisibilityCellBucketSizeXY;
  int PrecomputedVisibilityNumCellBuckets;
  int Id;
  TArray<FPrecomputedVisibilityBucket,FDefaultAllocator> PrecomputedVisibilityCellBuckets;
};

/* 4025 */
struct __declspec(align(4)) FBox
{
  FVector Min;
  FVector Max;
  char IsValid;
};

/* 5363 */
struct TArray<FColor,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 5682 */
struct FPrecomputedVolumeDistanceField
{
  float VolumeMaxDistance;
  FBox VolumeBox;
  int VolumeSizeX;
  int VolumeSizeY;
  int VolumeSizeZ;
  TArray<FColor,FDefaultAllocator> Data;
};

/* 5713 */
struct __cppobj TBaseMulticastDelegate<void,FTransform const &> : FMulticastDelegateBase<FWeakObjectPtr>
{
};

/* 5714 */
struct __cppobj TMulticastDelegate<void,FTransform const &> : TBaseMulticastDelegate<void,FTransform const &>
{
};

/* 5715 */
struct __cppobj TWeakObjectPtr<ALevelBounds,FWeakObjectPtr> : FWeakObjectPtr
{
};

/* 5716 */
struct __cppobj TWeakObjectPtr<AInstancedFoliageActor,FWeakObjectPtr> : FWeakObjectPtr
{
};

/* 5717 */
struct __cppobj ULevel::FLevelBoundsActorUpdatedEvent : TBaseMulticastDelegate<void>
{
};

/* 5852 */
struct TArray<FPendingAutoReceiveInputActor,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 5853 */
struct TArray<FReplicatedStaticActorDestructionInfo,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 5848 */
struct __cppobj ULevel : UObject, IInterface_AssetUserData
{
  FURL URL;
  TArray<AActor *,FDefaultAllocator> Actors;
  TArray<AActor *,FDefaultAllocator> ActorsForGC;
  UWorld *OwningWorld;
  UModel *Model;
  TArray<UModelComponent *,FDefaultAllocator> ModelComponents;
  ULevelActorContainer *ActorCluster;
  int NumTextureStreamingUnbuiltComponents;
  int NumTextureStreamingDirtyResources;
  ALevelScriptActor *LevelScriptActor;
  ANavigationObjectBase *NavListStart;
  ANavigationObjectBase *NavListEnd;
  TArray<UNavigationDataChunk *,FDefaultAllocator> NavDataChunks;
  float LightmapTotalSize;
  float ShadowmapTotalSize;
  TArray<FVector,FDefaultAllocator> StaticNavigableGeometry;
  TArray<FGuid,FDefaultAllocator> StreamingTextureGuids;
  FTickTaskLevel *TickTaskLevel;
  FPrecomputedLightVolume *PrecomputedLightVolume;
  FPrecomputedVolumetricLightmap *PrecomputedVolumetricLightmap;
  FPrecomputedVisibilityHandler PrecomputedVisibilityHandler;
  FPrecomputedVolumeDistanceField PrecomputedVolumeDistanceField;
  FRenderCommandFence RemoveFromSceneFence;
  bool bIsLightingScenario;
  FGuid LevelBuildDataId;
  UMapBuildDataRegistry *MapBuildData;
  FIntVector LightBuildLevelOffset;
  __int8 bAreComponentsCurrentlyRegistered : 1;
  __int8 bGeometryDirtyForLighting : 1;
  __int8 bTextureStreamingRotationChanged : 1;
  __int8 bStaticComponentsRegisteredInStreamingManager : 1;
  __int8 bIsVisible : 1;
  __int8 bAlreadyMovedActors : 1;
  __int8 bAlreadyShiftedActors : 1;
  __int8 bAlreadyUpdatedComponents : 1;
  __int8 bAlreadyAssociatedStreamableResources : 1;
  __int8 bAlreadyInitializedNetworkActors : 1;
  __int8 bAlreadyRoutedActorInitialize : 1;
  __int8 bAlreadySortedActorList : 1;
  __int8 bIsAssociatingLevel : 1;
  __int8 bRequireFullVisibilityToRender : 1;
  __int8 bClientOnlyVisible : 1;
  __int8 bWasDuplicatedForPIE : 1;
  __int8 bIsBeingRemoved : 1;
  __int8 bHasRerunConstructionScripts : 1;
  __int8 bActorClusterCreated : 1;
  char bHasCurrentActorCalledPreRegister;
  int CurrentActorIndexForUpdateComponents;
  int CurrentActorIndexForUnregisterComponents;
  TMulticastDelegate<void,FTransform const &> OnApplyLevelTransform;
  TWeakObjectPtr<ALevelBounds,FWeakObjectPtr> LevelBoundsActor;
  TWeakObjectPtr<AInstancedFoliageActor,FWeakObjectPtr> InstancedFoliageActor;
  ULevel::FLevelBoundsActorUpdatedEvent LevelBoundsActorUpdatedEvent;
  AWorldSettings *WorldSettings;
  FLevelCollection *CachedLevelCollection;
  TArray<UAssetUserData *,FDefaultAllocator> AssetUserData;
  TArray<FPendingAutoReceiveInputActor,FDefaultAllocator> PendingAutoReceiveInputActors;
  TArray<FReplicatedStaticActorDestructionInfo,FDefaultAllocator> DestroyedReplicatedStaticActors;
};

/* 5494 */
struct TArray<UNetConnection *,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 5495 */
struct __cppobj TDefaultDelete<PacketHandler>
{
};

/* 5516 */
struct __cppobj TUniquePtr<PacketHandler,TDefaultDelete<PacketHandler> > : TDefaultDelete<PacketHandler>
{
  PacketHandler *Ptr;
};

/* 5519 */
struct TWeakPtr<StatelessConnectHandlerComponent,0>
{
  StatelessConnectHandlerComponent *Object;
  SharedPointerInternals::FWeakReferencer<0> WeakReferenceCount;
};

/* 5506 */
struct TSharedPtr<IAnalyticsProvider,0>
{
  IAnalyticsProvider *Object;
  SharedPointerInternals::FSharedReferencer<0> SharedReferenceCount;
};

/* 5556 */
struct TSharedPtr<FNetGUIDCache,0>
{
  FNetGUIDCache *Object;
  SharedPointerInternals::FSharedReferencer<0> SharedReferenceCount;
};

/* 5563 */
struct TSharedPtr<FClassNetCacheMgr,0>
{
  FClassNetCacheMgr *Object;
  SharedPointerInternals::FSharedReferencer<0> SharedReferenceCount;
};

/* 5564 */
struct TArray<TWeakObjectPtr<AActor,FWeakObjectPtr>,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 5565 */
struct TSparseArray<TSetElement<TTuple<FNetworkGUID,TUniquePtr<FActorDestructionInfo,TDefaultDelete<FActorDestructionInfo> > > >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<24,8> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 5566 */
struct __declspec(align(8)) TSet<TTuple<FNetworkGUID,TUniquePtr<FActorDestructionInfo,TDefaultDelete<FActorDestructionInfo> > >,TDefaultMapHashableKeyFuncs<FNetworkGUID,TUniquePtr<FActorDestructionInfo,TDefaultDelete<FActorDestructionInfo> >,0>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<TTuple<FNetworkGUID,TUniquePtr<FActorDestructionInfo,TDefaultDelete<FActorDestructionInfo> > > >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 5567 */
struct TMapBase<FNetworkGUID,TUniquePtr<FActorDestructionInfo,TDefaultDelete<FActorDestructionInfo> >,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FNetworkGUID,TUniquePtr<FActorDestructionInfo,TDefaultDelete<FActorDestructionInfo> >,0> >
{
  TSet<TTuple<FNetworkGUID,TUniquePtr<FActorDestructionInfo,TDefaultDelete<FActorDestructionInfo> > >,TDefaultMapHashableKeyFuncs<FNetworkGUID,TUniquePtr<FActorDestructionInfo,TDefaultDelete<FActorDestructionInfo> >,0>,FDefaultSetAllocator> Pairs;
};

/* 5568 */
struct __cppobj TSortableMapBase<FNetworkGUID,TUniquePtr<FActorDestructionInfo,TDefaultDelete<FActorDestructionInfo> >,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FNetworkGUID,TUniquePtr<FActorDestructionInfo,TDefaultDelete<FActorDestructionInfo> >,0> > : TMapBase<FNetworkGUID,TUniquePtr<FActorDestructionInfo,TDefaultDelete<FActorDestructionInfo> >,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FNetworkGUID,TUniquePtr<FActorDestructionInfo,TDefaultDelete<FActorDestructionInfo> >,0> >
{
};

/* 5569 */
struct __cppobj TMap<FNetworkGUID,TUniquePtr<FActorDestructionInfo,TDefaultDelete<FActorDestructionInfo> >,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FNetworkGUID,TUniquePtr<FActorDestructionInfo,TDefaultDelete<FActorDestructionInfo> >,0> > : TSortableMapBase<FNetworkGUID,TUniquePtr<FActorDestructionInfo,TDefaultDelete<FActorDestructionInfo> >,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FNetworkGUID,TUniquePtr<FActorDestructionInfo,TDefaultDelete<FActorDestructionInfo> >,0> >
{
};

/* 4583 */
struct TSparseArray<TSetElement<TTuple<FName,FName> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<24,8> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 4584 */
struct __declspec(align(8)) TSet<TTuple<FName,FName>,TDefaultMapHashableKeyFuncs<FName,FName,0>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<TTuple<FName,FName> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 4585 */
struct TMapBase<FName,FName,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,FName,0> >
{
  TSet<TTuple<FName,FName>,TDefaultMapHashableKeyFuncs<FName,FName,0>,FDefaultSetAllocator> Pairs;
};

/* 4586 */
struct __cppobj TSortableMapBase<FName,FName,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,FName,0> > : TMapBase<FName,FName,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,FName,0> >
{
};

/* 4587 */
struct __cppobj TMap<FName,FName,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,FName,0> > : TSortableMapBase<FName,FName,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,FName,0> >
{
};

/* 5570 */
struct TSparseArray<TSetElement<TTuple<TWeakObjectPtr<UObject,FWeakObjectPtr>,TSharedPtr<FRepChangedPropertyTracker,0> > >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<32,8> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 5571 */
struct __declspec(align(8)) TSet<TTuple<TWeakObjectPtr<UObject,FWeakObjectPtr>,TSharedPtr<FRepChangedPropertyTracker,0> >,TDefaultMapHashableKeyFuncs<TWeakObjectPtr<UObject,FWeakObjectPtr>,TSharedPtr<FRepChangedPropertyTracker,0>,0>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<TTuple<TWeakObjectPtr<UObject,FWeakObjectPtr>,TSharedPtr<FRepChangedPropertyTracker,0> > >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 5572 */
struct TMapBase<TWeakObjectPtr<UObject,FWeakObjectPtr>,TSharedPtr<FRepChangedPropertyTracker,0>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<TWeakObjectPtr<UObject,FWeakObjectPtr>,TSharedPtr<FRepChangedPropertyTracker,0>,0> >
{
  TSet<TTuple<TWeakObjectPtr<UObject,FWeakObjectPtr>,TSharedPtr<FRepChangedPropertyTracker,0> >,TDefaultMapHashableKeyFuncs<TWeakObjectPtr<UObject,FWeakObjectPtr>,TSharedPtr<FRepChangedPropertyTracker,0>,0>,FDefaultSetAllocator> Pairs;
};

/* 5573 */
struct __cppobj TSortableMapBase<TWeakObjectPtr<UObject,FWeakObjectPtr>,TSharedPtr<FRepChangedPropertyTracker,0>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<TWeakObjectPtr<UObject,FWeakObjectPtr>,TSharedPtr<FRepChangedPropertyTracker,0>,0> > : TMapBase<TWeakObjectPtr<UObject,FWeakObjectPtr>,TSharedPtr<FRepChangedPropertyTracker,0>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<TWeakObjectPtr<UObject,FWeakObjectPtr>,TSharedPtr<FRepChangedPropertyTracker,0>,0> >
{
};

/* 5574 */
struct __cppobj TMap<TWeakObjectPtr<UObject,FWeakObjectPtr>,TSharedPtr<FRepChangedPropertyTracker,0>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<TWeakObjectPtr<UObject,FWeakObjectPtr>,TSharedPtr<FRepChangedPropertyTracker,0>,0> > : TSortableMapBase<TWeakObjectPtr<UObject,FWeakObjectPtr>,TSharedPtr<FRepChangedPropertyTracker,0>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<TWeakObjectPtr<UObject,FWeakObjectPtr>,TSharedPtr<FRepChangedPropertyTracker,0>,0> >
{
};

/* 5575 */
struct TSparseArray<TSetElement<TTuple<TWeakObjectPtr<UObject,FWeakObjectPtr>,TSharedPtr<FRepLayout,0> > >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<32,8> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 5576 */
struct __declspec(align(8)) TSet<TTuple<TWeakObjectPtr<UObject,FWeakObjectPtr>,TSharedPtr<FRepLayout,0> >,TDefaultMapHashableKeyFuncs<TWeakObjectPtr<UObject,FWeakObjectPtr>,TSharedPtr<FRepLayout,0>,0>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<TTuple<TWeakObjectPtr<UObject,FWeakObjectPtr>,TSharedPtr<FRepLayout,0> > >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 5577 */
struct TMapBase<TWeakObjectPtr<UObject,FWeakObjectPtr>,TSharedPtr<FRepLayout,0>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<TWeakObjectPtr<UObject,FWeakObjectPtr>,TSharedPtr<FRepLayout,0>,0> >
{
  TSet<TTuple<TWeakObjectPtr<UObject,FWeakObjectPtr>,TSharedPtr<FRepLayout,0> >,TDefaultMapHashableKeyFuncs<TWeakObjectPtr<UObject,FWeakObjectPtr>,TSharedPtr<FRepLayout,0>,0>,FDefaultSetAllocator> Pairs;
};

/* 5578 */
struct __cppobj TSortableMapBase<TWeakObjectPtr<UObject,FWeakObjectPtr>,TSharedPtr<FRepLayout,0>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<TWeakObjectPtr<UObject,FWeakObjectPtr>,TSharedPtr<FRepLayout,0>,0> > : TMapBase<TWeakObjectPtr<UObject,FWeakObjectPtr>,TSharedPtr<FRepLayout,0>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<TWeakObjectPtr<UObject,FWeakObjectPtr>,TSharedPtr<FRepLayout,0>,0> >
{
};

/* 5579 */
struct __cppobj TMap<TWeakObjectPtr<UObject,FWeakObjectPtr>,TSharedPtr<FRepLayout,0>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<TWeakObjectPtr<UObject,FWeakObjectPtr>,TSharedPtr<FRepLayout,0>,0> > : TSortableMapBase<TWeakObjectPtr<UObject,FWeakObjectPtr>,TSharedPtr<FRepLayout,0>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<TWeakObjectPtr<UObject,FWeakObjectPtr>,TSharedPtr<FRepLayout,0>,0> >
{
};

/* 5580 */
struct TSparseArray<TSetElement<TTuple<TWeakObjectPtr<UObject,FWeakObjectPtr>,TSharedPtr<FReplicationChangelistMgr,0> > >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<32,8> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 5581 */
struct __declspec(align(8)) TSet<TTuple<TWeakObjectPtr<UObject,FWeakObjectPtr>,TSharedPtr<FReplicationChangelistMgr,0> >,TDefaultMapHashableKeyFuncs<TWeakObjectPtr<UObject,FWeakObjectPtr>,TSharedPtr<FReplicationChangelistMgr,0>,0>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<TTuple<TWeakObjectPtr<UObject,FWeakObjectPtr>,TSharedPtr<FReplicationChangelistMgr,0> > >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 5582 */
struct TMapBase<TWeakObjectPtr<UObject,FWeakObjectPtr>,TSharedPtr<FReplicationChangelistMgr,0>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<TWeakObjectPtr<UObject,FWeakObjectPtr>,TSharedPtr<FReplicationChangelistMgr,0>,0> >
{
  TSet<TTuple<TWeakObjectPtr<UObject,FWeakObjectPtr>,TSharedPtr<FReplicationChangelistMgr,0> >,TDefaultMapHashableKeyFuncs<TWeakObjectPtr<UObject,FWeakObjectPtr>,TSharedPtr<FReplicationChangelistMgr,0>,0>,FDefaultSetAllocator> Pairs;
};

/* 5583 */
struct __cppobj TSortableMapBase<TWeakObjectPtr<UObject,FWeakObjectPtr>,TSharedPtr<FReplicationChangelistMgr,0>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<TWeakObjectPtr<UObject,FWeakObjectPtr>,TSharedPtr<FReplicationChangelistMgr,0>,0> > : TMapBase<TWeakObjectPtr<UObject,FWeakObjectPtr>,TSharedPtr<FReplicationChangelistMgr,0>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<TWeakObjectPtr<UObject,FWeakObjectPtr>,TSharedPtr<FReplicationChangelistMgr,0>,0> >
{
};

/* 5584 */
struct __cppobj TMap<TWeakObjectPtr<UObject,FWeakObjectPtr>,TSharedPtr<FReplicationChangelistMgr,0>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<TWeakObjectPtr<UObject,FWeakObjectPtr>,TSharedPtr<FReplicationChangelistMgr,0>,0> > : TSortableMapBase<TWeakObjectPtr<UObject,FWeakObjectPtr>,TSharedPtr<FReplicationChangelistMgr,0>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<TWeakObjectPtr<UObject,FWeakObjectPtr>,TSharedPtr<FReplicationChangelistMgr,0>,0> >
{
};

/* 4693 */
struct TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<96,8> >,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 5585 */
struct TSparseArray<TSetElement<TTuple<FNetworkGUID,TSet<FObjectReplicator *,DefaultKeyFuncs<FObjectReplicator *,0>,FDefaultSetAllocator> > >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<96,8> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 5586 */
struct __declspec(align(8)) TSet<TTuple<FNetworkGUID,TSet<FObjectReplicator *,DefaultKeyFuncs<FObjectReplicator *,0>,FDefaultSetAllocator> >,TDefaultMapHashableKeyFuncs<FNetworkGUID,TSet<FObjectReplicator *,DefaultKeyFuncs<FObjectReplicator *,0>,FDefaultSetAllocator>,0>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<TTuple<FNetworkGUID,TSet<FObjectReplicator *,DefaultKeyFuncs<FObjectReplicator *,0>,FDefaultSetAllocator> > >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 5587 */
struct TMapBase<FNetworkGUID,TSet<FObjectReplicator *,DefaultKeyFuncs<FObjectReplicator *,0>,FDefaultSetAllocator>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FNetworkGUID,TSet<FObjectReplicator *,DefaultKeyFuncs<FObjectReplicator *,0>,FDefaultSetAllocator>,0> >
{
  TSet<TTuple<FNetworkGUID,TSet<FObjectReplicator *,DefaultKeyFuncs<FObjectReplicator *,0>,FDefaultSetAllocator> >,TDefaultMapHashableKeyFuncs<FNetworkGUID,TSet<FObjectReplicator *,DefaultKeyFuncs<FObjectReplicator *,0>,FDefaultSetAllocator>,0>,FDefaultSetAllocator> Pairs;
};

/* 5588 */
struct __cppobj TSortableMapBase<FNetworkGUID,TSet<FObjectReplicator *,DefaultKeyFuncs<FObjectReplicator *,0>,FDefaultSetAllocator>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FNetworkGUID,TSet<FObjectReplicator *,DefaultKeyFuncs<FObjectReplicator *,0>,FDefaultSetAllocator>,0> > : TMapBase<FNetworkGUID,TSet<FObjectReplicator *,DefaultKeyFuncs<FObjectReplicator *,0>,FDefaultSetAllocator>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FNetworkGUID,TSet<FObjectReplicator *,DefaultKeyFuncs<FObjectReplicator *,0>,FDefaultSetAllocator>,0> >
{
};

/* 5589 */
struct __cppobj TMap<FNetworkGUID,TSet<FObjectReplicator *,DefaultKeyFuncs<FObjectReplicator *,0>,FDefaultSetAllocator>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FNetworkGUID,TSet<FObjectReplicator *,DefaultKeyFuncs<FObjectReplicator *,0>,FDefaultSetAllocator>,0> > : TSortableMapBase<FNetworkGUID,TSet<FObjectReplicator *,DefaultKeyFuncs<FObjectReplicator *,0>,FDefaultSetAllocator>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FNetworkGUID,TSet<FObjectReplicator *,DefaultKeyFuncs<FObjectReplicator *,0>,FDefaultSetAllocator>,0> >
{
};

/* 5590 */
struct TSparseArray<TSetElement<FObjectReplicator *>,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<16,8> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 5591 */
struct __declspec(align(8)) TSet<FObjectReplicator *,DefaultKeyFuncs<FObjectReplicator *,0>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<FObjectReplicator *>,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 5601 */
struct TSharedPtr<FNetworkObjectList,0>
{
  FNetworkObjectList *Object;
  SharedPointerInternals::FSharedReferencer<0> SharedReferenceCount;
};

/* 169 */
enum ENetworkLagState::Type
{
  NotLagging = 0x0,
  Lagging = 0x1,
};

/* 5517 */
struct __cppobj UNetDriver : UObject, FExec
{
  FString NetConnectionClassName;
  FString ReplicationDriverClassName;
  int MaxDownloadSize;
  unsigned __int32 bClampListenServerTickRate : 1;
  int NetServerMaxTickRate;
  int MaxInternetClientRate;
  int MaxClientRate;
  float ServerTravelPause;
  float SpawnPrioritySeconds;
  float RelevantTimeout;
  float KeepAliveTime;
  float InitialConnectTimeout;
  float ConnectionTimeout;
  float TimeoutMultiplierForUnoptimizedBuilds;
  bool bNoTimeouts;
  UNetConnection *ServerConnection;
  TArray<UNetConnection *,FDefaultAllocator> ClientConnections;
  TUniquePtr<PacketHandler,TDefaultDelete<PacketHandler> > ConnectionlessHandler;
  TWeakPtr<StatelessConnectHandlerComponent,0> StatelessConnectComponent;
  TSharedPtr<IAnalyticsProvider,0> AnalyticsProvider;
  UWorld *World;
  UPackage *WorldPackage;
  TSharedPtr<FNetGUIDCache,0> GuidCache;
  TSharedPtr<FClassNetCacheMgr,0> NetCache;
  UClass *NetConnectionClass;
  UClass *ReplicationDriverClass;
  UProperty *RoleProperty;
  UProperty *RemoteRoleProperty;
  FName NetDriverName;
  UClass *ChannelClasses[8];
  FNetworkNotify *Notify;
  float Time;
  long double LastTickDispatchRealtime;
  bool bIsPeer;
  bool ProfileStats;
  bool bSkipLocalStats;
  int SendCycles;
  unsigned int InBytesPerSecond;
  unsigned int OutBytesPerSecond;
  unsigned int InBytes;
  unsigned int OutBytes;
  unsigned int NetGUIDOutBytes;
  unsigned int NetGUIDInBytes;
  unsigned int InPackets;
  unsigned int OutPackets;
  unsigned int InBunches;
  unsigned int OutBunches;
  unsigned int InTotalBunches;
  unsigned int OutTotalBunches;
  unsigned int InPacketsLost;
  unsigned int OutPacketsLost;
  unsigned int InOutOfOrderPackets;
  unsigned int OutOutOfOrderPackets;
  unsigned int VoicePacketsSent;
  unsigned int VoiceBytesSent;
  unsigned int VoicePacketsRecv;
  unsigned int VoiceBytesRecv;
  unsigned int VoiceInPercent;
  unsigned int VoiceOutPercent;
  long double StatUpdateTime;
  float StatPeriod;
  bool bCollectNetStats;
  long double LastCleanupTime;
  bool bIsStandbyCheckingEnabled;
  bool bHasStandbyCheatTriggered;
  float StandbyRxCheatTime;
  float StandbyTxCheatTime;
  int BadPingThreshold;
  float PercentMissingForRxStandby;
  float PercentMissingForTxStandby;
  float PercentForBadPing;
  float JoinInProgressStandbyWaitTime;
  int NetTag;
  bool DebugRelevantActors;
  TArray<TWeakObjectPtr<AActor,FWeakObjectPtr>,FDefaultAllocator> LastPrioritizedActors;
  TArray<TWeakObjectPtr<AActor,FWeakObjectPtr>,FDefaultAllocator> LastRelevantActors;
  TArray<TWeakObjectPtr<AActor,FWeakObjectPtr>,FDefaultAllocator> LastSentActors;
  TArray<TWeakObjectPtr<AActor,FWeakObjectPtr>,FDefaultAllocator> LastNonRelevantActors;
  TMap<FNetworkGUID,TUniquePtr<FActorDestructionInfo,TDefaultDelete<FActorDestructionInfo> >,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FNetworkGUID,TUniquePtr<FActorDestructionInfo,TDefaultDelete<FActorDestructionInfo> >,0> > DestroyedStartupOrDormantActors;
  TMap<FName,FName,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,FName,0> > RenamedStartupActors;
  TMap<TWeakObjectPtr<UObject,FWeakObjectPtr>,TSharedPtr<FRepChangedPropertyTracker,0>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<TWeakObjectPtr<UObject,FWeakObjectPtr>,TSharedPtr<FRepChangedPropertyTracker,0>,0> > RepChangedPropertyTrackerMap;
  unsigned int ReplicationFrame;
  TMap<TWeakObjectPtr<UObject,FWeakObjectPtr>,TSharedPtr<FRepLayout,0>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<TWeakObjectPtr<UObject,FWeakObjectPtr>,TSharedPtr<FRepLayout,0>,0> > RepLayoutMap;
  TMap<TWeakObjectPtr<UObject,FWeakObjectPtr>,TSharedPtr<FReplicationChangelistMgr,0>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<TWeakObjectPtr<UObject,FWeakObjectPtr>,TSharedPtr<FReplicationChangelistMgr,0>,0> > ReplicationChangeListMap;
  TMap<FNetworkGUID,TSet<FObjectReplicator *,DefaultKeyFuncs<FObjectReplicator *,0>,FDefaultSetAllocator>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FNetworkGUID,TSet<FObjectReplicator *,DefaultKeyFuncs<FObjectReplicator *,0>,FDefaultSetAllocator>,0> > GuidToReplicatorMap;
  int TotalTrackedGuidMemoryBytes;
  TSet<FObjectReplicator *,DefaultKeyFuncs<FObjectReplicator *,0>,FDefaultSetAllocator> UnmappedReplicators;
  TSet<FObjectReplicator *,DefaultKeyFuncs<FObjectReplicator *,0>,FDefaultSetAllocator> AllOwnedReplicators;
  FDelegateHandle TickDispatchDelegateHandle;
  FDelegateHandle TickFlushDelegateHandle;
  FDelegateHandle PostTickFlushDelegateHandle;
  float ProcessQueuedBunchesCurrentFrameMilliseconds;
  FDelegateHandle OnLevelRemovedFromWorldHandle;
  FDelegateHandle OnLevelAddedToWorldHandle;
  UReplicationDriver *ReplicationDriver;
  TSharedPtr<FNetworkObjectList,0> NetworkObjects;
  ENetworkLagState::Type LagState;
  int DuplicateLevelID;
};

/* 6843 */
struct TEnumAsByte<enum ESceneDepthPriorityGroup>
{
  char Value;
};

/* 6844 */
struct TEnumAsByte<enum EIndirectLightingCacheQuality>
{
  char Value;
};

/* 6845 */
struct TEnumAsByte<enum EHasCustomNavigableGeometry::Type>
{
  char Value;
};

/* 6846 */
struct TEnumAsByte<enum ECanBeCharacterBase>
{
  char Value;
};

/* 6122 */
struct FLightingChannels
{
  __int8 bChannel0 : 1;
  __int8 bChannel1 : 1;
  __int8 bChannel2 : 1;
};

/* 6129 */
struct FPrimitiveComponentId
{
  unsigned int PrimIDValue;
};

/* 6847 */
struct TArray<UPrimitiveComponent *,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 6848 */
struct TArray<FOverlapInfo,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 4149 */
struct TEnumAsByte<enum ECollisionChannel>
{
  char Value;
};

/* 4150 */
struct TEnumAsByte<enum ECollisionEnabled::Type>
{
  char Value;
};

/* 4151 */
struct TEnumAsByte<enum EDOFMode::Type>
{
  char Value;
};

/* 4152 */
struct $B2AEC08784305A11A84E592D2124789D
{
  char WorldStatic;
  char WorldDynamic;
  char Pawn;
  char Visibility;
  char Camera;
  char PhysicsBody;
  char Vehicle;
  char Destructible;
  char EngineTraceChannel1;
  char EngineTraceChannel2;
  char EngineTraceChannel3;
  char EngineTraceChannel4;
  char EngineTraceChannel5;
  char EngineTraceChannel6;
  char GameTraceChannel1;
  char GameTraceChannel2;
  char GameTraceChannel3;
  char GameTraceChannel4;
  char GameTraceChannel5;
  char GameTraceChannel6;
  char GameTraceChannel7;
  char GameTraceChannel8;
  char GameTraceChannel9;
  char GameTraceChannel10;
  char GameTraceChannel11;
  char GameTraceChannel12;
  char GameTraceChannel13;
  char GameTraceChannel14;
  char GameTraceChannel15;
  char GameTraceChannel16;
  char GameTraceChannel17;
  char GameTraceChannel18;
};

/* 4153 */
union $52FCD0A3444D4555904672AB68BB3025
{
  $B2AEC08784305A11A84E592D2124789D __s0;
  char EnumArray[32];
};

/* 4154 */
struct FCollisionResponseContainer
{
  $52FCD0A3444D4555904672AB68BB3025 ___u0;
};

/* 4155 */
struct TArray<FResponseChannel,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 4156 */
struct FCollisionResponse
{
  FCollisionResponseContainer ResponseToChannels;
  TArray<FResponseChannel,FDefaultAllocator> ResponseArray;
};

/* 4157 */
struct __cppobj TWeakObjectPtr<UBodySetup,FWeakObjectPtr> : FWeakObjectPtr
{
};

/* 4180 */
struct TSharedPtr<TArray<char,FDefaultAllocator>,0>
{
  TArray<char,FDefaultAllocator> *Object;
  SharedPointerInternals::FSharedReferencer<0> SharedReferenceCount;
};

/* 4181 */
struct __cppobj TWeakObjectPtr<UPrimitiveComponent,FWeakObjectPtr> : FWeakObjectPtr
{
};

/* 4182 */
struct __cppobj TBaseDelegate<TTypeWrapper<void>,FBodyInstance const *,FTransform &> : FDelegateBase
{
};

/* 4183 */
struct __cppobj TBaseDelegate<void,FBodyInstance const *,FTransform &> : TBaseDelegate<TTypeWrapper<void>,FBodyInstance const *,FTransform &>
{
};

/* 4186 */
struct __cppobj TBaseMulticastDelegate<void,FBodyInstance *> : FMulticastDelegateBase<FWeakObjectPtr>
{
};

/* 4187 */
struct __cppobj TMulticastDelegate<void,FBodyInstance *> : TBaseMulticastDelegate<void,FBodyInstance *>
{
};

/* 29 */
enum EVertexColorViewMode::Type
{
  Invalid = 0x0,
  Color = 0x1,
  Alpha = 0x2,
  Red = 0x3,
  Green = 0x4,
  Blue = 0x5,
};

/* 43 */
typedef EVertexColorViewMode::Type EPhysxUserDataType::Type;

/* 4138 */
struct FPhysxUserData
{
  EPhysxUserDataType::Type Type;
  void *Payload;
};

/* 4194 */
struct TSharedPtr<TMap<physx::PxShape *,FBodyInstance::FWeldInfo,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<physx::PxShape *,FBodyInstance::FWeldInfo,0> >,0>
{
  TMap<physx::PxShape *,FBodyInstance::FWeldInfo,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<physx::PxShape *,FBodyInstance::FWeldInfo,0> > *Object;
  SharedPointerInternals::FSharedReferencer<0> SharedReferenceCount;
};

/* 4174 */
struct FBodyInstance
{
  int InstanceBodyIndex;
  __int16 InstanceBoneIndex;
  __int16 SceneIndexSync;
  __int16 SceneIndexAsync;
  TEnumAsByte<enum ECollisionChannel> ObjectType;
  char MaskFilter;
  TEnumAsByte<enum ECollisionEnabled::Type> CollisionEnabled;
  _BYTE CurrentSceneState[1];
  _BYTE SleepFamily[1];
  TEnumAsByte<enum EDOFMode::Type> DOFMode;
  __int8 bUseCCD : 1;
  __int8 bNotifyRigidBodyCollision : 1;
  __int8 bContactModification : 1;
  __int8 bSimulatePhysics : 1;
  __int8 bOverrideMass : 1;
  __int8 bEnableGravity : 1;
  __int8 bAutoWeld : 1;
  __int8 bStartAwake : 1;
  __int8 bGenerateWakeEvents : 1;
  __int8 bUpdateMassWhenScaleChanges : 1;
  __int8 bLockTranslation : 1;
  __int8 bLockRotation : 1;
  __int8 bLockXTranslation : 1;
  __int8 bLockYTranslation : 1;
  __int8 bLockZTranslation : 1;
  __int8 bLockXRotation : 1;
  __int8 bLockYRotation : 1;
  __int8 bLockZRotation : 1;
  __int8 bOverrideMaxAngularVelocity : 1;
  __int8 bUseAsyncScene : 1;
  __int8 bHACK_DisableCollisionResponse : 1;
  __int8 bHACK_DisableSkelComponentFilterOverriding : 1;
  __int8 bOverrideMaxDepenetrationVelocity : 1;
  __int8 bOverrideWalkableSlopeOnInstance : 1;
  __int8 bInterpolateWhenSubStepping : 1;
  __int8 bPendingCollisionProfileSetup : 1;
  __int8 bHasSharedShapes : 1;
  FVector Scale3D;
  FName CollisionProfileName;
  FCollisionResponse CollisionResponses;
  float MaxDepenetrationVelocity;
  float MassInKgOverride;
  TWeakObjectPtr<UBodySetup,FWeakObjectPtr> ExternalCollisionProfileBodySetup;
  float LinearDamping;
  float AngularDamping;
  FVector CustomDOFPlaneNormal;
  FVector COMNudge;
  float MassScale;
  FVector InertiaTensorScale;
  FConstraintInstance *DOFConstraint;
  FBodyInstance *WeldParent;
  FWalkableSlopeOverride WalkableSlopeOverride;
  UPhysicalMaterial *PhysMaterialOverride;
  float MaxAngularVelocity;
  float CustomSleepThresholdMultiplier;
  float StabilizationThresholdMultiplier;
  float PhysicsBlendWeight;
  int PositionSolverIterationCount;
  int VelocitySolverIterationCount;
  physx::PxRigidActor *RigidActorSync;
  physx::PxRigidActor *RigidActorAsync;
  physx::PxAggregate *BodyAggregate;
  TSharedPtr<TArray<char,FDefaultAllocator>,0> CharDebugName;
  TWeakObjectPtr<UPrimitiveComponent,FWeakObjectPtr> OwnerComponent;
  TWeakObjectPtr<UBodySetup,FWeakObjectPtr> BodySetup;
  TBaseDelegate<void,FBodyInstance const *,FTransform &> OnCalculateCustomProjection;
  TMulticastDelegate<void,FBodyInstance *> OnRecalculatedMassProperties;
  FPhysxUserData PhysxUserData;
  TSharedPtr<TMap<physx::PxShape *,FBodyInstance::FWeldInfo,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<physx::PxShape *,FBodyInstance::FWeldInfo,0> >,0> ShapeToBodiesMap;
};

/* 6849 */
struct __cppobj TBaseDynamicMulticastDelegate<FWeakObjectPtr,void,UPrimitiveComponent *,AActor *,UPrimitiveComponent *,FVector,FHitResult const &> : TMulticastScriptDelegate<FWeakObjectPtr>
{
};

/* 6850 */
struct __cppobj FComponentHitSignature : TBaseDynamicMulticastDelegate<FWeakObjectPtr,void,UPrimitiveComponent *,AActor *,UPrimitiveComponent *,FVector,FHitResult const &>
{
};

/* 6851 */
struct __cppobj TBaseDynamicMulticastDelegate<FWeakObjectPtr,void,UPrimitiveComponent *,AActor *,UPrimitiveComponent *,int,bool,FHitResult const &> : TMulticastScriptDelegate<FWeakObjectPtr>
{
};

/* 6852 */
struct __cppobj FComponentBeginOverlapSignature : TBaseDynamicMulticastDelegate<FWeakObjectPtr,void,UPrimitiveComponent *,AActor *,UPrimitiveComponent *,int,bool,FHitResult const &>
{
};

/* 6853 */
struct __cppobj TBaseDynamicMulticastDelegate<FWeakObjectPtr,void,UPrimitiveComponent *,AActor *,UPrimitiveComponent *,int> : TMulticastScriptDelegate<FWeakObjectPtr>
{
};

/* 6854 */
struct __cppobj FComponentEndOverlapSignature : TBaseDynamicMulticastDelegate<FWeakObjectPtr,void,UPrimitiveComponent *,AActor *,UPrimitiveComponent *,int>
{
};

/* 6855 */
struct __cppobj TBaseDynamicMulticastDelegate<FWeakObjectPtr,void,UPrimitiveComponent *,FName> : TMulticastScriptDelegate<FWeakObjectPtr>
{
};

/* 6856 */
struct __cppobj FComponentWakeSignature : TBaseDynamicMulticastDelegate<FWeakObjectPtr,void,UPrimitiveComponent *,FName>
{
};

/* 6857 */
struct __cppobj FComponentSleepSignature : TBaseDynamicMulticastDelegate<FWeakObjectPtr,void,UPrimitiveComponent *,FName>
{
};

/* 6858 */
struct __cppobj TBaseDynamicMulticastDelegate<FWeakObjectPtr,void,UPrimitiveComponent *> : TMulticastScriptDelegate<FWeakObjectPtr>
{
};

/* 6859 */
struct __cppobj FComponentCollisionSettingsChangedSignature : TBaseDynamicMulticastDelegate<FWeakObjectPtr,void,UPrimitiveComponent *>
{
};

/* 6860 */
struct __cppobj FComponentBeginCursorOverSignature : TBaseDynamicMulticastDelegate<FWeakObjectPtr,void,UPrimitiveComponent *>
{
};

/* 6861 */
struct __cppobj FComponentEndCursorOverSignature : TBaseDynamicMulticastDelegate<FWeakObjectPtr,void,UPrimitiveComponent *>
{
};

/* 6862 */
struct __cppobj TBaseDynamicMulticastDelegate<FWeakObjectPtr,void,UPrimitiveComponent *,FKey> : TMulticastScriptDelegate<FWeakObjectPtr>
{
};

/* 6863 */
struct __cppobj FComponentOnClickedSignature : TBaseDynamicMulticastDelegate<FWeakObjectPtr,void,UPrimitiveComponent *,FKey>
{
};

/* 6864 */
struct __cppobj FComponentOnReleasedSignature : TBaseDynamicMulticastDelegate<FWeakObjectPtr,void,UPrimitiveComponent *,FKey>
{
};

/* 6865 */
struct __cppobj TBaseDynamicMulticastDelegate<FWeakObjectPtr,void,enum ETouchIndex::Type,UPrimitiveComponent *> : TMulticastScriptDelegate<FWeakObjectPtr>
{
};

/* 6866 */
struct __cppobj FComponentOnInputTouchBeginSignature : TBaseDynamicMulticastDelegate<FWeakObjectPtr,void,enum ETouchIndex::Type,UPrimitiveComponent *>
{
};

/* 6867 */
struct __cppobj FComponentOnInputTouchEndSignature : TBaseDynamicMulticastDelegate<FWeakObjectPtr,void,enum ETouchIndex::Type,UPrimitiveComponent *>
{
};

/* 6868 */
struct __cppobj FComponentBeginTouchOverSignature : TBaseDynamicMulticastDelegate<FWeakObjectPtr,void,enum ETouchIndex::Type,UPrimitiveComponent *>
{
};

/* 6869 */
struct __cppobj FComponentEndTouchOverSignature : TBaseDynamicMulticastDelegate<FWeakObjectPtr,void,enum ETouchIndex::Type,UPrimitiveComponent *>
{
};

/* 4537 */
struct __cppobj UPrimitiveComponent : USceneComponent
{
  float MinDrawDistance;
  float LDMaxDrawDistance;
  float CachedMaxDrawDistance;
  TEnumAsByte<enum ESceneDepthPriorityGroup> DepthPriorityGroup;
  TEnumAsByte<enum ESceneDepthPriorityGroup> ViewOwnerDepthPriorityGroup;
  TEnumAsByte<enum EIndirectLightingCacheQuality> IndirectLightingCacheQuality;
  _BYTE LightmapType[1];
  __int8 bNeverDistanceCull : 1;
  __int8 bAttachedToStreamingManagerAsStatic : 1;
  __int8 bAttachedToStreamingManagerAsDynamic : 1;
  __int8 bHandledByStreamingManagerAsDynamic : 1;
  __int8 bIgnoreStreamingManagerUpdate : 1;
  __int8 bAlwaysCreatePhysicsState : 1;
  __int8 bGenerateOverlapEvents : 1;
  __int8 bMultiBodyOverlap : 1;
  __int8 bCheckAsyncSceneOnMove : 1;
  __int8 bTraceComplexOnMove : 1;
  __int8 bReturnMaterialOnMove : 1;
  __int8 bUseViewOwnerDepthPriorityGroup : 1;
  __int8 bAllowCullDistanceVolume : 1;
  __int8 bHasMotionBlurVelocityMeshes : 1;
  __int8 bVisibleInReflectionCaptures : 1;
  __int8 bRenderInMainPass : 1;
  __int8 bRenderInMono : 1;
  __int8 bReceivesDecals : 1;
  __int8 bOwnerNoSee : 1;
  __int8 bOnlyOwnerSee : 1;
  __int8 bTreatAsBackgroundForOcclusion : 1;
  __int8 bUseAsOccluder : 1;
  __int8 bSelectable : 1;
  __int8 bForceMipStreaming : 1;
  __int8 bHasPerInstanceHitProxies : 1;
  __int8 CastShadow : 1;
  __int8 bAffectDynamicIndirectLighting : 1;
  __int8 bAffectDistanceFieldLighting : 1;
  __int8 bCastDynamicShadow : 1;
  __int8 bCastStaticShadow : 1;
  __int8 bCastVolumetricTranslucentShadow : 1;
  __int8 bSelfShadowOnly : 1;
  __int8 bCastFarShadow : 1;
  __int8 bCastInsetShadow : 1;
  __int8 bCastCinematicShadow : 1;
  __int8 bCastHiddenShadow : 1;
  __int8 bCastShadowAsTwoSided : 1;
  __int8 bLightAsIfStatic_DEPRECATED : 1;
  __int8 bLightAttachmentsAsGroup : 1;
  __int8 bReceiveMobileCSMShadows : 1;
  __int8 bSingleSampleShadowFromStationaryLights : 1;
  __int8 bIgnoreRadialImpulse : 1;
  __int8 bIgnoreRadialForce : 1;
  __int8 bApplyImpulseOnDamage : 1;
  __int8 AlwaysLoadOnClient : 1;
  __int8 AlwaysLoadOnServer : 1;
  __int8 bUseEditorCompositing : 1;
  __int8 bRenderCustomDepth : 1;
  __int8 bCachedAllCollideableDescendantsRelative : 1;
  TEnumAsByte<enum EHasCustomNavigableGeometry::Type> bHasCustomNavigableGeometry;
  char MoveIgnoreMask;
  TEnumAsByte<enum ECanBeCharacterBase> CanCharacterStepUpOn;
  FLightingChannels LightingChannels;
  _BYTE CustomDepthStencilWriteMask[1];
  int CustomDepthStencilValue;
  int TranslucencySortPriority;
  int VisibilityId;
  FPrimitiveComponentId ComponentId;
  float LpvBiasMultiplier;
  FThreadSafeCounter AttachmentCounter;
  float LastCheckedAllCollideableDescendantsTime;
  float BoundsScale;
  float LastSubmitTime;
  float LastRenderTime;
  float LastRenderTimeOnScreen;
  TArray<AActor *,FDefaultAllocator> MoveIgnoreActors;
  TArray<UPrimitiveComponent *,FDefaultAllocator> MoveIgnoreComponents;
  TArray<FOverlapInfo,FDefaultAllocator> OverlappingComponents;
  FBodyInstance BodyInstance;
  FComponentHitSignature OnComponentHit;
  FComponentBeginOverlapSignature OnComponentBeginOverlap;
  FComponentEndOverlapSignature OnComponentEndOverlap;
  FComponentWakeSignature OnComponentWake;
  FComponentSleepSignature OnComponentSleep;
  FComponentCollisionSettingsChangedSignature OnComponentCollisionSettingsChangedEvent;
  FComponentBeginCursorOverSignature OnBeginCursorOver;
  FComponentEndCursorOverSignature OnEndCursorOver;
  FComponentOnClickedSignature OnClicked;
  FComponentOnReleasedSignature OnReleased;
  FComponentOnInputTouchBeginSignature OnInputTouchBegin;
  FComponentOnInputTouchEndSignature OnInputTouchEnd;
  FComponentBeginTouchOverSignature OnInputTouchEnter;
  FComponentEndTouchOverSignature OnInputTouchLeave;
  FPrimitiveSceneProxy *SceneProxy;
  FRenderCommandFence DetachFence;
  UPrimitiveComponent *LODParentPrimitive;
  FPrimitiveComponentPostPhysicsTickFunction PostPhysicsComponentTick;
};

/* 5854 */
struct TArray<FBatchedLine,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 5855 */
struct TArray<FBatchedPoint,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 5856 */
struct TArray<FBatchedMesh,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 5857 */
struct __cppobj __declspec(align(8)) ULineBatchComponent : UPrimitiveComponent
{
  TArray<FBatchedLine,FDefaultAllocator> BatchedLines;
  TArray<FBatchedPoint,FDefaultAllocator> BatchedPoints;
  float DefaultLifeTime;
  TArray<FBatchedMesh,FDefaultAllocator> BatchedMeshes;
  unsigned __int32 bCalculateAccurateBounds : 1;
};

/* 5858 */
struct __cppobj AGameNetworkManager : AInfo
{
  int AdjustedNetSpeed;
  float LastNetSpeedUpdateTime;
  int TotalNetBandwidth;
  int MinDynamicBandwidth;
  int MaxDynamicBandwidth;
  unsigned __int32 bIsStandbyCheckingEnabled : 1;
  unsigned __int32 bHasStandbyCheatTriggered : 1;
  float StandbyRxCheatTime;
  float StandbyTxCheatTime;
  int BadPingThreshold;
  float PercentMissingForRxStandby;
  float PercentMissingForTxStandby;
  float PercentForBadPing;
  float JoinInProgressStandbyWaitTime;
  float MoveRepSize;
  float MAXPOSITIONERRORSQUARED;
  float MAXNEARZEROVELOCITYSQUARED;
  float CLIENTADJUSTUPDATECOST;
  float MAXCLIENTUPDATEINTERVAL;
  float MaxMoveDeltaTime;
  float ClientNetSendMoveDeltaTime;
  float ClientNetSendMoveDeltaTimeThrottled;
  float ClientNetSendMoveDeltaTimeStationary;
  int ClientNetSendMoveThrottleAtNetSpeed;
  int ClientNetSendMoveThrottleOverPlayerCount;
  bool ClientAuthorativePosition;
  float ClientErrorUpdateRateLimit;
  bool bMovementTimeDiscrepancyDetection;
  bool bMovementTimeDiscrepancyResolution;
  float MovementTimeDiscrepancyMaxTimeMargin;
  float MovementTimeDiscrepancyMinTimeMargin;
  float MovementTimeDiscrepancyResolutionRate;
  float MovementTimeDiscrepancyDriftAllowance;
  bool bMovementTimeDiscrepancyForceCorrectionsDuringResolution;
  bool bUseDistanceBasedRelevancy;
  FTimerHandle TimerHandle_UpdateNetSpeedsTimer;
};

/* 5859 */
struct __cppobj __declspec(align(8)) UPhysicsCollisionHandler : UObject
{
  float ImpactThreshold;
  float ImpactReFireDelay;
  USoundBase *DefaultImpactSound;
  float LastImpactSoundTime;
};

/* 5790 */
struct TSharedPtr<INetworkReplayStreamer,0>
{
  INetworkReplayStreamer *Object;
  SharedPointerInternals::FSharedReferencer<0> SharedReferenceCount;
};

/* 5791 */
struct TSparseArray<TSetElement<FString>,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<24,8> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 5792 */
struct __declspec(align(8)) TSet<FString,DefaultKeyFuncs<FString,0>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<FString>,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 5793 */
struct TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<184,8> >,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 5794 */
struct TSparseArray<TSetElement<TTuple<FString,FRollbackNetStartupActorInfo> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<184,8> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 5795 */
struct __declspec(align(8)) TSet<TTuple<FString,FRollbackNetStartupActorInfo>,TDefaultMapHashableKeyFuncs<FString,FRollbackNetStartupActorInfo,0>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<TTuple<FString,FRollbackNetStartupActorInfo> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 5796 */
struct TMapBase<FString,FRollbackNetStartupActorInfo,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FString,FRollbackNetStartupActorInfo,0> >
{
  TSet<TTuple<FString,FRollbackNetStartupActorInfo>,TDefaultMapHashableKeyFuncs<FString,FRollbackNetStartupActorInfo,0>,FDefaultSetAllocator> Pairs;
};

/* 5797 */
struct __cppobj TSortableMapBase<FString,FRollbackNetStartupActorInfo,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FString,FRollbackNetStartupActorInfo,0> > : TMapBase<FString,FRollbackNetStartupActorInfo,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FString,FRollbackNetStartupActorInfo,0> >
{
};

/* 5798 */
struct __cppobj TMap<FString,FRollbackNetStartupActorInfo,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FString,FRollbackNetStartupActorInfo,0> > : TSortableMapBase<FString,FRollbackNetStartupActorInfo,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FString,FRollbackNetStartupActorInfo,0> >
{
};

/* 5799 */
struct TSparseArray<TSetElement<TTuple<FNetworkGUID,int> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<16,4> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 5800 */
struct __declspec(align(8)) TSet<TTuple<FNetworkGUID,int>,TDefaultMapHashableKeyFuncs<FNetworkGUID,int,0>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<TTuple<FNetworkGUID,int> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 5801 */
struct TMapBase<FNetworkGUID,int,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FNetworkGUID,int,0> >
{
  TSet<TTuple<FNetworkGUID,int>,TDefaultMapHashableKeyFuncs<FNetworkGUID,int,0>,FDefaultSetAllocator> Pairs;
};

/* 5802 */
struct __cppobj TSortableMapBase<FNetworkGUID,int,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FNetworkGUID,int,0> > : TMapBase<FNetworkGUID,int,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FNetworkGUID,int,0> >
{
};

/* 5803 */
struct __cppobj TMap<FNetworkGUID,int,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FNetworkGUID,int,0> > : TSortableMapBase<FNetworkGUID,int,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FNetworkGUID,int,0> >
{
};

/* 5804 */
struct TSparseArray<TSetElement<TTuple<unsigned int,bool> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<16,4> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 5805 */
struct __declspec(align(8)) TSet<TTuple<unsigned int,bool>,TDefaultMapHashableKeyFuncs<unsigned int,bool,0>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<TTuple<unsigned int,bool> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 5806 */
struct TMapBase<unsigned int,bool,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<unsigned int,bool,0> >
{
  TSet<TTuple<unsigned int,bool>,TDefaultMapHashableKeyFuncs<unsigned int,bool,0>,FDefaultSetAllocator> Pairs;
};

/* 5807 */
struct __cppobj TSortableMapBase<unsigned int,bool,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<unsigned int,bool,0> > : TMapBase<unsigned int,bool,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<unsigned int,bool,0> >
{
};

/* 5808 */
struct __cppobj TMap<unsigned int,bool,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<unsigned int,bool,0> > : TSortableMapBase<unsigned int,bool,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<unsigned int,bool,0> >
{
};

/* 5809 */
struct TSparseArray<TSetElement<TTuple<unsigned __int64,bool> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<24,8> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 5810 */
struct __declspec(align(8)) TSet<TTuple<unsigned __int64,bool>,TDefaultMapHashableKeyFuncs<unsigned __int64,bool,0>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<TTuple<unsigned __int64,bool> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 5811 */
struct TMapBase<unsigned __int64,bool,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<unsigned __int64,bool,0> >
{
  TSet<TTuple<unsigned __int64,bool>,TDefaultMapHashableKeyFuncs<unsigned __int64,bool,0>,FDefaultSetAllocator> Pairs;
};

/* 5812 */
struct __cppobj TSortableMapBase<unsigned __int64,bool,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<unsigned __int64,bool,0> > : TMapBase<unsigned __int64,bool,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<unsigned __int64,bool,0> >
{
};

/* 5813 */
struct __cppobj TMap<unsigned __int64,bool,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<unsigned __int64,bool,0> > : TSortableMapBase<unsigned __int64,bool,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<unsigned __int64,bool,0> >
{
};

/* 5814 */
struct FPackageMapAckState
{
  TMap<FNetworkGUID,int,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FNetworkGUID,int,0> > NetGUIDAckStatus;
  TMap<unsigned int,bool,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<unsigned int,bool,0> > NetFieldExportGroupPathAcked;
  TMap<unsigned __int64,bool,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<unsigned __int64,bool,0> > NetFieldExportAcked;
};

/* 4589 */
struct __cppobj TMulticastDelegate<void> : TBaseMulticastDelegate<void>
{
};

/* 5815 */
struct TSparseArray<TSetElement<TTuple<FNetworkGUID,TIndirectArray<FReplayExternalData,FDefaultAllocator> > >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<32,8> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 5816 */
struct __declspec(align(8)) TSet<TTuple<FNetworkGUID,TIndirectArray<FReplayExternalData,FDefaultAllocator> >,TDefaultMapHashableKeyFuncs<FNetworkGUID,TIndirectArray<FReplayExternalData,FDefaultAllocator>,0>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<TTuple<FNetworkGUID,TIndirectArray<FReplayExternalData,FDefaultAllocator> > >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 5817 */
struct TMapBase<FNetworkGUID,TIndirectArray<FReplayExternalData,FDefaultAllocator>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FNetworkGUID,TIndirectArray<FReplayExternalData,FDefaultAllocator>,0> >
{
  TSet<TTuple<FNetworkGUID,TIndirectArray<FReplayExternalData,FDefaultAllocator> >,TDefaultMapHashableKeyFuncs<FNetworkGUID,TIndirectArray<FReplayExternalData,FDefaultAllocator>,0>,FDefaultSetAllocator> Pairs;
};

/* 5818 */
struct __cppobj TSortableMapBase<FNetworkGUID,TIndirectArray<FReplayExternalData,FDefaultAllocator>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FNetworkGUID,TIndirectArray<FReplayExternalData,FDefaultAllocator>,0> > : TMapBase<FNetworkGUID,TIndirectArray<FReplayExternalData,FDefaultAllocator>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FNetworkGUID,TIndirectArray<FReplayExternalData,FDefaultAllocator>,0> >
{
};

/* 5819 */
struct __cppobj TMap<FNetworkGUID,TIndirectArray<FReplayExternalData,FDefaultAllocator>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FNetworkGUID,TIndirectArray<FReplayExternalData,FDefaultAllocator>,0> > : TSortableMapBase<FNetworkGUID,TIndirectArray<FReplayExternalData,FDefaultAllocator>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FNetworkGUID,TIndirectArray<FReplayExternalData,FDefaultAllocator>,0> >
{
};

/* 5820 */
struct TArray<FPlaybackPacket,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 5821 */
struct TSparseArray<TSetElement<TWeakObjectPtr<UObject,FWeakObjectPtr> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<16,4> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 5822 */
struct __declspec(align(8)) TSet<TWeakObjectPtr<UObject,FWeakObjectPtr>,DefaultKeyFuncs<TWeakObjectPtr<UObject,FWeakObjectPtr>,0>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<TWeakObjectPtr<UObject,FWeakObjectPtr> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 5612 */
struct TArray<FNetworkGUID,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 5823 */
struct TArray<TSharedPtr<FQueuedReplayTask,0>,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 5829 */
struct TSharedPtr<FQueuedReplayTask,0>
{
  FQueuedReplayTask *Object;
  SharedPointerInternals::FSharedReferencer<0> SharedReferenceCount;
};

/* 5779 */
struct __cppobj TBaseDelegate<TTypeWrapper<void>,bool const > : FDelegateBase
{
};

/* 5780 */
const struct __cppobj TBaseDelegate<void,bool const > : TBaseDelegate<TTypeWrapper<void>,bool const >
{
};

/* 4032 */
struct __cppobj FEngineVersion : FEngineVersionBase
{
  FString Branch;
};

/* 946 */
typedef _PaddingMode EReplayHeaderFlags;

/* 5830 */
struct TArray<FLevelNameAndTime,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 5831 */
struct FNetworkDemoHeader
{
  unsigned int Magic;
  unsigned int Version;
  unsigned int NetworkChecksum;
  unsigned int EngineNetworkProtocolVersion;
  unsigned int GameNetworkProtocolVersion;
  unsigned int Changelist;
  FEngineVersion EngineVersion;
  EReplayHeaderFlags HeaderFlags;
  TArray<FLevelNameAndTime,FDefaultAllocator> LevelNamesAndTimes;
  TArray<FString,FDefaultAllocator> GameSpecificData;
};

/* 5832 */
struct __cppobj TWeakObjectPtr<APlayerController,FWeakObjectPtr> : FWeakObjectPtr
{
};

/* 5833 */
struct TArray<FActorPriority,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 3984 */
struct TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<12,4> >,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 4382 */
struct TSparseArray<TSetElement<FNetworkGUID>,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<12,4> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 4383 */
struct __declspec(align(8)) TSet<FNetworkGUID,DefaultKeyFuncs<FNetworkGUID,0>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<FNetworkGUID>,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 5834 */
struct TArray<UDemoNetDriver::FLevelStatus,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 5835 */
struct TSparseArray<TSetElement<TTuple<FString,int> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<32,8> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 5836 */
struct __declspec(align(8)) TSet<TTuple<FString,int>,TDefaultMapHashableKeyFuncs<FString,int,0>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<TTuple<FString,int> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 5837 */
struct TMapBase<FString,int,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FString,int,0> >
{
  TSet<TTuple<FString,int>,TDefaultMapHashableKeyFuncs<FString,int,0>,FDefaultSetAllocator> Pairs;
};

/* 5838 */
struct __cppobj TSortableMapBase<FString,int,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FString,int,0> > : TMapBase<FString,int,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FString,int,0> >
{
};

/* 5839 */
struct __cppobj TMap<FString,int,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FString,int,0> > : TSortableMapBase<FString,int,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FString,int,0> >
{
};

/* 5840 */
struct TSparseArray<TSetElement<TTuple<ULevel *,TSet<TWeakObjectPtr<AActor,FWeakObjectPtr>,DefaultKeyFuncs<TWeakObjectPtr<AActor,FWeakObjectPtr>,0>,FDefaultSetAllocator> > >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<96,8> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 5841 */
struct __declspec(align(8)) TSet<TTuple<ULevel *,TSet<TWeakObjectPtr<AActor,FWeakObjectPtr>,DefaultKeyFuncs<TWeakObjectPtr<AActor,FWeakObjectPtr>,0>,FDefaultSetAllocator> >,TDefaultMapHashableKeyFuncs<ULevel *,TSet<TWeakObjectPtr<AActor,FWeakObjectPtr>,DefaultKeyFuncs<TWeakObjectPtr<AActor,FWeakObjectPtr>,0>,FDefaultSetAllocator>,0>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<TTuple<ULevel *,TSet<TWeakObjectPtr<AActor,FWeakObjectPtr>,DefaultKeyFuncs<TWeakObjectPtr<AActor,FWeakObjectPtr>,0>,FDefaultSetAllocator> > >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 5842 */
struct TMapBase<ULevel *,TSet<TWeakObjectPtr<AActor,FWeakObjectPtr>,DefaultKeyFuncs<TWeakObjectPtr<AActor,FWeakObjectPtr>,0>,FDefaultSetAllocator>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<ULevel *,TSet<TWeakObjectPtr<AActor,FWeakObjectPtr>,DefaultKeyFuncs<TWeakObjectPtr<AActor,FWeakObjectPtr>,0>,FDefaultSetAllocator>,0> >
{
  TSet<TTuple<ULevel *,TSet<TWeakObjectPtr<AActor,FWeakObjectPtr>,DefaultKeyFuncs<TWeakObjectPtr<AActor,FWeakObjectPtr>,0>,FDefaultSetAllocator> >,TDefaultMapHashableKeyFuncs<ULevel *,TSet<TWeakObjectPtr<AActor,FWeakObjectPtr>,DefaultKeyFuncs<TWeakObjectPtr<AActor,FWeakObjectPtr>,0>,FDefaultSetAllocator>,0>,FDefaultSetAllocator> Pairs;
};

/* 5843 */
struct __cppobj TSortableMapBase<ULevel *,TSet<TWeakObjectPtr<AActor,FWeakObjectPtr>,DefaultKeyFuncs<TWeakObjectPtr<AActor,FWeakObjectPtr>,0>,FDefaultSetAllocator>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<ULevel *,TSet<TWeakObjectPtr<AActor,FWeakObjectPtr>,DefaultKeyFuncs<TWeakObjectPtr<AActor,FWeakObjectPtr>,0>,FDefaultSetAllocator>,0> > : TMapBase<ULevel *,TSet<TWeakObjectPtr<AActor,FWeakObjectPtr>,DefaultKeyFuncs<TWeakObjectPtr<AActor,FWeakObjectPtr>,0>,FDefaultSetAllocator>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<ULevel *,TSet<TWeakObjectPtr<AActor,FWeakObjectPtr>,DefaultKeyFuncs<TWeakObjectPtr<AActor,FWeakObjectPtr>,0>,FDefaultSetAllocator>,0> >
{
};

/* 5844 */
struct __cppobj TMap<ULevel *,TSet<TWeakObjectPtr<AActor,FWeakObjectPtr>,DefaultKeyFuncs<TWeakObjectPtr<AActor,FWeakObjectPtr>,0>,FDefaultSetAllocator>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<ULevel *,TSet<TWeakObjectPtr<AActor,FWeakObjectPtr>,DefaultKeyFuncs<TWeakObjectPtr<AActor,FWeakObjectPtr>,0>,FDefaultSetAllocator>,0> > : TSortableMapBase<ULevel *,TSet<TWeakObjectPtr<AActor,FWeakObjectPtr>,DefaultKeyFuncs<TWeakObjectPtr<AActor,FWeakObjectPtr>,0>,FDefaultSetAllocator>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<ULevel *,TSet<TWeakObjectPtr<AActor,FWeakObjectPtr>,DefaultKeyFuncs<TWeakObjectPtr<AActor,FWeakObjectPtr>,0>,FDefaultSetAllocator>,0> >
{
};

/* 5845 */
struct TArray<TTuple<int,int>,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 5846 */
struct TArray<FQueuedDemoPacket,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 5847 */
struct __cppobj UDemoNetDriver : UNetDriver
{
  int DemoFrameNum;
  float DemoTotalTime;
  float DemoCurrentTime;
  float OldDemoCurrentTime;
  int DemoTotalFrames;
  bool bDemoPlaybackDone;
  bool bChannelsArePaused;
  int CurrentLevelIndex;
  APlayerController *SpectatorController;
  TSharedPtr<INetworkReplayStreamer,0> ReplayStreamer;
  long double AccumulatedRecordTime;
  long double LastRecordAvgFlush;
  long double MaxRecordTime;
  int RecordCountSinceFlush;
  TArray<TWeakObjectPtr<AActor,FWeakObjectPtr>,FDefaultAllocator> PendingCheckpointActors;
  TSet<FString,DefaultKeyFuncs<FString,0>,FDefaultSetAllocator> DeletedNetStartupActors;
  TMap<FString,FRollbackNetStartupActorInfo,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FString,FRollbackNetStartupActorInfo,0> > RollbackNetStartupActors;
  FPackageMapAckState CheckpointAckState;
  long double TotalCheckpointSaveTimeSeconds;
  int TotalCheckpointSaveFrames;
  long double LastCheckpointTime;
  TMulticastDelegate<void> OnGotoTimeDelegate;
  TMulticastDelegate<void> OnDemoFinishPlaybackDelegate;
  TMulticastDelegate<void> OnDemoFinishRecordingDelegate;
  TMap<FNetworkGUID,TIndirectArray<FReplayExternalData,FDefaultAllocator>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FNetworkGUID,TIndirectArray<FReplayExternalData,FDefaultAllocator>,0> > ExternalDataToObjectMap;
  TArray<FPlaybackPacket,FDefaultAllocator> PlaybackPackets;
  TSet<TWeakObjectPtr<UObject,FWeakObjectPtr>,DefaultKeyFuncs<TWeakObjectPtr<UObject,FWeakObjectPtr>,0>,FDefaultSetAllocator> UniqueStreamingLevels;
  TSet<TWeakObjectPtr<UObject,FWeakObjectPtr>,DefaultKeyFuncs<TWeakObjectPtr<UObject,FWeakObjectPtr>,0>,FDefaultSetAllocator> NewStreamingLevelsThisFrame;
  bool bRecordMapChanges;
  bool bIsFastForwarding;
  bool bIsFastForwardingForCheckpoint;
  bool bWasStartStreamingSuccessful;
  bool bIsLoadingCheckpoint;
  TArray<FNetworkGUID,FDefaultAllocator> NonQueuedGUIDsForScrubbing;
  TArray<TSharedPtr<FQueuedReplayTask,0>,FDefaultAllocator> QueuedReplayTasks;
  TSharedPtr<FQueuedReplayTask,0> ActiveReplayTask;
  TSharedPtr<FQueuedReplayTask,0> ActiveScrubReplayTask;
  TBaseDelegate<void,bool const > OnGotoTimeDelegate_Transient;
  float SavedReplicatedWorldTimeSeconds;
  float SavedSecondsToSkip;
  FURL DemoURL;
  FString DemoSessionID;
  FNetworkDemoHeader PlaybackDemoHeader;
  float MaxDesiredRecordTimeMS;
  float CheckpointSaveMaxMSPerFrame;
  TWeakObjectPtr<APlayerController,FWeakObjectPtr> ViewerOverride;
  TArray<FActorPriority,FDefaultAllocator> PrioritizedActors;
  bool bPrioritizeActors;
  bool bPauseRecording;
  TArray<FLevelNameAndTime,FDefaultAllocator> LevelNamesAndTimes;
  bool bIsLocalReplay;
  TSet<FNetworkGUID,DefaultKeyFuncs<FNetworkGUID,0>,FDefaultSetAllocator> TrackedRewindActorsByGUID;
  TArray<UDemoNetDriver::FLevelStatus,FDefaultAllocator> AllLevelStatuses;
  TMap<FString,int,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FString,int,0> > LevelStatusesByName;
  TArray<int,FDefaultAllocator> SeenLevelStatuses;
  float LastProcessedPacketTime;
  float LatestReadFrameTime;
  bool bHasLevelStreamingFixes;
  TMap<ULevel *,TSet<TWeakObjectPtr<AActor,FWeakObjectPtr>,DefaultKeyFuncs<TWeakObjectPtr<AActor,FWeakObjectPtr>,0>,FDefaultSetAllocator>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<ULevel *,TSet<TWeakObjectPtr<AActor,FWeakObjectPtr>,DefaultKeyFuncs<TWeakObjectPtr<AActor,FWeakObjectPtr>,0>,FDefaultSetAllocator>,0> > LevelsPendingFastForward;
  TArray<TTuple<int,int>,FDefaultAllocator> NumActorsToProcessForLevel;
  unsigned int NumLevelsAddedThisFrame;
  int PlaybackPacketIndex;
  TArray<FQueuedDemoPacket,FDefaultAllocator> QueuedPacketsBeforeTravel;
  bool bIsWaitingForHeaderDownload;
  bool bIsWaitingForStream;
  FString ActiveReplayName;
};

/* 5863 */
struct __cppobj AParticleEventManager : AActor
{
};

/* 5864 */
struct TEnumAsByte<enum EBrushType>
{
  char Value;
};

/* 4385 */
struct $1324AFBE8703442A073325624A2474B6
{
  char B;
  char G;
  char R;
  char A;
};

/* 4386 */
union $43035944E68815A21638C071EE1FCC0B
{
  $1324AFBE8703442A073325624A2474B6 __s0;
  unsigned int AlignmentDummy;
};

/* 4387 */
struct FColor
{
  $43035944E68815A21638C071EE1FCC0B ___u0;
};

/* 5866 */
struct TArray<FGeomSelection,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 5867 */
struct __cppobj ABrush : AActor
{
  TEnumAsByte<enum EBrushType> BrushType;
  FColor BrushColor;
  int PolyFlags;
  unsigned __int32 bColored : 1;
  unsigned __int32 bSolidWhenSelected : 1;
  unsigned __int32 bPlaceableFromClassBrowser : 1;
  unsigned __int32 bNotForClientOrServer : 1;
  UModel *Brush;
  UBrushComponent *BrushComponent;
  unsigned __int32 bInManipulation : 1;
  TArray<FGeomSelection,FDefaultAllocator> SavedSelections;
};

/* 5868 */
struct __cppobj AVolume : ABrush
{
};

/* 5869 */
struct __cppobj APhysicsVolume : AVolume
{
  float TerminalVelocity;
  int Priority;
  float FluidFriction;
  unsigned __int32 bWaterVolume : 1;
  unsigned __int32 bPhysicsOnContact : 1;
};

/* 5870 */
struct __cppobj UNavigationSystemBase : UObject
{
};

/* 4475 */
struct __cppobj FSoftClassPath : FSoftObjectPath
{
};

/* 5871 */
struct __cppobj __declspec(align(8)) UAISystemBase : UObject
{
  FSoftClassPath AISystemClassName;
  FName AISystemModuleName;
  bool bInstantiateAISystemOnClient;
};

/* 5872 */
struct __cppobj FSelfRegisteringExec : FExec
{
};

/* 5873 */
struct TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<72,4> >,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 5874 */
struct TSparseArray<TSetElement<TTuple<int,FNavAvoidanceData> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<72,4> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 5875 */
struct __declspec(align(8)) TSet<TTuple<int,FNavAvoidanceData>,TDefaultMapHashableKeyFuncs<int,FNavAvoidanceData,0>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<TTuple<int,FNavAvoidanceData> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 5876 */
struct TMapBase<int,FNavAvoidanceData,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<int,FNavAvoidanceData,0> >
{
  TSet<TTuple<int,FNavAvoidanceData>,TDefaultMapHashableKeyFuncs<int,FNavAvoidanceData,0>,FDefaultSetAllocator> Pairs;
};

/* 5877 */
struct __cppobj TSortableMapBase<int,FNavAvoidanceData,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<int,FNavAvoidanceData,0> > : TMapBase<int,FNavAvoidanceData,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<int,FNavAvoidanceData,0> >
{
};

/* 5878 */
struct __cppobj TMap<int,FNavAvoidanceData,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<int,FNavAvoidanceData,0> > : TSortableMapBase<int,FNavAvoidanceData,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<int,FNavAvoidanceData,0> >
{
};

/* 5879 */
struct TArray<FVelocityAvoidanceCone,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 4781 */
struct __cppobj TWeakObjectPtr<UObject,FWeakObjectPtr> : FWeakObjectPtr
{
};

/* 5883 */
struct __cppobj __declspec(align(8)) UAvoidanceManager : UObject, FSelfRegisteringExec
{
  float DefaultTimeToLive;
  float LockTimeAfterAvoid;
  float LockTimeAfterClean;
  float DeltaTimeToPredict;
  float ArtificialRadiusExpansion;
  float TestHeightDifference_DEPRECATED;
  float HeightCheckMargin;
  FTimerHandle TimerHandle_RemoveOutdatedObjects;
  TMap<int,FNavAvoidanceData,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<int,FNavAvoidanceData,0> > AvoidanceObjects;
  TArray<int,FDefaultAllocator> NewKeyPool;
  TArray<FVelocityAvoidanceCone,FDefaultAllocator> AllCones;
  TWeakObjectPtr<UObject,FWeakObjectPtr> EdgeProviderOb;
  INavEdgeProviderInterface *EdgeProviderInterface;
  unsigned __int32 bRequestedUpdateTimer : 1;
};

/* 3827 */
struct __cppobj FPlane : FVector
{
  float W;
};

/* 143 */
enum ESimpleElementBlendMode
{
  SE_BLEND_Opaque = 0x0,
  SE_BLEND_Masked = 0x1,
  SE_BLEND_Translucent = 0x2,
  SE_BLEND_Additive = 0x3,
  SE_BLEND_Modulate = 0x4,
  SE_BLEND_MaskedDistanceField = 0x5,
  SE_BLEND_MaskedDistanceFieldShadowed = 0x6,
  SE_BLEND_TranslucentDistanceField = 0x7,
  SE_BLEND_TranslucentDistanceFieldShadowed = 0x8,
  SE_BLEND_AlphaComposite = 0x9,
  SE_BLEND_AlphaBlend = 0xA,
  SE_BLEND_TranslucentAlphaOnly = 0xB,
  SE_BLEND_TranslucentAlphaOnlyWriteAlpha = 0xC,
  SE_BLEND_RGBA_MASK_START = 0xD,
  SE_BLEND_RGBA_MASK_END = 0x2C,
  SE_BLEND_MAX = 0x2D,
};

/* 4951 */
struct FCanvasItem
{
  FCanvasItemVtbl *vfptr;
  FVector2D Position;
  unsigned int StereoDepth;
  ESimpleElementBlendMode BlendMode;
  bool bFreezeTime;
  FBatchedElementParameters *BatchedElementParameters;
  FLinearColor Color;
};

/* 4971 */
struct FDepthFieldGlowInfo
{
  unsigned __int32 bEnableGlow : 1;
  FLinearColor GlowColor;
  FVector2D GlowOuterRadius;
  FVector2D GlowInnerRadius;
};

/* 4972 */
struct FFontRenderInfo
{
  unsigned __int32 bClipText : 1;
  unsigned __int32 bEnableShadow : 1;
  FDepthFieldGlowInfo GlowInfo;
};

/* 5021 */
struct __cppobj __declspec(align(8)) FCanvasTileItem : FCanvasItem
{
  FVector2D Size;
  float Z;
  FVector2D UV0;
  FVector2D UV1;
  FTexture *Texture;
  FMaterialRenderProxy *MaterialRenderProxy;
  FRotator Rotation;
  FVector2D PivotPoint;
};

/* 5040 */
struct __cppobj FCanvasTextItemBase : FCanvasItem
{
  float HorizSpacingAdjust;
  float Depth;
  FFontRenderInfo FontRenderInfo;
  FLinearColor ShadowColor;
  FVector2D ShadowOffset;
  FVector2D DrawnSize;
  bool bCentreX;
  bool bCentreY;
  bool bOutlined;
  FLinearColor OutlineColor;
  bool bDontCorrectStereoscopic;
  FVector2D Scale;
  FCanvasTileItem TileItem;
  FBatchedElements *BatchedElements;
};

/* 5058 */
struct TAlignedBytes<80,8>::TPadding
{
  char Pad[80];
};

/* 5059 */
struct TAlignedBytes<80,8>
{
  TAlignedBytes<80,8>::TPadding Padding;
};

/* 5060 */
struct __cppobj TTypeCompatibleBytes<FSlateFontInfo> : TAlignedBytes<80,8>
{
};

/* 5061 */
struct __declspec(align(8)) TOptional<FSlateFontInfo>
{
  TTypeCompatibleBytes<FSlateFontInfo> Value;
  bool bIsSet;
};

/* 5062 */
struct __cppobj FCanvasTextItem : FCanvasTextItemBase
{
  FText Text;
  UFont *Font;
  TOptional<FSlateFontInfo> SlateFontInfo;
};

/* 5064 */
struct FDisplayDebugManager
{
  FCanvasTextItem DebugTextItem;
  FVector2D CurrentPos;
  float NextColumXPos;
  float MaxCharHeight;
  FVector2D InitialPos;
  UCanvas *Canvas;
};

/* 4399 */
struct FMatrix
{
  float M[4][4];
};

/* 5063 */
struct __cppobj UCanvas : UObject
{
  float OrgX;
  float OrgY;
  float ClipX;
  float ClipY;
  FColor DrawColor;
  unsigned __int32 bCenterX : 1;
  unsigned __int32 bCenterY : 1;
  unsigned __int32 bNoSmooth : 1;
  int SizeX;
  int SizeY;
  __declspec(align(16)) FPlane ColorModulate;
  UTexture2D *DefaultTexture;
  UTexture2D *GradientTexture0;
  UReporterGraph *ReporterGraph;
  int UnsafeSizeX;
  int UnsafeSizeY;
  int SafeZonePadX;
  int SafeZonePadY;
  int SafeZonePadEX;
  int SafeZonePadEY;
  int CachedDisplayWidth;
  int CachedDisplayHeight;
  FDisplayDebugManager DisplayDebugManager;
  FCanvas *Canvas;
  FSceneView *SceneView;
  FMatrix ViewProjectionMatrix;
  FQuat HmdOrientation;
};

/* 4966 */
struct __declspec(align(8)) FSceneInterface
{
  FSceneInterfaceVtbl *vfptr;
  ERHIFeatureLevel::Type FeatureLevel;
};

/* 6660 */
struct __cppobj TBaseMulticastDelegate<void,FPhysScene *,unsigned int,float> : FMulticastDelegateBase<FWeakObjectPtr>
{
};

/* 6661 */
struct __cppobj TMulticastDelegate<void,FPhysScene *,unsigned int,float> : TBaseMulticastDelegate<void,FPhysScene *,unsigned int,float>
{
};

/* 6662 */
struct __cppobj TBaseMulticastDelegate<void,FPhysScene *,unsigned int> : FMulticastDelegateBase<FWeakObjectPtr>
{
};

/* 6663 */
struct __cppobj TMulticastDelegate<void,FPhysScene *,unsigned int> : TBaseMulticastDelegate<void,FPhysScene *,unsigned int>
{
};

/* 6672 */
struct __declspec(align(8)) FSimulationScratchBuffer
{
  char *Buffer;
  int BufferSize;
};

/* 4847 */
struct TArray<FBodyInstance *,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 6673 */
struct TArray<physx::PxActor *,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 6674 */
struct FPhysScene::FDeferredSceneData
{
  bool bIsSimulating;
  TArray<FBodyInstance *,FDefaultAllocator> AddInstances;
  TArray<physx::PxActor *,FDefaultAllocator> AddActors;
  TArray<FBodyInstance *,FDefaultAllocator> RemoveInstances;
  TArray<physx::PxActor *,FDefaultAllocator> RemoveActors;
};

/* 6731 */
struct TArray<FCollisionNotifyInfo,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 6732 */
struct FPhysScene::FPendingCollisionData
{
  TArray<FCollisionNotifyInfo,FDefaultAllocator> PendingCollisionNotifies;
};

/* 6733 */
struct TArray<FConstraintBrokenDelegateData,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 6734 */
struct FPhysScene::FPendingConstraintData
{
  TArray<FConstraintBrokenDelegateData,FDefaultAllocator> PendingConstraintBroken;
};

/* 6754 */
struct TArray<FPhysScene::FPendingCollisionDisableTable,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 6755 */
struct TSparseArray<TSetElement<TTuple<unsigned int,TMap<FRigidBodyIndexPair,bool,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FRigidBodyIndexPair,bool,0> > *> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<24,8> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 6756 */
struct __declspec(align(8)) TSet<TTuple<unsigned int,TMap<FRigidBodyIndexPair,bool,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FRigidBodyIndexPair,bool,0> > *>,TDefaultMapHashableKeyFuncs<unsigned int,TMap<FRigidBodyIndexPair,bool,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FRigidBodyIndexPair,bool,0> > *,0>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<TTuple<unsigned int,TMap<FRigidBodyIndexPair,bool,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FRigidBodyIndexPair,bool,0> > *> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 6757 */
struct TMapBase<unsigned int,TMap<FRigidBodyIndexPair,bool,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FRigidBodyIndexPair,bool,0> > *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<unsigned int,TMap<FRigidBodyIndexPair,bool,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FRigidBodyIndexPair,bool,0> > *,0> >
{
  TSet<TTuple<unsigned int,TMap<FRigidBodyIndexPair,bool,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FRigidBodyIndexPair,bool,0> > *>,TDefaultMapHashableKeyFuncs<unsigned int,TMap<FRigidBodyIndexPair,bool,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FRigidBodyIndexPair,bool,0> > *,0>,FDefaultSetAllocator> Pairs;
};

/* 6758 */
struct __cppobj TSortableMapBase<unsigned int,TMap<FRigidBodyIndexPair,bool,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FRigidBodyIndexPair,bool,0> > *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<unsigned int,TMap<FRigidBodyIndexPair,bool,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FRigidBodyIndexPair,bool,0> > *,0> > : TMapBase<unsigned int,TMap<FRigidBodyIndexPair,bool,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FRigidBodyIndexPair,bool,0> > *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<unsigned int,TMap<FRigidBodyIndexPair,bool,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FRigidBodyIndexPair,bool,0> > *,0> >
{
};

/* 6759 */
struct __cppobj TMap<unsigned int,TMap<FRigidBodyIndexPair,bool,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FRigidBodyIndexPair,bool,0> > *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<unsigned int,TMap<FRigidBodyIndexPair,bool,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FRigidBodyIndexPair,bool,0> > *,0> > : TSortableMapBase<unsigned int,TMap<FRigidBodyIndexPair,bool,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FRigidBodyIndexPair,bool,0> > *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<unsigned int,TMap<FRigidBodyIndexPair,bool,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FRigidBodyIndexPair,bool,0> > *,0> >
{
};

/* 6760 */
struct TSparseArray<TSetElement<TTuple<physx::PxActor *,enum SleepEvent::Type> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<24,8> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 6761 */
struct __declspec(align(8)) TSet<TTuple<physx::PxActor *,enum SleepEvent::Type>,TDefaultMapHashableKeyFuncs<physx::PxActor *,enum SleepEvent::Type,0>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<TTuple<physx::PxActor *,enum SleepEvent::Type> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 6762 */
struct TMapBase<physx::PxActor *,enum SleepEvent::Type,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<physx::PxActor *,enum SleepEvent::Type,0> >
{
  TSet<TTuple<physx::PxActor *,enum SleepEvent::Type>,TDefaultMapHashableKeyFuncs<physx::PxActor *,enum SleepEvent::Type,0>,FDefaultSetAllocator> Pairs;
};

/* 6763 */
struct __cppobj TSortableMapBase<physx::PxActor *,enum SleepEvent::Type,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<physx::PxActor *,enum SleepEvent::Type,0> > : TMapBase<physx::PxActor *,enum SleepEvent::Type,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<physx::PxActor *,enum SleepEvent::Type,0> >
{
};

/* 6764 */
struct __cppobj TMap<physx::PxActor *,enum SleepEvent::Type,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<physx::PxActor *,enum SleepEvent::Type,0> > : TSortableMapBase<physx::PxActor *,enum SleepEvent::Type,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<physx::PxActor *,enum SleepEvent::Type,0> >
{
};

/* 6765 */
struct TSparseArray<TSetElement<TTuple<USkeletalMeshComponent *,FPhysScene::FDeferredKinematicUpdateInfo> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<24,8> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 6766 */
struct __declspec(align(8)) TSet<TTuple<USkeletalMeshComponent *,FPhysScene::FDeferredKinematicUpdateInfo>,TDefaultMapHashableKeyFuncs<USkeletalMeshComponent *,FPhysScene::FDeferredKinematicUpdateInfo,0>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<TTuple<USkeletalMeshComponent *,FPhysScene::FDeferredKinematicUpdateInfo> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 6767 */
struct TMapBase<USkeletalMeshComponent *,FPhysScene::FDeferredKinematicUpdateInfo,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<USkeletalMeshComponent *,FPhysScene::FDeferredKinematicUpdateInfo,0> >
{
  TSet<TTuple<USkeletalMeshComponent *,FPhysScene::FDeferredKinematicUpdateInfo>,TDefaultMapHashableKeyFuncs<USkeletalMeshComponent *,FPhysScene::FDeferredKinematicUpdateInfo,0>,FDefaultSetAllocator> Pairs;
};

/* 6768 */
struct __cppobj TSortableMapBase<USkeletalMeshComponent *,FPhysScene::FDeferredKinematicUpdateInfo,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<USkeletalMeshComponent *,FPhysScene::FDeferredKinematicUpdateInfo,0> > : TMapBase<USkeletalMeshComponent *,FPhysScene::FDeferredKinematicUpdateInfo,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<USkeletalMeshComponent *,FPhysScene::FDeferredKinematicUpdateInfo,0> >
{
};

/* 6769 */
struct __cppobj TMap<USkeletalMeshComponent *,FPhysScene::FDeferredKinematicUpdateInfo,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<USkeletalMeshComponent *,FPhysScene::FDeferredKinematicUpdateInfo,0> > : TSortableMapBase<USkeletalMeshComponent *,FPhysScene::FDeferredKinematicUpdateInfo,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<USkeletalMeshComponent *,FPhysScene::FDeferredKinematicUpdateInfo,0> >
{
};

/* 6671 */
struct __declspec(align(8)) FPhysScene
{
  bool bAsyncSceneEnabled;
  bool bSubstepping;
  bool bSubsteppingAsync;
  unsigned int NumPhysScenes;
  TMulticastDelegate<void,FPhysScene *,unsigned int,float> OnPhysScenePreTick;
  TMulticastDelegate<void,FPhysScene *,unsigned int,float> OnPhysSceneStep;
  TMulticastDelegate<void,FPhysScene *,unsigned int> OnPhysScenePostTick;
  UWorld *OwningWorld;
  FPhysicsReplication *PhysicsReplication;
  __int16 PhysXSceneIndex[3];
  bool bPhysXSceneExecuting[3];
  float AveragedFrameTime[3];
  float FrameTimeSmoothingFactor[3];
  float DeltaSeconds;
  float MaxPhysicsDeltaTime;
  float SyncDeltaSeconds;
  ULineBatchComponent *LineBatcher;
  TRefCountPtr<FGraphEvent> PhysicsSubsceneCompletion[3];
  TRefCountPtr<FGraphEvent> FrameLaggedPhysicsSubsceneCompletion[3];
  TRefCountPtr<FGraphEvent> PhysicsSceneCompletion;
  FSimulationScratchBuffer SimScratchBuffers[3];
  FPhysScene::FDeferredSceneData DeferredSceneData[3];
  physx::PxCpuDispatcher *CPUDispatcher[3];
  physx::PxSimulationEventCallback *SimEventCallback[3];
  FContactModifyCallback *ContactModifyCallback[3];
  FPhysXMbpBroadphaseCallback *MbpBroadphaseCallbacks[3];
  FPhysScene::FPendingCollisionData PendingCollisionData[3];
  FPhysScene::FPendingConstraintData PendingConstraintData[3];
  FPhysxUserData PhysxUserData;
  FPhysSubstepTask *PhysSubSteppers[3];
  TArray<FPhysScene::FPendingCollisionDisableTable,FDefaultAllocator> DeferredCollisionDisableTableQueue;
  TMap<unsigned int,TMap<FRigidBodyIndexPair,bool,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FRigidBodyIndexPair,bool,0> > *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<unsigned int,TMap<FRigidBodyIndexPair,bool,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FRigidBodyIndexPair,bool,0> > *,0> > CollisionDisableTableLookup;
  TMap<physx::PxActor *,enum SleepEvent::Type,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<physx::PxActor *,enum SleepEvent::Type,0> > PendingSleepEvents[3];
  TMap<USkeletalMeshComponent *,FPhysScene::FDeferredKinematicUpdateInfo,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<USkeletalMeshComponent *,FPhysScene::FDeferredKinematicUpdateInfo,0> > DeferredKinematicUpdateSkelMeshes;
  FDelegateHandle PreGarbageCollectDelegateHandle;
  int PhysXTreeRebuildRate;
};

/* 6637 */
struct TArray<FTimerData,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 5339 */
struct __cppobj TBaseDelegate<TTypeWrapper<void> > : FDelegateBase
{
};

/* 5340 */
struct __cppobj TBaseDelegate<void> : TBaseDelegate<TTypeWrapper<void> >
{
};

/* 6639 */
struct __cppobj TBaseDynamicDelegate<FWeakObjectPtr,void> : TScriptDelegate<FWeakObjectPtr>
{
};

/* 6640 */
struct __cppobj FTimerDynamicDelegate : TBaseDynamicDelegate<FWeakObjectPtr,void>
{
};

/* 4040 */
struct UE4Function_Private::TFunctionRefBase<TFunction<void __cdecl(void)>,void __cdecl(void)>
{
  void (__cdecl *Callable)(void *);
};

/* 4041 */
struct TAlignedBytes<16,16>::TPadding
{
  char Pad[16];
};

/* 4042 */
struct TAlignedBytes<16,16>
{
  TAlignedBytes<16,16>::TPadding Padding;
};

/* 4043 */
struct __cppobj TTypeCompatibleBytes<TAlignedBytes<16,16> > : TAlignedBytes<16,16>
{
};

/* 4044 */
struct __declspec(align(16)) TInlineAllocator<2,FDefaultAllocator>::ForElementType<TAlignedBytes<16,16> >
{
  TTypeCompatibleBytes<TAlignedBytes<16,16> > InlineData[2];
  FHeapAllocator::ForElementType<TAlignedBytes<16,16> > SecondaryData;
};

/* 4045 */
struct __declspec(align(16)) UE4Function_Private::FFunctionStorage
{
  TInlineAllocator<2,FDefaultAllocator>::ForElementType<TAlignedBytes<16,16> > Allocator;
  int AllocatedSize;
};

/* 4046 */
struct __cppobj TFunction<void __cdecl(void)> : UE4Function_Private::TFunctionRefBase<TFunction<void __cdecl(void)>,void __cdecl(void)>
{
  UE4Function_Private::FFunctionStorage Storage;
};

/* 6641 */
struct FTimerUnifiedDelegate
{
  TBaseDelegate<void> FuncDelegate;
  FTimerDynamicDelegate FuncDynDelegate;
  TFunction<void __cdecl(void)> FuncCallback;
};

/* 6642 */
struct __declspec(align(8)) FTimerData
{
  __int8 bLoop : 1;
  __int8 bRequiresDelegate : 1;
  _BYTE Status[1];
  float Rate;
  long double ExpireTime;
  FTimerUnifiedDelegate TimerDelegate;
  FTimerHandle TimerHandle;
  ELevelCollectionType LevelCollection;
};

/* 6635 */
struct __cppobj FTimerManager : FNoncopyable
{
  FTimerManagerVtbl *vfptr;
  TArray<FTimerData,FDefaultAllocator> ActiveTimerHeap;
  TArray<FTimerData,FDefaultAllocator> PausedTimerList;
  TArray<FTimerData,FDefaultAllocator> PendingTimerList;
  long double InternalTime;
  __declspec(align(16)) FTimerData CurrentlyExecutingTimer;
  unsigned __int64 LastTickedFrame;
  UGameInstance *OwningGameInstance;
};

/* 6144 */
struct FFXSystemInterface
{
  FFXSystemInterfaceVtbl *vfptr;
};

/* 6792 */
struct TArray<FWorldCompositionTile,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 6793 */
struct __cppobj UWorldComposition : UObject
{
  FString WorldRoot;
  TArray<FWorldCompositionTile,FDefaultAllocator> Tiles;
  TArray<ULevelStreaming *,FDefaultAllocator> TilesStreaming;
  long double TilesStreamingTimeThreshold;
  bool bLoadAllTilesDuringCinematic;
  bool bRebaseOriginIn3DSpace;
  float RebaseOriginDistance;
};

/* 6794 */
struct FInGameCycleHistory
{
  TArray<unsigned int,FDefaultAllocator> FrameCycles;
  int FrameIdx;
  unsigned __int64 TotalCycles;
  int ValidFrames;
  int CurrFrameCycles;
};

/* 6795 */
struct FInGamePerformanceTracker
{
  FInGameCycleHistory History;
  unsigned int DirectSectionTime_EntryCount;
  unsigned int DirectSectionTime_BeginCycles;
};

/* 6796 */
struct FWorldInGamePerformanceTrackers
{
  FInGamePerformanceTracker InGamePerformanceTrackers[1][3];
};

/* 4197 */
struct __cppobj UAssetUserData : UObject
{
};

/* 4474 */
struct FMovementProperties
{
  unsigned __int32 bCanCrouch : 1;
  unsigned __int32 bCanJump : 1;
  unsigned __int32 bCanWalk : 1;
  unsigned __int32 bCanSwim : 1;
  unsigned __int32 bCanFly : 1;
};

/* 4476 */
const struct __cppobj FNavAgentProperties : FMovementProperties
{
  float AgentRadius;
  float AgentHeight;
  float AgentStepHeight;
  float NavWalkingSearchHeightScale;
  FSoftClassPath PreferredNavData;
};

/* 4477 */
struct IPathFollowingAgentInterface
{
  IPathFollowingAgentInterfaceVtbl *vfptr;
};

/* 4496 */
struct FUniqueNetIdWrapperVtbl
{
  void *(__cdecl *__vecDelDtor)(FUniqueNetIdWrapper *this, unsigned int);
  void (__cdecl *SetUniqueNetId)(FUniqueNetIdWrapper *this, TSharedPtr<FUniqueNetId const ,0> *);
};

/* 4491 */
struct TWeakPtr<FUniqueNetId,0>
{
  FUniqueNetId *Object;
  SharedPointerInternals::FWeakReferencer<0> WeakReferenceCount;
};

/* 4492 */
struct TSharedFromThis<FUniqueNetId,0>
{
  TWeakPtr<FUniqueNetId,0> WeakThis;
};

/* 4489 */
const struct __cppobj FUniqueNetId : TSharedFromThis<FUniqueNetId,0>
{
  FUniqueNetIdVtbl *vfptr;
};

/* 4914 */
struct __declspec(align(8)) FBasedMovementInfo
{
  UPrimitiveComponent *MovementBase;
  FName BoneName;
  FVector_NetQuantize100 Location;
  FRotator Rotation;
  bool bServerHasBaseComponent;
  bool bRelativeRotation;
  bool bServerHasVelocity;
};

/* 4712 */
struct __cppobj TBaseDynamicMulticastDelegate<FWeakObjectPtr,void> : TMulticastScriptDelegate<FWeakObjectPtr>
{
};

/* 4915 */
struct __cppobj FCharacterReachedApexSignature : TBaseDynamicMulticastDelegate<FWeakObjectPtr,void>
{
};

/* 4916 */
struct __cppobj TBaseDynamicMulticastDelegate<FWeakObjectPtr,void,FHitResult const &> : TMulticastScriptDelegate<FWeakObjectPtr>
{
};

/* 4917 */
struct __cppobj FLandedSignature : TBaseDynamicMulticastDelegate<FWeakObjectPtr,void,FHitResult const &>
{
};

/* 4918 */
struct __cppobj TBaseDynamicMulticastDelegate<FWeakObjectPtr,void,ACharacter *,enum EMovementMode,unsigned char> : TMulticastScriptDelegate<FWeakObjectPtr>
{
};

/* 4919 */
struct __cppobj FMovementModeChangedSignature : TBaseDynamicMulticastDelegate<FWeakObjectPtr,void,ACharacter *,enum EMovementMode,unsigned char>
{
};

/* 4920 */
struct __cppobj TBaseDynamicMulticastDelegate<FWeakObjectPtr,void,float,FVector,FVector> : TMulticastScriptDelegate<FWeakObjectPtr>
{
};

/* 4921 */
struct __cppobj FCharacterMovementUpdatedSignature : TBaseDynamicMulticastDelegate<FWeakObjectPtr,void,float,FVector,FVector>
{
};

/* 4893 */
struct __cppobj TTypeCompatibleBytes<TSharedPtr<FRootMotionSource,0> > : TAlignedBytes<16,8>
{
};

/* 4894 */
struct __cppobj FHeapAllocator::ForElementType<TSharedPtr<FRootMotionSource,0> > : FHeapAllocator::ForAnyElementType
{
};

/* 4895 */
struct TInlineAllocator<8,FDefaultAllocator>::ForElementType<TSharedPtr<FRootMotionSource,0> >
{
  TTypeCompatibleBytes<TSharedPtr<FRootMotionSource,0> > InlineData[8];
  FHeapAllocator::ForElementType<TSharedPtr<FRootMotionSource,0> > SecondaryData;
};

/* 4896 */
struct TArray<TSharedPtr<FRootMotionSource,0>,TInlineAllocator<8,FDefaultAllocator> >
{
  TInlineAllocator<8,FDefaultAllocator>::ForElementType<TSharedPtr<FRootMotionSource,0> > AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 4897 */
struct TInlineAllocator<4,FDefaultAllocator>::ForElementType<TSharedPtr<FRootMotionSource,0> >
{
  TTypeCompatibleBytes<TSharedPtr<FRootMotionSource,0> > InlineData[4];
  FHeapAllocator::ForElementType<TSharedPtr<FRootMotionSource,0> > SecondaryData;
};

/* 4898 */
struct TArray<TSharedPtr<FRootMotionSource,0>,TInlineAllocator<4,FDefaultAllocator> >
{
  TInlineAllocator<4,FDefaultAllocator>::ForElementType<TSharedPtr<FRootMotionSource,0> > AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 4899 */
struct __cppobj FVector_NetQuantize10 : FVector
{
};

/* 4900 */
struct FRootMotionSourceSettings
{
  char Flags;
};

/* 4891 */
struct __declspec(align(8)) FRootMotionSourceGroup
{
  FRootMotionSourceGroupVtbl *vfptr;
  TArray<TSharedPtr<FRootMotionSource,0>,TInlineAllocator<8,FDefaultAllocator> > RootMotionSources;
  TArray<TSharedPtr<FRootMotionSource,0>,TInlineAllocator<4,FDefaultAllocator> > PendingAddRootMotionSources;
  bool bHasAdditiveSources;
  bool bHasOverrideSources;
  FVector_NetQuantize10 LastPreAdditiveVelocity;
  bool bIsAdditiveVelocityApplied;
  FRootMotionSourceSettings LastAccumulatedSettings;
};

/* 4770 */
struct FRootMotionMovementParams
{
  bool bHasRootMotion;
  float BlendWeight;
  FTransform RootMotionTransform;
};

/* 4922 */
struct TArray<FSimulatedRootMotionReplicatedMove,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 4923 */
struct FRepRootMotionMontage
{
  bool bIsActive;
  UAnimMontage *AnimMontage;
  float Position;
  FVector_NetQuantize100 Location;
  FRotator Rotation;
  UPrimitiveComponent *MovementBase;
  FName MovementBaseBoneName;
  bool bRelativePosition;
  bool bRelativeRotation;
  FRootMotionSourceGroup AuthoritativeRootMotion;
  FVector_NetQuantize10 Acceleration;
  FVector_NetQuantize10 LinearVelocity;
};

/* 4875 */
struct __cppobj ACharacter : APawn
{
  USkeletalMeshComponent *Mesh;
  UCharacterMovementComponent *CharacterMovement;
  UCapsuleComponent *CapsuleComponent;
  FBasedMovementInfo BasedMovement;
  FBasedMovementInfo ReplicatedBasedMovement;
  float AnimRootMotionTranslationScale;
  FVector BaseTranslationOffset;
  FQuat BaseRotationOffset;
  float ReplicatedServerLastTransformUpdateTimeStamp;
  char ReplicatedMovementMode;
  bool bInBaseReplication;
  float CrouchedEyeHeight;
  unsigned __int32 bIsCrouched : 1;
  unsigned __int32 bProxyIsJumpForceApplied : 1;
  unsigned __int32 bPressedJump : 1;
  unsigned __int32 bClientUpdating : 1;
  unsigned __int32 bClientWasFalling : 1;
  unsigned __int32 bClientResimulateRootMotion : 1;
  unsigned __int32 bClientResimulateRootMotionSources : 1;
  unsigned __int32 bSimGravityDisabled : 1;
  unsigned __int32 bClientCheckEncroachmentOnNetUpdate : 1;
  unsigned __int32 bServerMoveIgnoreRootMotion : 1;
  unsigned __int32 bWasJumping : 1;
  float JumpKeyHoldTime;
  float JumpForceTimeRemaining;
  float ProxyJumpForceStartedTime;
  float JumpMaxHoldTime;
  int JumpMaxCount;
  int JumpCurrentCount;
  unsigned int NumActorOverlapEventsCounter;
  FCharacterReachedApexSignature OnReachedJumpApex;
  FLandedSignature LandedDelegate;
  FMovementModeChangedSignature MovementModeChangedDelegate;
  FCharacterMovementUpdatedSignature OnCharacterMovementUpdated;
  FRootMotionSourceGroup SavedRootMotion;
  FRootMotionMovementParams ClientRootMotionParams;
  TArray<FSimulatedRootMotionReplicatedMove,FDefaultAllocator> RootMotionRepMoves;
  FRepRootMotionMontage RepRootMotion;
};

/* 3962 */
struct FSingleThreadRunnableVtbl
{
  void *(__cdecl *__vecDelDtor)(FSingleThreadRunnable *this, unsigned int);
  void (__cdecl *Tick)(FSingleThreadRunnable *this);
};

/* 3969 */
union $24FD3FCEE69951735779D3AAF9944271
{
  void (__cdecl *~FEvent)(FEvent *this);
  void *(__cdecl *__vecDelDtor)(FEvent *this, unsigned int);
};

/* 3970 */
struct FEventVtbl
{
  bool (__cdecl *Create)(FEvent *this, bool);
  bool (__cdecl *IsManualReset)(FEvent *this);
  void (__cdecl *Trigger)(FEvent *this);
  void (__cdecl *Reset)(FEvent *this);
  bool (__cdecl *Wait)(FEvent *this, unsigned int, const bool);
  $24FD3FCEE69951735779D3AAF9944271 ___u5;
};

/* 67628 */
struct std::_Func_base<void>Vtbl
{
  std::_Func_base<void> *(__cdecl *_Copy)(std::_Func_base<void> *this, void *);
  std::_Func_base<void> *(__cdecl *_Move)(std::_Func_base<void> *this, void *);
  void (__cdecl *_Do_call)(std::_Func_base<void> *this);
  type_info *(__cdecl *_Target_type)(std::_Func_base<void> *this);
  void (__cdecl *_Delete_this)(std::_Func_base<void> *this, bool);
  const void *(__cdecl *_Get)(std::_Func_base<void> *this);
};

/* 68412 */
struct __cppobj std::_Arg_types<enum ksRacing::TrackFlagLights const &>
{
};

/* 68415 */
union std::_Func_class<void,enum ksRacing::TrackFlagLights const &>::_Storage
{
  long double _Dummy1;
  char _Dummy2[56];
  std::_Func_base<void,enum ksRacing::TrackFlagLights const &> *_Ptrs[8];
};

/* 68416 */
struct __cppobj std::_Func_class<void,enum ksRacing::TrackFlagLights const &> : std::_Arg_types<enum ksRacing::TrackFlagLights const &>
{
  std::_Func_class<void,enum ksRacing::TrackFlagLights const &>::_Storage _Mystorage;
};

/* 68417 */
struct __cppobj std::function<void __cdecl(enum ksRacing::TrackFlagLights const &)> : std::_Func_class<void,enum ksRacing::TrackFlagLights const &>
{
};

/* 68418 */
struct std::pair<void *,std::function<void __cdecl(enum ksRacing::TrackFlagLights const &)> >
{
  void *first;
  std::function<void __cdecl(enum ksRacing::TrackFlagLights const &)> second;
};

/* 68425 */
struct __cppobj std::_Arg_types<ksRacing::RaceStateEvent const &>
{
};

/* 68429 */
union std::_Func_class<void,ksRacing::RaceStateEvent const &>::_Storage
{
  long double _Dummy1;
  char _Dummy2[56];
  std::_Func_base<void,ksRacing::RaceStateEvent const &> *_Ptrs[8];
};

/* 68430 */
struct __cppobj std::_Func_class<void,ksRacing::RaceStateEvent const &> : std::_Arg_types<ksRacing::RaceStateEvent const &>
{
  std::_Func_class<void,ksRacing::RaceStateEvent const &>::_Storage _Mystorage;
};

/* 68431 */
struct __cppobj std::function<void __cdecl(ksRacing::RaceStateEvent const &)> : std::_Func_class<void,ksRacing::RaceStateEvent const &>
{
};

/* 68432 */
struct std::pair<void *,std::function<void __cdecl(ksRacing::RaceStateEvent const &)> >
{
  void *first;
  std::function<void __cdecl(ksRacing::RaceStateEvent const &)> second;
};

/* 68439 */
struct __cppobj std::_Arg_types<ksRacing::RaceStartTimeEvent const &>
{
};

/* 68443 */
union std::_Func_class<void,ksRacing::RaceStartTimeEvent const &>::_Storage
{
  long double _Dummy1;
  char _Dummy2[56];
  std::_Func_base<void,ksRacing::RaceStartTimeEvent const &> *_Ptrs[8];
};

/* 68444 */
struct __cppobj std::_Func_class<void,ksRacing::RaceStartTimeEvent const &> : std::_Arg_types<ksRacing::RaceStartTimeEvent const &>
{
  std::_Func_class<void,ksRacing::RaceStartTimeEvent const &>::_Storage _Mystorage;
};

/* 68445 */
struct __cppobj std::function<void __cdecl(ksRacing::RaceStartTimeEvent const &)> : std::_Func_class<void,ksRacing::RaceStartTimeEvent const &>
{
};

/* 68446 */
struct std::pair<void *,std::function<void __cdecl(ksRacing::RaceStartTimeEvent const &)> >
{
  void *first;
  std::function<void __cdecl(ksRacing::RaceStartTimeEvent const &)> second;
};

/* 68453 */
struct __cppobj std::_Arg_types<ksRacing::StartSessionEvent const &>
{
};

/* 68457 */
union std::_Func_class<void,ksRacing::StartSessionEvent const &>::_Storage
{
  long double _Dummy1;
  char _Dummy2[56];
  std::_Func_base<void,ksRacing::StartSessionEvent const &> *_Ptrs[8];
};

/* 68458 */
struct __cppobj std::_Func_class<void,ksRacing::StartSessionEvent const &> : std::_Arg_types<ksRacing::StartSessionEvent const &>
{
  std::_Func_class<void,ksRacing::StartSessionEvent const &>::_Storage _Mystorage;
};

/* 68459 */
struct __cppobj std::function<void __cdecl(ksRacing::StartSessionEvent const &)> : std::_Func_class<void,ksRacing::StartSessionEvent const &>
{
};

/* 68460 */
struct std::pair<void *,std::function<void __cdecl(ksRacing::StartSessionEvent const &)> >
{
  void *first;
  std::function<void __cdecl(ksRacing::StartSessionEvent const &)> second;
};

/* 68467 */
struct __cppobj std::_Arg_types<ksRacing::SwapDriverEvent const &>
{
};

/* 68471 */
union std::_Func_class<void,ksRacing::SwapDriverEvent const &>::_Storage
{
  long double _Dummy1;
  char _Dummy2[56];
  std::_Func_base<void,ksRacing::SwapDriverEvent const &> *_Ptrs[8];
};

/* 68472 */
struct __cppobj std::_Func_class<void,ksRacing::SwapDriverEvent const &> : std::_Arg_types<ksRacing::SwapDriverEvent const &>
{
  std::_Func_class<void,ksRacing::SwapDriverEvent const &>::_Storage _Mystorage;
};

/* 68473 */
struct __cppobj std::function<void __cdecl(ksRacing::SwapDriverEvent const &)> : std::_Func_class<void,ksRacing::SwapDriverEvent const &>
{
};

/* 68474 */
struct std::pair<void *,std::function<void __cdecl(ksRacing::SwapDriverEvent const &)> >
{
  void *first;
  std::function<void __cdecl(ksRacing::SwapDriverEvent const &)> second;
};

/* 68481 */
struct __cppobj std::_Arg_types<bool const &>
{
};

/* 68484 */
union std::_Func_class<void,bool const &>::_Storage
{
  long double _Dummy1;
  char _Dummy2[56];
  std::_Func_base<void,bool const &> *_Ptrs[8];
};

/* 68485 */
struct __cppobj std::_Func_class<void,bool const &> : std::_Arg_types<bool const &>
{
  std::_Func_class<void,bool const &>::_Storage _Mystorage;
};

/* 68486 */
struct __cppobj std::function<void __cdecl(bool const &)> : std::_Func_class<void,bool const &>
{
};

/* 68487 */
struct std::pair<void *,std::function<void __cdecl(bool const &)> >
{
  void *first;
  std::function<void __cdecl(bool const &)> second;
};

/* 68494 */
struct __cppobj std::_Arg_types<ksRacing::AddOnlineEvent const &>
{
};

/* 68498 */
union std::_Func_class<void,ksRacing::AddOnlineEvent const &>::_Storage
{
  long double _Dummy1;
  char _Dummy2[56];
  std::_Func_base<void,ksRacing::AddOnlineEvent const &> *_Ptrs[8];
};

/* 68499 */
struct __cppobj std::_Func_class<void,ksRacing::AddOnlineEvent const &> : std::_Arg_types<ksRacing::AddOnlineEvent const &>
{
  std::_Func_class<void,ksRacing::AddOnlineEvent const &>::_Storage _Mystorage;
};

/* 68500 */
struct __cppobj std::function<void __cdecl(ksRacing::AddOnlineEvent const &)> : std::_Func_class<void,ksRacing::AddOnlineEvent const &>
{
};

/* 68501 */
struct std::pair<void *,std::function<void __cdecl(ksRacing::AddOnlineEvent const &)> >
{
  void *first;
  std::function<void __cdecl(ksRacing::AddOnlineEvent const &)> second;
};

/* 68381 */
struct __cppobj std::allocator<std::pair<void *,std::function<void __cdecl(ksRacing::EntryListUpdatedEvent const &)> > >
{
};

/* 68390 */
struct __cppobj std::_Vector_val<std::_Simple_types<std::pair<void *,std::function<void __cdecl(ksRacing::EntryListUpdatedEvent const &)> > > > : std::_Container_base0
{
  std::pair<void *,std::function<void __cdecl(ksRacing::EntryListUpdatedEvent const &)> > *_Myfirst;
  std::pair<void *,std::function<void __cdecl(ksRacing::EntryListUpdatedEvent const &)> > *_Mylast;
  std::pair<void *,std::function<void __cdecl(ksRacing::EntryListUpdatedEvent const &)> > *_Myend;
};

/* 68391 */
struct __cppobj std::_Compressed_pair<std::allocator<std::pair<void *,std::function<void __cdecl(ksRacing::EntryListUpdatedEvent const &)> > >,std::_Vector_val<std::_Simple_types<std::pair<void *,std::function<void __cdecl(ksRacing::EntryListUpdatedEvent const &)> > > >,1> : std::allocator<std::pair<void *,std::function<void __cdecl(ksRacing::EntryListUpdatedEvent const &)> > >
{
  std::_Vector_val<std::_Simple_types<std::pair<void *,std::function<void __cdecl(ksRacing::EntryListUpdatedEvent const &)> > > > _Myval2;
};

/* 68392 */
struct std::_Vector_alloc<std::_Vec_base_types<std::pair<void *,std::function<void __cdecl(ksRacing::EntryListUpdatedEvent const &)> >,std::allocator<std::pair<void *,std::function<void __cdecl(ksRacing::EntryListUpdatedEvent const &)> > > > >
{
  std::_Compressed_pair<std::allocator<std::pair<void *,std::function<void __cdecl(ksRacing::EntryListUpdatedEvent const &)> > >,std::_Vector_val<std::_Simple_types<std::pair<void *,std::function<void __cdecl(ksRacing::EntryListUpdatedEvent const &)> > > >,1> _Mypair;
};

/* 68393 */
struct __cppobj std::vector<std::pair<void *,std::function<void __cdecl(ksRacing::EntryListUpdatedEvent const &)> >,std::allocator<std::pair<void *,std::function<void __cdecl(ksRacing::EntryListUpdatedEvent const &)> > > > : std::_Vector_alloc<std::_Vec_base_types<std::pair<void *,std::function<void __cdecl(ksRacing::EntryListUpdatedEvent const &)> >,std::allocator<std::pair<void *,std::function<void __cdecl(ksRacing::EntryListUpdatedEvent const &)> > > > >
{
};

/* 68394 */
struct Event<ksRacing::EntryListUpdatedEvent>
{
  std::vector<std::pair<void *,std::function<void __cdecl(ksRacing::EntryListUpdatedEvent const &)> >,std::allocator<std::pair<void *,std::function<void __cdecl(ksRacing::EntryListUpdatedEvent const &)> > > > handlers;
};

/* 68233 */
struct __cppobj std::less<unsigned short>
{
};

/* 68395 */
struct __cppobj std::allocator<std::_Tree_node<std::pair<unsigned short const ,ksRacing::CarInfo>,void *> >
{
};

/* 68397 */
struct __cppobj std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned short const ,ksRacing::CarInfo> > > : std::_Container_base0
{
  std::_Tree_node<std::pair<unsigned short const ,ksRacing::CarInfo>,void *> *_Myhead;
  unsigned __int64 _Mysize;
};

/* 68398 */
struct __cppobj std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<unsigned short const ,ksRacing::CarInfo>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned short const ,ksRacing::CarInfo> > >,1> : std::allocator<std::_Tree_node<std::pair<unsigned short const ,ksRacing::CarInfo>,void *> >
{
  std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned short const ,ksRacing::CarInfo> > > _Myval2;
};

/* 68399 */
struct __cppobj std::_Compressed_pair<std::less<unsigned short>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<unsigned short const ,ksRacing::CarInfo>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned short const ,ksRacing::CarInfo> > >,1>,1> : std::less<unsigned short>
{
  std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<unsigned short const ,ksRacing::CarInfo>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned short const ,ksRacing::CarInfo> > >,1> _Myval2;
};

/* 68400 */
struct std::_Tree_comp_alloc<std::_Tmap_traits<unsigned short,ksRacing::CarInfo,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,ksRacing::CarInfo> >,0> >
{
  std::_Compressed_pair<std::less<unsigned short>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<unsigned short const ,ksRacing::CarInfo>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned short const ,ksRacing::CarInfo> > >,1>,1> _Mypair;
};

/* 68401 */
struct __cppobj std::_Tree<std::_Tmap_traits<unsigned short,ksRacing::CarInfo,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,ksRacing::CarInfo> >,0> > : std::_Tree_comp_alloc<std::_Tmap_traits<unsigned short,ksRacing::CarInfo,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,ksRacing::CarInfo> >,0> >
{
};

/* 68402 */
struct __cppobj std::map<unsigned short,ksRacing::CarInfo,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,ksRacing::CarInfo> > > : std::_Tree<std::_Tmap_traits<unsigned short,ksRacing::CarInfo,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,ksRacing::CarInfo> >,0> >
{
};

/* 68403 */
struct __cppobj std::allocator<std::_Tree_node<std::pair<unsigned short const ,ksRacing::DriverEntry>,void *> >
{
};

/* 68405 */
struct __cppobj std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned short const ,ksRacing::DriverEntry> > > : std::_Container_base0
{
  std::_Tree_node<std::pair<unsigned short const ,ksRacing::DriverEntry>,void *> *_Myhead;
  unsigned __int64 _Mysize;
};

/* 68406 */
struct __cppobj std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<unsigned short const ,ksRacing::DriverEntry>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned short const ,ksRacing::DriverEntry> > >,1> : std::allocator<std::_Tree_node<std::pair<unsigned short const ,ksRacing::DriverEntry>,void *> >
{
  std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned short const ,ksRacing::DriverEntry> > > _Myval2;
};

/* 68407 */
struct __cppobj std::_Compressed_pair<std::less<unsigned short>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<unsigned short const ,ksRacing::DriverEntry>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned short const ,ksRacing::DriverEntry> > >,1>,1> : std::less<unsigned short>
{
  std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<unsigned short const ,ksRacing::DriverEntry>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned short const ,ksRacing::DriverEntry> > >,1> _Myval2;
};

/* 68408 */
struct std::_Tree_comp_alloc<std::_Tmap_traits<unsigned short,ksRacing::DriverEntry,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,ksRacing::DriverEntry> >,0> >
{
  std::_Compressed_pair<std::less<unsigned short>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<unsigned short const ,ksRacing::DriverEntry>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned short const ,ksRacing::DriverEntry> > >,1>,1> _Mypair;
};

/* 68409 */
struct __cppobj std::_Tree<std::_Tmap_traits<unsigned short,ksRacing::DriverEntry,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,ksRacing::DriverEntry> >,0> > : std::_Tree_comp_alloc<std::_Tmap_traits<unsigned short,ksRacing::DriverEntry,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,ksRacing::DriverEntry> >,0> >
{
};

/* 68410 */
struct __cppobj std::map<unsigned short,ksRacing::DriverEntry,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,ksRacing::DriverEntry> > > : std::_Tree<std::_Tmap_traits<unsigned short,ksRacing::DriverEntry,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,ksRacing::DriverEntry> >,0> >
{
};

/* 68732 */
struct __cppobj std::allocator<std::_Tree_node<std::pair<unsigned short const ,std::set<unsigned short,std::less<unsigned short>,std::allocator<unsigned short> > >,void *> >
{
};

/* 68734 */
struct __cppobj std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned short const ,std::set<unsigned short,std::less<unsigned short>,std::allocator<unsigned short> > > > > : std::_Container_base0
{
  std::_Tree_node<std::pair<unsigned short const ,std::set<unsigned short,std::less<unsigned short>,std::allocator<unsigned short> > >,void *> *_Myhead;
  unsigned __int64 _Mysize;
};

/* 68735 */
struct __cppobj std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<unsigned short const ,std::set<unsigned short,std::less<unsigned short>,std::allocator<unsigned short> > >,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned short const ,std::set<unsigned short,std::less<unsigned short>,std::allocator<unsigned short> > > > >,1> : std::allocator<std::_Tree_node<std::pair<unsigned short const ,std::set<unsigned short,std::less<unsigned short>,std::allocator<unsigned short> > >,void *> >
{
  std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned short const ,std::set<unsigned short,std::less<unsigned short>,std::allocator<unsigned short> > > > > _Myval2;
};

/* 68736 */
struct __cppobj std::_Compressed_pair<std::less<unsigned short>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<unsigned short const ,std::set<unsigned short,std::less<unsigned short>,std::allocator<unsigned short> > >,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned short const ,std::set<unsigned short,std::less<unsigned short>,std::allocator<unsigned short> > > > >,1>,1> : std::less<unsigned short>
{
  std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<unsigned short const ,std::set<unsigned short,std::less<unsigned short>,std::allocator<unsigned short> > >,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned short const ,std::set<unsigned short,std::less<unsigned short>,std::allocator<unsigned short> > > > >,1> _Myval2;
};

/* 68737 */
struct std::_Tree_comp_alloc<std::_Tmap_traits<unsigned short,std::set<unsigned short,std::less<unsigned short>,std::allocator<unsigned short> >,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,std::set<unsigned short,std::less<unsigned short>,std::allocator<unsigned short> > > >,0> >
{
  std::_Compressed_pair<std::less<unsigned short>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<unsigned short const ,std::set<unsigned short,std::less<unsigned short>,std::allocator<unsigned short> > >,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned short const ,std::set<unsigned short,std::less<unsigned short>,std::allocator<unsigned short> > > > >,1>,1> _Mypair;
};

/* 68738 */
struct __cppobj std::_Tree<std::_Tmap_traits<unsigned short,std::set<unsigned short,std::less<unsigned short>,std::allocator<unsigned short> >,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,std::set<unsigned short,std::less<unsigned short>,std::allocator<unsigned short> > > >,0> > : std::_Tree_comp_alloc<std::_Tmap_traits<unsigned short,std::set<unsigned short,std::less<unsigned short>,std::allocator<unsigned short> >,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,std::set<unsigned short,std::less<unsigned short>,std::allocator<unsigned short> > > >,0> >
{
};

/* 68739 */
struct __cppobj std::map<unsigned short,std::set<unsigned short,std::less<unsigned short>,std::allocator<unsigned short> >,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,std::set<unsigned short,std::less<unsigned short>,std::allocator<unsigned short> > > > > : std::_Tree<std::_Tmap_traits<unsigned short,std::set<unsigned short,std::less<unsigned short>,std::allocator<unsigned short> >,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,std::set<unsigned short,std::less<unsigned short>,std::allocator<unsigned short> > > >,0> >
{
};

/* 68508 */
struct ksRacing::EntryList
{
  Event<ksRacing::EntryListUpdatedEvent> onEntryListUpdatedEvent;
  std::map<unsigned short,ksRacing::CarInfo,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,ksRacing::CarInfo> > > carMap;
  std::map<unsigned short,ksRacing::DriverEntry,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,ksRacing::DriverEntry> > > driverMap;
  ksRacing::RaceManager *raceManager;
  _BYTE eventType[1];
  std::map<unsigned short,std::set<unsigned short,std::less<unsigned short>,std::allocator<unsigned short> >,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,std::set<unsigned short,std::less<unsigned short>,std::allocator<unsigned short> > > > > carDrivers;
};

/* 68513 */
struct __cppobj std::allocator<std::pair<void *,std::function<void __cdecl(ksRacing::UpdateOfficialPositionEvent const &)> > >
{
};

/* 68522 */
struct __cppobj std::_Vector_val<std::_Simple_types<std::pair<void *,std::function<void __cdecl(ksRacing::UpdateOfficialPositionEvent const &)> > > > : std::_Container_base0
{
  std::pair<void *,std::function<void __cdecl(ksRacing::UpdateOfficialPositionEvent const &)> > *_Myfirst;
  std::pair<void *,std::function<void __cdecl(ksRacing::UpdateOfficialPositionEvent const &)> > *_Mylast;
  std::pair<void *,std::function<void __cdecl(ksRacing::UpdateOfficialPositionEvent const &)> > *_Myend;
};

/* 68523 */
struct __cppobj std::_Compressed_pair<std::allocator<std::pair<void *,std::function<void __cdecl(ksRacing::UpdateOfficialPositionEvent const &)> > >,std::_Vector_val<std::_Simple_types<std::pair<void *,std::function<void __cdecl(ksRacing::UpdateOfficialPositionEvent const &)> > > >,1> : std::allocator<std::pair<void *,std::function<void __cdecl(ksRacing::UpdateOfficialPositionEvent const &)> > >
{
  std::_Vector_val<std::_Simple_types<std::pair<void *,std::function<void __cdecl(ksRacing::UpdateOfficialPositionEvent const &)> > > > _Myval2;
};

/* 68524 */
struct std::_Vector_alloc<std::_Vec_base_types<std::pair<void *,std::function<void __cdecl(ksRacing::UpdateOfficialPositionEvent const &)> >,std::allocator<std::pair<void *,std::function<void __cdecl(ksRacing::UpdateOfficialPositionEvent const &)> > > > >
{
  std::_Compressed_pair<std::allocator<std::pair<void *,std::function<void __cdecl(ksRacing::UpdateOfficialPositionEvent const &)> > >,std::_Vector_val<std::_Simple_types<std::pair<void *,std::function<void __cdecl(ksRacing::UpdateOfficialPositionEvent const &)> > > >,1> _Mypair;
};

/* 68525 */
struct __cppobj std::vector<std::pair<void *,std::function<void __cdecl(ksRacing::UpdateOfficialPositionEvent const &)> >,std::allocator<std::pair<void *,std::function<void __cdecl(ksRacing::UpdateOfficialPositionEvent const &)> > > > : std::_Vector_alloc<std::_Vec_base_types<std::pair<void *,std::function<void __cdecl(ksRacing::UpdateOfficialPositionEvent const &)> >,std::allocator<std::pair<void *,std::function<void __cdecl(ksRacing::UpdateOfficialPositionEvent const &)> > > > >
{
};

/* 68526 */
struct Event<ksRacing::UpdateOfficialPositionEvent>
{
  std::vector<std::pair<void *,std::function<void __cdecl(ksRacing::UpdateOfficialPositionEvent const &)> >,std::allocator<std::pair<void *,std::function<void __cdecl(ksRacing::UpdateOfficialPositionEvent const &)> > > > handlers;
};

/* 68527 */
struct __cppobj std::allocator<std::pair<void *,std::function<void __cdecl(ksRacing::UpdateCarSystems const &)> > >
{
};

/* 68536 */
struct __cppobj std::_Vector_val<std::_Simple_types<std::pair<void *,std::function<void __cdecl(ksRacing::UpdateCarSystems const &)> > > > : std::_Container_base0
{
  std::pair<void *,std::function<void __cdecl(ksRacing::UpdateCarSystems const &)> > *_Myfirst;
  std::pair<void *,std::function<void __cdecl(ksRacing::UpdateCarSystems const &)> > *_Mylast;
  std::pair<void *,std::function<void __cdecl(ksRacing::UpdateCarSystems const &)> > *_Myend;
};

/* 68537 */
struct __cppobj std::_Compressed_pair<std::allocator<std::pair<void *,std::function<void __cdecl(ksRacing::UpdateCarSystems const &)> > >,std::_Vector_val<std::_Simple_types<std::pair<void *,std::function<void __cdecl(ksRacing::UpdateCarSystems const &)> > > >,1> : std::allocator<std::pair<void *,std::function<void __cdecl(ksRacing::UpdateCarSystems const &)> > >
{
  std::_Vector_val<std::_Simple_types<std::pair<void *,std::function<void __cdecl(ksRacing::UpdateCarSystems const &)> > > > _Myval2;
};

/* 68538 */
struct std::_Vector_alloc<std::_Vec_base_types<std::pair<void *,std::function<void __cdecl(ksRacing::UpdateCarSystems const &)> >,std::allocator<std::pair<void *,std::function<void __cdecl(ksRacing::UpdateCarSystems const &)> > > > >
{
  std::_Compressed_pair<std::allocator<std::pair<void *,std::function<void __cdecl(ksRacing::UpdateCarSystems const &)> > >,std::_Vector_val<std::_Simple_types<std::pair<void *,std::function<void __cdecl(ksRacing::UpdateCarSystems const &)> > > >,1> _Mypair;
};

/* 68539 */
struct __cppobj std::vector<std::pair<void *,std::function<void __cdecl(ksRacing::UpdateCarSystems const &)> >,std::allocator<std::pair<void *,std::function<void __cdecl(ksRacing::UpdateCarSystems const &)> > > > : std::_Vector_alloc<std::_Vec_base_types<std::pair<void *,std::function<void __cdecl(ksRacing::UpdateCarSystems const &)> >,std::allocator<std::pair<void *,std::function<void __cdecl(ksRacing::UpdateCarSystems const &)> > > > >
{
};

/* 68540 */
struct Event<ksRacing::UpdateCarSystems>
{
  std::vector<std::pair<void *,std::function<void __cdecl(ksRacing::UpdateCarSystems const &)> >,std::allocator<std::pair<void *,std::function<void __cdecl(ksRacing::UpdateCarSystems const &)> > > > handlers;
};

/* 68541 */
struct __cppobj std::allocator<std::pair<void *,std::function<void __cdecl(unsigned short const &)> > >
{
};

/* 68549 */
struct __cppobj std::_Vector_val<std::_Simple_types<std::pair<void *,std::function<void __cdecl(unsigned short const &)> > > > : std::_Container_base0
{
  std::pair<void *,std::function<void __cdecl(unsigned short const &)> > *_Myfirst;
  std::pair<void *,std::function<void __cdecl(unsigned short const &)> > *_Mylast;
  std::pair<void *,std::function<void __cdecl(unsigned short const &)> > *_Myend;
};

/* 68550 */
struct __cppobj std::_Compressed_pair<std::allocator<std::pair<void *,std::function<void __cdecl(unsigned short const &)> > >,std::_Vector_val<std::_Simple_types<std::pair<void *,std::function<void __cdecl(unsigned short const &)> > > >,1> : std::allocator<std::pair<void *,std::function<void __cdecl(unsigned short const &)> > >
{
  std::_Vector_val<std::_Simple_types<std::pair<void *,std::function<void __cdecl(unsigned short const &)> > > > _Myval2;
};

/* 68551 */
struct std::_Vector_alloc<std::_Vec_base_types<std::pair<void *,std::function<void __cdecl(unsigned short const &)> >,std::allocator<std::pair<void *,std::function<void __cdecl(unsigned short const &)> > > > >
{
  std::_Compressed_pair<std::allocator<std::pair<void *,std::function<void __cdecl(unsigned short const &)> > >,std::_Vector_val<std::_Simple_types<std::pair<void *,std::function<void __cdecl(unsigned short const &)> > > >,1> _Mypair;
};

/* 68552 */
struct __cppobj std::vector<std::pair<void *,std::function<void __cdecl(unsigned short const &)> >,std::allocator<std::pair<void *,std::function<void __cdecl(unsigned short const &)> > > > : std::_Vector_alloc<std::_Vec_base_types<std::pair<void *,std::function<void __cdecl(unsigned short const &)> >,std::allocator<std::pair<void *,std::function<void __cdecl(unsigned short const &)> > > > >
{
};

/* 68553 */
struct Event<unsigned short>
{
  std::vector<std::pair<void *,std::function<void __cdecl(unsigned short const &)> >,std::allocator<std::pair<void *,std::function<void __cdecl(unsigned short const &)> > > > handlers;
};

/* 68555 */
struct __cppobj std::allocator<std::_Tree_node<std::pair<unsigned short const ,ksRacing::CarState>,void *> >
{
};

/* 68561 */
struct __cppobj std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned short const ,ksRacing::CarState> > > : std::_Container_base0
{
  std::_Tree_node<std::pair<unsigned short const ,ksRacing::CarState>,void *> *_Myhead;
  unsigned __int64 _Mysize;
};

/* 68562 */
struct __cppobj std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<unsigned short const ,ksRacing::CarState>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned short const ,ksRacing::CarState> > >,1> : std::allocator<std::_Tree_node<std::pair<unsigned short const ,ksRacing::CarState>,void *> >
{
  std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned short const ,ksRacing::CarState> > > _Myval2;
};

/* 68563 */
struct __cppobj std::_Compressed_pair<std::less<unsigned short>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<unsigned short const ,ksRacing::CarState>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned short const ,ksRacing::CarState> > >,1>,1> : std::less<unsigned short>
{
  std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<unsigned short const ,ksRacing::CarState>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned short const ,ksRacing::CarState> > >,1> _Myval2;
};

/* 68564 */
struct std::_Tree_comp_alloc<std::_Tmap_traits<unsigned short,ksRacing::CarState,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,ksRacing::CarState> >,0> >
{
  std::_Compressed_pair<std::less<unsigned short>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<unsigned short const ,ksRacing::CarState>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned short const ,ksRacing::CarState> > >,1>,1> _Mypair;
};

/* 68565 */
struct __cppobj std::_Tree<std::_Tmap_traits<unsigned short,ksRacing::CarState,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,ksRacing::CarState> >,0> > : std::_Tree_comp_alloc<std::_Tmap_traits<unsigned short,ksRacing::CarState,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,ksRacing::CarState> >,0> >
{
};

/* 68566 */
struct __cppobj std::map<unsigned short,ksRacing::CarState,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,ksRacing::CarState> > > : std::_Tree<std::_Tmap_traits<unsigned short,ksRacing::CarState,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,ksRacing::CarState> >,0> >
{
};

/* 68567 */
struct __cppobj std::allocator<std::_Tree_node<std::pair<unsigned short const ,ksRacing::CarState *>,void *> >
{
};

/* 68570 */
struct __cppobj std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned short const ,ksRacing::CarState *> > > : std::_Container_base0
{
  std::_Tree_node<std::pair<unsigned short const ,ksRacing::CarState *>,void *> *_Myhead;
  unsigned __int64 _Mysize;
};

/* 68571 */
struct __cppobj std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<unsigned short const ,ksRacing::CarState *>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned short const ,ksRacing::CarState *> > >,1> : std::allocator<std::_Tree_node<std::pair<unsigned short const ,ksRacing::CarState *>,void *> >
{
  std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned short const ,ksRacing::CarState *> > > _Myval2;
};

/* 68572 */
struct __cppobj std::_Compressed_pair<std::less<unsigned short>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<unsigned short const ,ksRacing::CarState *>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned short const ,ksRacing::CarState *> > >,1>,1> : std::less<unsigned short>
{
  std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<unsigned short const ,ksRacing::CarState *>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned short const ,ksRacing::CarState *> > >,1> _Myval2;
};

/* 68573 */
struct std::_Tree_comp_alloc<std::_Tmap_traits<unsigned short,ksRacing::CarState *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,ksRacing::CarState *> >,0> >
{
  std::_Compressed_pair<std::less<unsigned short>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<unsigned short const ,ksRacing::CarState *>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned short const ,ksRacing::CarState *> > >,1>,1> _Mypair;
};

/* 68574 */
struct __cppobj std::_Tree<std::_Tmap_traits<unsigned short,ksRacing::CarState *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,ksRacing::CarState *> >,0> > : std::_Tree_comp_alloc<std::_Tmap_traits<unsigned short,ksRacing::CarState *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,ksRacing::CarState *> >,0> >
{
};

/* 68575 */
struct __cppobj std::map<unsigned short,ksRacing::CarState *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,ksRacing::CarState *> > > : std::_Tree<std::_Tmap_traits<unsigned short,ksRacing::CarState *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,ksRacing::CarState *> >,0> >
{
};

/* 68222 */
struct __cppobj std::allocator<std::vector<unsigned short,std::allocator<unsigned short> > >
{
};

/* 68223 */
struct __cppobj std::_Vector_val<std::_Simple_types<std::vector<unsigned short,std::allocator<unsigned short> > > > : std::_Container_base0
{
  std::vector<unsigned short,std::allocator<unsigned short> > *_Myfirst;
  std::vector<unsigned short,std::allocator<unsigned short> > *_Mylast;
  std::vector<unsigned short,std::allocator<unsigned short> > *_Myend;
};

/* 68224 */
struct __cppobj std::_Compressed_pair<std::allocator<std::vector<unsigned short,std::allocator<unsigned short> > >,std::_Vector_val<std::_Simple_types<std::vector<unsigned short,std::allocator<unsigned short> > > >,1> : std::allocator<std::vector<unsigned short,std::allocator<unsigned short> > >
{
  std::_Vector_val<std::_Simple_types<std::vector<unsigned short,std::allocator<unsigned short> > > > _Myval2;
};

/* 68225 */
struct std::_Vector_alloc<std::_Vec_base_types<std::vector<unsigned short,std::allocator<unsigned short> >,std::allocator<std::vector<unsigned short,std::allocator<unsigned short> > > > >
{
  std::_Compressed_pair<std::allocator<std::vector<unsigned short,std::allocator<unsigned short> > >,std::_Vector_val<std::_Simple_types<std::vector<unsigned short,std::allocator<unsigned short> > > >,1> _Mypair;
};

/* 68226 */
struct __cppobj std::vector<std::vector<unsigned short,std::allocator<unsigned short> >,std::allocator<std::vector<unsigned short,std::allocator<unsigned short> > > > : std::_Vector_alloc<std::_Vec_base_types<std::vector<unsigned short,std::allocator<unsigned short> >,std::allocator<std::vector<unsigned short,std::allocator<unsigned short> > > > >
{
};

/* 68576 */
struct __declspec(align(8)) ksRacing::CarStateServices
{
  Event<ksRacing::UpdateOfficialPositionEvent> onUpdateOfficialPositionEvent;
  Event<bool> onUpdateStandingEvent;
  Event<ksRacing::UpdateCarSystems> onUpdateSystems;
  Event<ksRacing::UpdateCarSystems> onUpdateReplaySystem;
  Event<unsigned short> onSessionOverEvent;
  ksRacing::RaceManager *raceManager;
  char sorterState;
  std::map<unsigned short,ksRacing::CarState,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,ksRacing::CarState> > > carStates;
  std::map<unsigned short,ksRacing::CarState *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,ksRacing::CarState *> > > liveCarStates;
  std::vector<unsigned short,std::allocator<unsigned short> > realtimePositions;
  std::vector<unsigned short,std::allocator<unsigned short> > splinePositions;
  std::vector<std::vector<unsigned short,std::allocator<unsigned short> >,std::allocator<std::vector<unsigned short,std::allocator<unsigned short> > > > cupStandingAsCarIndex;
  bool doAllCarsCompleteTheSession;
};

/* 68581 */
struct __cppobj std::allocator<std::_Tree_node<std::pair<unsigned short const ,ksRacing::DriverState>,void *> >
{
};

/* 68585 */
struct __cppobj std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned short const ,ksRacing::DriverState> > > : std::_Container_base0
{
  std::_Tree_node<std::pair<unsigned short const ,ksRacing::DriverState>,void *> *_Myhead;
  unsigned __int64 _Mysize;
};

/* 68586 */
struct __cppobj std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<unsigned short const ,ksRacing::DriverState>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned short const ,ksRacing::DriverState> > >,1> : std::allocator<std::_Tree_node<std::pair<unsigned short const ,ksRacing::DriverState>,void *> >
{
  std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned short const ,ksRacing::DriverState> > > _Myval2;
};

/* 68587 */
struct __cppobj std::_Compressed_pair<std::less<unsigned short>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<unsigned short const ,ksRacing::DriverState>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned short const ,ksRacing::DriverState> > >,1>,1> : std::less<unsigned short>
{
  std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<unsigned short const ,ksRacing::DriverState>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned short const ,ksRacing::DriverState> > >,1> _Myval2;
};

/* 68588 */
struct std::_Tree_comp_alloc<std::_Tmap_traits<unsigned short,ksRacing::DriverState,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,ksRacing::DriverState> >,0> >
{
  std::_Compressed_pair<std::less<unsigned short>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<unsigned short const ,ksRacing::DriverState>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned short const ,ksRacing::DriverState> > >,1>,1> _Mypair;
};

/* 68589 */
struct __cppobj std::_Tree<std::_Tmap_traits<unsigned short,ksRacing::DriverState,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,ksRacing::DriverState> >,0> > : std::_Tree_comp_alloc<std::_Tmap_traits<unsigned short,ksRacing::DriverState,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,ksRacing::DriverState> >,0> >
{
};

/* 68590 */
struct __cppobj std::map<unsigned short,ksRacing::DriverState,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,ksRacing::DriverState> > > : std::_Tree<std::_Tmap_traits<unsigned short,ksRacing::DriverState,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,ksRacing::DriverState> >,0> >
{
};

/* 68591 */
struct ksRacing::DriverStateServices
{
  ksRacing::RaceManager *raceManager;
  std::map<unsigned short,ksRacing::DriverState,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,ksRacing::DriverState> > > driverStates;
};

/* 68596 */
struct __declspec(align(8)) ksRacing::WeatherServices
{
  ksRacing::RaceManager *raceManager;
  ksRacing::WeatherStatus status;
  ksRacing::WeatherData data;
  bool isRandomInitialized;
  float timeOfDaySeconds;
  float dayLenght;
};

/* 68601 */
struct __cppobj std::allocator<ksRacing::SeasonItem>
{
};

/* 68603 */
struct __cppobj std::_Vector_val<std::_Simple_types<ksRacing::SeasonItem> > : std::_Container_base0
{
  ksRacing::SeasonItem *_Myfirst;
  ksRacing::SeasonItem *_Mylast;
  ksRacing::SeasonItem *_Myend;
};

/* 68604 */
struct __cppobj std::_Compressed_pair<std::allocator<ksRacing::SeasonItem>,std::_Vector_val<std::_Simple_types<ksRacing::SeasonItem> >,1> : std::allocator<ksRacing::SeasonItem>
{
  std::_Vector_val<std::_Simple_types<ksRacing::SeasonItem> > _Myval2;
};

/* 68605 */
struct std::_Vector_alloc<std::_Vec_base_types<ksRacing::SeasonItem,std::allocator<ksRacing::SeasonItem> > >
{
  std::_Compressed_pair<std::allocator<ksRacing::SeasonItem>,std::_Vector_val<std::_Simple_types<ksRacing::SeasonItem> >,1> _Mypair;
};

/* 68606 */
struct __cppobj std::vector<ksRacing::SeasonItem,std::allocator<ksRacing::SeasonItem> > : std::_Vector_alloc<std::_Vec_base_types<ksRacing::SeasonItem,std::allocator<ksRacing::SeasonItem> > >
{
};

/* 68607 */
struct __declspec(align(8)) ksRacing::ResultServices
{
  ksRacing::RaceManager *raceManager;
  ksRacing::SeasonResult seasonResult;
  ksRacing::EventResult *eventResult;
  ksRacing::SessionResult *sessionResult;
  _BYTE raceEventType[1];
  std::vector<ksRacing::SeasonItem,std::allocator<ksRacing::SeasonItem> > seasonCarIndex;
  std::vector<ksRacing::SeasonItem,std::allocator<ksRacing::SeasonItem> > seasonDriverIndex;
  unsigned __int16 lastPositionForNewCars;
};

/* 68612 */
struct __cppobj std::allocator<ksRacing::GarageStock>
{
};

/* 68614 */
struct __cppobj std::_Vector_val<std::_Simple_types<ksRacing::GarageStock> > : std::_Container_base0
{
  ksRacing::GarageStock *_Myfirst;
  ksRacing::GarageStock *_Mylast;
  ksRacing::GarageStock *_Myend;
};

/* 68615 */
struct __cppobj std::_Compressed_pair<std::allocator<ksRacing::GarageStock>,std::_Vector_val<std::_Simple_types<ksRacing::GarageStock> >,1> : std::allocator<ksRacing::GarageStock>
{
  std::_Vector_val<std::_Simple_types<ksRacing::GarageStock> > _Myval2;
};

/* 68616 */
struct std::_Vector_alloc<std::_Vec_base_types<ksRacing::GarageStock,std::allocator<ksRacing::GarageStock> > >
{
  std::_Compressed_pair<std::allocator<ksRacing::GarageStock>,std::_Vector_val<std::_Simple_types<ksRacing::GarageStock> >,1> _Mypair;
};

/* 68617 */
struct __cppobj std::vector<ksRacing::GarageStock,std::allocator<ksRacing::GarageStock> > : std::_Vector_alloc<std::_Vec_base_types<ksRacing::GarageStock,std::allocator<ksRacing::GarageStock> > >
{
};

/* 68618 */
struct ksRacing::GarageServices
{
  ksRacing::RaceManager *raceManager;
  std::vector<ksRacing::GarageStock,std::allocator<ksRacing::GarageStock> > stocks;
};

/* 68637 */
struct __cppobj std::allocator<std::pair<void *,std::function<void __cdecl(ksRacing::Lap const &)> > >
{
};

/* 68645 */
struct __cppobj std::_Vector_val<std::_Simple_types<std::pair<void *,std::function<void __cdecl(ksRacing::Lap const &)> > > > : std::_Container_base0
{
  std::pair<void *,std::function<void __cdecl(ksRacing::Lap const &)> > *_Myfirst;
  std::pair<void *,std::function<void __cdecl(ksRacing::Lap const &)> > *_Mylast;
  std::pair<void *,std::function<void __cdecl(ksRacing::Lap const &)> > *_Myend;
};

/* 68646 */
struct __cppobj std::_Compressed_pair<std::allocator<std::pair<void *,std::function<void __cdecl(ksRacing::Lap const &)> > >,std::_Vector_val<std::_Simple_types<std::pair<void *,std::function<void __cdecl(ksRacing::Lap const &)> > > >,1> : std::allocator<std::pair<void *,std::function<void __cdecl(ksRacing::Lap const &)> > >
{
  std::_Vector_val<std::_Simple_types<std::pair<void *,std::function<void __cdecl(ksRacing::Lap const &)> > > > _Myval2;
};

/* 68647 */
struct std::_Vector_alloc<std::_Vec_base_types<std::pair<void *,std::function<void __cdecl(ksRacing::Lap const &)> >,std::allocator<std::pair<void *,std::function<void __cdecl(ksRacing::Lap const &)> > > > >
{
  std::_Compressed_pair<std::allocator<std::pair<void *,std::function<void __cdecl(ksRacing::Lap const &)> > >,std::_Vector_val<std::_Simple_types<std::pair<void *,std::function<void __cdecl(ksRacing::Lap const &)> > > >,1> _Mypair;
};

/* 68648 */
struct __cppobj std::vector<std::pair<void *,std::function<void __cdecl(ksRacing::Lap const &)> >,std::allocator<std::pair<void *,std::function<void __cdecl(ksRacing::Lap const &)> > > > : std::_Vector_alloc<std::_Vec_base_types<std::pair<void *,std::function<void __cdecl(ksRacing::Lap const &)> >,std::allocator<std::pair<void *,std::function<void __cdecl(ksRacing::Lap const &)> > > > >
{
};

/* 68649 */
struct Event<ksRacing::Lap>
{
  std::vector<std::pair<void *,std::function<void __cdecl(ksRacing::Lap const &)> >,std::allocator<std::pair<void *,std::function<void __cdecl(ksRacing::Lap const &)> > > > handlers;
};

/* 68650 */
struct __cppobj std::allocator<std::pair<void *,std::function<void __cdecl(ksRacing::BestLap const &)> > >
{
};

/* 68659 */
struct __cppobj std::_Vector_val<std::_Simple_types<std::pair<void *,std::function<void __cdecl(ksRacing::BestLap const &)> > > > : std::_Container_base0
{
  std::pair<void *,std::function<void __cdecl(ksRacing::BestLap const &)> > *_Myfirst;
  std::pair<void *,std::function<void __cdecl(ksRacing::BestLap const &)> > *_Mylast;
  std::pair<void *,std::function<void __cdecl(ksRacing::BestLap const &)> > *_Myend;
};

/* 68660 */
struct __cppobj std::_Compressed_pair<std::allocator<std::pair<void *,std::function<void __cdecl(ksRacing::BestLap const &)> > >,std::_Vector_val<std::_Simple_types<std::pair<void *,std::function<void __cdecl(ksRacing::BestLap const &)> > > >,1> : std::allocator<std::pair<void *,std::function<void __cdecl(ksRacing::BestLap const &)> > >
{
  std::_Vector_val<std::_Simple_types<std::pair<void *,std::function<void __cdecl(ksRacing::BestLap const &)> > > > _Myval2;
};

/* 68661 */
struct std::_Vector_alloc<std::_Vec_base_types<std::pair<void *,std::function<void __cdecl(ksRacing::BestLap const &)> >,std::allocator<std::pair<void *,std::function<void __cdecl(ksRacing::BestLap const &)> > > > >
{
  std::_Compressed_pair<std::allocator<std::pair<void *,std::function<void __cdecl(ksRacing::BestLap const &)> > >,std::_Vector_val<std::_Simple_types<std::pair<void *,std::function<void __cdecl(ksRacing::BestLap const &)> > > >,1> _Mypair;
};

/* 68662 */
struct __cppobj std::vector<std::pair<void *,std::function<void __cdecl(ksRacing::BestLap const &)> >,std::allocator<std::pair<void *,std::function<void __cdecl(ksRacing::BestLap const &)> > > > : std::_Vector_alloc<std::_Vec_base_types<std::pair<void *,std::function<void __cdecl(ksRacing::BestLap const &)> >,std::allocator<std::pair<void *,std::function<void __cdecl(ksRacing::BestLap const &)> > > > >
{
};

/* 68663 */
struct Event<ksRacing::BestLap>
{
  std::vector<std::pair<void *,std::function<void __cdecl(ksRacing::BestLap const &)> >,std::allocator<std::pair<void *,std::function<void __cdecl(ksRacing::BestLap const &)> > > > handlers;
};

/* 68227 */
struct __cppobj ksRacing::TimingRecord : ksRacing::WritableRaceStructure
{
  unsigned __int16 index;
  std::vector<unsigned short,std::allocator<unsigned short> > overallLapSet;
  std::vector<unsigned short,std::allocator<unsigned short> > completedLapSet;
  std::vector<unsigned short,std::allocator<unsigned short> > bestLapQueue;
  std::vector<std::vector<unsigned short,std::allocator<unsigned short> >,std::allocator<std::vector<unsigned short,std::allocator<unsigned short> > > > bestSplitLapQueue;
  int bestLapValue;
  std::vector<int,std::allocator<int> > bestSplitValues;
  int minBestLapValue;
  std::vector<int,std::allocator<int> > minBestSplitValues;
};

/* 68236 */
struct __cppobj std::allocator<std::_Tree_node<std::pair<unsigned short const ,ksRacing::TimingRecord>,void *> >
{
};

/* 68238 */
struct __cppobj std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned short const ,ksRacing::TimingRecord> > > : std::_Container_base0
{
  std::_Tree_node<std::pair<unsigned short const ,ksRacing::TimingRecord>,void *> *_Myhead;
  unsigned __int64 _Mysize;
};

/* 68239 */
struct __cppobj std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<unsigned short const ,ksRacing::TimingRecord>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned short const ,ksRacing::TimingRecord> > >,1> : std::allocator<std::_Tree_node<std::pair<unsigned short const ,ksRacing::TimingRecord>,void *> >
{
  std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned short const ,ksRacing::TimingRecord> > > _Myval2;
};

/* 68240 */
struct __cppobj std::_Compressed_pair<std::less<unsigned short>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<unsigned short const ,ksRacing::TimingRecord>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned short const ,ksRacing::TimingRecord> > >,1>,1> : std::less<unsigned short>
{
  std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<unsigned short const ,ksRacing::TimingRecord>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned short const ,ksRacing::TimingRecord> > >,1> _Myval2;
};

/* 68241 */
struct std::_Tree_comp_alloc<std::_Tmap_traits<unsigned short,ksRacing::TimingRecord,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,ksRacing::TimingRecord> >,0> >
{
  std::_Compressed_pair<std::less<unsigned short>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<unsigned short const ,ksRacing::TimingRecord>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned short const ,ksRacing::TimingRecord> > >,1>,1> _Mypair;
};

/* 68242 */
struct __cppobj std::_Tree<std::_Tmap_traits<unsigned short,ksRacing::TimingRecord,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,ksRacing::TimingRecord> >,0> > : std::_Tree_comp_alloc<std::_Tmap_traits<unsigned short,ksRacing::TimingRecord,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,ksRacing::TimingRecord> >,0> >
{
};

/* 68243 */
struct __cppobj std::map<unsigned short,ksRacing::TimingRecord,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,ksRacing::TimingRecord> > > : std::_Tree<std::_Tmap_traits<unsigned short,ksRacing::TimingRecord,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,ksRacing::TimingRecord> >,0> >
{
};

/* 68244 */
struct __cppobj ksRacing::SessionTiming : ksRacing::WritableRaceStructure
{
  std::vector<ksRacing::Lap,std::allocator<ksRacing::Lap> > overallLaps;
  ksRacing::TimingRecord overallRecord;
  std::map<unsigned short,ksRacing::TimingRecord,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,ksRacing::TimingRecord> > > carRecords;
  std::map<unsigned short,ksRacing::TimingRecord,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,ksRacing::TimingRecord> > > driverRecords;
  std::vector<std::pair<unsigned short,unsigned short>,std::allocator<std::pair<unsigned short,unsigned short> > > carCurrentLap;
};

/* 68664 */
struct ksRacing::TimingServices
{
  Event<ksRacing::OnSplitTimeEvent> onSplitTimeEvent;
  Event<ksRacing::Lap> onLapEvent;
  Event<ksRacing::BestLap> onBestLapEvent;
  Event<ksRacing::OnRemoteLapEvent> onRemoteLapEvent;
  ksRacing::RaceManager *raceManager;
  ksRacing::SessionTiming timing;
  const char carMaxBestHistory;
  ksRacing::Lap nullLap;
};

/* 68669 */
struct __cppobj std::allocator<std::pair<void *,std::function<void __cdecl(ksRacing::InvestigationStart const &)> > >
{
};

/* 68678 */
struct __cppobj std::_Vector_val<std::_Simple_types<std::pair<void *,std::function<void __cdecl(ksRacing::InvestigationStart const &)> > > > : std::_Container_base0
{
  std::pair<void *,std::function<void __cdecl(ksRacing::InvestigationStart const &)> > *_Myfirst;
  std::pair<void *,std::function<void __cdecl(ksRacing::InvestigationStart const &)> > *_Mylast;
  std::pair<void *,std::function<void __cdecl(ksRacing::InvestigationStart const &)> > *_Myend;
};

/* 68679 */
struct __cppobj std::_Compressed_pair<std::allocator<std::pair<void *,std::function<void __cdecl(ksRacing::InvestigationStart const &)> > >,std::_Vector_val<std::_Simple_types<std::pair<void *,std::function<void __cdecl(ksRacing::InvestigationStart const &)> > > >,1> : std::allocator<std::pair<void *,std::function<void __cdecl(ksRacing::InvestigationStart const &)> > >
{
  std::_Vector_val<std::_Simple_types<std::pair<void *,std::function<void __cdecl(ksRacing::InvestigationStart const &)> > > > _Myval2;
};

/* 68680 */
struct std::_Vector_alloc<std::_Vec_base_types<std::pair<void *,std::function<void __cdecl(ksRacing::InvestigationStart const &)> >,std::allocator<std::pair<void *,std::function<void __cdecl(ksRacing::InvestigationStart const &)> > > > >
{
  std::_Compressed_pair<std::allocator<std::pair<void *,std::function<void __cdecl(ksRacing::InvestigationStart const &)> > >,std::_Vector_val<std::_Simple_types<std::pair<void *,std::function<void __cdecl(ksRacing::InvestigationStart const &)> > > >,1> _Mypair;
};

/* 68681 */
struct __cppobj std::vector<std::pair<void *,std::function<void __cdecl(ksRacing::InvestigationStart const &)> >,std::allocator<std::pair<void *,std::function<void __cdecl(ksRacing::InvestigationStart const &)> > > > : std::_Vector_alloc<std::_Vec_base_types<std::pair<void *,std::function<void __cdecl(ksRacing::InvestigationStart const &)> >,std::allocator<std::pair<void *,std::function<void __cdecl(ksRacing::InvestigationStart const &)> > > > >
{
};

/* 68682 */
struct Event<ksRacing::InvestigationStart>
{
  std::vector<std::pair<void *,std::function<void __cdecl(ksRacing::InvestigationStart const &)> >,std::allocator<std::pair<void *,std::function<void __cdecl(ksRacing::InvestigationStart const &)> > > > handlers;
};

/* 68683 */
struct __cppobj std::allocator<std::pair<void *,std::function<void __cdecl(ksRacing::InvestigationEnd const &)> > >
{
};

/* 68692 */
struct __cppobj std::_Vector_val<std::_Simple_types<std::pair<void *,std::function<void __cdecl(ksRacing::InvestigationEnd const &)> > > > : std::_Container_base0
{
  std::pair<void *,std::function<void __cdecl(ksRacing::InvestigationEnd const &)> > *_Myfirst;
  std::pair<void *,std::function<void __cdecl(ksRacing::InvestigationEnd const &)> > *_Mylast;
  std::pair<void *,std::function<void __cdecl(ksRacing::InvestigationEnd const &)> > *_Myend;
};

/* 68693 */
struct __cppobj std::_Compressed_pair<std::allocator<std::pair<void *,std::function<void __cdecl(ksRacing::InvestigationEnd const &)> > >,std::_Vector_val<std::_Simple_types<std::pair<void *,std::function<void __cdecl(ksRacing::InvestigationEnd const &)> > > >,1> : std::allocator<std::pair<void *,std::function<void __cdecl(ksRacing::InvestigationEnd const &)> > >
{
  std::_Vector_val<std::_Simple_types<std::pair<void *,std::function<void __cdecl(ksRacing::InvestigationEnd const &)> > > > _Myval2;
};

/* 68694 */
struct std::_Vector_alloc<std::_Vec_base_types<std::pair<void *,std::function<void __cdecl(ksRacing::InvestigationEnd const &)> >,std::allocator<std::pair<void *,std::function<void __cdecl(ksRacing::InvestigationEnd const &)> > > > >
{
  std::_Compressed_pair<std::allocator<std::pair<void *,std::function<void __cdecl(ksRacing::InvestigationEnd const &)> > >,std::_Vector_val<std::_Simple_types<std::pair<void *,std::function<void __cdecl(ksRacing::InvestigationEnd const &)> > > >,1> _Mypair;
};

/* 68695 */
struct __cppobj std::vector<std::pair<void *,std::function<void __cdecl(ksRacing::InvestigationEnd const &)> >,std::allocator<std::pair<void *,std::function<void __cdecl(ksRacing::InvestigationEnd const &)> > > > : std::_Vector_alloc<std::_Vec_base_types<std::pair<void *,std::function<void __cdecl(ksRacing::InvestigationEnd const &)> >,std::allocator<std::pair<void *,std::function<void __cdecl(ksRacing::InvestigationEnd const &)> > > > >
{
};

/* 68696 */
struct Event<ksRacing::InvestigationEnd>
{
  std::vector<std::pair<void *,std::function<void __cdecl(ksRacing::InvestigationEnd const &)> >,std::allocator<std::pair<void *,std::function<void __cdecl(ksRacing::InvestigationEnd const &)> > > > handlers;
};

/* 68697 */
struct __cppobj std::less<std::pair<unsigned short,unsigned short> >
{
};

/* 68698 */
struct __cppobj std::allocator<std::_Tree_node<std::pair<unsigned short,unsigned short>,void *> >
{
};

/* 68700 */
struct __cppobj std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned short,unsigned short> > > : std::_Container_base0
{
  std::_Tree_node<std::pair<unsigned short,unsigned short>,void *> *_Myhead;
  unsigned __int64 _Mysize;
};

/* 68701 */
struct __cppobj std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<unsigned short,unsigned short>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned short,unsigned short> > >,1> : std::allocator<std::_Tree_node<std::pair<unsigned short,unsigned short>,void *> >
{
  std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned short,unsigned short> > > _Myval2;
};

/* 68702 */
struct __cppobj std::_Compressed_pair<std::less<std::pair<unsigned short,unsigned short> >,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<unsigned short,unsigned short>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned short,unsigned short> > >,1>,1> : std::less<std::pair<unsigned short,unsigned short> >
{
  std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<unsigned short,unsigned short>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned short,unsigned short> > >,1> _Myval2;
};

/* 68703 */
struct std::_Tree_comp_alloc<std::_Tset_traits<std::pair<unsigned short,unsigned short>,std::less<std::pair<unsigned short,unsigned short> >,std::allocator<std::pair<unsigned short,unsigned short> >,0> >
{
  std::_Compressed_pair<std::less<std::pair<unsigned short,unsigned short> >,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<unsigned short,unsigned short>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned short,unsigned short> > >,1>,1> _Mypair;
};

/* 68704 */
struct __cppobj std::_Tree<std::_Tset_traits<std::pair<unsigned short,unsigned short>,std::less<std::pair<unsigned short,unsigned short> >,std::allocator<std::pair<unsigned short,unsigned short> >,0> > : std::_Tree_comp_alloc<std::_Tset_traits<std::pair<unsigned short,unsigned short>,std::less<std::pair<unsigned short,unsigned short> >,std::allocator<std::pair<unsigned short,unsigned short> >,0> >
{
};

/* 68705 */
struct __cppobj std::set<std::pair<unsigned short,unsigned short>,std::less<std::pair<unsigned short,unsigned short> >,std::allocator<std::pair<unsigned short,unsigned short> > > : std::_Tree<std::_Tset_traits<std::pair<unsigned short,unsigned short>,std::less<std::pair<unsigned short,unsigned short> >,std::allocator<std::pair<unsigned short,unsigned short> >,0> >
{
};

/* 58283 */
struct __cppobj std::_Iterator_base0
{
};

/* 68706 */
struct __cppobj std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned short,unsigned short> > >,std::_Iterator_base0> : std::_Iterator_base0
{
  std::_Tree_node<std::pair<unsigned short,unsigned short>,void *> *_Ptr;
};

/* 68707 */
struct __cppobj std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned short,unsigned short> > > > : std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned short,unsigned short> > >,std::_Iterator_base0>
{
};

/* 68370 */
struct __cppobj std::allocator<std::_Tree_node<unsigned short,void *> >
{
};

/* 68372 */
struct __cppobj std::_Tree_val<std::_Tree_simple_types<unsigned short> > : std::_Container_base0
{
  std::_Tree_node<unsigned short,void *> *_Myhead;
  unsigned __int64 _Mysize;
};

/* 68373 */
struct __cppobj std::_Compressed_pair<std::allocator<std::_Tree_node<unsigned short,void *> >,std::_Tree_val<std::_Tree_simple_types<unsigned short> >,1> : std::allocator<std::_Tree_node<unsigned short,void *> >
{
  std::_Tree_val<std::_Tree_simple_types<unsigned short> > _Myval2;
};

/* 68374 */
struct __cppobj std::_Compressed_pair<std::less<unsigned short>,std::_Compressed_pair<std::allocator<std::_Tree_node<unsigned short,void *> >,std::_Tree_val<std::_Tree_simple_types<unsigned short> >,1>,1> : std::less<unsigned short>
{
  std::_Compressed_pair<std::allocator<std::_Tree_node<unsigned short,void *> >,std::_Tree_val<std::_Tree_simple_types<unsigned short> >,1> _Myval2;
};

/* 68375 */
struct std::_Tree_comp_alloc<std::_Tset_traits<unsigned short,std::less<unsigned short>,std::allocator<unsigned short>,0> >
{
  std::_Compressed_pair<std::less<unsigned short>,std::_Compressed_pair<std::allocator<std::_Tree_node<unsigned short,void *> >,std::_Tree_val<std::_Tree_simple_types<unsigned short> >,1>,1> _Mypair;
};

/* 68376 */
struct __cppobj std::_Tree<std::_Tset_traits<unsigned short,std::less<unsigned short>,std::allocator<unsigned short>,0> > : std::_Tree_comp_alloc<std::_Tset_traits<unsigned short,std::less<unsigned short>,std::allocator<unsigned short>,0> >
{
};

/* 68377 */
struct __cppobj std::set<unsigned short,std::less<unsigned short>,std::allocator<unsigned short> > : std::_Tree<std::_Tset_traits<unsigned short,std::less<unsigned short>,std::allocator<unsigned short>,0> >
{
};

/* 68708 */
struct __cppobj std::allocator<std::_Tree_node<std::pair<unsigned short const ,ksRacing::CarInvestigation>,void *> >
{
};

/* 68712 */
struct __cppobj std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned short const ,ksRacing::CarInvestigation> > > : std::_Container_base0
{
  std::_Tree_node<std::pair<unsigned short const ,ksRacing::CarInvestigation>,void *> *_Myhead;
  unsigned __int64 _Mysize;
};

/* 68713 */
struct __cppobj std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<unsigned short const ,ksRacing::CarInvestigation>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned short const ,ksRacing::CarInvestigation> > >,1> : std::allocator<std::_Tree_node<std::pair<unsigned short const ,ksRacing::CarInvestigation>,void *> >
{
  std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned short const ,ksRacing::CarInvestigation> > > _Myval2;
};

/* 68714 */
struct __cppobj std::_Compressed_pair<std::less<unsigned short>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<unsigned short const ,ksRacing::CarInvestigation>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned short const ,ksRacing::CarInvestigation> > >,1>,1> : std::less<unsigned short>
{
  std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<unsigned short const ,ksRacing::CarInvestigation>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned short const ,ksRacing::CarInvestigation> > >,1> _Myval2;
};

/* 68715 */
struct std::_Tree_comp_alloc<std::_Tmap_traits<unsigned short,ksRacing::CarInvestigation,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,ksRacing::CarInvestigation> >,0> >
{
  std::_Compressed_pair<std::less<unsigned short>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<unsigned short const ,ksRacing::CarInvestigation>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned short const ,ksRacing::CarInvestigation> > >,1>,1> _Mypair;
};

/* 68716 */
struct __cppobj std::_Tree<std::_Tmap_traits<unsigned short,ksRacing::CarInvestigation,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,ksRacing::CarInvestigation> >,0> > : std::_Tree_comp_alloc<std::_Tmap_traits<unsigned short,ksRacing::CarInvestigation,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,ksRacing::CarInvestigation> >,0> >
{
};

/* 68717 */
struct __cppobj std::map<unsigned short,ksRacing::CarInvestigation,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,ksRacing::CarInvestigation> > > : std::_Tree<std::_Tmap_traits<unsigned short,ksRacing::CarInvestigation,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,ksRacing::CarInvestigation> >,0> >
{
};

/* 68718 */
struct __cppobj std::allocator<std::_Tree_node<std::pair<unsigned short const ,ksRacing::CarPenalty>,void *> >
{
};

/* 68722 */
struct __cppobj std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned short const ,ksRacing::CarPenalty> > > : std::_Container_base0
{
  std::_Tree_node<std::pair<unsigned short const ,ksRacing::CarPenalty>,void *> *_Myhead;
  unsigned __int64 _Mysize;
};

/* 68723 */
struct __cppobj std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<unsigned short const ,ksRacing::CarPenalty>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned short const ,ksRacing::CarPenalty> > >,1> : std::allocator<std::_Tree_node<std::pair<unsigned short const ,ksRacing::CarPenalty>,void *> >
{
  std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned short const ,ksRacing::CarPenalty> > > _Myval2;
};

/* 68724 */
struct __cppobj std::_Compressed_pair<std::less<unsigned short>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<unsigned short const ,ksRacing::CarPenalty>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned short const ,ksRacing::CarPenalty> > >,1>,1> : std::less<unsigned short>
{
  std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<unsigned short const ,ksRacing::CarPenalty>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned short const ,ksRacing::CarPenalty> > >,1> _Myval2;
};

/* 68725 */
struct std::_Tree_comp_alloc<std::_Tmap_traits<unsigned short,ksRacing::CarPenalty,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,ksRacing::CarPenalty> >,0> >
{
  std::_Compressed_pair<std::less<unsigned short>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<unsigned short const ,ksRacing::CarPenalty>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned short const ,ksRacing::CarPenalty> > >,1>,1> _Mypair;
};

/* 68726 */
struct __cppobj std::_Tree<std::_Tmap_traits<unsigned short,ksRacing::CarPenalty,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,ksRacing::CarPenalty> >,0> > : std::_Tree_comp_alloc<std::_Tmap_traits<unsigned short,ksRacing::CarPenalty,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,ksRacing::CarPenalty> >,0> >
{
};

/* 68727 */
struct __cppobj std::map<unsigned short,ksRacing::CarPenalty,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,ksRacing::CarPenalty> > > : std::_Tree<std::_Tmap_traits<unsigned short,ksRacing::CarPenalty,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,ksRacing::CarPenalty> >,0> >
{
};

/* 68728 */
struct __declspec(align(8)) ksRacing::RaceDirectorServices
{
  Event<ksRacing::InvestigationStart> onInvestigationStart;
  Event<ksRacing::InvestigationEnd> onInvestigationEnd;
  ksRacing::RaceManager *raceManager;
  ksRacing::CarStateServices *carStateServices;
  std::set<std::pair<unsigned short,unsigned short>,std::less<std::pair<unsigned short,unsigned short> >,std::allocator<std::pair<unsigned short,unsigned short> > > noOvertakeSectors;
  std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned short,unsigned short> > > > it;
  std::set<unsigned short,std::less<unsigned short>,std::allocator<unsigned short> > carsToRemove;
  std::map<unsigned short,ksRacing::CarInvestigation,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,ksRacing::CarInvestigation> > > cutInvestigations;
  std::map<unsigned short,ksRacing::CarPenalty,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,ksRacing::CarPenalty> > > penalties;
  bool isWetSession;
};

/* 4379 */
struct ITextDataVtbl
{
  void *(__cdecl *__vecDelDtor)(ITextData *this, unsigned int);
  __declspec(align(16)) FString *(__cdecl *GetDisplayString)(ITextData *this);
  TSharedPtr<FString,1> *(__cdecl *GetLocalizedString)(ITextData *this, TSharedPtr<FString,1> *result);
  TSharedPtr<FString,1> *(__cdecl *GetMutableLocalizedString)(ITextData *this);
  FTextHistory *(__cdecl *GetTextHistory)(ITextData *this);
  FTextHistory *(__cdecl *GetMutableTextHistory)(ITextData *this);
  void (__cdecl *PersistText)(ITextData *this);
  unsigned __int16 (__cdecl *GetGlobalHistoryRevision)(ITextData *this);
  unsigned __int16 (__cdecl *GetLocalHistoryRevision)(ITextData *this);
};

/* 3836 */
union $850951A8B318D02FE34A9CBB43C9680A
{
  void (__cdecl *~FReferenceControllerBase)(SharedPointerInternals::FReferenceControllerBase *this);
  void *(__cdecl *__vecDelDtor)(SharedPointerInternals::FReferenceControllerBase *this, unsigned int);
};

/* 3837 */
struct SharedPointerInternals::FReferenceControllerBaseVtbl
{
  void (__cdecl *DestroyObject)(SharedPointerInternals::FReferenceControllerBase *this);
  $850951A8B318D02FE34A9CBB43C9680A ___u1;
};

/* 395 */
enum EStructFlags
{
  STRUCT_NoFlags = 0x0,
  STRUCT_Native = 0x1,
  STRUCT_IdenticalNative = 0x2,
  STRUCT_HasInstancedReference = 0x4,
  STRUCT_NoExport = 0x8,
  STRUCT_Atomic = 0x10,
  STRUCT_Immutable = 0x20,
  STRUCT_AddStructReferencedObjects = 0x40,
  STRUCT_RequiredAPI = 0x200,
  STRUCT_NetSerializeNative = 0x400,
  STRUCT_SerializeNative = 0x800,
  STRUCT_CopyNative = 0x1000,
  STRUCT_IsPlainOldData = 0x2000,
  STRUCT_NoDestructor = 0x4000,
  STRUCT_ZeroConstructor = 0x8000,
  STRUCT_ExportTextItemNative = 0x10000,
  STRUCT_ImportTextItemNative = 0x20000,
  STRUCT_PostSerializeNative = 0x40000,
  STRUCT_SerializeFromMismatchedTag = 0x80000,
  STRUCT_NetDeltaSerializeNative = 0x100000,
  STRUCT_PostScriptConstruct = 0x200000,
  STRUCT_NetSharedSerialization = 0x400000,
  STRUCT_Inherit = 0x14,
  STRUCT_ComputedFlags = 0x7FFC42,
};

/* 4407 */
struct __cppobj UScriptStruct : UStruct
{
  EStructFlags StructFlags;
  bool bPrepareCppStructOpsCompleted;
  UScriptStruct::ICppStructOps *CppStructOps;
};

/* 4211 */
struct TRefCountPtr<FRHITexture>
{
  FRHITexture *Reference;
};

/* 4213 */
struct TRefCountPtr<FRHISamplerState>
{
  FRHISamplerState *Reference;
};

/* 4214 */
struct FMipBiasFade
{
  float TotalMipCount;
  float MipCountDelta;
  float StartTime;
  float MipCountFadingRate;
  float BiasOffset;
};

/* 4215 */
struct __cppobj __declspec(align(2)) FTexture : FRenderResource
{
  TRefCountPtr<FRHITexture> TextureRHI;
  TRefCountPtr<FRHISamplerState> SamplerStateRHI;
  TRefCountPtr<FRHISamplerState> DeferredPassSamplerStateRHI;
  long double LastRenderTime;
  FMipBiasFade MipBiasFade;
  bool bGreyScaleFormat;
  bool bIgnoreGammaConversions;
  bool bSRGB;
};

/* 4216 */
struct __cppobj FTextureResource : FTexture
{
};

/* 4069 */
struct FRenderResourceVtbl
{
  void *(__cdecl *__vecDelDtor)(FRenderResource *this, unsigned int);
  void (__cdecl *InitDynamicRHI)(FRenderResource *this);
  void (__cdecl *ReleaseDynamicRHI)(FRenderResource *this);
  void (__cdecl *InitRHI)(FRenderResource *this);
  void (__cdecl *ReleaseRHI)(FRenderResource *this);
  void (__cdecl *InitResource)(FRenderResource *this);
  void (__cdecl *ReleaseResource)(FRenderResource *this);
  FString *(__cdecl *GetFriendlyName)(FRenderResource *this, FString *result);
};

/* 4072 */
struct __declspec(align(8)) FRHIResource
{
  FRHIResourceVtbl *vfptr;
  FThreadSafeCounter NumRefs;
  int MarkedForDelete;
  bool bDoNotDeferDelete;
  bool bCommitted;
};

/* 4204 */
struct FVRamAllocation
{
  unsigned int AllocationStart;
  unsigned int AllocationSize;
};

/* 4205 */
struct FRHIResourceInfo
{
  FVRamAllocation VRamAllocation;
};

/* 689 */
enum EClearBinding
{
  ENoneBound = 0x0,
  EColorBound = 0x1,
  EDepthStencilBound = 0x2,
};

/* 4206 */
struct FClearValueBinding::DSVAlue
{
  float Depth;
  unsigned int Stencil;
};

/* 4207 */
union FClearValueBinding::ClearValueType
{
  float Color[4];
  FClearValueBinding::DSVAlue DSValue;
};

/* 4208 */
struct FClearValueBinding
{
  EClearBinding ColorBinding;
  FClearValueBinding::ClearValueType Value;
};

/* 323 */
typedef MACRO_PF_OSI EPixelFormat;

/* 4210 */
struct __cppobj FRHITexture : FRHIResource
{
  FRHIResourceInfo ResourceInfo;
  FClearValueBinding ClearValue;
  unsigned int NumMips;
  unsigned int NumSamples;
  EPixelFormat Format;
  unsigned int Flags;
  FLastRenderTimeContainer *LastRenderTime;
  FLastRenderTimeContainer DefaultLastRenderTime;
  FName TextureName;
};

/* 4217 */
struct __cppobj FRHITextureReference : FRHITexture
{
  TRefCountPtr<FRHITexture> ReferencedTexture;
};

/* 69162 */
struct IAIPerceptionListenerInterfaceVtbl
{
  void *(__cdecl *__vecDelDtor)(IAIPerceptionListenerInterface *this, unsigned int);
  UObject *(__cdecl *_getUObject)(IAIPerceptionListenerInterface *this);
  UAIPerceptionComponent *(__cdecl *GetPerceptionComponent)(IAIPerceptionListenerInterface *this);
};

/* 69173 */
struct IGameplayTaskOwnerInterfaceVtbl
{
  void *(__cdecl *__vecDelDtor)(IGameplayTaskOwnerInterface *this, unsigned int);
  _BYTE gap8[8];
  UGameplayTasksComponent *(__cdecl *GetGameplayTasksComponent)(IGameplayTaskOwnerInterface *this, UGameplayTask *);
  AActor *(__cdecl *GetGameplayTaskOwner)(IGameplayTaskOwnerInterface *this, UGameplayTask *);
  AActor *(__cdecl *GetGameplayTaskAvatar)(IGameplayTaskOwnerInterface *this, UGameplayTask *);
  char (__cdecl *GetGameplayTaskDefaultPriority)(IGameplayTaskOwnerInterface *this);
  void (__cdecl *OnGameplayTaskInitialized)(IGameplayTaskOwnerInterface *this, UGameplayTask *);
  void (__cdecl *OnGameplayTaskActivated)(IGameplayTaskOwnerInterface *this, UGameplayTask *);
  void (__cdecl *OnGameplayTaskDeactivated)(IGameplayTaskOwnerInterface *this, UGameplayTask *);
};

/* 1949 */
enum ETeamAttitude::Type
{
  Friendly = 0x0,
  Neutral = 0x1,
  Hostile = 0x2,
};

/* 69176 */
struct IGenericTeamAgentInterfaceVtbl
{
  void *(__cdecl *__vecDelDtor)(IGenericTeamAgentInterface *this, unsigned int);
  UObject *(__cdecl *_getUObject)(IGenericTeamAgentInterface *this);
  void (__cdecl *SetGenericTeamId)(IGenericTeamAgentInterface *this, FGenericTeamId *);
  FGenericTeamId *(__cdecl *GetGenericTeamId)(IGenericTeamAgentInterface *this, FGenericTeamId *result);
  ETeamAttitude::Type (__cdecl *GetTeamAttitudeTowards)(IGenericTeamAgentInterface *this, AActor *);
};

/* 69179 */
struct IVisualLoggerDebugSnapshotInterfaceVtbl
{
  void *(__cdecl *__vecDelDtor)(IVisualLoggerDebugSnapshotInterface *this, unsigned int);
  UObject *(__cdecl *_getUObject)(IVisualLoggerDebugSnapshotInterface *this);
  void (__cdecl *GrabDebugSnapshot)(IVisualLoggerDebugSnapshotInterface *this, FVisualLogEntry *);
};

/* 69182 */
struct IAIResourceInterface
{
  IAIResourceInterfaceVtbl *vfptr;
};

/* 69184 */
struct __cppobj TBaseDelegate<TTypeWrapper<void>,UPathFollowingComponent *,FVector &> : FDelegateBase
{
};

/* 69185 */
struct __cppobj TBaseDelegate<void,UPathFollowingComponent *,FVector &> : TBaseDelegate<TTypeWrapper<void>,UPathFollowingComponent *,FVector &>
{
};

/* 69186 */
struct __cppobj TBaseMulticastDelegate<void,FAIRequestID,FPathFollowingResult const &> : FMulticastDelegateBase<FWeakObjectPtr>
{
};

/* 69187 */
struct __cppobj TMulticastDelegate<void,FAIRequestID,FPathFollowingResult const &> : TBaseMulticastDelegate<void,FAIRequestID,FPathFollowingResult const &>
{
};

/* 69188 */
struct __cppobj TBaseMulticastDelegate<void,FAIRequestID,enum EPathFollowingResult::Type> : FMulticastDelegateBase<FWeakObjectPtr>
{
};

/* 69189 */
struct __cppobj TMulticastDelegate<void,FAIRequestID,enum EPathFollowingResult::Type> : TBaseMulticastDelegate<void,FAIRequestID,enum EPathFollowingResult::Type>
{
};

/* 1617 */
enum EWmfMediaSamplerClockEvent
{
  Paused = 0x0,
  Restarted = 0x1,
  Started = 0x2,
  Stopped = 0x3,
};

/* 1945 */
typedef EWmfMediaSamplerClockEvent EPathFollowingStatus::Type;

/* 8837 */
struct TSharedPtr<FNavigationPath,1>
{
  FNavigationPath *Object;
  SharedPointerInternals::FSharedReferencer<1> SharedReferenceCount;
};

/* 69191 */
struct TSharedPtr<FMoveRequestCustomData,1>
{
  FMoveRequestCustomData *Object;
  SharedPointerInternals::FSharedReferencer<1> SharedReferenceCount;
};

/* 29248 */
struct FBasedPosition
{
  AActor *Base;
  FVector Position;
  FVector CachedBaseLocation;
  FRotator CachedBaseRotation;
  FVector CachedTransPosition;
};

/* 69192 */
struct TArray<FBasedPosition,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 69193 */
struct __declspec(align(8)) FAIResourceLock
{
  unsigned __int16 Locks;
  TArray<unsigned char,FDefaultAllocator> ResourceLockCount;
  bool bUseResourceLockCount;
};

/* 69194 */
struct FAIRequestID
{
  unsigned int RequestID;
};

/* 4881 */
struct FNavLocation
{
  FVector Location;
  unsigned __int64 NodeRef;
};

/* 69195 */
struct __cppobj __declspec(align(8)) UPathFollowingComponent : UActorComponent, IAIResourceInterface, IPathFollowingAgentInterface
{
  TBaseDelegate<void,UPathFollowingComponent *,FVector &> PostProcessMove;
  TMulticastDelegate<void,FAIRequestID,FPathFollowingResult const &> OnRequestFinished;
  TMulticastDelegate<void,FAIRequestID,enum EPathFollowingResult::Type> OnMoveFinished_DEPRECATED;
  UNavMovementComponent *MovementComp;
  FWeakObjectPtr CurrentCustomLinkOb;
  ANavigationData *MyNavData;
  EPathFollowingStatus::Type Status;
  TSharedPtr<FNavigationPath,1> Path;
  float MyDefaultAcceptanceRadius;
  float AcceptanceRadius;
  float CurrentAcceptanceRadius;
  float MinAgentRadiusPct;
  float MinAgentHalfHeightPct;
  TSharedPtr<FMoveRequestCustomData,1> GameData;
  TWeakObjectPtr<AActor,FWeakObjectPtr> DestinationActor;
  INavAgentInterface *DestinationAgent;
  FBasedPosition CurrentDestination;
  FVector CurrentMoveInput;
  FVector MoveOffset;
  FVector LocationWhenPaused;
  FVector OriginalMoveRequestGoalLocation;
  float PathTimeWhenPaused;
  int PreciseAcceptanceRadiusCheckStartNodeIndex;
  unsigned __int32 bReachTestIncludesAgentRadius : 1;
  unsigned __int32 bReachTestIncludesGoalRadius : 1;
  unsigned __int32 bMoveToGoalOnLastSegment : 1;
  unsigned __int32 bUseBlockDetection : 1;
  unsigned __int32 bCollidedWithGoal : 1;
  unsigned __int32 bLastMoveReachedGoal : 1;
  unsigned __int32 bStopMovementOnFinish : 1;
  unsigned __int32 bIsUsingMetaPath : 1;
  unsigned __int32 bWalkingNavLinkStart : 1;
  unsigned __int32 bIsDecelerating : 1;
  float WaitingTimeout;
  float BlockDetectionDistance;
  float BlockDetectionInterval;
  int BlockDetectionSampleCount;
  float LastSampleTime;
  int NextSampleIdx;
  TArray<FBasedPosition,FDefaultAllocator> LocationSamples;
  int MoveSegmentStartIndex;
  int MoveSegmentEndIndex;
  unsigned __int64 MoveSegmentStartRef;
  unsigned __int64 MoveSegmentEndRef;
  FVector MoveSegmentDirection;
  float CachedBrakingDistance;
  float CachedBrakingMaxSpeed;
  int DecelerationSegmentIndex;
  FAIResourceLock ResourceLock;
  FTimerHandle WaitingForPathTimer;
  FAIRequestID CurrentRequestId;
  FNavLocation CurrentNavLocation;
  unsigned __int32 bStopOnOverlap : 1;
};

/* 69211 */
struct TArray<FAIMessage,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 69212 */
struct TArray<FAIMessageObserver *,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 69196 */
struct __cppobj __declspec(align(8)) UBrainComponent : UActorComponent, IAIResourceInterface
{
  UBlackboardComponent *BlackboardComp;
  AAIController *AIOwner;
  TArray<FAIMessage,FDefaultAllocator> MessagesToProcess;
  TArray<FAIMessageObserver *,FDefaultAllocator> MessageObservers;
  FAIResourceLock ResourceLock;
  unsigned __int32 bDoLogicRestartOnUnlock : 1;
};

/* 69145 */
struct TArray<UAISenseConfig *,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 69146 */
struct TSubclassOf<UAISense>
{
  UClass *Class;
};

/* 69147 */
struct FAINamedID<FAISenseCounter>
{
  const char Index;
  FName Name;
};

/* 69149 */
struct FPerceptionChannelWhitelist
{
  int AcceptedChannelsMask;
};

/* 5416 */
struct TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<64,8> >,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 69150 */
struct TSparseArray<TSetElement<TTuple<AActor *,FActorPerceptionInfo> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<64,8> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 69151 */
struct __declspec(align(8)) TSet<TTuple<AActor *,FActorPerceptionInfo>,TDefaultMapHashableKeyFuncs<AActor *,FActorPerceptionInfo,0>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<TTuple<AActor *,FActorPerceptionInfo> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 69152 */
struct TMapBase<AActor *,FActorPerceptionInfo,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<AActor *,FActorPerceptionInfo,0> >
{
  TSet<TTuple<AActor *,FActorPerceptionInfo>,TDefaultMapHashableKeyFuncs<AActor *,FActorPerceptionInfo,0>,FDefaultSetAllocator> Pairs;
};

/* 69153 */
struct __cppobj TSortableMapBase<AActor *,FActorPerceptionInfo,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<AActor *,FActorPerceptionInfo,0> > : TMapBase<AActor *,FActorPerceptionInfo,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<AActor *,FActorPerceptionInfo,0> >
{
};

/* 69154 */
struct __cppobj TMap<AActor *,FActorPerceptionInfo,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<AActor *,FActorPerceptionInfo,0> > : TSortableMapBase<AActor *,FActorPerceptionInfo,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<AActor *,FActorPerceptionInfo,0> >
{
};

/* 69155 */
struct TArray<UAIPerceptionComponent::FStimulusToProcess,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 69156 */
struct __cppobj TBaseDynamicMulticastDelegate<FWeakObjectPtr,void,TArray<AActor *,FDefaultAllocator> const &> : TMulticastScriptDelegate<FWeakObjectPtr>
{
};

/* 69157 */
struct __cppobj FPerceptionUpdatedDelegate : TBaseDynamicMulticastDelegate<FWeakObjectPtr,void,TArray<AActor *,FDefaultAllocator> const &>
{
};

/* 69158 */
struct __cppobj TBaseDynamicMulticastDelegate<FWeakObjectPtr,void,AActor *,FAIStimulus> : TMulticastScriptDelegate<FWeakObjectPtr>
{
};

/* 69159 */
struct __cppobj FActorPerceptionUpdatedDelegate : TBaseDynamicMulticastDelegate<FWeakObjectPtr,void,AActor *,FAIStimulus>
{
};

/* 69160 */
struct FAIGenericID<FPerceptionListenerCounter>
{
  const unsigned int Index;
};

/* 69161 */
struct __cppobj __declspec(align(8)) UAIPerceptionComponent : UActorComponent
{
  TArray<UAISenseConfig *,FDefaultAllocator> SensesConfig;
  TSubclassOf<UAISense> DominantSense;
  FAINamedID<FAISenseCounter> DominantSenseID;
  AAIController *AIOwner;
  FPerceptionChannelWhitelist PerceptionFilter;
  TMap<AActor *,FActorPerceptionInfo,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<AActor *,FActorPerceptionInfo,0> > PerceptualData;
  TArray<UAIPerceptionComponent::FStimulusToProcess,FDefaultAllocator> StimuliToProcess;
  TArray<float,FDefaultAllocator> MaxActiveAge;
  unsigned __int32 bCleanedUp : 1;
  FPerceptionUpdatedDelegate OnPerceptionUpdated;
  FActorPerceptionUpdatedDelegate OnTargetPerceptionUpdated;
  FAIGenericID<FPerceptionListenerCounter> PerceptionListenerId;
};

/* 69213 */
struct TArray<FPawnActionStack,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 69214 */
struct TArray<FPawnActionEvent,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 69216 */
struct __cppobj UPawnActionsComponent : UActorComponent
{
  APawn *ControlledPawn;
  TArray<FPawnActionStack,FDefaultAllocator> ActionStacks;
  TArray<FPawnActionEvent,FDefaultAllocator> ActionEvents;
  UPawnAction *CurrentAction;
  unsigned __int32 bLockedAILogic : 1;
  unsigned int ActionEventIndex;
};

/* 69199 */
struct TArray<UBlackboardKeyType *,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 69200 */
struct TSparseArray<TSetElement<TTuple<unsigned char,TBaseDelegate<enum EBlackboardNotificationResult,UBlackboardComponent const &,unsigned char> > >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<32,8> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 69201 */
struct __declspec(align(8)) TSet<TTuple<unsigned char,TBaseDelegate<enum EBlackboardNotificationResult,UBlackboardComponent const &,unsigned char> >,TDefaultMapHashableKeyFuncs<unsigned char,TBaseDelegate<enum EBlackboardNotificationResult,UBlackboardComponent const &,unsigned char>,1>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<TTuple<unsigned char,TBaseDelegate<enum EBlackboardNotificationResult,UBlackboardComponent const &,unsigned char> > >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 69202 */
struct TMapBase<unsigned char,TBaseDelegate<enum EBlackboardNotificationResult,UBlackboardComponent const &,unsigned char>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<unsigned char,TBaseDelegate<enum EBlackboardNotificationResult,UBlackboardComponent const &,unsigned char>,1> >
{
  TSet<TTuple<unsigned char,TBaseDelegate<enum EBlackboardNotificationResult,UBlackboardComponent const &,unsigned char> >,TDefaultMapHashableKeyFuncs<unsigned char,TBaseDelegate<enum EBlackboardNotificationResult,UBlackboardComponent const &,unsigned char>,1>,FDefaultSetAllocator> Pairs;
};

/* 69203 */
struct __cppobj TSortableMapBase<unsigned char,TBaseDelegate<enum EBlackboardNotificationResult,UBlackboardComponent const &,unsigned char>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<unsigned char,TBaseDelegate<enum EBlackboardNotificationResult,UBlackboardComponent const &,unsigned char>,1> > : TMapBase<unsigned char,TBaseDelegate<enum EBlackboardNotificationResult,UBlackboardComponent const &,unsigned char>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<unsigned char,TBaseDelegate<enum EBlackboardNotificationResult,UBlackboardComponent const &,unsigned char>,1> >
{
};

/* 69204 */
struct __cppobj TMultiMap<unsigned char,TBaseDelegate<enum EBlackboardNotificationResult,UBlackboardComponent const &,unsigned char>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<unsigned char,TBaseDelegate<enum EBlackboardNotificationResult,UBlackboardComponent const &,unsigned char>,1> > : TSortableMapBase<unsigned char,TBaseDelegate<enum EBlackboardNotificationResult,UBlackboardComponent const &,unsigned char>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<unsigned char,TBaseDelegate<enum EBlackboardNotificationResult,UBlackboardComponent const &,unsigned char>,1> >
{
};

/* 69205 */
struct TSparseArray<TSetElement<TTuple<UObject *,FDelegateHandle> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<24,8> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 69206 */
struct __declspec(align(8)) TSet<TTuple<UObject *,FDelegateHandle>,TDefaultMapHashableKeyFuncs<UObject *,FDelegateHandle,1>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<TTuple<UObject *,FDelegateHandle> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 69207 */
struct TMapBase<UObject *,FDelegateHandle,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<UObject *,FDelegateHandle,1> >
{
  TSet<TTuple<UObject *,FDelegateHandle>,TDefaultMapHashableKeyFuncs<UObject *,FDelegateHandle,1>,FDefaultSetAllocator> Pairs;
};

/* 69208 */
struct __cppobj TSortableMapBase<UObject *,FDelegateHandle,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<UObject *,FDelegateHandle,1> > : TMapBase<UObject *,FDelegateHandle,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<UObject *,FDelegateHandle,1> >
{
};

/* 69209 */
struct __cppobj TMultiMap<UObject *,FDelegateHandle,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<UObject *,FDelegateHandle,1> > : TSortableMapBase<UObject *,FDelegateHandle,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<UObject *,FDelegateHandle,1> >
{
};

/* 69210 */
struct __cppobj __declspec(align(8)) UBlackboardComponent : UActorComponent
{
  UBrainComponent *BrainComp;
  UBlackboardData *BlackboardAsset;
  TArray<unsigned char,FDefaultAllocator> ValueMemory;
  TArray<unsigned short,FDefaultAllocator> ValueOffsets;
  TArray<UBlackboardKeyType *,FDefaultAllocator> KeyInstances;
  TMultiMap<unsigned char,TBaseDelegate<enum EBlackboardNotificationResult,UBlackboardComponent const &,unsigned char>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<unsigned char,TBaseDelegate<enum EBlackboardNotificationResult,UBlackboardComponent const &,unsigned char>,1> > Observers;
  TMultiMap<UObject *,FDelegateHandle,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<UObject *,FDelegateHandle,1> > ObserverHandles;
  TArray<unsigned char,FDefaultAllocator> QueuedUpdates;
  unsigned __int32 bPausedNotifies : 1;
  unsigned __int32 bSynchronizedKeyPopulated : 1;
};

/* 69164 */
struct TArray<UGameplayTask *,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 69165 */
struct TArray<FGameplayTaskEventData,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 69167 */
struct __cppobj TBaseDynamicMulticastDelegate<FWeakObjectPtr,void,FGameplayResourceSet,FGameplayResourceSet> : TMulticastScriptDelegate<FWeakObjectPtr>
{
};

/* 69168 */
struct __cppobj FOnClaimedResourcesChangeSignature : TBaseDynamicMulticastDelegate<FWeakObjectPtr,void,FGameplayResourceSet,FGameplayResourceSet>
{
};

/* 69169 */
struct __cppobj UGameplayTasksComponent : UActorComponent, IGameplayTaskOwnerInterface
{
  bool bIsNetDirty;
  TArray<UGameplayTask *,FDefaultAllocator> SimulatedTasks;
  TArray<UGameplayTask *,FDefaultAllocator> TaskPriorityQueue;
  TArray<FGameplayTaskEventData,FDefaultAllocator> TaskEvents;
  TArray<UGameplayTask *,FDefaultAllocator> TickingTasks;
  TArray<UGameplayTask *,FDefaultAllocator> KnownTasks;
  char TopActivePriority;
  FGameplayResourceSet CurrentlyClaimedResources;
  FOnClaimedResourcesChangeSignature OnClaimedResourcesChange;
  int EventLockCounter;
  unsigned __int32 bInEventProcessingInProgress : 1;
};

/* 69225 */
struct __cppobj UAcAssistController : UObject
{
  bool useAutoWiper;
  bool useAutoLights;
  bool useAutoPitstopRequest;
  float LightsHighBeamActivation;
  float LightsEnduranceBeamActivation;
  TArray<float,FDefaultAllocator> WiperStages;
  AAcRaceGameMode *raceGameMode;
  ACarAvatar *carAvatar;
};

/* 69226 */
struct AISkills
{
  float pushLevel;
  float aggression;
  float overdrive;
  float rainLevel;
  float consistency;
};

/* 69227 */
struct AIBrakePointData
{
  float targetSpeed;
  float targetNormalized;
  float apexNormalized;
  bool wasObstacle;
  float lateralOffset;
  float speedDiff;
};

/* 1897 */
enum SplineSelection
{
  FastLane = 0x0,
  Pits = 0x1,
};

/* 69228 */
struct __declspec(align(8)) HumanizeData
{
  long double minTimeBetweenMistakesMS;
  long double timeBetweenMistakesMS;
  long double brakeMistakeTime;
  long double tractionMistakeTime;
  long double nextBrakeMistake;
  long double nextTractionMistake;
  float tractioMistakeSeverity;
};

/* 69229 */
struct AISinOffsetData
{
  long double phase;
  long double phaseSpeed;
  float steerOffset;
  float lastFinalOffset;
};

/* 69230 */
struct AITurboStrategy
{
  bool active;
  int qualifyHotLaps;
};

/* 69231 */
struct __cppobj std::allocator<AIKersArea>
{
};

/* 69233 */
struct __cppobj std::_Vector_val<std::_Simple_types<AIKersArea> > : std::_Container_base0
{
  AIKersArea *_Myfirst;
  AIKersArea *_Mylast;
  AIKersArea *_Myend;
};

/* 69234 */
struct __cppobj std::_Compressed_pair<std::allocator<AIKersArea>,std::_Vector_val<std::_Simple_types<AIKersArea> >,1> : std::allocator<AIKersArea>
{
  std::_Vector_val<std::_Simple_types<AIKersArea> > _Myval2;
};

/* 69235 */
struct std::_Vector_alloc<std::_Vec_base_types<AIKersArea,std::allocator<AIKersArea> > >
{
  std::_Compressed_pair<std::allocator<AIKersArea>,std::_Vector_val<std::_Simple_types<AIKersArea> >,1> _Mypair;
};

/* 69236 */
struct __cppobj std::vector<AIKersArea,std::allocator<AIKersArea> > : std::_Vector_alloc<std::_Vec_base_types<AIKersArea,std::allocator<AIKersArea> > >
{
};

/* 67597 */
struct AISplinePayload
{
  float speedMS;
  float radius;
  float sides[2];
  float boundaries[2];
  float camber;
  float direction;
  vec3f normal;
  vec3f forwardVector;
  float length;
  float gas;
  float brake;
  float grade;
  float grip;
  float distFromCorner;
  float distFromNextCorner;
  bool isPitlane;
  float compression;
};

/* 69237 */
struct __cppobj std::allocator<AIOpponentData>
{
};

/* 69239 */
struct __cppobj std::_Vector_val<std::_Simple_types<AIOpponentData> > : std::_Container_base0
{
  AIOpponentData *_Myfirst;
  AIOpponentData *_Mylast;
  AIOpponentData *_Myend;
};

/* 69240 */
struct __cppobj std::_Compressed_pair<std::allocator<AIOpponentData>,std::_Vector_val<std::_Simple_types<AIOpponentData> >,1> : std::allocator<AIOpponentData>
{
  std::_Vector_val<std::_Simple_types<AIOpponentData> > _Myval2;
};

/* 69241 */
struct std::_Vector_alloc<std::_Vec_base_types<AIOpponentData,std::allocator<AIOpponentData> > >
{
  std::_Compressed_pair<std::allocator<AIOpponentData>,std::_Vector_val<std::_Simple_types<AIOpponentData> >,1> _Mypair;
};

/* 69242 */
struct __cppobj std::vector<AIOpponentData,std::allocator<AIOpponentData> > : std::_Vector_alloc<std::_Vec_base_types<AIOpponentData,std::allocator<AIOpponentData> > >
{
};

/* 69243 */
struct __cppobj std::allocator<AIBrakeObstacle>
{
};

/* 69245 */
struct __cppobj std::_Vector_val<std::_Simple_types<AIBrakeObstacle> > : std::_Container_base0
{
  AIBrakeObstacle *_Myfirst;
  AIBrakeObstacle *_Mylast;
  AIBrakeObstacle *_Myend;
};

/* 69246 */
struct __cppobj std::_Compressed_pair<std::allocator<AIBrakeObstacle>,std::_Vector_val<std::_Simple_types<AIBrakeObstacle> >,1> : std::allocator<AIBrakeObstacle>
{
  std::_Vector_val<std::_Simple_types<AIBrakeObstacle> > _Myval2;
};

/* 69247 */
struct std::_Vector_alloc<std::_Vec_base_types<AIBrakeObstacle,std::allocator<AIBrakeObstacle> > >
{
  std::_Compressed_pair<std::allocator<AIBrakeObstacle>,std::_Vector_val<std::_Simple_types<AIBrakeObstacle> >,1> _Mypair;
};

/* 69248 */
struct __cppobj std::vector<AIBrakeObstacle,std::allocator<AIBrakeObstacle> > : std::_Vector_alloc<std::_Vec_base_types<AIBrakeObstacle,std::allocator<AIBrakeObstacle> > >
{
};

/* 69249 */
struct __cppobj std::allocator<AIBrakeProfilerItem>
{
};

/* 69251 */
struct __cppobj std::_Vector_val<std::_Simple_types<AIBrakeProfilerItem> > : std::_Container_base0
{
  AIBrakeProfilerItem *_Myfirst;
  AIBrakeProfilerItem *_Mylast;
  AIBrakeProfilerItem *_Myend;
};

/* 69252 */
struct __cppobj std::_Compressed_pair<std::allocator<AIBrakeProfilerItem>,std::_Vector_val<std::_Simple_types<AIBrakeProfilerItem> >,1> : std::allocator<AIBrakeProfilerItem>
{
  std::_Vector_val<std::_Simple_types<AIBrakeProfilerItem> > _Myval2;
};

/* 69253 */
struct std::_Vector_alloc<std::_Vec_base_types<AIBrakeProfilerItem,std::allocator<AIBrakeProfilerItem> > >
{
  std::_Compressed_pair<std::allocator<AIBrakeProfilerItem>,std::_Vector_val<std::_Simple_types<AIBrakeProfilerItem> >,1> _Mypair;
};

/* 69254 */
struct __cppobj std::vector<AIBrakeProfilerItem,std::allocator<AIBrakeProfilerItem> > : std::_Vector_alloc<std::_Vec_base_types<AIBrakeProfilerItem,std::allocator<AIBrakeProfilerItem> > >
{
};

/* 69255 */
struct AIBrakeProfiler
{
  bool isEnabled;
  std::vector<AIBrakeProfilerItem,std::allocator<AIBrakeProfilerItem> > items;
  bool lastRecKeyStatus;
  float lastProfiledNPos;
};

/* 66776 */
struct __cppobj std::less<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >
{
};

/* 69256 */
struct __cppobj std::allocator<std::_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > const ,TyreCompoundStrategy>,void *> >
{
};

/* 69260 */
struct __cppobj std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > const ,TyreCompoundStrategy> > > : std::_Container_base0
{
  std::_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > const ,TyreCompoundStrategy>,void *> *_Myhead;
  unsigned __int64 _Mysize;
};

/* 69261 */
struct __cppobj std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > const ,TyreCompoundStrategy>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > const ,TyreCompoundStrategy> > >,1> : std::allocator<std::_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > const ,TyreCompoundStrategy>,void *> >
{
  std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > const ,TyreCompoundStrategy> > > _Myval2;
};

/* 69262 */
struct __cppobj std::_Compressed_pair<std::less<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > const ,TyreCompoundStrategy>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > const ,TyreCompoundStrategy> > >,1>,1> : std::less<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >
{
  std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > const ,TyreCompoundStrategy>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > const ,TyreCompoundStrategy> > >,1> _Myval2;
};

/* 69263 */
struct std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,TyreCompoundStrategy,std::less<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > const ,TyreCompoundStrategy> >,0> >
{
  std::_Compressed_pair<std::less<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > const ,TyreCompoundStrategy>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > const ,TyreCompoundStrategy> > >,1>,1> _Mypair;
};

/* 69264 */
struct __cppobj std::_Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,TyreCompoundStrategy,std::less<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > const ,TyreCompoundStrategy> >,0> > : std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,TyreCompoundStrategy,std::less<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > const ,TyreCompoundStrategy> >,0> >
{
};

/* 69265 */
struct __cppobj std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,TyreCompoundStrategy,std::less<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > const ,TyreCompoundStrategy> > > : std::_Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,TyreCompoundStrategy,std::less<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > const ,TyreCompoundStrategy> >,0> >
{
};

/* 69266 */
struct AIVariation
{
  float blend;
  long double startPush;
  long double targetPush;
  long double accum;
  long double currentPush;
  long double variationTime;
};

/* 69267 */
struct __cppobj std::allocator<AIWingSetup>
{
};

/* 69269 */
struct __cppobj std::_Vector_val<std::_Simple_types<AIWingSetup> > : std::_Container_base0
{
  AIWingSetup *_Myfirst;
  AIWingSetup *_Mylast;
  AIWingSetup *_Myend;
};

/* 69270 */
struct __cppobj std::_Compressed_pair<std::allocator<AIWingSetup>,std::_Vector_val<std::_Simple_types<AIWingSetup> >,1> : std::allocator<AIWingSetup>
{
  std::_Vector_val<std::_Simple_types<AIWingSetup> > _Myval2;
};

/* 69271 */
struct std::_Vector_alloc<std::_Vec_base_types<AIWingSetup,std::allocator<AIWingSetup> > >
{
  std::_Compressed_pair<std::allocator<AIWingSetup>,std::_Vector_val<std::_Simple_types<AIWingSetup> >,1> _Mypair;
};

/* 69272 */
struct __cppobj std::vector<AIWingSetup,std::allocator<AIWingSetup> > : std::_Vector_alloc<std::_Vec_base_types<AIWingSetup,std::allocator<AIWingSetup> > >
{
};

/* 69273 */
struct AISetup
{
  struct SetupItem *finalRatio;
  std::vector<float,std::allocator<float> > ratios;
  long double lastSetupChangeTime;
  std::vector<AIWingSetup,std::allocator<AIWingSetup> > wings;
};

/* 69274 */
struct ControllerSwapSettingsCache
{
  bool isBrakeThermalModelEnabled;
  float stabilityControl;
  bool isABSPresent;
  bool isTCPresent;
  bool isAutoshiftOn;
  bool useAutoclutchOnStart;
  bool useAutoclutchOnChange;
  bool isAutoblipActive;
  float autoCutOffTimeS;
  Curve autoClutchDownshiftProfile;
};

/* 69275 */
struct __cppobj AIDriver : ICarControlsProvider
{
  const float STRAIGHT_RADIUS;
  float steerMinLookahead;
  AISkills skills;
  AIBrakePointData brakePoint;
  vec3d steerTarget;
  PIDController pidSteer;
  float steerGain;
  SplineSelection splineSelection;
  float brakeHintBase;
  float brakeHintLive;
  float changeUpRPM;
  float changeDnPerc;
  bool requestPitStop;
  float nextCarModifier;
  HumanizeData humanize;
  float distToNextCorner;
  float aeroHint;
  float tyresHint;
  float understeerFactor;
  float prjDNRPM;
  long double timeToStart;
  float kerbModifier;
  float outsideOffset;
  float mongolinoMaxGas;
  bool useMagicForces;
  float understeerHint;
  float gasGainHint;
  float currentRadius;
  float currentCamberDEG;
  float liveOffset;
  float offsetDistFromCorner;
  float ultraGrip;
  long double lastGearUPChangeTime;
  long double lastGearDNChangeTime;
  bool isChangingUp;
  bool isRetiring;
  AISinOffsetData sinOffsetData;
  long double reactionTime;
  float oldSteer;
  float targetSpeed;
  float avgSpeed;
  float requestedLane;
  float dynamicPush;
  int stepCount;
  int freqCounter;
  Car *car;
  bool isReactingSlow;
  AITurboStrategy turbo;
  RaceEngineer engineer;
  float autoBrakeAdjust;
  bool isSteeringToPit;
  float dangerPush;
  float wingVariation;
  std::vector<AIKersArea,std::allocator<AIKersArea> > kersAreas;
  float kersAccum;
  float tyreStopMinValue;
  float tyreStopMinValueVKM[4];
  float carWetLevel;
  AISplineRecorder *aiSplineRecorder;
  AISpline *currentSpline;
  float gasRequest;
  float brakeRequest;
  float steerRequest;
  bool pitLaneStartFlag;
  float currentOffset;
  float desiredOffset;
  AISplinePayload currentPayload;
  int lapsToComplete;
  long double timeToStartRevvingAtStart;
  bool raceStartFlag;
  int runLapCounter;
  std::vector<AIOpponentData,std::allocator<AIOpponentData> > opponentData;
  std::vector<AIBrakeObstacle,std::allocator<AIBrakeObstacle> > brakeObstacles;
  AIBrakeProfiler brakeProfiler;
  long double accidentStopCounter;
  std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,TyreCompoundStrategy,std::less<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > const ,TyreCompoundStrategy> > > tyreStrategies;
  SessionInfo currentSessionInfo;
  float locNpos;
  int currentPitLineIndex;
  float splineTargetSpeed;
  float oversteerTCMult;
  float minForwardSides[2];
  bool isEngaged;
  AIVariation aiVariation;
  float engagedPush;
  bool useAbs;
  AISetup aiSetup;
  long double lastDRSActivationTime;
  float smoothLoads[4];
  int frontCrowd;
  ControllerSwapSettingsCache swapCache;
};

/* 6167 */
struct TEnumAsByte<enum EParticleSystemUpdateMode>
{
  char Value;
};

/* 6168 */
struct TArray<UParticleEmitter *,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 6172 */
struct TEnumAsByte<enum ParticleSystemLODMethod>
{
  char Value;
};

/* 6173 */
struct TArray<FParticleSystemLOD,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 6174 */
struct TEnumAsByte<enum EParticleSystemOcclusionBoundsMethod>
{
  char Value;
};

/* 6175 */
struct TArray<FLODSoloTrack,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 6176 */
struct TArray<FNamedEmitterMaterial,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 6177 */
struct __cppobj UParticleSystem : UObject
{
  TEnumAsByte<enum EParticleSystemUpdateMode> SystemUpdateMode;
  float UpdateTime_FPS;
  float UpdateTime_Delta;
  float WarmupTime;
  float WarmupTickRate;
  TArray<UParticleEmitter *,FDefaultAllocator> Emitters;
  UParticleSystemComponent *PreviewComponent;
  UInterpCurveEdSetup *CurveEdSetup;
  unsigned __int32 bOrientZAxisTowardCamera : 1;
  float LODDistanceCheckTime;
  TEnumAsByte<enum ParticleSystemLODMethod> LODMethod;
  TArray<float,FDefaultAllocator> LODDistances;
  unsigned __int32 bRegenerateLODDuplicate : 1;
  TArray<FParticleSystemLOD,FDefaultAllocator> LODSettings;
  unsigned __int32 bUseFixedRelativeBoundingBox : 1;
  FBox FixedRelativeBoundingBox;
  float SecondsBeforeInactive;
  unsigned __int32 bShouldResetPeakCounts : 1;
  unsigned __int32 bHasPhysics : 1;
  unsigned __int32 bUseRealtimeThumbnail : 1;
  unsigned __int32 ThumbnailImageOutOfDate : 1;
  unsigned __int32 bIsElligibleForAsyncTick : 1;
  unsigned __int32 bIsElligibleForAsyncTickComputed : 1;
  float Delay;
  float DelayLow;
  unsigned __int32 bUseDelayRange : 1;
  bool bAutoDeactivate;
  unsigned int MinTimeBetweenTicks;
  _BYTE InsignificantReaction[1];
  float InsignificanceDelay;
  _BYTE MaxSignificanceLevel[1];
  unsigned int MaxPoolSize;
  FVector MacroUVPosition;
  float MacroUVRadius;
  TEnumAsByte<enum EParticleSystemOcclusionBoundsMethod> OcclusionBoundsMethod;
  FBox CustomOcclusionBounds;
  TArray<FLODSoloTrack,FDefaultAllocator> SoloTracking;
  TArray<FNamedEmitterMaterial,FDefaultAllocator> NamedMaterialSlots;
  _BYTE HighestSignificance[1];
  _BYTE LowestSignificance[1];
  unsigned __int32 bShouldManageSignificance : 1;
  unsigned __int32 bAnyEmitterLoopsForever : 1;
  unsigned __int32 bIsImmortal : 1;
  unsigned __int32 bWillBecomeZombie : 1;
};

/* 4120 */
struct TRefCountPtr<FRHIUniformBuffer>
{
  FRHIUniformBuffer *Reference;
};

/* 4118 */
const struct __declspec(align(8)) FRHIUniformBufferLayout
{
  unsigned int ConstantBufferSize;
  TArray<unsigned short,FDefaultAllocator> ResourceOffsets;
  TArray<unsigned char,FDefaultAllocator> Resources;
  FName Name;
  unsigned int Hash;
};

/* 7091 */
struct FMaterialParameterCollectionInstanceResource
{
  FGuid Id;
  FName OwnerName;
  TRefCountPtr<FRHIUniformBuffer> UniformBuffer;
  FRHIUniformBufferLayout UniformBufferLayout;
};

/* 6300 */
struct TArray<FUniformBufferStruct::FMember,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 6302 */
struct TLinkedListBase<TLinkedList<FUniformBufferStruct *>,FUniformBufferStruct *,TLinkedListIterator>
{
  TLinkedList<FUniformBufferStruct *> *NextLink;
  TLinkedList<FUniformBufferStruct *> **PrevLink;
};

/* 6301 */
struct __cppobj TLinkedList<FUniformBufferStruct *> : TLinkedListBase<TLinkedList<FUniformBufferStruct *>,FUniformBufferStruct *,TLinkedListIterator>
{
  FUniformBufferStruct *Element;
};

/* 6297 */
const struct FUniformBufferStruct
{
  FUniformBufferStructVtbl *vfptr;
  const wchar_t *StructTypeName;
  const wchar_t *ShaderVariableName;
  FShaderUniformBufferParameter *(__cdecl *ConstructUniformBufferParameterRef)();
  unsigned int Size;
  bool bLayoutInitialized;
  FRHIUniformBufferLayout Layout;
  TArray<FUniformBufferStruct::FMember,FDefaultAllocator> Members;
  TLinkedList<FUniformBufferStruct *> GlobalListLink;
};

/* 5392 */
struct TSubclassOf<APlayerCameraManager>
{
  UClass *Class;
};

/* 5393 */
struct TArray<TWeakObjectPtr<UPrimitiveComponent,FWeakObjectPtr>,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 5399 */
struct TSubclassOf<UCheatManager>
{
  UClass *Class;
};

/* 5440 */
struct TArray<FActiveForceFeedbackEffect,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 5441 */
struct TArray<TTuple<unsigned __int64,APlayerController::FDynamicForceFeedbackAction>,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 5442 */
struct TSortedMap<unsigned __int64,APlayerController::FDynamicForceFeedbackAction,FDefaultAllocator,TLess<unsigned __int64> >
{
  TArray<TTuple<unsigned __int64,APlayerController::FDynamicForceFeedbackAction>,FDefaultAllocator> Pairs;
};

/* 5443 */
struct TArray<TTuple<int,FDynamicForceFeedbackDetails *>,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 5444 */
struct TSortedMap<int,FDynamicForceFeedbackDetails *,FDefaultAllocator,TLess<int> >
{
  TArray<TTuple<int,FDynamicForceFeedbackDetails *>,FDefaultAllocator> Pairs;
};

/* 5447 */
struct TSharedPtr<FActiveHapticFeedbackEffect,0>
{
  FActiveHapticFeedbackEffect *Object;
  SharedPointerInternals::FSharedReferencer<0> SharedReferenceCount;
};

/* 5448 */
struct FForceFeedbackValues
{
  float LeftLarge;
  float LeftSmall;
  float RightLarge;
  float RightSmall;
};

/* 5449 */
struct TArray<TSharedRef<FUniqueNetId const ,0>,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 5450 */
struct FPlayerMuteList
{
  TArray<TSharedRef<FUniqueNetId const ,0>,FDefaultAllocator> VoiceMuteList;
  TArray<TSharedRef<FUniqueNetId const ,0>,FDefaultAllocator> GameplayVoiceMuteList;
  TArray<TSharedRef<FUniqueNetId const ,0>,FDefaultAllocator> VoicePacketFilter;
  bool bHasVoiceHandshakeCompleted;
  int VoiceChannelIdx;
};

/* 5452 */
struct TArray<FKey,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 5454 */
struct TArray<TWeakObjectPtr<UInputComponent,FWeakObjectPtr>,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 5458 */
struct TSharedPtr<SVirtualJoystick,0>
{
  SVirtualJoystick *Object;
  SharedPointerInternals::FSharedReferencer<0> SharedReferenceCount;
};

/* 5461 */
struct __cppobj TWeakObjectPtr<USceneComponent,FWeakObjectPtr> : FWeakObjectPtr
{
};

/* 4888 */
struct __cppobj APlayerController : AController
{
  UPlayer *Player;
  APawn *AcknowledgedPawn;
  UInterpTrackInstDirector *ControllingDirTrackInst;
  AHUD *MyHUD;
  APlayerCameraManager *PlayerCameraManager;
  TSubclassOf<APlayerCameraManager> PlayerCameraManagerClass;
  bool bAutoManageActiveCameraTarget;
  FRotator TargetViewRotation;
  FRotator BlendedTargetViewRotation;
  float SmoothTargetViewRotationSpeed;
  float LocalPlayerCachedLODDistanceFactor;
  TArray<AActor *,FDefaultAllocator> HiddenActors;
  TArray<TWeakObjectPtr<UPrimitiveComponent,FWeakObjectPtr>,FDefaultAllocator> HiddenPrimitiveComponents;
  bool bRenderPrimitiveComponents;
  float LastSpectatorStateSynchTime;
  FVector LastSpectatorSyncLocation;
  FRotator LastSpectatorSyncRotation;
  int ClientCap;
  UCheatManager *CheatManager;
  TSubclassOf<UCheatManager> CheatClass;
  UPlayerInput *PlayerInput;
  TArray<FActiveForceFeedbackEffect,FDefaultAllocator> ActiveForceFeedbackEffects;
  TSortedMap<unsigned __int64,APlayerController::FDynamicForceFeedbackAction,FDefaultAllocator,TLess<unsigned __int64> > DynamicForceFeedbacks;
  TSortedMap<int,FDynamicForceFeedbackDetails *,FDefaultAllocator,TLess<int> > LatentDynamicForceFeedbacks;
  TSharedPtr<FActiveHapticFeedbackEffect,0> ActiveHapticEffect_Left;
  TSharedPtr<FActiveHapticFeedbackEffect,0> ActiveHapticEffect_Right;
  TSharedPtr<FActiveHapticFeedbackEffect,0> ActiveHapticEffect_Gun;
  FForceFeedbackValues ForceFeedbackValues;
  TArray<FName,FDefaultAllocator> PendingMapChangeLevelNames;
  unsigned __int32 bShortConnectTimeOut : 1;
  unsigned __int32 bCinematicMode : 1;
  unsigned __int32 bHidePawnInCinematicMode : 1;
  unsigned __int32 bIsUsingStreamingVolumes : 1;
  unsigned __int32 bPlayerIsWaiting : 1;
  char NetPlayerIndex;
  FPlayerMuteList MuteList;
  UNetConnection *PendingSwapConnection;
  UNetConnection *NetConnection;
  FRotator RotationInput;
  float InputYawScale;
  float InputPitchScale;
  float InputRollScale;
  unsigned __int32 bShowMouseCursor : 1;
  unsigned __int32 bEnableClickEvents : 1;
  unsigned __int32 bEnableTouchEvents : 1;
  unsigned __int32 bEnableMouseOverEvents : 1;
  unsigned __int32 bEnableTouchOverEvents : 1;
  unsigned __int32 bForceFeedbackEnabled : 1;
  float ForceFeedbackScale;
  TArray<FKey,FDefaultAllocator> ClickEventKeys;
  TEnumAsByte<enum EMouseCursor::Type> DefaultMouseCursor;
  TEnumAsByte<enum EMouseCursor::Type> CurrentMouseCursor;
  TEnumAsByte<enum ECollisionChannel> DefaultClickTraceChannel;
  TEnumAsByte<enum ECollisionChannel> CurrentClickTraceChannel;
  float HitResultTraceDistance;
  unsigned __int16 SeamlessTravelCount;
  unsigned __int16 LastCompletedSeamlessTravelCount;
  TWeakObjectPtr<UPrimitiveComponent,FWeakObjectPtr> CurrentClickablePrimitive;
  TWeakObjectPtr<UPrimitiveComponent,FWeakObjectPtr> CurrentTouchablePrimitives[11];
  TArray<TWeakObjectPtr<UInputComponent,FWeakObjectPtr>,FDefaultAllocator> CurrentInputStack;
  UInputComponent *InactiveStateInputComponent;
  unsigned __int32 bCinemaDisableInputMove : 1;
  unsigned __int32 bCinemaDisableInputLook : 1;
  unsigned __int32 bShouldPerformFullTickWhenPaused : 1;
  unsigned __int32 bInputEnabled : 1;
  TSharedPtr<SVirtualJoystick,0> VirtualJoystick;
  UTouchInterface *CurrentTouchInterface;
  FTimerHandle TimerHandle_UnFreeze;
  FTimerHandle TimerHandle_DelayedPrepareMapChange;
  FTimerHandle TimerHandle_ClientCommitMapChange;
  unsigned __int32 bOverrideAudioListener : 1;
  unsigned __int32 bOverrideAudioAttenuationListener : 1;
  TWeakObjectPtr<USceneComponent,FWeakObjectPtr> AudioListenerComponent;
  TWeakObjectPtr<USceneComponent,FWeakObjectPtr> AudioListenerAttenuationComponent;
  FVector AudioListenerLocationOverride;
  FRotator AudioListenerRotationOverride;
  FVector AudioListenerAttenuationOverride;
  ASpectatorPawn *SpectatorPawn;
  float LastRetryPlayerTime;
  bool bIsLocalPlayerController;
  FVector SpawnLocation;
  __int8 bDisableHaptics : 1;
};

/* 4453 */
struct FExecVtbl
{
  void *(__cdecl *__vecDelDtor)(FExec *this, unsigned int);
  bool (__cdecl *Exec)(FExec *this, UWorld *, const wchar_t *, FOutputDevice *);
};

/* 5886 */
struct TEnumAsByte<enum EWorldType::Type>
{
  char Value;
};

/* 5887 */
struct FSeamlessTravelHandler
{
  bool bTransitionInProgress;
  FURL PendingTravelURL;
  FGuid PendingTravelGuid;
  bool bSwitchedToDefaultMap;
  UObject *LoadedPackage;
  UWorld *CurrentWorld;
  UWorld *LoadedWorld;
  bool bPauseAtMidpoint;
  bool bNeedCancelCleanUp;
  FName WorldContextHandle;
  long double SeamlessTravelStartTime;
};

/* 5889 */
struct TArray<FFullyLoadedPackagesInfo,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 5890 */
struct TArray<UObjectReferencer *,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 5891 */
struct TArray<FLevelStreamingStatus,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 6628 */
struct TArray<FNamedNetDriver,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 6629 */
struct TArray<UWorld * *,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 6630 */
struct FWorldContext
{
  TEnumAsByte<enum EWorldType::Type> WorldType;
  FSeamlessTravelHandler SeamlessTravelHandler;
  FName ContextHandle;
  FString TravelURL;
  char TravelType;
  FURL LastURL;
  FURL LastRemoteURL;
  UPendingNetGame *PendingNetGame;
  TArray<FFullyLoadedPackagesInfo,FDefaultAllocator> PackagesToFullyLoad;
  TArray<FName,FDefaultAllocator> LevelsToLoadForPendingMapChange;
  TArray<ULevel *,FDefaultAllocator> LoadedLevelsForPendingMapChange;
  FString PendingMapChangeFailureDescription;
  unsigned __int32 bShouldCommitPendingMapChange : 1;
  TArray<UObjectReferencer *,FDefaultAllocator> ObjectReferencers;
  TArray<FLevelStreamingStatus,FDefaultAllocator> PendingLevelStreamingStatusUpdates;
  UGameViewportClient *GameViewport;
  UGameInstance *OwningGameInstance;
  TArray<FNamedNetDriver,FDefaultAllocator> ActiveNetDrivers;
  int PIEInstance;
  FString PIEPrefix;
  bool RunAsDedicated;
  bool bWaitingOnOnlineSubsystem;
  unsigned int AudioDeviceHandle;
  TArray<UWorld * *,FDefaultAllocator> ExternalReferences;
  UWorld *ThisCurrentWorld;
};

/* 6632 */
struct __cppobj UOnlineSession : UObject
{
};

/* 68965 */
struct __cppobj UAcInfoManager : UDataAsset
{
  UDataTable *DriverInfos;
  UDataTable *CarEntryInfos;
  UDataTable *ModelInfos;
  UDataTable *BrandInfos;
  UDataTable *CircuitInfos;
  UDataTable *CompetitionList;
  UDataTable *NationalityInfos;
  UDataTable *CommonTextsInfos;
  UDataTable *MeteoInfos;
};

/* 68966 */
struct __cppobj UAcPresetManager : UDataAsset
{
  UDataTable *GraphicTable;
  UDataTable *DirectInputCommand;
  UDataTable *AudioTable;
  UDataTable *SpecialEventTable;
};

/* 68967 */
struct __cppobj __declspec(align(8)) FSkinMaterialType : FTableRowBase
{
  float Roughness;
  float ClearCoatRoughness;
  float Metallic;
};

/* 68968 */
struct __cppobj UAcCarGraphicData : UDataAsset
{
  UTexture2D *NumberSet;
  UDataTable *SkinTemplates;
  UDataTable *RimTemplates;
  UDataTable *AuxLightMeshes;
  UDataTable *NumberPanelMeshes;
  UDataTable *StickerSets;
  UDataTable *ColorTable;
  UDataTable *HelmetTemplates;
  UDataTable *GlovesTemplates;
  UDataTable *SuitTemplates;
  UDataTable *TeamTemplates;
  UMaterialInstance *NumberPlate_Pro;
  UMaterialInstance *NumberPlate_ProAm;
  UMaterialInstance *NumberPlate_Am;
  UMaterialInstance *NumberPlate_Silver;
  UMaterialInstance *DecalNumberPlate_Pro;
  UMaterialInstance *DecalNumberPlate_ProAm;
  UMaterialInstance *DecalNumberPlate_Am;
  UMaterialInstance *DecalNumberPlate_Silver;
  UMaterialInstance *RaceClass_Pro;
  UMaterialInstance *RaceClass_ProAm;
  UMaterialInstance *RaceClass_Am;
  UMaterialInstance *RaceClass_Silver;
  FVector NumberPlate_Scale;
  FVector RaceClass_ProScale;
  FVector RaceClass_ProAmScale;
  FVector RaceClass_AmScale;
  FVector RaceClass_SilverScale;
  FSkinMaterialType SkinMaterialSolid;
  FSkinMaterialType SkinMaterialMatte;
  FSkinMaterialType SkinMaterialSatin;
  FSkinMaterialType SkinMaterialMetallic;
  FSkinMaterialType SkinMaterialChrome;
};

/* 68969 */
struct TArray<UAcPageBase *,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 69529 */
struct TSparseArray<TSetElement<TTuple<enum EControllerActionType,UTexture2D *> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<24,8> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 69530 */
struct __declspec(align(8)) TSet<TTuple<enum EControllerActionType,UTexture2D *>,TDefaultMapHashableKeyFuncs<enum EControllerActionType,UTexture2D *,0>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<TTuple<enum EControllerActionType,UTexture2D *> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 69531 */
struct TMapBase<enum EControllerActionType,UTexture2D *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<enum EControllerActionType,UTexture2D *,0> >
{
  TSet<TTuple<enum EControllerActionType,UTexture2D *>,TDefaultMapHashableKeyFuncs<enum EControllerActionType,UTexture2D *,0>,FDefaultSetAllocator> Pairs;
};

/* 69532 */
struct __cppobj TSortableMapBase<enum EControllerActionType,UTexture2D *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<enum EControllerActionType,UTexture2D *,0> > : TMapBase<enum EControllerActionType,UTexture2D *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<enum EControllerActionType,UTexture2D *,0> >
{
};

/* 69533 */
struct __cppobj TMap<enum EControllerActionType,UTexture2D *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<enum EControllerActionType,UTexture2D *,0> > : TSortableMapBase<enum EControllerActionType,UTexture2D *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<enum EControllerActionType,UTexture2D *,0> >
{
};

/* 69534 */
struct __cppobj UMenuManager : UObject
{
  TArray<UAcPageBase *,FDefaultAllocator> pages;
  UAcMenuState *MenuState;
  UBlackPage *BlackCurtain;
  UAcMenuData *MenuData;
  UAcGameInstance *GameInstance;
  TMap<enum EControllerActionType,UTexture2D *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<enum EControllerActionType,UTexture2D *,0> > CurrentUIIcons;
};

/* 39727 */
struct __cppobj UFMODEvent : UFMODAsset
{
};

/* 69086 */
struct TArray<FCommandDevice,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 69087 */
struct __cppobj __declspec(align(4)) FGamepadSettings : FTableRowBase
{
  bool UseSteerWithRight;
  float RumbleIntensity;
  float SteerSpeed;
  float SteerGamma;
  float SteerFilter;
  float DeadZone;
  float SpeedSensitivity;
  bool UseAutoSteer;
};

/* 69088 */
struct __cppobj __declspec(align(8)) FKeyboardSettings : FTableRowBase
{
  bool mouseSteering;
  bool mouseAcceleratorBrake;
  float steerSpeed;
  float steerOppositeDirectionFactor;
  float steerGain;
  float steerResetFactor;
  float lookAhead;
  float mouseSpeed;
};

/* 69089 */
struct __declspec(align(8)) FCommandConfiguration
{
  FString ConfigurationName;
  char CarControllerMode;
  TArray<FCommandDevice,FDefaultAllocator> CommandDevices;
  FGamepadSettings GamepadSettings;
  FKeyboardSettings KeyboardSettings;
  FString Comment;
  bool fastIsCombined;
};

/* 69090 */
struct Axis
{
  int joy;
  int index;
  float minv;
  float maxv;
};

/* 69091 */
struct DICommands
{
  Axis steer;
  Axis gas;
  Axis brake;
  Axis clutch;
  Axis gearUp;
  Axis gearDn;
};

/* 69092 */
struct DICommandSettings
{
  int ForceFeedBackIntervalStep;
  int UseSteerSoftLock;
  float SteerDebouncingMs;
  float SteerFilter;
  float ForceFeedbackFilter;
  float ForceFeedbackGain;
  float SteerScale;
  float SteerLock;
  float SteerLinearity;
  float SpeedSentitivity;
  float MinimumForceFeedback;
  float CenterBoostGain;
  float CenterBoostRange;
  float BrakeGamma;
};

/* 69093 */
struct __declspec(align(4)) JoypadSettings
{
  bool useSteerWithRight;
  float rumbleIntensity;
  float steerSpeed;
  float steerGamma;
  float steerFilter;
  float deadZone;
  float speedSensitivity;
  bool useLegacyCode;
  bool useAutoSteer;
};

/* 69094 */
struct TArray<FCommandButton,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 69095 */
struct TArray<FCommandAxis,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 69096 */
struct __cppobj TBaseMulticastDelegate<void,enum EControllerActionType const ,float const > : FMulticastDelegateBase<FWeakObjectPtr>
{
};

/* 69097 */
struct __cppobj UAcInputDeviceManager::FButtonReleaseEvent : TBaseMulticastDelegate<void,enum EControllerActionType const ,float const >
{
};

/* 69098 */
struct __cppobj TBaseMulticastDelegate<void,enum EControllerActionType const > : FMulticastDelegateBase<FWeakObjectPtr>
{
};

/* 69099 */
struct __cppobj UAcInputDeviceManager::FButtonPressEvent : TBaseMulticastDelegate<void,enum EControllerActionType const >
{
};

/* 69100 */
struct __cppobj UAcInputDeviceManager : UObject
{
  DirectInput *directInput;
  FCommandConfiguration CurrentCommandConfiguration;
  DICommands DirectInputCommands;
  DICommandSettings DirectInputSettings;
  JoypadSettings GamepadSettings;
  char InitializationCounter;
  bool isPinkiePressed;
  TArray<FCommandButton,FDefaultAllocator> UICommands;
  TArray<FCommandButton,FDefaultAllocator> RaceCommands;
  TArray<FCommandAxis,FDefaultAllocator> AxisCommands;
  char ConnectedInputDevices;
  UAcInputDeviceManager::FButtonReleaseEvent ButtonReleaseEvent;
  UAcInputDeviceManager::FButtonPressEvent ButtonPressEvent;
};

/* 69528 */
struct __cppobj UAcMenuData : UDataAsset
{
  UDataTable *GuiColorsAsset;
  UDataTable *GuiIconTemplateTable;
  UDataTable *GuiActionTextTable;
};

/* 16939 */
struct FTickableObjectBase
{
  FTickableObjectBaseVtbl *vfptr;
};

/* 16941 */
struct __cppobj FTickableGameObject : FTickableObjectBase
{
};

/* 69548 */
struct __cppobj TBaseDynamicMulticastDelegate<FWeakObjectPtr,void,FOnlineServicesHotlapUpdate const &,TArray<FOnlineServicesHotlapEntry,FDefaultAllocator> const &,bool> : TMulticastScriptDelegate<FWeakObjectPtr>
{
};

/* 69549 */
struct __cppobj FOnOnlineServicesUpdateHotlapRank : TBaseDynamicMulticastDelegate<FWeakObjectPtr,void,FOnlineServicesHotlapUpdate const &,TArray<FOnlineServicesHotlapEntry,FDefaultAllocator> const &,bool>
{
};

/* 69550 */
struct __cppobj TBaseDynamicMulticastDelegate<FWeakObjectPtr,void,FOnlineServicesLapPerformance const &> : TMulticastScriptDelegate<FWeakObjectPtr>
{
};

/* 69551 */
struct __cppobj FOnlineServicesLapPerformanceReport : TBaseDynamicMulticastDelegate<FWeakObjectPtr,void,FOnlineServicesLapPerformance const &>
{
};

/* 69552 */
struct __cppobj TBaseDynamicMulticastDelegate<FWeakObjectPtr,void,enum EOnlineServicesConnectionState> : TMulticastScriptDelegate<FWeakObjectPtr>
{
};

/* 69553 */
struct __cppobj FOnOnlineServicesConnectionStateChanged : TBaseDynamicMulticastDelegate<FWeakObjectPtr,void,enum EOnlineServicesConnectionState>
{
};

/* 69554 */
struct __cppobj TBaseDynamicMulticastDelegate<FWeakObjectPtr,void,FOnlineServicesDriverSummary const &> : TMulticastScriptDelegate<FWeakObjectPtr>
{
};

/* 69555 */
struct __cppobj FOnlineServicesDriverSummaryDelegate : TBaseDynamicMulticastDelegate<FWeakObjectPtr,void,FOnlineServicesDriverSummary const &>
{
};

/* 69556 */
struct __cppobj FOnlineServicesSteamAchievementEarned : TBaseDynamicMulticastDelegate<FWeakObjectPtr,void,int>
{
};

/* 69557 */
struct __cppobj TBaseDynamicMulticastDelegate<FWeakObjectPtr,void,FRatingReport const &,FRatingReport const &,bool> : TMulticastScriptDelegate<FWeakObjectPtr>
{
};

/* 69558 */
struct __cppobj FOnlineServicesRatingDeltaReport : TBaseDynamicMulticastDelegate<FWeakObjectPtr,void,FRatingReport const &,FRatingReport const &,bool>
{
};

/* 69559 */
struct __cppobj TBaseDynamicMulticastDelegate<FWeakObjectPtr,void,TArray<FOnlineServicesMPServerInfo,FDefaultAllocator> > : TMulticastScriptDelegate<FWeakObjectPtr>
{
};

/* 69560 */
struct __cppobj FOnlineServicesOnServerListReceived : TBaseDynamicMulticastDelegate<FWeakObjectPtr,void,TArray<FOnlineServicesMPServerInfo,FDefaultAllocator> >
{
};

/* 69561 */
struct __declspec(align(4)) FOnlineServicesCarStates
{
  float CarControlCurrentNdSlipThreshold;
  bool CarControlIsInNdSlipActionTime;
};

/* 5108 */
struct FDateTime
{
  __int64 Ticks;
};

/* 69582 */
struct TSparseArray<TSetElement<TTuple<unsigned char,int> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<16,4> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 69583 */
struct __declspec(align(8)) TSet<TTuple<unsigned char,int>,TDefaultMapHashableKeyFuncs<unsigned char,int,0>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<TTuple<unsigned char,int> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 69584 */
struct TMapBase<unsigned char,int,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<unsigned char,int,0> >
{
  TSet<TTuple<unsigned char,int>,TDefaultMapHashableKeyFuncs<unsigned char,int,0>,FDefaultSetAllocator> Pairs;
};

/* 69585 */
struct __cppobj TSortableMapBase<unsigned char,int,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<unsigned char,int,0> > : TMapBase<unsigned char,int,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<unsigned char,int,0> >
{
};

/* 69586 */
struct __cppobj TMap<unsigned char,int,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<unsigned char,int,0> > : TSortableMapBase<unsigned char,int,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<unsigned char,int,0> >
{
};

/* 69587 */
struct FRatingReport
{
  float totalScore;
  float safetyRating;
  float trackCompetence;
  float consistency;
  float carControl;
  float hotlapRating;
  float racecraft;
  float competition;
  TMap<unsigned char,int,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<unsigned char,int,0> > trackMedals;
  int trLapsDriven;
  int cnLapsDriven;
  int ccLapsDriven;
  int pcLapsDriven;
  int rcLapsDriven;
  int cpLapsDriven;
};

/* 69588 */
struct TArray<FFakeSteamAchievement,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 69589 */
struct __declspec(align(4)) FOnlineServicesHotlapUpdate
{
  int RequestNumber;
  _BYTE UpdateType[1];
  FString CarModel;
  FString TrackName;
  int DriverRank;
  int TotalDrivers;
  char DebugCarControlValue;
  float MinumumWetness;
  int EventReferenceId;
  _BYTE LeaderboardType[1];
};

/* 69590 */
struct TArray<FOnlineServicesHotlapEntry,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 69591 */
struct __cppobj UOnlineServices : UObject, FTickableGameObject
{
  FOnOnlineServicesUpdateHotlapRank OnBackendUpdateHotlapRank;
  FOnlineServicesLapPerformanceReport OnBackendLapPerformanceReport;
  FOnOnlineServicesConnectionStateChanged OnBackendConnectionState;
  FOnlineServicesDriverSummaryDelegate OnDriverSummary;
  FOnlineServicesSteamAchievementEarned OnSteamAchievement;
  FOnlineServicesRatingDeltaReport OnRatingDeltaReport;
  FOnlineServicesOnServerListReceived OnServerListReceived;
  _BYTE connectionState[1];
  FOnlineServicesCarStates DebugCarState;
  FDateTime lastTcpMessageSent;
  bool expectingTcpMessage;
  TcpClient *tcpClient;
  UOnlineServicesSession *currentSession;
  char playerCarModelEnum;
  bool isDestroying;
  bool hasReceivedDriverRating;
  FRatingReport lastDriverRating;
  TArray<FFakeSteamAchievement,FDefaultAllocator> fakeSteamAchievements;
  unsigned __int16 BackendRequestNumber;
  int ProcessedMessageNumber;
  bool DEBUG_shuffleLeaderboard;
  float DEBUG_secondsToReBroadcastLastRankUpdateSetting;
  float DEBUG_secondsToReBroadcastLastRankUpdate;
  __declspec(align(8)) FOnlineServicesHotlapUpdate DEBUG_LastRankUpdate;
  TArray<FOnlineServicesHotlapEntry,FDefaultAllocator> DEBUG_LastRankUpdateEntries;
};

/* 69375 */
struct TArray<AZoneAmbientSound *,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 66824 */
struct __declspec(align(4)) LerpValue
{
  float time;
  float endValue;
  float startValue;
  float totalTime;
  float value;
  bool ended;
};

/* 69376 */
struct TSparseArray<TSetElement<TTuple<enum EAudioVCA,float> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<16,4> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 69377 */
struct __declspec(align(8)) TSet<TTuple<enum EAudioVCA,float>,TDefaultMapHashableKeyFuncs<enum EAudioVCA,float,0>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<TTuple<enum EAudioVCA,float> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 69378 */
struct TMapBase<enum EAudioVCA,float,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<enum EAudioVCA,float,0> >
{
  TSet<TTuple<enum EAudioVCA,float>,TDefaultMapHashableKeyFuncs<enum EAudioVCA,float,0>,FDefaultSetAllocator> Pairs;
};

/* 69379 */
struct __cppobj TSortableMapBase<enum EAudioVCA,float,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<enum EAudioVCA,float,0> > : TMapBase<enum EAudioVCA,float,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<enum EAudioVCA,float,0> >
{
};

/* 69380 */
struct __cppobj TMap<enum EAudioVCA,float,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<enum EAudioVCA,float,0> > : TSortableMapBase<enum EAudioVCA,float,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<enum EAudioVCA,float,0> >
{
};

/* 69381 */
struct __cppobj __declspec(align(8)) UAudioManager : UObject
{
  TArray<AFMODAmbientSound *,FDefaultAllocator> AmbientSounds;
  TArray<AZoneAmbientSound *,FDefaultAllocator> ZoneAmbientSounds;
  UFMODEvent *guiEvent;
  UFMODEvent *musicEvent;
  UWorld *World;
  AAcRaceGameMode *RaceGameMode;
  AAcRaceGameState *RaceGameState;
  AACPlayerCameraManager *CameraManager;
  FMOD::Studio::System *System;
  FMOD::System *LowSystem;
  FMOD::Studio::EventInstance *musicNow;
  _BYTE MusicEventTypeNow[1];
  _BYTE MusicEventToPlay[1];
  float AudioScale;
  LerpValue FadeVolume;
  LerpValue FadeMusic;
  float mainVolume;
  float startingTime;
  bool initialized;
  TMap<enum EAudioVCA,float,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<enum EAudioVCA,float,0> > savedVolume;
  bool actorUpdate;
};

/* 69592 */
struct __cppobj UExpoModeManager : UObject
{
};

/* 69593 */
struct __cppobj TBaseDynamicMulticastDelegate<FWeakObjectPtr,void,FUserOptions const &> : TMulticastScriptDelegate<FWeakObjectPtr>
{
};

/* 69594 */
struct __cppobj FUserOptionsChanged : TBaseDynamicMulticastDelegate<FWeakObjectPtr,void,FUserOptions const &>
{
};

/* 69595 */
struct __cppobj TBaseDynamicMulticastDelegate<FWeakObjectPtr,void,FHUDOptions const &> : TMulticastScriptDelegate<FWeakObjectPtr>
{
};

/* 69596 */
struct __cppobj FHUDOptionsChanged : TBaseDynamicMulticastDelegate<FWeakObjectPtr,void,FHUDOptions const &>
{
};

/* 69597 */
struct __cppobj TBaseDynamicMulticastDelegate<FWeakObjectPtr,void,FGhostCarOptions const &> : TMulticastScriptDelegate<FWeakObjectPtr>
{
};

/* 69598 */
struct __cppobj FGhostCarOptionsChanged : TBaseDynamicMulticastDelegate<FWeakObjectPtr,void,FGhostCarOptions const &>
{
};

/* 69599 */
struct __cppobj std::allocator<std::pair<void *,std::function<void __cdecl(ksRacing::AssistRules const &)> > >
{
};

/* 69607 */
struct __cppobj std::_Vector_val<std::_Simple_types<std::pair<void *,std::function<void __cdecl(ksRacing::AssistRules const &)> > > > : std::_Container_base0
{
  std::pair<void *,std::function<void __cdecl(ksRacing::AssistRules const &)> > *_Myfirst;
  std::pair<void *,std::function<void __cdecl(ksRacing::AssistRules const &)> > *_Mylast;
  std::pair<void *,std::function<void __cdecl(ksRacing::AssistRules const &)> > *_Myend;
};

/* 69608 */
struct __cppobj std::_Compressed_pair<std::allocator<std::pair<void *,std::function<void __cdecl(ksRacing::AssistRules const &)> > >,std::_Vector_val<std::_Simple_types<std::pair<void *,std::function<void __cdecl(ksRacing::AssistRules const &)> > > >,1> : std::allocator<std::pair<void *,std::function<void __cdecl(ksRacing::AssistRules const &)> > >
{
  std::_Vector_val<std::_Simple_types<std::pair<void *,std::function<void __cdecl(ksRacing::AssistRules const &)> > > > _Myval2;
};

/* 69609 */
struct std::_Vector_alloc<std::_Vec_base_types<std::pair<void *,std::function<void __cdecl(ksRacing::AssistRules const &)> >,std::allocator<std::pair<void *,std::function<void __cdecl(ksRacing::AssistRules const &)> > > > >
{
  std::_Compressed_pair<std::allocator<std::pair<void *,std::function<void __cdecl(ksRacing::AssistRules const &)> > >,std::_Vector_val<std::_Simple_types<std::pair<void *,std::function<void __cdecl(ksRacing::AssistRules const &)> > > >,1> _Mypair;
};

/* 69610 */
struct __cppobj std::vector<std::pair<void *,std::function<void __cdecl(ksRacing::AssistRules const &)> >,std::allocator<std::pair<void *,std::function<void __cdecl(ksRacing::AssistRules const &)> > > > : std::_Vector_alloc<std::_Vec_base_types<std::pair<void *,std::function<void __cdecl(ksRacing::AssistRules const &)> >,std::allocator<std::pair<void *,std::function<void __cdecl(ksRacing::AssistRules const &)> > > > >
{
};

/* 69611 */
struct Event<ksRacing::AssistRules>
{
  std::vector<std::pair<void *,std::function<void __cdecl(ksRacing::AssistRules const &)> >,std::allocator<std::pair<void *,std::function<void __cdecl(ksRacing::AssistRules const &)> > > > handlers;
};

/* 69612 */
struct __cppobj std::allocator<std::pair<void *,std::function<void __cdecl(ksRacing::RealismRules const &)> > >
{
};

/* 69620 */
struct __cppobj std::_Vector_val<std::_Simple_types<std::pair<void *,std::function<void __cdecl(ksRacing::RealismRules const &)> > > > : std::_Container_base0
{
  std::pair<void *,std::function<void __cdecl(ksRacing::RealismRules const &)> > *_Myfirst;
  std::pair<void *,std::function<void __cdecl(ksRacing::RealismRules const &)> > *_Mylast;
  std::pair<void *,std::function<void __cdecl(ksRacing::RealismRules const &)> > *_Myend;
};

/* 69621 */
struct __cppobj std::_Compressed_pair<std::allocator<std::pair<void *,std::function<void __cdecl(ksRacing::RealismRules const &)> > >,std::_Vector_val<std::_Simple_types<std::pair<void *,std::function<void __cdecl(ksRacing::RealismRules const &)> > > >,1> : std::allocator<std::pair<void *,std::function<void __cdecl(ksRacing::RealismRules const &)> > >
{
  std::_Vector_val<std::_Simple_types<std::pair<void *,std::function<void __cdecl(ksRacing::RealismRules const &)> > > > _Myval2;
};

/* 69622 */
struct std::_Vector_alloc<std::_Vec_base_types<std::pair<void *,std::function<void __cdecl(ksRacing::RealismRules const &)> >,std::allocator<std::pair<void *,std::function<void __cdecl(ksRacing::RealismRules const &)> > > > >
{
  std::_Compressed_pair<std::allocator<std::pair<void *,std::function<void __cdecl(ksRacing::RealismRules const &)> > >,std::_Vector_val<std::_Simple_types<std::pair<void *,std::function<void __cdecl(ksRacing::RealismRules const &)> > > >,1> _Mypair;
};

/* 69623 */
struct __cppobj std::vector<std::pair<void *,std::function<void __cdecl(ksRacing::RealismRules const &)> >,std::allocator<std::pair<void *,std::function<void __cdecl(ksRacing::RealismRules const &)> > > > : std::_Vector_alloc<std::_Vec_base_types<std::pair<void *,std::function<void __cdecl(ksRacing::RealismRules const &)> >,std::allocator<std::pair<void *,std::function<void __cdecl(ksRacing::RealismRules const &)> > > > >
{
};

/* 69624 */
struct Event<ksRacing::RealismRules>
{
  std::vector<std::pair<void *,std::function<void __cdecl(ksRacing::RealismRules const &)> >,std::allocator<std::pair<void *,std::function<void __cdecl(ksRacing::RealismRules const &)> > > > handlers;
};

/* 69625 */
struct FHUDOptions
{
  int SafezoneLeft;
  int SafezoneTop;
  int SafezoneRight;
  int SafezoneBottom;
  int RaceNotificationsVisible;
  int RatingWidgetVisible;
  bool RatingSensitiveWidgetVisibility;
  int BasicCarInfoVisible;
  int SysPerformanceVisible;
  int ElectronicsVisible;
  int HotlapStandingVisible;
  int LaptimeInfo01Visible;
  int LeaderboardVisible;
  int TrackMapVisible;
  int RaceDirectorInvestigationVisible;
  int RaceRealtimeStandingVisible;
  int RaceStandingVisible;
  int RadarVisible;
  int SessionInfoVisible;
  int TyreTemps01Visible;
  int TimeLeftWidgetVisible;
  int WrongWayVisible;
  int VirtualMirrorVisible;
  int ProximityIndicatorsVisible;
};

/* 69626 */
struct FCameraOptionsEA
{
  char DefaultCamera;
  char LookBehindCar;
  float GeneralMovement;
  float DashcamFactor;
  float OffsetForwardCm;
  float OffsetUpCm;
  float OffsetPitch;
  float LookWithWheel;
  float LookWithWheelGamma;
  float LookWithWheelSmoothing;
  float LookWithWheelHeadRoll;
};

/* 69627 */
struct FCameraOptions
{
  bool NothingYet;
};

/* 69628 */
struct FUserOptions
{
  FHUDOptions HUD;
  FCameraOptionsEA CameraEA;
  FCameraOptions Camera;
  FGhostCarOptions GhostCar;
  ksRacing::AssistRules Assists;
  ksRacing::RealismRules Realism;
};

/* 69629 */
struct __cppobj UAcUserOptionsManager : UObject
{
  FUserOptionsChanged OnUserOptionsChanged;
  FHUDOptionsChanged OnHUDOptionsChanged;
  FGhostCarOptionsChanged OnGhostCarOptionsChanged;
  Event<ksRacing::AssistRules> OnAssistOptionsChanged;
  Event<ksRacing::RealismRules> OnRealismOptionsChanged;
  FUserOptions Options;
  FUserOptions LastSavedOptions;
  FUserOptions LastBroadcastedOptions;
};

/* 69630 */
struct __cppobj TBaseDynamicMulticastDelegate<FWeakObjectPtr,void,FGamePlatformUserAccountData const &> : TMulticastScriptDelegate<FWeakObjectPtr>
{
};

/* 69631 */
struct __cppobj FGamePlatformServicesAccountDataChanged : TBaseDynamicMulticastDelegate<FWeakObjectPtr,void,FGamePlatformUserAccountData const &>
{
};

/* 69632 */
struct FGamePlatformUserAccountData
{
  int KunosIdentityIdHigh;
  int KunosIdentityIdLow;
  FString GamePlatformUserId;
  FString LocalMachineId;
  FString FirstName;
  FString LastName;
  FString Nickname;
  FString EMail;
  FString Country;
  FString DiscordUserId;
  FString DiscordUserName;
  FDateTime UpdatedUtc;
};

/* 69634 */
struct __cppobj __declspec(align(8)) UGamePlatformServices : UObject, FTickableGameObject
{
  FGamePlatformServicesAccountDataChanged OnAccountDataChanged;
  _BYTE PlatformType[1];
  FString PlatformApplicationId;
  FGamePlatformUserAccountData UserAccount;
  DiscordClientAPIWrapper *DiscordClient;
  _BYTE LoginResult[1];
  bool PollDiscord;
};

/* 7727 */
struct TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<104,8> >,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 69284 */
struct TSparseArray<TSetElement<TTuple<unsigned char,ksRacing::Lap> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<104,8> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 69285 */
struct __declspec(align(8)) TSet<TTuple<unsigned char,ksRacing::Lap>,TDefaultMapHashableKeyFuncs<unsigned char,ksRacing::Lap,0>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<TTuple<unsigned char,ksRacing::Lap> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 69286 */
struct TMapBase<unsigned char,ksRacing::Lap,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<unsigned char,ksRacing::Lap,0> >
{
  TSet<TTuple<unsigned char,ksRacing::Lap>,TDefaultMapHashableKeyFuncs<unsigned char,ksRacing::Lap,0>,FDefaultSetAllocator> Pairs;
};

/* 69287 */
struct __cppobj TSortableMapBase<unsigned char,ksRacing::Lap,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<unsigned char,ksRacing::Lap,0> > : TMapBase<unsigned char,ksRacing::Lap,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<unsigned char,ksRacing::Lap,0> >
{
};

/* 69288 */
struct __cppobj TMap<unsigned char,ksRacing::Lap,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<unsigned char,ksRacing::Lap,0> > : TSortableMapBase<unsigned char,ksRacing::Lap,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<unsigned char,ksRacing::Lap,0> >
{
};

/* 69289 */
struct TSparseArray<TSetElement<TTuple<unsigned char,unsigned short> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<12,4> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 69290 */
struct __declspec(align(8)) TSet<TTuple<unsigned char,unsigned short>,TDefaultMapHashableKeyFuncs<unsigned char,unsigned short,0>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<TTuple<unsigned char,unsigned short> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 69291 */
struct TMapBase<unsigned char,unsigned short,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<unsigned char,unsigned short,0> >
{
  TSet<TTuple<unsigned char,unsigned short>,TDefaultMapHashableKeyFuncs<unsigned char,unsigned short,0>,FDefaultSetAllocator> Pairs;
};

/* 69292 */
struct __cppobj TSortableMapBase<unsigned char,unsigned short,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<unsigned char,unsigned short,0> > : TMapBase<unsigned char,unsigned short,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<unsigned char,unsigned short,0> >
{
};

/* 69293 */
struct __cppobj TMap<unsigned char,unsigned short,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<unsigned char,unsigned short,0> > : TSortableMapBase<unsigned char,unsigned short,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<unsigned char,unsigned short,0> >
{
};

/* 69294 */
struct __declspec(align(8)) ksRacing::ReplayHeaderData
{
  long double maxTime;
  long double startTime;
  char type;
  int trackId;
  float sessionStartTime;
  char sessionType;
  int playerCarIndex;
};

/* 69295 */
struct __cppobj std::allocator<std::_Tree_node<std::pair<unsigned short const ,ksRacing::CarReplayData>,void *> >
{
};

/* 69297 */
struct __cppobj std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned short const ,ksRacing::CarReplayData> > > : std::_Container_base0
{
  std::_Tree_node<std::pair<unsigned short const ,ksRacing::CarReplayData>,void *> *_Myhead;
  unsigned __int64 _Mysize;
};

/* 69298 */
struct __cppobj std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<unsigned short const ,ksRacing::CarReplayData>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned short const ,ksRacing::CarReplayData> > >,1> : std::allocator<std::_Tree_node<std::pair<unsigned short const ,ksRacing::CarReplayData>,void *> >
{
  std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned short const ,ksRacing::CarReplayData> > > _Myval2;
};

/* 69299 */
struct __cppobj std::_Compressed_pair<std::less<unsigned short>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<unsigned short const ,ksRacing::CarReplayData>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned short const ,ksRacing::CarReplayData> > >,1>,1> : std::less<unsigned short>
{
  std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<unsigned short const ,ksRacing::CarReplayData>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned short const ,ksRacing::CarReplayData> > >,1> _Myval2;
};

/* 69300 */
struct std::_Tree_comp_alloc<std::_Tmap_traits<unsigned short,ksRacing::CarReplayData,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,ksRacing::CarReplayData> >,0> >
{
  std::_Compressed_pair<std::less<unsigned short>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<unsigned short const ,ksRacing::CarReplayData>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned short const ,ksRacing::CarReplayData> > >,1>,1> _Mypair;
};

/* 69301 */
struct __cppobj std::_Tree<std::_Tmap_traits<unsigned short,ksRacing::CarReplayData,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,ksRacing::CarReplayData> >,0> > : std::_Tree_comp_alloc<std::_Tmap_traits<unsigned short,ksRacing::CarReplayData,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,ksRacing::CarReplayData> >,0> >
{
};

/* 69302 */
struct __cppobj std::map<unsigned short,ksRacing::CarReplayData,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,ksRacing::CarReplayData> > > : std::_Tree<std::_Tmap_traits<unsigned short,ksRacing::CarReplayData,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,ksRacing::CarReplayData> >,0> >
{
};

/* 69303 */
struct __cppobj std::allocator<ksRacing::ReplayFrame<ksRacing::ReplayWorldUpdate> >
{
};

/* 69306 */
struct __cppobj std::_Vector_val<std::_Simple_types<ksRacing::ReplayFrame<ksRacing::ReplayWorldUpdate> > > : std::_Container_base0
{
  ksRacing::ReplayFrame<ksRacing::ReplayWorldUpdate> *_Myfirst;
  ksRacing::ReplayFrame<ksRacing::ReplayWorldUpdate> *_Mylast;
  ksRacing::ReplayFrame<ksRacing::ReplayWorldUpdate> *_Myend;
};

/* 69307 */
struct __cppobj std::_Compressed_pair<std::allocator<ksRacing::ReplayFrame<ksRacing::ReplayWorldUpdate> >,std::_Vector_val<std::_Simple_types<ksRacing::ReplayFrame<ksRacing::ReplayWorldUpdate> > >,1> : std::allocator<ksRacing::ReplayFrame<ksRacing::ReplayWorldUpdate> >
{
  std::_Vector_val<std::_Simple_types<ksRacing::ReplayFrame<ksRacing::ReplayWorldUpdate> > > _Myval2;
};

/* 69308 */
struct std::_Vector_alloc<std::_Vec_base_types<ksRacing::ReplayFrame<ksRacing::ReplayWorldUpdate>,std::allocator<ksRacing::ReplayFrame<ksRacing::ReplayWorldUpdate> > > >
{
  std::_Compressed_pair<std::allocator<ksRacing::ReplayFrame<ksRacing::ReplayWorldUpdate> >,std::_Vector_val<std::_Simple_types<ksRacing::ReplayFrame<ksRacing::ReplayWorldUpdate> > >,1> _Mypair;
};

/* 69309 */
struct __cppobj std::vector<ksRacing::ReplayFrame<ksRacing::ReplayWorldUpdate>,std::allocator<ksRacing::ReplayFrame<ksRacing::ReplayWorldUpdate> > > : std::_Vector_alloc<std::_Vec_base_types<ksRacing::ReplayFrame<ksRacing::ReplayWorldUpdate>,std::allocator<ksRacing::ReplayFrame<ksRacing::ReplayWorldUpdate> > > >
{
};

/* 69310 */
struct ksRacing::ReplayChannel<ksRacing::ReplayWorldUpdate>
{
  std::vector<ksRacing::ReplayFrame<ksRacing::ReplayWorldUpdate>,std::allocator<ksRacing::ReplayFrame<ksRacing::ReplayWorldUpdate> > > frames;
  unsigned int currentFrame;
  int lastFrame;
  long double minTime;
  long double lastTime;
  long double frequency;
};

/* 68845 */
struct ksRacing::ReplayWorldStatus
{
  float rainGlobalLevel;
  float cloudGlobalLevel;
};

/* 69311 */
struct __declspec(align(8)) ksRacing::KsEventBuffer<ksRacing::ReplayWorldStatus>
{
  std::vector<unsigned char,std::allocator<unsigned char> > buffer;
  float lastTime;
  ksRacing::ReplayWorldStatus lastValue;
  unsigned int position;
  bool keepStatus;
  bool log;
  bool randomAccess;
};

/* 68798 */
struct ksRacing::FGeneralEvent
{
  char event;
  unsigned __int16 payload;
};

/* 68824 */
struct __declspec(align(2)) ksRacing::KsEventBuffer<ksRacing::FGeneralEvent>
{
  std::vector<unsigned char,std::allocator<unsigned char> > buffer;
  float lastTime;
  ksRacing::FGeneralEvent lastValue;
  unsigned int position;
  bool keepStatus;
  bool log;
  bool randomAccess;
};

/* 69312 */
struct __cppobj std::allocator<std::_Tree_node<std::pair<unsigned short const ,ksRacing::DriverInfo>,void *> >
{
};

/* 69314 */
struct __cppobj std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned short const ,ksRacing::DriverInfo> > > : std::_Container_base0
{
  std::_Tree_node<std::pair<unsigned short const ,ksRacing::DriverInfo>,void *> *_Myhead;
  unsigned __int64 _Mysize;
};

/* 69315 */
struct __cppobj std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<unsigned short const ,ksRacing::DriverInfo>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned short const ,ksRacing::DriverInfo> > >,1> : std::allocator<std::_Tree_node<std::pair<unsigned short const ,ksRacing::DriverInfo>,void *> >
{
  std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned short const ,ksRacing::DriverInfo> > > _Myval2;
};

/* 69316 */
struct __cppobj std::_Compressed_pair<std::less<unsigned short>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<unsigned short const ,ksRacing::DriverInfo>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned short const ,ksRacing::DriverInfo> > >,1>,1> : std::less<unsigned short>
{
  std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<unsigned short const ,ksRacing::DriverInfo>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned short const ,ksRacing::DriverInfo> > >,1> _Myval2;
};

/* 69317 */
struct std::_Tree_comp_alloc<std::_Tmap_traits<unsigned short,ksRacing::DriverInfo,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,ksRacing::DriverInfo> >,0> >
{
  std::_Compressed_pair<std::less<unsigned short>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<unsigned short const ,ksRacing::DriverInfo>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned short const ,ksRacing::DriverInfo> > >,1>,1> _Mypair;
};

/* 69318 */
struct __cppobj std::_Tree<std::_Tmap_traits<unsigned short,ksRacing::DriverInfo,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,ksRacing::DriverInfo> >,0> > : std::_Tree_comp_alloc<std::_Tmap_traits<unsigned short,ksRacing::DriverInfo,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,ksRacing::DriverInfo> >,0> >
{
};

/* 69319 */
struct __cppobj std::map<unsigned short,ksRacing::DriverInfo,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,ksRacing::DriverInfo> > > : std::_Tree<std::_Tmap_traits<unsigned short,ksRacing::DriverInfo,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,ksRacing::DriverInfo> >,0> >
{
};

/* 68797 */
struct __declspec(align(8)) ksRacing::ReplaySpawnCar
{
  long double timeStamp;
  unsigned __int16 carIndex;
  unsigned __int16 driverIndex;
  unsigned __int16 carCount;
  unsigned __int16 driverCount;
  unsigned __int16 carInfoIndex;
};

/* 69320 */
struct __declspec(align(2)) ksRacing::KsEventBuffer<ksRacing::ReplaySpawnCar>
{
  std::vector<unsigned char,std::allocator<unsigned char> > buffer;
  float lastTime;
  ksRacing::ReplaySpawnCar lastValue;
  unsigned int position;
  bool keepStatus;
  bool log;
  bool randomAccess;
};

/* 68800 */
struct ksRacing::ReplayMarshalStruct
{
  __int8 flagColor : 4;
};

/* 69321 */
struct ksRacing::ReplayMarshalEvent
{
  ksRacing::ReplayMarshalStruct marshals[32];
};

/* 69322 */
struct __declspec(align(8)) ksRacing::KsEventBuffer<ksRacing::ReplayMarshalEvent>
{
  std::vector<unsigned char,std::allocator<unsigned char> > buffer;
  float lastTime;
  ksRacing::ReplayMarshalEvent lastValue;
  unsigned int position;
  bool keepStatus;
  bool log;
  bool randomAccess;
};

/* 69323 */
struct __declspec(align(8)) ksRacing::KsEventBuffer<DynamicTrackStatus>
{
  std::vector<unsigned char,std::allocator<unsigned char> > buffer;
  float lastTime;
  DynamicTrackStatus lastValue;
  unsigned int position;
  bool keepStatus;
  bool log;
  bool randomAccess;
};

/* 69324 */
struct ksRacing::ReplayTimedEvent<DynamicTrackStatus>
{
  ksRacing::KsEventBuffer<DynamicTrackStatus> data;
  long double minTime;
  long double lastTime;
  long double frequency;
};

/* 69325 */
struct __cppobj std::allocator<std::_Tree_node<std::pair<unsigned short const ,ksRacing::CarReplaySnapshot>,void *> >
{
};

/* 69327 */
struct __cppobj std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned short const ,ksRacing::CarReplaySnapshot> > > : std::_Container_base0
{
  std::_Tree_node<std::pair<unsigned short const ,ksRacing::CarReplaySnapshot>,void *> *_Myhead;
  unsigned __int64 _Mysize;
};

/* 69328 */
struct __cppobj std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<unsigned short const ,ksRacing::CarReplaySnapshot>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned short const ,ksRacing::CarReplaySnapshot> > >,1> : std::allocator<std::_Tree_node<std::pair<unsigned short const ,ksRacing::CarReplaySnapshot>,void *> >
{
  std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned short const ,ksRacing::CarReplaySnapshot> > > _Myval2;
};

/* 69329 */
struct __cppobj std::_Compressed_pair<std::less<unsigned short>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<unsigned short const ,ksRacing::CarReplaySnapshot>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned short const ,ksRacing::CarReplaySnapshot> > >,1>,1> : std::less<unsigned short>
{
  std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<unsigned short const ,ksRacing::CarReplaySnapshot>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned short const ,ksRacing::CarReplaySnapshot> > >,1> _Myval2;
};

/* 69330 */
struct std::_Tree_comp_alloc<std::_Tmap_traits<unsigned short,ksRacing::CarReplaySnapshot,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,ksRacing::CarReplaySnapshot> >,0> >
{
  std::_Compressed_pair<std::less<unsigned short>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<unsigned short const ,ksRacing::CarReplaySnapshot>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned short const ,ksRacing::CarReplaySnapshot> > >,1>,1> _Mypair;
};

/* 69331 */
struct __cppobj std::_Tree<std::_Tmap_traits<unsigned short,ksRacing::CarReplaySnapshot,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,ksRacing::CarReplaySnapshot> >,0> > : std::_Tree_comp_alloc<std::_Tmap_traits<unsigned short,ksRacing::CarReplaySnapshot,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,ksRacing::CarReplaySnapshot> >,0> >
{
};

/* 69332 */
struct __cppobj std::map<unsigned short,ksRacing::CarReplaySnapshot,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,ksRacing::CarReplaySnapshot> > > : std::_Tree<std::_Tmap_traits<unsigned short,ksRacing::CarReplaySnapshot,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,ksRacing::CarReplaySnapshot> >,0> >
{
};

/* 69304 */
struct ksRacing::ReplayWorldUpdate
{
  float timeOfTheDay;
  float timeCurrentSession;
};

/* 69333 */
struct ksRacing::ReplaySnapshot
{
  std::map<unsigned short,ksRacing::CarReplaySnapshot,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,ksRacing::CarReplaySnapshot> > > carSnapshot;
  ksRacing::ReplayWorldStatus worldStatus;
  ksRacing::ReplayWorldUpdate worldUpdate;
};

/* 68799 */
struct __declspec(align(8)) ksRacing::HighlightRequest
{
  long double timeStart;
  long double timeEnd;
  unsigned __int16 weight;
  unsigned __int16 carId;
  char type;
  __int16 payload;
  char maxPresence;
};

/* 69334 */
struct __declspec(align(8)) ksRacing::ReplayData
{
  ksRacing::ReplayHeaderData headerData;
  std::map<unsigned short,ksRacing::CarReplayData,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,ksRacing::CarReplayData> > > carReplayData;
  ksRacing::ReplayChannel<ksRacing::ReplayWorldUpdate> replayWorldUpdate;
  ksRacing::KsEventBuffer<ksRacing::ReplayWorldStatus> replayWorldStatus;
  ksRacing::KsEventBuffer<ksRacing::FGeneralEvent> highlightEvents;
  std::map<unsigned short,ksRacing::CarInfo,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,ksRacing::CarInfo> > > carInfo;
  std::map<unsigned short,ksRacing::DriverInfo,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,ksRacing::DriverInfo> > > driverInfo;
  ksRacing::KsEventBuffer<ksRacing::ReplaySpawnCar> spawnEvent;
  ksRacing::KsEventBuffer<ksRacing::FGeneralEvent> worldEvents;
  ksRacing::KsEventBuffer<ksRacing::ReplayMarshalEvent> marshalEvents;
  ksRacing::ReplayTimedEvent<DynamicTrackStatus> dynamicTrackEvents;
  ksRacing::WeatherData weatherData;
  ksRacing::WeatherStatus weatherStartStatus;
  ksRacing::ReplayMarshalEvent lastMarshalStatus;
  ksRacing::ReplayWorldStatus lastWorldStatus;
  DynamicTrackStatus lastDynamicTrackStatus;
  ksRacing::ReplaySnapshot snapshot;
  ksRacing::HighlightRequest highLightRequest;
  char worldStatusShiftedPosition;
  char worldUpdateShiftedPosition;
};

/* 69335 */
struct __cppobj std::allocator<ksRacing::ReplayData>
{
};

/* 69336 */
struct __cppobj std::_Vector_val<std::_Simple_types<ksRacing::ReplayData> > : std::_Container_base0
{
  ksRacing::ReplayData *_Myfirst;
  ksRacing::ReplayData *_Mylast;
  ksRacing::ReplayData *_Myend;
};

/* 69337 */
struct __cppobj std::_Compressed_pair<std::allocator<ksRacing::ReplayData>,std::_Vector_val<std::_Simple_types<ksRacing::ReplayData> >,1> : std::allocator<ksRacing::ReplayData>
{
  std::_Vector_val<std::_Simple_types<ksRacing::ReplayData> > _Myval2;
};

/* 69338 */
struct std::_Vector_alloc<std::_Vec_base_types<ksRacing::ReplayData,std::allocator<ksRacing::ReplayData> > >
{
  std::_Compressed_pair<std::allocator<ksRacing::ReplayData>,std::_Vector_val<std::_Simple_types<ksRacing::ReplayData> >,1> _Mypair;
};

/* 69339 */
struct __cppobj std::vector<ksRacing::ReplayData,std::allocator<ksRacing::ReplayData> > : std::_Vector_alloc<std::_Vec_base_types<ksRacing::ReplayData,std::allocator<ksRacing::ReplayData> > >
{
};

/* 68856 */
struct ksRacing::FReplayQuality
{
  int matrixChannelFrequency;
  int additionalChannelFrequency;
};

/* 62344 */
struct __declspec(align(8)) std::basic_istream<char,std::char_traits<char> >
{
  _BYTE gap0[8];
  __int64 _Chcount;
  _BYTE gap10[104];
};

/* 69340 */
struct __cppobj __declspec(align(16)) std::basic_ifstream<char,std::char_traits<char> > : std::basic_istream<char,std::char_traits<char> >
{
  _BYTE _Filebuffer[48];
  _BYTE gapA8[104];
};

/* 69341 */
struct __cppobj std::allocator<ksRacing::FHighlightEvents>
{
};

/* 69343 */
struct __cppobj std::_Vector_val<std::_Simple_types<ksRacing::FHighlightEvents> > : std::_Container_base0
{
  ksRacing::FHighlightEvents *_Myfirst;
  ksRacing::FHighlightEvents *_Mylast;
  ksRacing::FHighlightEvents *_Myend;
};

/* 69344 */
struct __cppobj std::_Compressed_pair<std::allocator<ksRacing::FHighlightEvents>,std::_Vector_val<std::_Simple_types<ksRacing::FHighlightEvents> >,1> : std::allocator<ksRacing::FHighlightEvents>
{
  std::_Vector_val<std::_Simple_types<ksRacing::FHighlightEvents> > _Myval2;
};

/* 69345 */
struct std::_Vector_alloc<std::_Vec_base_types<ksRacing::FHighlightEvents,std::allocator<ksRacing::FHighlightEvents> > >
{
  std::_Compressed_pair<std::allocator<ksRacing::FHighlightEvents>,std::_Vector_val<std::_Simple_types<ksRacing::FHighlightEvents> >,1> _Mypair;
};

/* 69346 */
struct __cppobj std::vector<ksRacing::FHighlightEvents,std::allocator<ksRacing::FHighlightEvents> > : std::_Vector_alloc<std::_Vec_base_types<ksRacing::FHighlightEvents,std::allocator<ksRacing::FHighlightEvents> > >
{
};

/* 69348 */
struct __cppobj std::allocator<ksRacing::HighlightRequest>
{
};

/* 69349 */
struct __cppobj std::_Vector_val<std::_Simple_types<ksRacing::HighlightRequest> > : std::_Container_base0
{
  ksRacing::HighlightRequest *_Myfirst;
  ksRacing::HighlightRequest *_Mylast;
  ksRacing::HighlightRequest *_Myend;
};

/* 69350 */
struct __cppobj std::_Compressed_pair<std::allocator<ksRacing::HighlightRequest>,std::_Vector_val<std::_Simple_types<ksRacing::HighlightRequest> >,1> : std::allocator<ksRacing::HighlightRequest>
{
  std::_Vector_val<std::_Simple_types<ksRacing::HighlightRequest> > _Myval2;
};

/* 69351 */
struct std::_Vector_alloc<std::_Vec_base_types<ksRacing::HighlightRequest,std::allocator<ksRacing::HighlightRequest> > >
{
  std::_Compressed_pair<std::allocator<ksRacing::HighlightRequest>,std::_Vector_val<std::_Simple_types<ksRacing::HighlightRequest> >,1> _Mypair;
};

/* 69352 */
struct __cppobj std::vector<ksRacing::HighlightRequest,std::allocator<ksRacing::HighlightRequest> > : std::_Vector_alloc<std::_Vec_base_types<ksRacing::HighlightRequest,std::allocator<ksRacing::HighlightRequest> > >
{
};

/* 1869 */
typedef _PaddingMode ksRacing::HighLightsMode;

/* 69353 */
struct __unaligned __declspec(align(8)) ksRacing::ReplayServices
{
  ksRacing::ReplayData dataRecording;
  ksRacing::ReplayData dataPlaying;
  ksRacing::ReplayData dataBuffer;
  std::vector<ksRacing::ReplayData,std::allocator<ksRacing::ReplayData> > dataHighlights;
  long double currentPlayingTime;
  long double currentRecordingTime;
  long double lastUpdateTime;
  long double sessionTime;
  bool rewindMode;
  bool recording;
  bool playing;
  bool startCamera;
  bool pauseRequest;
  __declspec(align(4)) long double timeMultiplier;
  ksRacing::RaceManager *raceManager;
  int maxReplayTime;
  float timeShiftPeriod;
  bool usingSnapshot;
  __declspec(align(4)) int highlightsTime;
  int highlightsTimeAfter;
  ksRacing::FReplayQuality replayQuality[5];
  _BYTE defaultReplayQuality[1];
  _BYTE aiReplayQuality[1];
  __declspec(align(4)) float minQualityBySpeedFactor;
  __declspec(align(8)) std::basic_ifstream<char,std::char_traits<char> > streaming;
  std::vector<ksRacing::FHighlightEvents,std::allocator<ksRacing::FHighlightEvents> > highlightEvents;
  _BYTE playingState[1];
  __declspec(align(8)) DummyTyre *dummyTyre;
  std::vector<ksRacing::HighlightRequest,std::allocator<ksRacing::HighlightRequest> > highlightRequestes;
  ksRacing::HighLightsMode highLightsMode;
  int maxHighLight;
  char highLightPresences[8];
};

/* 69354 */
struct TSparseArray<TSetElement<TTuple<unsigned short,enum ksRacing::CarLocation> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<12,4> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 69355 */
struct __declspec(align(8)) TSet<TTuple<unsigned short,enum ksRacing::CarLocation>,TDefaultMapHashableKeyFuncs<unsigned short,enum ksRacing::CarLocation,0>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<TTuple<unsigned short,enum ksRacing::CarLocation> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 69356 */
struct TMapBase<unsigned short,enum ksRacing::CarLocation,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<unsigned short,enum ksRacing::CarLocation,0> >
{
  TSet<TTuple<unsigned short,enum ksRacing::CarLocation>,TDefaultMapHashableKeyFuncs<unsigned short,enum ksRacing::CarLocation,0>,FDefaultSetAllocator> Pairs;
};

/* 69357 */
struct __cppobj TSortableMapBase<unsigned short,enum ksRacing::CarLocation,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<unsigned short,enum ksRacing::CarLocation,0> > : TMapBase<unsigned short,enum ksRacing::CarLocation,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<unsigned short,enum ksRacing::CarLocation,0> >
{
};

/* 69358 */
struct __cppobj TMap<unsigned short,enum ksRacing::CarLocation,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<unsigned short,enum ksRacing::CarLocation,0> > : TSortableMapBase<unsigned short,enum ksRacing::CarLocation,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<unsigned short,enum ksRacing::CarLocation,0> >
{
};

/* 69365 */
struct __cppobj UReplayManager : UObject
{
  UWorld *World;
  bool startCamera;
  AAcRaceGameState *GameState;
  AAcRaceGameMode *GameMode;
  TMap<unsigned char,ksRacing::Lap,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<unsigned char,ksRacing::Lap,0> > BestLaps;
  TMap<unsigned char,ksRacing::Lap,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<unsigned char,ksRacing::Lap,0> > CurrentLaps;
  TMap<unsigned char,ksRacing::Lap,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<unsigned char,ksRacing::Lap,0> > LastLaps;
  TMap<unsigned char,unsigned short,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<unsigned char,unsigned short,0> > LapCount;
  ksRacing::ReplayServices RS;
  bool recorderPause;
  float timeOfDaySeconds;
  TMap<unsigned short,enum ksRacing::CarLocation,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<unsigned short,enum ksRacing::CarLocation,0> > locationMap;
  int timeJump;
  int hightLightId;
  std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > highLightNames;
  bool controlsOverride;
  std::vector<unsigned short,std::allocator<unsigned short> > splinePositions;
  UReplayHighlightEvents *highLightManager;
  std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > fileNameToLoad;
  bool loadFromMenu;
  bool idealLineVisibility;
  float fpsCap;
};

/* 69367 */
struct __cppobj AReplayActor : AActor
{
  UReplayManager *replayManager;
};

/* 69368 */
struct __cppobj AWindDirectionalSource : AInfo
{
  UWindDirectionalSourceComponent *Component;
};

/* 10071 */
struct TArray<UParticleSystemComponent *,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 69369 */
struct __cppobj __declspec(align(4)) ARainBase : AActor
{
  UParticleSystem *Template;
  FVector EmitterSize;
  float VerticalOffset;
  float VelocityMaxSpeed;
  TArray<UParticleSystemComponent *,FDefaultAllocator> ParticleChildren;
  bool WarpRain;
  FVector CarVelocity;
  float lastRainGlobalLevel;
  bool bDeactivated;
};

/* 69371 */
struct TArray<AAcParticles::SParticlesInfo,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 69372 */
struct __cppobj AAcParticles : AActor
{
  UProceduralMeshComponent *TestMesh;
  UMaterial *TestMaterial;
  UMaterialExpressionConstant3Vector *BaseColorFactorNode;
  AAcRaceGameMode *RaceGameMode;
  TArray<UParticleSystemComponent *,FDefaultAllocator> ParticlesArray;
  TArray<AAcParticles::SParticlesInfo,FDefaultAllocator> ParticlesInfo;
};

/* 5073 */
struct TEnumAsByte<enum ECameraProjectionMode::Type>
{
  char Value;
};

/* 3825 */
struct FVector4
{
  float X;
  float Y;
  float Z;
  float W;
};

/* 5074 */
struct TEnumAsByte<enum EBloomMethod>
{
  char Value;
};

/* 5081 */
struct TEnumAsByte<enum EAutoExposureMethod>
{
  char Value;
};

/* 5082 */
struct TEnumAsByte<enum EDepthOfFieldMethod>
{
  char Value;
};

/* 5083 */
struct TArray<FWeightedBlendable,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 5084 */
struct FWeightedBlendables
{
  TArray<FWeightedBlendable,FDefaultAllocator> Array;
};

/* 5085 */
struct FPostProcessSettings
{
  unsigned __int32 bOverride_WhiteTemp : 1;
  unsigned __int32 bOverride_WhiteTint : 1;
  unsigned __int32 bOverride_ColorSaturation : 1;
  unsigned __int32 bOverride_ColorContrast : 1;
  unsigned __int32 bOverride_ColorGamma : 1;
  unsigned __int32 bOverride_ColorGain : 1;
  unsigned __int32 bOverride_ColorOffset : 1;
  unsigned __int32 bOverride_ColorSaturationShadows : 1;
  unsigned __int32 bOverride_ColorContrastShadows : 1;
  unsigned __int32 bOverride_ColorGammaShadows : 1;
  unsigned __int32 bOverride_ColorGainShadows : 1;
  unsigned __int32 bOverride_ColorOffsetShadows : 1;
  unsigned __int32 bOverride_ColorSaturationMidtones : 1;
  unsigned __int32 bOverride_ColorContrastMidtones : 1;
  unsigned __int32 bOverride_ColorGammaMidtones : 1;
  unsigned __int32 bOverride_ColorGainMidtones : 1;
  unsigned __int32 bOverride_ColorOffsetMidtones : 1;
  unsigned __int32 bOverride_ColorSaturationHighlights : 1;
  unsigned __int32 bOverride_ColorContrastHighlights : 1;
  unsigned __int32 bOverride_ColorGammaHighlights : 1;
  unsigned __int32 bOverride_ColorGainHighlights : 1;
  unsigned __int32 bOverride_ColorOffsetHighlights : 1;
  unsigned __int32 bOverride_ColorCorrectionShadowsMax : 1;
  unsigned __int32 bOverride_ColorCorrectionHighlightsMin : 1;
  unsigned __int32 bOverride_BlueCorrection : 1;
  unsigned __int32 bOverride_ExpandGamut : 1;
  unsigned __int32 bOverride_FilmWhitePoint : 1;
  unsigned __int32 bOverride_FilmSaturation : 1;
  unsigned __int32 bOverride_FilmChannelMixerRed : 1;
  unsigned __int32 bOverride_FilmChannelMixerGreen : 1;
  unsigned __int32 bOverride_FilmChannelMixerBlue : 1;
  unsigned __int32 bOverride_FilmContrast : 1;
  unsigned __int32 bOverride_FilmDynamicRange : 1;
  unsigned __int32 bOverride_FilmHealAmount : 1;
  unsigned __int32 bOverride_FilmToeAmount : 1;
  unsigned __int32 bOverride_FilmShadowTint : 1;
  unsigned __int32 bOverride_FilmShadowTintBlend : 1;
  unsigned __int32 bOverride_FilmShadowTintAmount : 1;
  unsigned __int32 bOverride_FilmSlope : 1;
  unsigned __int32 bOverride_FilmToe : 1;
  unsigned __int32 bOverride_FilmShoulder : 1;
  unsigned __int32 bOverride_FilmBlackClip : 1;
  unsigned __int32 bOverride_FilmWhiteClip : 1;
  unsigned __int32 bOverride_SceneColorTint : 1;
  unsigned __int32 bOverride_SceneFringeIntensity : 1;
  unsigned __int32 bOverride_ChromaticAberrationStartOffset : 1;
  unsigned __int32 bOverride_AmbientCubemapTint : 1;
  unsigned __int32 bOverride_AmbientCubemapIntensity : 1;
  unsigned __int32 bOverride_BloomMethod : 1;
  unsigned __int32 bOverride_BloomIntensity : 1;
  unsigned __int32 bOverride_BloomThreshold : 1;
  unsigned __int32 bOverride_Bloom1Tint : 1;
  unsigned __int32 bOverride_Bloom1Size : 1;
  unsigned __int32 bOverride_Bloom2Size : 1;
  unsigned __int32 bOverride_Bloom2Tint : 1;
  unsigned __int32 bOverride_Bloom3Tint : 1;
  unsigned __int32 bOverride_Bloom3Size : 1;
  unsigned __int32 bOverride_Bloom4Tint : 1;
  unsigned __int32 bOverride_Bloom4Size : 1;
  unsigned __int32 bOverride_Bloom5Tint : 1;
  unsigned __int32 bOverride_Bloom5Size : 1;
  unsigned __int32 bOverride_Bloom6Tint : 1;
  unsigned __int32 bOverride_Bloom6Size : 1;
  unsigned __int32 bOverride_BloomSizeScale : 1;
  unsigned __int32 bOverride_BloomConvolutionTexture : 1;
  unsigned __int32 bOverride_BloomConvolutionSize : 1;
  unsigned __int32 bOverride_BloomConvolutionCenterUV : 1;
  unsigned __int32 bOverride_BloomConvolutionPreFilter_DEPRECATED : 1;
  unsigned __int32 bOverride_BloomConvolutionPreFilterMin : 1;
  unsigned __int32 bOverride_BloomConvolutionPreFilterMax : 1;
  unsigned __int32 bOverride_BloomConvolutionPreFilterMult : 1;
  unsigned __int32 bOverride_BloomConvolutionBufferScale : 1;
  unsigned __int32 bOverride_BloomDirtMaskIntensity : 1;
  unsigned __int32 bOverride_BloomDirtMaskTint : 1;
  unsigned __int32 bOverride_BloomDirtMask : 1;
  unsigned __int32 bOverride_CameraShutterSpeed : 1;
  unsigned __int32 bOverride_CameraISO : 1;
  unsigned __int32 bOverride_AutoExposureMethod : 1;
  unsigned __int32 bOverride_AutoExposureLowPercent : 1;
  unsigned __int32 bOverride_AutoExposureHighPercent : 1;
  unsigned __int32 bOverride_AutoExposureMinBrightness : 1;
  unsigned __int32 bOverride_AutoExposureMaxBrightness : 1;
  unsigned __int32 bOverride_AutoExposureCalibrationConstant : 1;
  unsigned __int32 bOverride_AutoExposureSpeedUp : 1;
  unsigned __int32 bOverride_AutoExposureSpeedDown : 1;
  unsigned __int32 bOverride_AutoExposureBias : 1;
  unsigned __int32 bOverride_HistogramLogMin : 1;
  unsigned __int32 bOverride_HistogramLogMax : 1;
  unsigned __int32 bOverride_LensFlareIntensity : 1;
  unsigned __int32 bOverride_LensFlareTint : 1;
  unsigned __int32 bOverride_LensFlareTints : 1;
  unsigned __int32 bOverride_LensFlareBokehSize : 1;
  unsigned __int32 bOverride_LensFlareBokehShape : 1;
  unsigned __int32 bOverride_LensFlareThreshold : 1;
  unsigned __int32 bOverride_VignetteIntensity : 1;
  unsigned __int32 bOverride_GrainIntensity : 1;
  unsigned __int32 bOverride_GrainJitter : 1;
  unsigned __int32 bOverride_AmbientOcclusionIntensity : 1;
  unsigned __int32 bOverride_AmbientOcclusionStaticFraction : 1;
  unsigned __int32 bOverride_AmbientOcclusionRadius : 1;
  unsigned __int32 bOverride_AmbientOcclusionFadeDistance : 1;
  unsigned __int32 bOverride_AmbientOcclusionFadeRadius : 1;
  unsigned __int32 bOverride_AmbientOcclusionDistance_DEPRECATED : 1;
  unsigned __int32 bOverride_AmbientOcclusionRadiusInWS : 1;
  unsigned __int32 bOverride_AmbientOcclusionPower : 1;
  unsigned __int32 bOverride_AmbientOcclusionBias : 1;
  unsigned __int32 bOverride_AmbientOcclusionQuality : 1;
  unsigned __int32 bOverride_AmbientOcclusionMipBlend : 1;
  unsigned __int32 bOverride_AmbientOcclusionMipScale : 1;
  unsigned __int32 bOverride_AmbientOcclusionMipThreshold : 1;
  unsigned __int32 bOverride_LPVIntensity : 1;
  unsigned __int32 bOverride_LPVDirectionalOcclusionIntensity : 1;
  unsigned __int32 bOverride_LPVDirectionalOcclusionRadius : 1;
  unsigned __int32 bOverride_LPVDiffuseOcclusionExponent : 1;
  unsigned __int32 bOverride_LPVSpecularOcclusionExponent : 1;
  unsigned __int32 bOverride_LPVDiffuseOcclusionIntensity : 1;
  unsigned __int32 bOverride_LPVSpecularOcclusionIntensity : 1;
  unsigned __int32 bOverride_LPVSize : 1;
  unsigned __int32 bOverride_LPVSecondaryOcclusionIntensity : 1;
  unsigned __int32 bOverride_LPVSecondaryBounceIntensity : 1;
  unsigned __int32 bOverride_LPVGeometryVolumeBias : 1;
  unsigned __int32 bOverride_LPVVplInjectionBias : 1;
  unsigned __int32 bOverride_LPVEmissiveInjectionIntensity : 1;
  unsigned __int32 bOverride_LPVFadeRange : 1;
  unsigned __int32 bOverride_LPVDirectionalOcclusionFadeRange : 1;
  unsigned __int32 bOverride_IndirectLightingColor : 1;
  unsigned __int32 bOverride_IndirectLightingIntensity : 1;
  unsigned __int32 bOverride_ColorGradingIntensity : 1;
  unsigned __int32 bOverride_ColorGradingLUT : 1;
  unsigned __int32 bOverride_DepthOfFieldFocalDistance : 1;
  unsigned __int32 bOverride_DepthOfFieldFstop : 1;
  unsigned __int32 bOverride_DepthOfFieldMinFstop : 1;
  unsigned __int32 bOverride_DepthOfFieldBladeCount : 1;
  unsigned __int32 bOverride_DepthOfFieldSensorWidth : 1;
  unsigned __int32 bOverride_DepthOfFieldDepthBlurRadius : 1;
  unsigned __int32 bOverride_DepthOfFieldDepthBlurAmount : 1;
  unsigned __int32 bOverride_DepthOfFieldFocalRegion : 1;
  unsigned __int32 bOverride_DepthOfFieldNearTransitionRegion : 1;
  unsigned __int32 bOverride_DepthOfFieldFarTransitionRegion : 1;
  unsigned __int32 bOverride_DepthOfFieldScale : 1;
  unsigned __int32 bOverride_DepthOfFieldMaxBokehSize : 1;
  unsigned __int32 bOverride_DepthOfFieldNearBlurSize : 1;
  unsigned __int32 bOverride_DepthOfFieldFarBlurSize : 1;
  unsigned __int32 bOverride_DepthOfFieldMethod : 1;
  unsigned __int32 bOverride_MobileHQGaussian : 1;
  unsigned __int32 bOverride_DepthOfFieldBokehShape : 1;
  unsigned __int32 bOverride_DepthOfFieldOcclusion : 1;
  unsigned __int32 bOverride_DepthOfFieldColorThreshold : 1;
  unsigned __int32 bOverride_DepthOfFieldSizeThreshold : 1;
  unsigned __int32 bOverride_DepthOfFieldSkyFocusDistance : 1;
  unsigned __int32 bOverride_DepthOfFieldVignetteSize : 1;
  unsigned __int32 bOverride_MotionBlurAmount : 1;
  unsigned __int32 bOverride_MotionBlurMax : 1;
  unsigned __int32 bOverride_MotionBlurPerObjectSize : 1;
  unsigned __int32 bOverride_ScreenPercentage : 1;
  unsigned __int32 bOverride_ScreenSpaceReflectionIntensity : 1;
  unsigned __int32 bOverride_ScreenSpaceReflectionQuality : 1;
  unsigned __int32 bOverride_ScreenSpaceReflectionMaxRoughness : 1;
  unsigned __int32 bOverride_ScreenSpaceReflectionRoughnessScale : 1;
  float WhiteTemp;
  float WhiteTint;
  __declspec(align(8)) FVector4 ColorSaturation;
  FVector4 ColorContrast;
  FVector4 ColorGamma;
  FVector4 ColorGain;
  FVector4 ColorOffset;
  FVector4 ColorSaturationShadows;
  FVector4 ColorContrastShadows;
  FVector4 ColorGammaShadows;
  FVector4 ColorGainShadows;
  FVector4 ColorOffsetShadows;
  float ColorCorrectionShadowsMax;
  __declspec(align(16)) FVector4 ColorSaturationMidtones;
  FVector4 ColorContrastMidtones;
  FVector4 ColorGammaMidtones;
  FVector4 ColorGainMidtones;
  FVector4 ColorOffsetMidtones;
  FVector4 ColorSaturationHighlights;
  FVector4 ColorContrastHighlights;
  FVector4 ColorGammaHighlights;
  FVector4 ColorGainHighlights;
  FVector4 ColorOffsetHighlights;
  float ColorCorrectionHighlightsMin;
  float BlueCorrection;
  float ExpandGamut;
  float FilmSlope;
  float FilmToe;
  float FilmShoulder;
  float FilmBlackClip;
  float FilmWhiteClip;
  FLinearColor FilmWhitePoint;
  FLinearColor FilmShadowTint;
  float FilmShadowTintBlend;
  float FilmShadowTintAmount;
  float FilmSaturation;
  FLinearColor FilmChannelMixerRed;
  FLinearColor FilmChannelMixerGreen;
  FLinearColor FilmChannelMixerBlue;
  float FilmContrast;
  float FilmToeAmount;
  float FilmHealAmount;
  float FilmDynamicRange;
  FLinearColor SceneColorTint;
  float SceneFringeIntensity;
  float ChromaticAberrationStartOffset;
  TEnumAsByte<enum EBloomMethod> BloomMethod;
  float BloomIntensity;
  float BloomThreshold;
  float BloomSizeScale;
  float Bloom1Size;
  float Bloom2Size;
  float Bloom3Size;
  float Bloom4Size;
  float Bloom5Size;
  float Bloom6Size;
  FLinearColor Bloom1Tint;
  FLinearColor Bloom2Tint;
  FLinearColor Bloom3Tint;
  FLinearColor Bloom4Tint;
  FLinearColor Bloom5Tint;
  FLinearColor Bloom6Tint;
  UTexture2D *BloomConvolutionTexture;
  float BloomConvolutionSize;
  FVector2D BloomConvolutionCenterUV;
  FVector BloomConvolutionPreFilter_DEPRECATED;
  float BloomConvolutionPreFilterMin;
  float BloomConvolutionPreFilterMax;
  float BloomConvolutionPreFilterMult;
  float BloomConvolutionBufferScale;
  UTexture *BloomDirtMask;
  float BloomDirtMaskIntensity;
  FLinearColor BloomDirtMaskTint;
  FLinearColor AmbientCubemapTint;
  float AmbientCubemapIntensity;
  UTextureCube *AmbientCubemap;
  float CameraShutterSpeed;
  float CameraISO;
  float DepthOfFieldFstop;
  float DepthOfFieldMinFstop;
  int DepthOfFieldBladeCount;
  float AutoExposureBias;
  TEnumAsByte<enum EAutoExposureMethod> AutoExposureMethod;
  float AutoExposureLowPercent;
  float AutoExposureHighPercent;
  float AutoExposureMinBrightness;
  float AutoExposureMaxBrightness;
  float AutoExposureSpeedUp;
  float AutoExposureSpeedDown;
  float HistogramLogMin;
  float HistogramLogMax;
  float AutoExposureCalibrationConstant;
  float LensFlareIntensity;
  FLinearColor LensFlareTint;
  float LensFlareBokehSize;
  float LensFlareThreshold;
  UTexture *LensFlareBokehShape;
  FLinearColor LensFlareTints[8];
  float VignetteIntensity;
  float GrainJitter;
  float GrainIntensity;
  float AmbientOcclusionIntensity;
  float AmbientOcclusionStaticFraction;
  float AmbientOcclusionRadius;
  unsigned __int32 AmbientOcclusionRadiusInWS : 1;
  float AmbientOcclusionFadeDistance;
  float AmbientOcclusionFadeRadius;
  float AmbientOcclusionDistance_DEPRECATED;
  float AmbientOcclusionPower;
  float AmbientOcclusionBias;
  float AmbientOcclusionQuality;
  float AmbientOcclusionMipBlend;
  float AmbientOcclusionMipScale;
  float AmbientOcclusionMipThreshold;
  FLinearColor IndirectLightingColor;
  float IndirectLightingIntensity;
  float ColorGradingIntensity;
  UTexture *ColorGradingLUT;
  TEnumAsByte<enum EDepthOfFieldMethod> DepthOfFieldMethod;
  unsigned __int32 bMobileHQGaussian : 1;
  float DepthOfFieldSensorWidth;
  float DepthOfFieldFocalDistance;
  float DepthOfFieldDepthBlurAmount;
  float DepthOfFieldDepthBlurRadius;
  float DepthOfFieldFocalRegion;
  float DepthOfFieldNearTransitionRegion;
  float DepthOfFieldFarTransitionRegion;
  float DepthOfFieldScale;
  float DepthOfFieldMaxBokehSize;
  float DepthOfFieldNearBlurSize;
  float DepthOfFieldFarBlurSize;
  UTexture *DepthOfFieldBokehShape;
  float DepthOfFieldOcclusion;
  float DepthOfFieldColorThreshold;
  float DepthOfFieldSizeThreshold;
  float DepthOfFieldSkyFocusDistance;
  float DepthOfFieldVignetteSize;
  float MotionBlurAmount;
  float MotionBlurMax;
  float MotionBlurPerObjectSize;
  float LPVIntensity;
  float LPVVplInjectionBias;
  float LPVSize;
  float LPVSecondaryOcclusionIntensity;
  float LPVSecondaryBounceIntensity;
  float LPVGeometryVolumeBias;
  float LPVEmissiveInjectionIntensity;
  float LPVDirectionalOcclusionIntensity;
  float LPVDirectionalOcclusionRadius;
  float LPVDiffuseOcclusionExponent;
  float LPVSpecularOcclusionExponent;
  float LPVDiffuseOcclusionIntensity;
  float LPVSpecularOcclusionIntensity;
  float ScreenSpaceReflectionIntensity;
  float ScreenSpaceReflectionQuality;
  float ScreenSpaceReflectionMaxRoughness;
  float LPVFadeRange;
  float LPVDirectionalOcclusionFadeRange;
  float ScreenPercentage;
  FWeightedBlendables WeightedBlendables;
  TArray<UObject *,FDefaultAllocator> Blendables_DEPRECATED;
};

/* 5086 */
struct __declspec(align(16)) FMinimalViewInfo
{
  FVector Location;
  FRotator Rotation;
  float FOV;
  float DesiredFOV;
  float OrthoWidth;
  float OrthoNearClipPlane;
  float OrthoFarClipPlane;
  float AspectRatio;
  unsigned __int32 bConstrainAspectRatio : 1;
  unsigned __int32 bUseFieldOfViewForLOD : 1;
  TEnumAsByte<enum ECameraProjectionMode::Type> ProjectionMode;
  float PostProcessBlendWeight;
  FPostProcessSettings PostProcessSettings;
  FVector2D OffCenterProjectionOffset;
};

/* 5087 */
struct FCameraCacheEntry
{
  float TimeStamp;
  FMinimalViewInfo POV;
};

/* 5088 */
struct __declspec(align(16)) FTViewTarget
{
  AActor *Target;
  FMinimalViewInfo POV;
  APlayerState *PlayerState;
};

/* 5089 */
struct TEnumAsByte<enum EViewTargetBlendFunction>
{
  char Value;
};

/* 5090 */
struct FViewTargetTransitionParams
{
  float BlendTime;
  TEnumAsByte<enum EViewTargetBlendFunction> BlendFunction;
  float BlendExp;
  unsigned __int32 bLockOutgoing : 1;
};

/* 5091 */
struct TArray<UCameraModifier *,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 5092 */
struct TArray<TSubclassOf<UCameraModifier>,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 5093 */
struct TArray<AEmitterCameraLensEffectBase *,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 5387 */
struct TArray<FPostProcessSettings,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 5388 */
struct TArray<UCameraAnimInst *,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 5094 */
struct __cppobj __declspec(align(8)) APlayerCameraManager : AActor
{
  APlayerController *PCOwner;
  USceneComponent *TransformComponent;
  FName CameraStyle;
  float DefaultFOV;
  float LockedFOV;
  float DefaultOrthoWidth;
  float LockedOrthoWidth;
  float DefaultAspectRatio;
  FLinearColor FadeColor;
  float FadeAmount;
  FVector ColorScale;
  FVector DesiredColorScale;
  FVector OriginalColorScale;
  float ColorScaleInterpDuration;
  float ColorScaleInterpStartTime;
  FCameraCacheEntry CameraCache;
  FCameraCacheEntry LastFrameCameraCache;
  FTViewTarget ViewTarget;
  FTViewTarget PendingViewTarget;
  float BlendTimeToGo;
  FViewTargetTransitionParams BlendParams;
  FCameraCacheEntry CameraCachePrivate;
  FCameraCacheEntry LastFrameCameraCachePrivate;
  TArray<UCameraModifier *,FDefaultAllocator> ModifierList;
  TArray<TSubclassOf<UCameraModifier>,FDefaultAllocator> DefaultModifiers;
  float FreeCamDistance;
  FVector FreeCamOffset;
  FVector ViewTargetOffset;
  FVector2D FadeAlpha;
  float FadeTime;
  float FadeTimeRemaining;
  TArray<AEmitterCameraLensEffectBase *,FDefaultAllocator> CameraLensEffects;
  UCameraModifier_CameraShake *CachedCameraShakeMod;
  UCameraAnimInst *AnimInstPool[8];
  TArray<FPostProcessSettings,FDefaultAllocator> PostProcessBlendCache;
  TArray<float,FDefaultAllocator> PostProcessBlendCacheWeights;
  TArray<UCameraAnimInst *,FDefaultAllocator> ActiveAnims;
  TArray<UCameraAnimInst *,FDefaultAllocator> FreeAnims;
  ACameraActor *AnimCameraActor;
  unsigned __int32 bIsOrthographic : 1;
  unsigned __int32 bDefaultConstrainAspectRatio : 1;
  unsigned __int32 bEnableFading : 1;
  unsigned __int32 bFadeAudio : 1;
  unsigned __int32 bEnableColorScaling : 1;
  unsigned __int32 bEnableColorScaleInterp : 1;
  unsigned __int32 bClientSimulatingViewTarget : 1;
  unsigned __int32 bUseClientSideCameraUpdates : 1;
  unsigned __int32 bDebugClientSideCamera : 1;
  unsigned __int32 bShouldSendClientSideCameraUpdate : 1;
  unsigned __int32 bGameCameraCutThisFrame : 1;
  unsigned __int32 bHoldFadeWhenFinished : 1;
  unsigned __int32 bAutoAnimateFade : 1;
  unsigned __int32 bAlwaysApplyModifiers : 1;
  float ViewPitchMin;
  float ViewPitchMax;
  float ViewYawMin;
  float ViewYawMax;
  float ViewRollMin;
  float ViewRollMax;
};

/* 5706 */
struct TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<88,8> >,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 69636 */
struct TSparseArray<TSetElement<TTuple<FString,FACCameraCarInfo> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<88,8> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 69637 */
struct __declspec(align(8)) TSet<TTuple<FString,FACCameraCarInfo>,TDefaultMapHashableKeyFuncs<FString,FACCameraCarInfo,0>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<TTuple<FString,FACCameraCarInfo> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 69638 */
struct TMapBase<FString,FACCameraCarInfo,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FString,FACCameraCarInfo,0> >
{
  TSet<TTuple<FString,FACCameraCarInfo>,TDefaultMapHashableKeyFuncs<FString,FACCameraCarInfo,0>,FDefaultSetAllocator> Pairs;
};

/* 69639 */
struct __cppobj TSortableMapBase<FString,FACCameraCarInfo,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FString,FACCameraCarInfo,0> > : TMapBase<FString,FACCameraCarInfo,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FString,FACCameraCarInfo,0> >
{
};

/* 69640 */
struct __cppobj TMap<FString,FACCameraCarInfo,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FString,FACCameraCarInfo,0> > : TSortableMapBase<FString,FACCameraCarInfo,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FString,FACCameraCarInfo,0> >
{
};

/* 69641 */
struct FACCameraSettings
{
  float CameraFOV[5];
  TMap<FString,FACCameraCarInfo,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FString,FACCameraCarInfo,0> > MapCarCameraData;
};

/* 69642 */
struct TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<288,16> >,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 69643 */
struct TSparseArray<TSetElement<TTuple<FString,AACPlayerCameraManager::FCameraTransformSet> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<288,16> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 69644 */
struct __declspec(align(8)) TSet<TTuple<FString,AACPlayerCameraManager::FCameraTransformSet>,TDefaultMapHashableKeyFuncs<FString,AACPlayerCameraManager::FCameraTransformSet,0>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<TTuple<FString,AACPlayerCameraManager::FCameraTransformSet> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 69645 */
struct TMapBase<FString,AACPlayerCameraManager::FCameraTransformSet,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FString,AACPlayerCameraManager::FCameraTransformSet,0> >
{
  TSet<TTuple<FString,AACPlayerCameraManager::FCameraTransformSet>,TDefaultMapHashableKeyFuncs<FString,AACPlayerCameraManager::FCameraTransformSet,0>,FDefaultSetAllocator> Pairs;
};

/* 69646 */
struct __cppobj TSortableMapBase<FString,AACPlayerCameraManager::FCameraTransformSet,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FString,AACPlayerCameraManager::FCameraTransformSet,0> > : TMapBase<FString,AACPlayerCameraManager::FCameraTransformSet,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FString,AACPlayerCameraManager::FCameraTransformSet,0> >
{
};

/* 69647 */
struct __cppobj TMap<FString,AACPlayerCameraManager::FCameraTransformSet,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FString,AACPlayerCameraManager::FCameraTransformSet,0> > : TSortableMapBase<FString,AACPlayerCameraManager::FCameraTransformSet,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FString,AACPlayerCameraManager::FCameraTransformSet,0> >
{
};

/* 68963 */
struct __cppobj AACPlayerCameraManager : APlayerCameraManager
{
  AAcFreeCameraActor *FreeCameraActor;
  ACameraActor *HelicamActor;
  USplineComponent *HelicamSpline;
  float HelicamPrevDistance;
  UAcGameInstance *GameInstance;
  ACarAvatar *FocusedCar;
  FCameraType currentCamera;
  const float FOVStep;
  const float FOVMinValue;
  const float FOVMaxValue;
  const float MoveStep;
  const float MoveDeltaMax;
  FACCameraSettings CameraSettings;
  FString CameraSettingsFilePath;
  TMap<FString,AACPlayerCameraManager::FCameraTransformSet,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FString,AACPlayerCameraManager::FCameraTransformSet,0> > MapCarCameraTransform;
  _BYTE mainCameraMode[1];
  _BYTE lastDrivable[1];
  int MotionBlurQualityAtStart;
  bool bMBlurOverride;
  ARainBase *RainActor;
  UCameraComponent *currentCameraComponent;
  bool hmdEnabled;
  FVector cameraDefaultPosition;
  __declspec(align(16)) FQuat cameraDefaultOrientation;
  FVector HMDStartPosition;
  __declspec(align(8)) FQuat HMDStartOrientation;
  bool tvCarFocused;
};

/* 69385 */
struct __cppobj UTrackPhysicsDataCache : UDataAsset
{
  FString Comment;
  TArray<unsigned char,FDefaultAllocator> Data;
};

/* 4264 */
struct FCurveOwnerInterface
{
  FCurveOwnerInterfaceVtbl *vfptr;
};

/* 4272 */
struct __cppobj UCurveBase : UObject, FCurveOwnerInterface
{
};

/* 4255 */
struct TSparseArray<TSetElement<TTuple<FKeyHandle,int> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<16,4> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 4256 */
struct __declspec(align(8)) TSet<TTuple<FKeyHandle,int>,TDefaultMapHashableKeyFuncs<FKeyHandle,int,0>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<TTuple<FKeyHandle,int> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 4257 */
struct TMapBase<FKeyHandle,int,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FKeyHandle,int,0> >
{
  TSet<TTuple<FKeyHandle,int>,TDefaultMapHashableKeyFuncs<FKeyHandle,int,0>,FDefaultSetAllocator> Pairs;
};

/* 4258 */
struct __cppobj TSortableMapBase<FKeyHandle,int,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FKeyHandle,int,0> > : TMapBase<FKeyHandle,int,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FKeyHandle,int,0> >
{
};

/* 4259 */
struct __cppobj TMap<FKeyHandle,int,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FKeyHandle,int,0> > : TSortableMapBase<FKeyHandle,int,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FKeyHandle,int,0> >
{
};

/* 4260 */
struct FKeyHandleMap
{
  TMap<FKeyHandle,int,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FKeyHandle,int,0> > KeyHandlesToIndices;
};

/* 4251 */
struct FIndexedCurve
{
  FIndexedCurveVtbl *vfptr;
  FKeyHandleMap KeyHandlesToIndices;
};

/* 4261 */
struct TEnumAsByte<enum ERichCurveExtrapolation>
{
  char Value;
};

/* 4262 */
struct TArray<FRichCurveKey,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 4263 */
struct __cppobj FRichCurve : FIndexedCurve
{
  TEnumAsByte<enum ERichCurveExtrapolation> PreInfinityExtrap;
  TEnumAsByte<enum ERichCurveExtrapolation> PostInfinityExtrap;
  float DefaultValue;
  TArray<FRichCurveKey,FDefaultAllocator> Keys;
};

/* 4273 */
struct __cppobj __declspec(align(8)) UCurveFloat : UCurveBase
{
  FRichCurve FloatCurve;
  bool bIsEventCurve;
};

/* 69387 */
struct TArray<FTrackGene,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 69388 */
struct __cppobj UTrackGenome : UDataAsset
{
  TArray<FTrackGene,FDefaultAllocator> Genes;
};

/* 69390 */
struct TArray<AAcMarshal *,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 35882 */
struct TArray<TArray<unsigned char,FDefaultAllocator>,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 69392 */
struct MarshalStruct
{
  __int8 flagColor : 4;
};

/* 69393 */
struct TArray<MarshalLogic,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 69394 */
struct __cppobj __declspec(align(8)) UTrackPeopleController : UActorComponent
{
  AAcRaceGameMode *RaceGameMode;
  ksRacing::RaceManager *raceManager;
  TArray<AAcMarshal *,FDefaultAllocator> Marshals;
  TArray<UParticleSystemComponent *,FDefaultAllocator> Smokers;
  ATrackAvatar *TrackAvatar;
  TArray<TArray<unsigned char,FDefaultAllocator>,FDefaultAllocator> MarshalsBySectorsStart;
  TArray<TArray<unsigned char,FDefaultAllocator>,FDefaultAllocator> MarshalsBySectorsEnd;
  TArray<TArray<unsigned char,FDefaultAllocator>,FDefaultAllocator> busyMarshalsByCar;
  char checkeredFlagMarshalIndex;
  ACarAvatar *carAvatar;
  unsigned __int16 currentCarIndex;
  unsigned __int16 currentDriverIndex;
  float normalizedBlueFlagDistance;
  MarshalStruct marshalBitField[32];
  MarshalStruct lastMarshalBitField[32];
  TArray<MarshalLogic,FDefaultAllocator> marshalLogics;
  bool hasLeaderCrossed;
  FVector2D lerpValues;
};

/* 4429 */
struct IBlendableInterface
{
  IBlendableInterfaceVtbl *vfptr;
};

/* 7048 */
struct FLightmassMaterialInterfaceSettings
{
  unsigned __int32 bCastShadowAsMasked : 1;
  float EmissiveBoost;
  float DiffuseBoost;
  float ExportResolutionScale;
  unsigned __int32 bOverrideCastShadowAsMasked : 1;
  unsigned __int32 bOverrideEmissiveBoost : 1;
  unsigned __int32 bOverrideDiffuseBoost : 1;
  unsigned __int32 bOverrideExportResolutionScale : 1;
};

/* 7049 */
struct TArray<FMaterialTextureInfo,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 6007 */
struct __cppobj __declspec(align(8)) UMaterialInterface : UObject, IBlendableInterface, IInterface_AssetUserData
{
  USubsurfaceProfile *SubsurfaceProfile;
  FRenderCommandFence ParentRefFence;
  FLightmassMaterialInterfaceSettings LightmassSettings;
  TArray<FMaterialTextureInfo,FDefaultAllocator> TextureStreamingData;
  TArray<UAssetUserData *,FDefaultAllocator> AssetUserData;
  unsigned int FeatureLevelsToForceCompile;
};

/* 6008 */
struct TArray<FScalarParameterValue,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 6009 */
struct TArray<FVectorParameterValue,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 6010 */
struct TArray<FTextureParameterValue,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 6011 */
struct TArray<FFontParameterValue,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 6012 */
struct TEnumAsByte<enum EBlendMode>
{
  char Value;
};

/* 6013 */
struct TEnumAsByte<enum EMaterialShadingModel>
{
  char Value;
};

/* 6014 */
struct FMaterialInstanceBasePropertyOverrides
{
  bool bOverride_OpacityMaskClipValue;
  bool bOverride_BlendMode;
  bool bOverride_ShadingModel;
  bool bOverride_DitheredLODTransition;
  bool bOverride_CastDynamicShadowAsMasked;
  bool bOverride_TwoSided;
  float OpacityMaskClipValue;
  TEnumAsByte<enum EBlendMode> BlendMode;
  TEnumAsByte<enum EMaterialShadingModel> ShadingModel;
  unsigned __int32 TwoSided : 1;
  unsigned __int32 DitheredLODTransition : 1;
  unsigned __int32 bCastDynamicShadowAsMasked : 1;
};

/* 6020 */
struct TArray<UTexture *,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 4992 */
struct TArray<FStaticSwitchParameter,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 4993 */
struct TArray<FStaticComponentMaskParameter,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 4994 */
struct TArray<FStaticTerrainLayerWeightParameter,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 4995 */
struct TArray<FStaticMaterialLayersParameter,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 4996 */
struct FStaticParameterSet
{
  TArray<FStaticSwitchParameter,FDefaultAllocator> StaticSwitchParameters;
  TArray<FStaticComponentMaskParameter,FDefaultAllocator> StaticComponentMaskParameters;
  TArray<FStaticTerrainLayerWeightParameter,FDefaultAllocator> TerrainLayerWeightParameters;
  TArray<FStaticMaterialLayersParameter,FDefaultAllocator> MaterialLayersParameters;
};

/* 6021 */
struct TArray<FMaterialResource,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 6015 */
struct __cppobj UMaterialInstance : UMaterialInterface
{
  UPhysicalMaterial *PhysMaterial;
  UMaterialInterface *Parent;
  unsigned __int32 bHasStaticPermutationResource : 1;
  unsigned __int32 bOverrideSubsurfaceProfile : 1;
  bool ReentrantFlag[2];
  TArray<FScalarParameterValue,FDefaultAllocator> ScalarParameterValues;
  TArray<FVectorParameterValue,FDefaultAllocator> VectorParameterValues;
  TArray<FTextureParameterValue,FDefaultAllocator> TextureParameterValues;
  TArray<FFontParameterValue,FDefaultAllocator> FontParameterValues;
  bool bOverrideBaseProperties_DEPRECATED;
  FMaterialInstanceBasePropertyOverrides BasePropertyOverrides;
  float OpacityMaskClipValue;
  TEnumAsByte<enum EBlendMode> BlendMode;
  TEnumAsByte<enum EMaterialShadingModel> ShadingModel;
  unsigned __int32 TwoSided : 1;
  unsigned __int32 DitheredLODTransition : 1;
  unsigned __int32 bCastDynamicShadowAsMasked : 1;
  FMaterialInstanceResource *Resources[3];
  TArray<UTexture *,FDefaultAllocator> PermutationTextureReferences;
  FStaticParameterSet StaticParameters;
  TArray<FMaterialResource,FDefaultAllocator> LoadedMaterialResources;
  FMaterialResource *StaticPermutationMaterialResources[3][4];
  FRenderCommandFence ReleaseFence;
};

/* 6570 */
struct TSparseArray<TSetElement<TTuple<FName,TArray<FName,FDefaultAllocator> > >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<32,8> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 6571 */
struct __declspec(align(8)) TSet<TTuple<FName,TArray<FName,FDefaultAllocator> >,TDefaultMapHashableKeyFuncs<FName,TArray<FName,FDefaultAllocator>,0>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<TTuple<FName,TArray<FName,FDefaultAllocator> > >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 6572 */
struct TMapBase<FName,TArray<FName,FDefaultAllocator>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,TArray<FName,FDefaultAllocator>,0> >
{
  TSet<TTuple<FName,TArray<FName,FDefaultAllocator> >,TDefaultMapHashableKeyFuncs<FName,TArray<FName,FDefaultAllocator>,0>,FDefaultSetAllocator> Pairs;
};

/* 6573 */
struct __cppobj TSortableMapBase<FName,TArray<FName,FDefaultAllocator>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,TArray<FName,FDefaultAllocator>,0> > : TMapBase<FName,TArray<FName,FDefaultAllocator>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,TArray<FName,FDefaultAllocator>,0> >
{
};

/* 6574 */
struct __cppobj TMap<FName,TArray<FName,FDefaultAllocator>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,TArray<FName,FDefaultAllocator>,0> > : TSortableMapBase<FName,TArray<FName,FDefaultAllocator>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,TArray<FName,FDefaultAllocator>,0> >
{
};

/* 6575 */
struct __cppobj UMaterialInstanceDynamic : UMaterialInstance
{
  TMap<FName,TArray<FName,FDefaultAllocator>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,TArray<FName,FDefaultAllocator>,0> > RenamedTextures;
};

/* 69398 */
struct __cppobj std::allocator<std::_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > const ,SurfaceDef>,void *> >
{
};

/* 69401 */
struct __cppobj std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > const ,SurfaceDef> > > : std::_Container_base0
{
  std::_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > const ,SurfaceDef>,void *> *_Myhead;
  unsigned __int64 _Mysize;
};

/* 69402 */
struct __cppobj std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > const ,SurfaceDef>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > const ,SurfaceDef> > >,1> : std::allocator<std::_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > const ,SurfaceDef>,void *> >
{
  std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > const ,SurfaceDef> > > _Myval2;
};

/* 69403 */
struct __cppobj std::_Compressed_pair<std::less<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > const ,SurfaceDef>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > const ,SurfaceDef> > >,1>,1> : std::less<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >
{
  std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > const ,SurfaceDef>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > const ,SurfaceDef> > >,1> _Myval2;
};

/* 69404 */
struct std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,SurfaceDef,std::less<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > const ,SurfaceDef> >,0> >
{
  std::_Compressed_pair<std::less<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > const ,SurfaceDef>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > const ,SurfaceDef> > >,1>,1> _Mypair;
};

/* 69405 */
struct __cppobj std::_Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,SurfaceDef,std::less<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > const ,SurfaceDef> >,0> > : std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,SurfaceDef,std::less<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > const ,SurfaceDef> >,0> >
{
};

/* 69406 */
struct __cppobj std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,SurfaceDef,std::less<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > const ,SurfaceDef> > > : std::_Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,SurfaceDef,std::less<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > const ,SurfaceDef> >,0> >
{
};

/* 69396 */
struct __declspec(align(8)) SurfacesManager
{
  SurfacesManagerVtbl *vfptr;
  std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,SurfaceDef,std::less<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > const ,SurfaceDef> > > surfaces;
  bool enableCrash;
};

/* 69413 */
struct __cppobj AAcCarLocationManager : AActor
{
  ATriggerBox *PitEntryLaneSideStart;
  ATriggerVolume *PitEntryLaneSide;
  ATriggerBox *PitLaneEntry;
  ATriggerBox *PitLaneExit;
  ATriggerVolume *PitExitLaneSide;
  ATriggerBox *PitExitLaneEnd;
  ATriggerBox *SafetyCarLine1;
  ATriggerBox *SafetyCarLine2;
  AAcRaceGameMode *RaceGameMode;
  AAcPlayerStartManager *PlayerStartManager;
};

/* 69414 */
struct __cppobj __declspec(align(8)) AAcTrackSpline : AActor
{
  USplineComponent *SplineComponent;
  bool ImportFewPoints;
};

/* 69418 */
struct __cppobj ASceneCapture : AActor
{
  UStaticMeshComponent *MeshComp;
};

/* 69419 */
struct __cppobj ASceneCapture2D : ASceneCapture
{
  USceneCaptureComponent2D *CaptureComponent2D;
  UDrawFrustumComponent *DrawFrustum;
};

/* 5377 */
struct TArray<FInterpCurvePoint<FVector>,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 5378 */
struct FInterpCurve<FVector>
{
  TArray<FInterpCurvePoint<FVector>,FDefaultAllocator> Points;
  bool bIsLooped;
  float LoopKeyOffset;
};

/* 5379 */
struct __cppobj FInterpCurveVector : FInterpCurve<FVector>
{
};

/* 18216 */
struct TArray<FInterpCurvePoint<FQuat>,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 18217 */
struct FInterpCurve<FQuat>
{
  TArray<FInterpCurvePoint<FQuat>,FDefaultAllocator> Points;
  bool bIsLooped;
  float LoopKeyOffset;
};

/* 18218 */
struct __cppobj FInterpCurveQuat : FInterpCurve<FQuat>
{
};

/* 12782 */
struct TArray<FInterpCurvePoint<float>,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 12783 */
struct FInterpCurve<float>
{
  TArray<FInterpCurvePoint<float>,FDefaultAllocator> Points;
  bool bIsLooped;
  float LoopKeyOffset;
};

/* 12784 */
struct __cppobj FInterpCurveFloat : FInterpCurve<float>
{
};

/* 56178 */
struct FSplineCurves
{
  FInterpCurveVector Position;
  FInterpCurveQuat Rotation;
  FInterpCurveVector Scale;
  FInterpCurveFloat ReparamTable;
};

/* 56179 */
struct __cppobj __declspec(align(16)) USplineComponent : UPrimitiveComponent
{
  FSplineCurves SplineCurves;
  FInterpCurveVector SplineInfo_DEPRECATED;
  FInterpCurveQuat SplineRotInfo_DEPRECATED;
  FInterpCurveVector SplineScaleInfo_DEPRECATED;
  FInterpCurveFloat SplineReparamTable_DEPRECATED;
  bool bAllowSplineEditingPerInstance_DEPRECATED;
  int ReparamStepsPerSegment;
  float Duration;
  bool bStationaryEndpoints;
  bool bSplineHasBeenEdited;
  bool bModifiedByConstructionScript;
  bool bInputSplinePointsToConstructionScript;
  bool bDrawDebug;
  bool bClosedLoop;
  bool bLoopPositionOverride;
  float LoopPosition;
  FVector DefaultUpVector;
};

/* 6121 */
struct __cppobj ULightComponentBase : USceneComponent
{
  _BYTE LightGuid[8];
  float Brightness_DEPRECATED;
  float Intensity;
  FColor LightColor;
  unsigned __int32 bAffectsWorld : 1;
  unsigned __int32 CastShadows : 1;
  unsigned __int32 CastStaticShadows : 1;
  unsigned __int32 CastDynamicShadows : 1;
  unsigned __int32 bAffectTranslucentLighting : 1;
  unsigned __int32 bTransmission : 1;
  unsigned __int32 bCastVolumetricShadow : 1;
  float IndirectLightingIntensity;
  float VolumetricScatteringIntensity;
};

/* 6126 */
struct __cppobj FStaticShadowDepthMap : FTexture
{
  FStaticShadowDepthMapData *Data;
};

/* 6127 */
const struct __cppobj __declspec(align(16)) ULightComponent : ULightComponentBase
{
  float Temperature;
  float MaxDrawDistance;
  float MaxDistanceFadeRange;
  unsigned __int32 bUseTemperature : 1;
  int ShadowMapChannel_DEPRECATED;
  int PreviewShadowMapChannel;
  float MinRoughness_DEPRECATED;
  float SpecularScale;
  float ShadowResolutionScale;
  float ShadowBias;
  float ShadowSharpen;
  float ContactShadowLength;
  unsigned __int32 ContactShadowLengthInWS : 1;
  unsigned __int32 InverseSquaredFalloff_DEPRECATED : 1;
  unsigned __int32 CastTranslucentShadows : 1;
  unsigned __int32 bCastShadowsFromCinematicObjectsOnly : 1;
  unsigned __int32 bAffectDynamicIndirectLighting : 1;
  unsigned __int32 bForceCachedShadowsForMovablePrimitives : 1;
  FLightingChannels LightingChannels;
  UMaterialInterface *LightFunctionMaterial;
  FVector LightFunctionScale;
  UTextureLightProfile *IESTexture;
  unsigned __int32 bUseIESBrightness : 1;
  float IESBrightnessScale;
  float LightFunctionFadeDistance;
  float DisabledBrightness;
  unsigned __int32 bEnableLightShaftBloom : 1;
  float BloomScale;
  float BloomThreshold;
  FColor BloomTint;
  bool bUseRayTracedDistanceFieldShadows;
  float RayStartOffsetDepthScale;
  FLightSceneProxy *SceneProxy;
  FStaticShadowDepthMap StaticShadowDepthMap;
  FRenderCommandFence DestroyFence;
  unsigned __int32 bAddedToSceneVisible : 1;
};

/* 4538 */
struct TArray<UMaterialInterface *,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 4539 */
struct TArray<TTuple<FName,UMeshComponent::FMaterialParameterCache>,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 4540 */
struct TSortedMap<FName,UMeshComponent::FMaterialParameterCache,FDefaultAllocator,TLess<FName> >
{
  TArray<TTuple<FName,UMeshComponent::FMaterialParameterCache>,FDefaultAllocator> Pairs;
};

/* 4541 */
struct __cppobj __declspec(align(16)) UMeshComponent : UPrimitiveComponent
{
  TArray<UMaterialInterface *,FDefaultAllocator> OverrideMaterials;
  TSortedMap<FName,UMeshComponent::FMaterialParameterCache,FDefaultAllocator,TLess<FName> > MaterialParameterCache;
  unsigned __int32 bCachedMaterialParameterIndicesAreDirty : 1;
};

/* 66558 */
struct TArray<FProcMeshSection,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 4066 */
struct TArray<FKConvexElem,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 4613 */
struct TArray<UBodySetup *,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 66559 */
struct __cppobj UProceduralMeshComponent : UMeshComponent
{
  bool bUseComplexAsSimpleCollision;
  bool bUseAsyncCooking;
  UBodySetup *ProcMeshBodySetup;
  TArray<FProcMeshSection,FDefaultAllocator> ProcMeshSections;
  TArray<FKConvexElem,FDefaultAllocator> CollisionConvexElems;
  FBoxSphereBounds LocalBounds;
  TArray<UBodySetup *,FDefaultAllocator> AsyncBodySetupQueue;
};

/* 5487 */
struct TArray<FStaticMeshComponentLODInfo,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 5488 */
struct TArray<FStreamingTextureBuildInfo,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 5489 */
struct FLightmassPrimitiveSettings
{
  unsigned __int32 bUseTwoSidedLighting : 1;
  unsigned __int32 bShadowIndirectOnly : 1;
  unsigned __int32 bUseEmissiveForStaticLighting : 1;
  unsigned __int32 bUseVertexNormalForHemisphereGather : 1;
  float EmissiveLightFalloffExponent;
  float EmissiveLightExplicitInfluenceRadius;
  float EmissiveBoost;
  float DiffuseBoost;
  float FullyOccludedSamplesFraction;
};

/* 5490 */
struct __cppobj UStaticMeshComponent : UMeshComponent
{
  int MinLOD;
  int SubDivisionStepSize;
  UStaticMesh *StaticMesh;
  FColor WireframeColorOverride;
  __int8 bOverrideWireframeColor : 1;
  __int8 bOverrideMinLOD : 1;
  __int8 bOverrideNavigationExport : 1;
  __int8 bForceNavigationObstacle : 1;
  __int8 bDisallowMeshPaintPerInstance : 1;
  __int8 bIgnoreInstanceForTextureStreaming : 1;
  __int8 bOverrideLightMapRes : 1;
  __int8 bCastDistanceFieldIndirectShadow : 1;
  __int8 bOverrideDistanceFieldSelfShadowBias : 1;
  __int8 bUseSubDivisions : 1;
  __int8 bUseDefaultCollision : 1;
  __int8 bReverseCulling : 1;
  int OverriddenLightMapRes;
  float DistanceFieldIndirectShadowMinVisibility;
  float DistanceFieldSelfShadowBias;
  float StreamingDistanceMultiplier;
  TArray<FStaticMeshComponentLODInfo,FDefaultAllocator> LODData;
  TArray<FStreamingTextureBuildInfo,FDefaultAllocator> StreamingTextureData;
  FLightmassPrimitiveSettings LightmassSettings;
};

/* 55955 */
struct TArray<FInstancedStaticMeshInstanceData,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 55954 */
struct TSharedPtr<FPerInstanceRenderData,1>
{
  FPerInstanceRenderData *Object;
  SharedPointerInternals::FSharedReferencer<1> SharedReferenceCount;
};

/* 55942 */
struct TArray<FInstanceUpdateCmdBuffer::FInstanceUpdateCommand,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 55943 */
struct FInstanceUpdateCmdBuffer
{
  TArray<FInstanceUpdateCmdBuffer::FInstanceUpdateCommand,FDefaultAllocator> Cmds;
  int NumAdds;
  int NumEdits;
};

/* 55956 */
struct __cppobj TDefaultDelete<FStaticMeshInstanceData>
{
};

/* 55957 */
struct __cppobj TUniquePtr<FStaticMeshInstanceData,TDefaultDelete<FStaticMeshInstanceData> > : TDefaultDelete<FStaticMeshInstanceData>
{
  FStaticMeshInstanceData *Ptr;
};

/* 55958 */
struct TArray<FInstancedStaticMeshMappingInfo,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 55959 */
struct __cppobj UInstancedStaticMeshComponent : UStaticMeshComponent
{
  TArray<FInstancedStaticMeshInstanceData,FDefaultAllocator> PerInstanceSMData;
  int InstancingRandomSeed;
  int InstanceStartCullDistance;
  int InstanceEndCullDistance;
  TArray<int,FDefaultAllocator> InstanceReorderTable;
  unsigned __int64 ProxySize;
  TSharedPtr<FPerInstanceRenderData,1> PerInstanceRenderData;
  FInstanceUpdateCmdBuffer InstanceUpdateCmdBuffer;
  TUniquePtr<FStaticMeshInstanceData,TDefaultDelete<FStaticMeshInstanceData> > InstanceDataBuffers;
  TArray<FBodyInstance *,FDefaultAllocator> InstanceBodies;
  int NumPendingLightmaps;
  TArray<FInstancedStaticMeshMappingInfo,FDefaultAllocator> CachedMappings;
};

/* 69424 */
struct __declspec(align(4)) GhostCarMatrix
{
  vec3f position;
  vec3f rotation;
  vec3f tyrePositions[4];
  vec3f tyreRotations[4];
  char brake;
  char gas;
};

/* 69425 */
struct ksRacing::ReplayFrame<GhostCarMatrix>
{
  GhostCarMatrix data;
  long double timeStamp;
};

/* 66833 */
struct FTableRowBaseVtbl
{
  void *(__cdecl *__vecDelDtor)(FTableRowBase *this, unsigned int);
  void (__cdecl *OnPostDataImport)(FTableRowBase *this, UDataTable *, FName, TArray<FString,FDefaultAllocator> *);
};

/* 69040 */
struct IMovieSceneBindingOwnerInterfaceVtbl
{
  void *(__cdecl *__vecDelDtor)(IMovieSceneBindingOwnerInterface *this, unsigned int);
  UObject *(__cdecl *_getUObject)(IMovieSceneBindingOwnerInterface *this);
};

/* 10624 */
struct TAlignedBytes<16,4>::TPadding
{
  char Pad[16];
};

/* 10625 */
struct TAlignedBytes<16,4>
{
  TAlignedBytes<16,4>::TPadding Padding;
};

/* 40682 */
struct __cppobj TTypeCompatibleBytes<FQualifiedFrameTime> : TAlignedBytes<16,4>
{
};

/* 40683 */
struct __declspec(align(4)) TOptional<FQualifiedFrameTime>
{
  TTypeCompatibleBytes<FQualifiedFrameTime> Value;
  bool bIsSet;
};

/* 40680 */
struct __declspec(align(8)) FMovieSceneTimeController
{
  FMovieSceneTimeControllerVtbl *vfptr;
  TOptional<FQualifiedFrameTime> PlaybackStartTime;
};

/* 40566 */
struct TSparseArray<TSetElement<TTuple<FMovieSceneEvaluationKey,TUniquePtr<IPersistentEvaluationData,TDefaultDelete<IPersistentEvaluationData> > > >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<32,8> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 40567 */
struct __declspec(align(8)) TSet<TTuple<FMovieSceneEvaluationKey,TUniquePtr<IPersistentEvaluationData,TDefaultDelete<IPersistentEvaluationData> > >,TDefaultMapHashableKeyFuncs<FMovieSceneEvaluationKey,TUniquePtr<IPersistentEvaluationData,TDefaultDelete<IPersistentEvaluationData> >,0>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<TTuple<FMovieSceneEvaluationKey,TUniquePtr<IPersistentEvaluationData,TDefaultDelete<IPersistentEvaluationData> > > >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 40568 */
struct TMapBase<FMovieSceneEvaluationKey,TUniquePtr<IPersistentEvaluationData,TDefaultDelete<IPersistentEvaluationData> >,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FMovieSceneEvaluationKey,TUniquePtr<IPersistentEvaluationData,TDefaultDelete<IPersistentEvaluationData> >,0> >
{
  TSet<TTuple<FMovieSceneEvaluationKey,TUniquePtr<IPersistentEvaluationData,TDefaultDelete<IPersistentEvaluationData> > >,TDefaultMapHashableKeyFuncs<FMovieSceneEvaluationKey,TUniquePtr<IPersistentEvaluationData,TDefaultDelete<IPersistentEvaluationData> >,0>,FDefaultSetAllocator> Pairs;
};

/* 40569 */
struct __cppobj TSortableMapBase<FMovieSceneEvaluationKey,TUniquePtr<IPersistentEvaluationData,TDefaultDelete<IPersistentEvaluationData> >,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FMovieSceneEvaluationKey,TUniquePtr<IPersistentEvaluationData,TDefaultDelete<IPersistentEvaluationData> >,0> > : TMapBase<FMovieSceneEvaluationKey,TUniquePtr<IPersistentEvaluationData,TDefaultDelete<IPersistentEvaluationData> >,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FMovieSceneEvaluationKey,TUniquePtr<IPersistentEvaluationData,TDefaultDelete<IPersistentEvaluationData> >,0> >
{
};

/* 40570 */
struct __cppobj TMap<FMovieSceneEvaluationKey,TUniquePtr<IPersistentEvaluationData,TDefaultDelete<IPersistentEvaluationData> >,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FMovieSceneEvaluationKey,TUniquePtr<IPersistentEvaluationData,TDefaultDelete<IPersistentEvaluationData> >,0> > : TSortableMapBase<FMovieSceneEvaluationKey,TUniquePtr<IPersistentEvaluationData,TDefaultDelete<IPersistentEvaluationData> >,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FMovieSceneEvaluationKey,TUniquePtr<IPersistentEvaluationData,TDefaultDelete<IPersistentEvaluationData> >,0> >
{
};

/* 40571 */
struct TSparseArray<TSetElement<TTuple<FSharedPersistentDataKey,TUniquePtr<IPersistentEvaluationData,TDefaultDelete<IPersistentEvaluationData> > > >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<40,8> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 40572 */
struct __declspec(align(8)) TSet<TTuple<FSharedPersistentDataKey,TUniquePtr<IPersistentEvaluationData,TDefaultDelete<IPersistentEvaluationData> > >,TDefaultMapHashableKeyFuncs<FSharedPersistentDataKey,TUniquePtr<IPersistentEvaluationData,TDefaultDelete<IPersistentEvaluationData> >,0>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<TTuple<FSharedPersistentDataKey,TUniquePtr<IPersistentEvaluationData,TDefaultDelete<IPersistentEvaluationData> > > >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 40573 */
struct TMapBase<FSharedPersistentDataKey,TUniquePtr<IPersistentEvaluationData,TDefaultDelete<IPersistentEvaluationData> >,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FSharedPersistentDataKey,TUniquePtr<IPersistentEvaluationData,TDefaultDelete<IPersistentEvaluationData> >,0> >
{
  TSet<TTuple<FSharedPersistentDataKey,TUniquePtr<IPersistentEvaluationData,TDefaultDelete<IPersistentEvaluationData> > >,TDefaultMapHashableKeyFuncs<FSharedPersistentDataKey,TUniquePtr<IPersistentEvaluationData,TDefaultDelete<IPersistentEvaluationData> >,0>,FDefaultSetAllocator> Pairs;
};

/* 40574 */
struct __cppobj TSortableMapBase<FSharedPersistentDataKey,TUniquePtr<IPersistentEvaluationData,TDefaultDelete<IPersistentEvaluationData> >,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FSharedPersistentDataKey,TUniquePtr<IPersistentEvaluationData,TDefaultDelete<IPersistentEvaluationData> >,0> > : TMapBase<FSharedPersistentDataKey,TUniquePtr<IPersistentEvaluationData,TDefaultDelete<IPersistentEvaluationData> >,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FSharedPersistentDataKey,TUniquePtr<IPersistentEvaluationData,TDefaultDelete<IPersistentEvaluationData> >,0> >
{
};

/* 40575 */
struct __cppobj TMap<FSharedPersistentDataKey,TUniquePtr<IPersistentEvaluationData,TDefaultDelete<IPersistentEvaluationData> >,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FSharedPersistentDataKey,TUniquePtr<IPersistentEvaluationData,TDefaultDelete<IPersistentEvaluationData> >,0> > : TSortableMapBase<FSharedPersistentDataKey,TUniquePtr<IPersistentEvaluationData,TDefaultDelete<IPersistentEvaluationData> >,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FSharedPersistentDataKey,TUniquePtr<IPersistentEvaluationData,TDefaultDelete<IPersistentEvaluationData> >,0> >
{
};

/* 40576 */
struct TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<192,8> >,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 40577 */
struct TSparseArray<TSetElement<TTuple<FMovieSceneSequenceID,FMovieSceneObjectCache> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<192,8> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 40578 */
struct __declspec(align(8)) TSet<TTuple<FMovieSceneSequenceID,FMovieSceneObjectCache>,TDefaultMapHashableKeyFuncs<FMovieSceneSequenceID,FMovieSceneObjectCache,0>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<TTuple<FMovieSceneSequenceID,FMovieSceneObjectCache> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 40579 */
struct TMapBase<FMovieSceneSequenceID,FMovieSceneObjectCache,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FMovieSceneSequenceID,FMovieSceneObjectCache,0> >
{
  TSet<TTuple<FMovieSceneSequenceID,FMovieSceneObjectCache>,TDefaultMapHashableKeyFuncs<FMovieSceneSequenceID,FMovieSceneObjectCache,0>,FDefaultSetAllocator> Pairs;
};

/* 40580 */
struct __cppobj TSortableMapBase<FMovieSceneSequenceID,FMovieSceneObjectCache,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FMovieSceneSequenceID,FMovieSceneObjectCache,0> > : TMapBase<FMovieSceneSequenceID,FMovieSceneObjectCache,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FMovieSceneSequenceID,FMovieSceneObjectCache,0> >
{
};

/* 40581 */
struct __cppobj TMap<FMovieSceneSequenceID,FMovieSceneObjectCache,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FMovieSceneSequenceID,FMovieSceneObjectCache,0> > : TSortableMapBase<FMovieSceneSequenceID,FMovieSceneObjectCache,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FMovieSceneSequenceID,FMovieSceneObjectCache,0> >
{
};

/* 40582 */
struct FMovieSceneEvaluationState
{
  TMap<FMovieSceneEvaluationKey,TUniquePtr<IPersistentEvaluationData,TDefaultDelete<IPersistentEvaluationData> >,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FMovieSceneEvaluationKey,TUniquePtr<IPersistentEvaluationData,TDefaultDelete<IPersistentEvaluationData> >,0> > PersistentEntityData;
  TMap<FSharedPersistentDataKey,TUniquePtr<IPersistentEvaluationData,TDefaultDelete<IPersistentEvaluationData> >,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FSharedPersistentDataKey,TUniquePtr<IPersistentEvaluationData,TDefaultDelete<IPersistentEvaluationData> >,0> > PersistentSharedData;
  TMap<FMovieSceneSequenceID,FMovieSceneObjectCache,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FMovieSceneSequenceID,FMovieSceneObjectCache,0> > ObjectCaches;
};

/* 40583 */
struct TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<328,8> >,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 40584 */
struct TSparseArray<TSetElement<TTuple<FObjectKey,TMovieSceneSavedTokens<TInlineValue<IMovieScenePreAnimatedToken,32,8> > > >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<328,8> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 40585 */
struct __declspec(align(8)) TSet<TTuple<FObjectKey,TMovieSceneSavedTokens<TInlineValue<IMovieScenePreAnimatedToken,32,8> > >,TDefaultMapHashableKeyFuncs<FObjectKey,TMovieSceneSavedTokens<TInlineValue<IMovieScenePreAnimatedToken,32,8> >,0>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<TTuple<FObjectKey,TMovieSceneSavedTokens<TInlineValue<IMovieScenePreAnimatedToken,32,8> > > >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 40586 */
struct TMapBase<FObjectKey,TMovieSceneSavedTokens<TInlineValue<IMovieScenePreAnimatedToken,32,8> >,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FObjectKey,TMovieSceneSavedTokens<TInlineValue<IMovieScenePreAnimatedToken,32,8> >,0> >
{
  TSet<TTuple<FObjectKey,TMovieSceneSavedTokens<TInlineValue<IMovieScenePreAnimatedToken,32,8> > >,TDefaultMapHashableKeyFuncs<FObjectKey,TMovieSceneSavedTokens<TInlineValue<IMovieScenePreAnimatedToken,32,8> >,0>,FDefaultSetAllocator> Pairs;
};

/* 40587 */
struct __cppobj TSortableMapBase<FObjectKey,TMovieSceneSavedTokens<TInlineValue<IMovieScenePreAnimatedToken,32,8> >,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FObjectKey,TMovieSceneSavedTokens<TInlineValue<IMovieScenePreAnimatedToken,32,8> >,0> > : TMapBase<FObjectKey,TMovieSceneSavedTokens<TInlineValue<IMovieScenePreAnimatedToken,32,8> >,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FObjectKey,TMovieSceneSavedTokens<TInlineValue<IMovieScenePreAnimatedToken,32,8> >,0> >
{
};

/* 40588 */
struct __cppobj TMap<FObjectKey,TMovieSceneSavedTokens<TInlineValue<IMovieScenePreAnimatedToken,32,8> >,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FObjectKey,TMovieSceneSavedTokens<TInlineValue<IMovieScenePreAnimatedToken,32,8> >,0> > : TSortableMapBase<FObjectKey,TMovieSceneSavedTokens<TInlineValue<IMovieScenePreAnimatedToken,32,8> >,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FObjectKey,TMovieSceneSavedTokens<TInlineValue<IMovieScenePreAnimatedToken,32,8> >,0> >
{
};

/* 4102 */
struct TAlignedBytes<24,8>::TPadding
{
  char Pad[24];
};

/* 4103 */
struct TAlignedBytes<24,8>
{
  TAlignedBytes<24,8>::TPadding Padding;
};

/* 40589 */
struct __cppobj TTypeCompatibleBytes<FMovieSceneEntityAndAnimTypeID> : TAlignedBytes<24,8>
{
};

/* 40590 */
struct __cppobj FHeapAllocator::ForElementType<FMovieSceneEntityAndAnimTypeID> : FHeapAllocator::ForAnyElementType
{
};

/* 40591 */
struct TInlineAllocator<8,FDefaultAllocator>::ForElementType<FMovieSceneEntityAndAnimTypeID>
{
  TTypeCompatibleBytes<FMovieSceneEntityAndAnimTypeID> InlineData[8];
  FHeapAllocator::ForElementType<FMovieSceneEntityAndAnimTypeID> SecondaryData;
};

/* 40592 */
struct TArray<FMovieSceneEntityAndAnimTypeID,TInlineAllocator<8,FDefaultAllocator> >
{
  TInlineAllocator<8,FDefaultAllocator>::ForElementType<FMovieSceneEntityAndAnimTypeID> AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 40593 */
struct __cppobj TTypeCompatibleBytes<FMovieSceneAnimTypeID> : TAlignedBytes<8,8>
{
};

/* 40594 */
struct __cppobj FHeapAllocator::ForElementType<FMovieSceneAnimTypeID> : FHeapAllocator::ForAnyElementType
{
};

/* 40595 */
struct TInlineAllocator<8,FDefaultAllocator>::ForElementType<FMovieSceneAnimTypeID>
{
  TTypeCompatibleBytes<FMovieSceneAnimTypeID> InlineData[8];
  FHeapAllocator::ForElementType<FMovieSceneAnimTypeID> SecondaryData;
};

/* 40596 */
struct TArray<FMovieSceneAnimTypeID,TInlineAllocator<8,FDefaultAllocator> >
{
  TInlineAllocator<8,FDefaultAllocator>::ForElementType<FMovieSceneAnimTypeID> AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 40597 */
struct TArray<TPreAnimatedToken<TInlineValue<IMovieScenePreAnimatedGlobalToken,32,8> >,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 40598 */
struct __cppobj MovieSceneImpl::FNull
{
};

/* 40599 */
struct __declspec(align(8)) TMovieSceneSavedTokens<TInlineValue<IMovieScenePreAnimatedGlobalToken,32,8> >
{
  TArray<FMovieSceneEntityAndAnimTypeID,TInlineAllocator<8,FDefaultAllocator> > AnimatedEntities;
  TArray<FMovieSceneAnimTypeID,TInlineAllocator<8,FDefaultAllocator> > AllAnimatedTypeIDs;
  TArray<TPreAnimatedToken<TInlineValue<IMovieScenePreAnimatedGlobalToken,32,8> >,FDefaultAllocator> PreAnimatedTokens;
  MovieSceneImpl::FNull Payload;
};

/* 40600 */
struct TSparseArray<TSetElement<TTuple<FMovieSceneEvaluationKey,TArray<FObjectKey,TInlineAllocator<4,FDefaultAllocator> > > >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<72,8> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 40601 */
struct __declspec(align(8)) TSet<TTuple<FMovieSceneEvaluationKey,TArray<FObjectKey,TInlineAllocator<4,FDefaultAllocator> > >,TDefaultMapHashableKeyFuncs<FMovieSceneEvaluationKey,TArray<FObjectKey,TInlineAllocator<4,FDefaultAllocator> >,0>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<TTuple<FMovieSceneEvaluationKey,TArray<FObjectKey,TInlineAllocator<4,FDefaultAllocator> > > >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 40602 */
struct TMapBase<FMovieSceneEvaluationKey,TArray<FObjectKey,TInlineAllocator<4,FDefaultAllocator> >,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FMovieSceneEvaluationKey,TArray<FObjectKey,TInlineAllocator<4,FDefaultAllocator> >,0> >
{
  TSet<TTuple<FMovieSceneEvaluationKey,TArray<FObjectKey,TInlineAllocator<4,FDefaultAllocator> > >,TDefaultMapHashableKeyFuncs<FMovieSceneEvaluationKey,TArray<FObjectKey,TInlineAllocator<4,FDefaultAllocator> >,0>,FDefaultSetAllocator> Pairs;
};

/* 40603 */
struct __cppobj TSortableMapBase<FMovieSceneEvaluationKey,TArray<FObjectKey,TInlineAllocator<4,FDefaultAllocator> >,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FMovieSceneEvaluationKey,TArray<FObjectKey,TInlineAllocator<4,FDefaultAllocator> >,0> > : TMapBase<FMovieSceneEvaluationKey,TArray<FObjectKey,TInlineAllocator<4,FDefaultAllocator> >,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FMovieSceneEvaluationKey,TArray<FObjectKey,TInlineAllocator<4,FDefaultAllocator> >,0> >
{
};

/* 40604 */
struct __cppobj TMap<FMovieSceneEvaluationKey,TArray<FObjectKey,TInlineAllocator<4,FDefaultAllocator> >,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FMovieSceneEvaluationKey,TArray<FObjectKey,TInlineAllocator<4,FDefaultAllocator> >,0> > : TSortableMapBase<FMovieSceneEvaluationKey,TArray<FObjectKey,TInlineAllocator<4,FDefaultAllocator> >,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FMovieSceneEvaluationKey,TArray<FObjectKey,TInlineAllocator<4,FDefaultAllocator> >,0> >
{
};

/* 40428 */
struct FMovieSceneSequenceID
{
  unsigned int Value;
};

/* 40455 */
struct FMovieSceneTrackIdentifier
{
  unsigned int Value;
};

/* 40536 */
struct FMovieSceneEvaluationKey
{
  FMovieSceneSequenceID SequenceID;
  FMovieSceneTrackIdentifier TrackIdentifier;
  unsigned int SectionIndex;
};

/* 40605 */
struct __declspec(align(4)) FMovieScenePreAnimatedState
{
  TMap<FObjectKey,TMovieSceneSavedTokens<TInlineValue<IMovieScenePreAnimatedToken,32,8> >,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FObjectKey,TMovieSceneSavedTokens<TInlineValue<IMovieScenePreAnimatedToken,32,8> >,0> > ObjectTokens;
  TMovieSceneSavedTokens<TInlineValue<IMovieScenePreAnimatedGlobalToken,32,8> > MasterTokens;
  TMap<FMovieSceneEvaluationKey,TArray<FObjectKey,TInlineAllocator<4,FDefaultAllocator> >,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FMovieSceneEvaluationKey,TArray<FObjectKey,TInlineAllocator<4,FDefaultAllocator> >,0> > EntityToAnimatedObjects;
  FMovieSceneEvaluationKey CapturingStateFor;
  _BYTE CurrentCaptureState[1];
  _BYTE DefaultGlobalCaptureMode[1];
};

/* 40555 */
struct TWeakPtr<FMovieSceneSpawnRegister,0>
{
  FMovieSceneSpawnRegister *Object;
  SharedPointerInternals::FWeakReferencer<0> WeakReferenceCount;
};

/* 40556 */
struct TSharedFromThis<FMovieSceneSpawnRegister,0>
{
  TWeakPtr<FMovieSceneSpawnRegister,0> WeakThis;
};

/* 36832 */
struct TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<56,4> >,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 40559 */
struct TSparseArray<TSetElement<TTuple<FMovieSceneSpawnRegister::FMovieSceneSpawnRegisterKey,FMovieSceneSpawnRegister::FSpawnedObject> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<56,4> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 40560 */
struct __declspec(align(8)) TSet<TTuple<FMovieSceneSpawnRegister::FMovieSceneSpawnRegisterKey,FMovieSceneSpawnRegister::FSpawnedObject>,TDefaultMapHashableKeyFuncs<FMovieSceneSpawnRegister::FMovieSceneSpawnRegisterKey,FMovieSceneSpawnRegister::FSpawnedObject,0>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<TTuple<FMovieSceneSpawnRegister::FMovieSceneSpawnRegisterKey,FMovieSceneSpawnRegister::FSpawnedObject> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 40561 */
struct TMapBase<FMovieSceneSpawnRegister::FMovieSceneSpawnRegisterKey,FMovieSceneSpawnRegister::FSpawnedObject,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FMovieSceneSpawnRegister::FMovieSceneSpawnRegisterKey,FMovieSceneSpawnRegister::FSpawnedObject,0> >
{
  TSet<TTuple<FMovieSceneSpawnRegister::FMovieSceneSpawnRegisterKey,FMovieSceneSpawnRegister::FSpawnedObject>,TDefaultMapHashableKeyFuncs<FMovieSceneSpawnRegister::FMovieSceneSpawnRegisterKey,FMovieSceneSpawnRegister::FSpawnedObject,0>,FDefaultSetAllocator> Pairs;
};

/* 40562 */
struct __cppobj TSortableMapBase<FMovieSceneSpawnRegister::FMovieSceneSpawnRegisterKey,FMovieSceneSpawnRegister::FSpawnedObject,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FMovieSceneSpawnRegister::FMovieSceneSpawnRegisterKey,FMovieSceneSpawnRegister::FSpawnedObject,0> > : TMapBase<FMovieSceneSpawnRegister::FMovieSceneSpawnRegisterKey,FMovieSceneSpawnRegister::FSpawnedObject,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FMovieSceneSpawnRegister::FMovieSceneSpawnRegisterKey,FMovieSceneSpawnRegister::FSpawnedObject,0> >
{
};

/* 40563 */
struct __cppobj TMap<FMovieSceneSpawnRegister::FMovieSceneSpawnRegisterKey,FMovieSceneSpawnRegister::FSpawnedObject,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FMovieSceneSpawnRegister::FMovieSceneSpawnRegisterKey,FMovieSceneSpawnRegister::FSpawnedObject,0> > : TSortableMapBase<FMovieSceneSpawnRegister::FMovieSceneSpawnRegisterKey,FMovieSceneSpawnRegister::FSpawnedObject,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FMovieSceneSpawnRegister::FMovieSceneSpawnRegisterKey,FMovieSceneSpawnRegister::FSpawnedObject,0> >
{
};

/* 40554 */
struct __cppobj FMovieSceneSpawnRegister : TSharedFromThis<FMovieSceneSpawnRegister,0>
{
  FMovieSceneSpawnRegisterVtbl *vfptr;
  TMap<FMovieSceneSpawnRegister::FMovieSceneSpawnRegisterKey,FMovieSceneSpawnRegister::FSpawnedObject,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FMovieSceneSpawnRegister::FMovieSceneSpawnRegisterKey,FMovieSceneSpawnRegister::FSpawnedObject,0> > Register;
};

/* 40606 */
struct __cppobj FNullMovieSceneSpawnRegister : FMovieSceneSpawnRegister
{
};

/* 40432 */
struct IMovieScenePlayer
{
  IMovieScenePlayerVtbl *vfptr;
  FMovieSceneEvaluationState State;
  FMovieScenePreAnimatedState PreAnimatedState;
  FNullMovieSceneSpawnRegister NullRegister;
};

/* 64195 */
struct __cppobj FOnMovieSceneSequencePlayerEvent : TBaseDynamicMulticastDelegate<FWeakObjectPtr,void>
{
};

/* 64212 */
struct TEnumAsByte<enum EMovieScenePlayerStatus::Type>
{
  char Value;
};

/* 12725 */
struct FFrameNumber
{
  int Value;
};

/* 64213 */
struct TArray<UMovieSceneSequencePlayer::FLatentAction,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 40433 */
struct __cppobj TWeakObjectPtr<UMovieSceneSequence,FWeakObjectPtr> : FWeakObjectPtr
{
};

/* 40493 */
struct FMovieSceneEvaluationTemplateInstance
{
  UMovieSceneSequence *Sequence;
  FMovieSceneEvaluationTemplate *Template;
  FMovieSceneSubSequenceData *SubData;
};

/* 40494 */
struct TSparseArray<TSetElement<TTuple<FMovieSceneSequenceID,FMovieSceneEvaluationTemplateInstance> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<40,8> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 40495 */
struct __declspec(align(8)) TSet<TTuple<FMovieSceneSequenceID,FMovieSceneEvaluationTemplateInstance>,TDefaultMapHashableKeyFuncs<FMovieSceneSequenceID,FMovieSceneEvaluationTemplateInstance,0>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<TTuple<FMovieSceneSequenceID,FMovieSceneEvaluationTemplateInstance> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 40496 */
struct TMapBase<FMovieSceneSequenceID,FMovieSceneEvaluationTemplateInstance,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FMovieSceneSequenceID,FMovieSceneEvaluationTemplateInstance,0> >
{
  TSet<TTuple<FMovieSceneSequenceID,FMovieSceneEvaluationTemplateInstance>,TDefaultMapHashableKeyFuncs<FMovieSceneSequenceID,FMovieSceneEvaluationTemplateInstance,0>,FDefaultSetAllocator> Pairs;
};

/* 40497 */
struct __cppobj TSortableMapBase<FMovieSceneSequenceID,FMovieSceneEvaluationTemplateInstance,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FMovieSceneSequenceID,FMovieSceneEvaluationTemplateInstance,0> > : TMapBase<FMovieSceneSequenceID,FMovieSceneEvaluationTemplateInstance,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FMovieSceneSequenceID,FMovieSceneEvaluationTemplateInstance,0> >
{
};

/* 40498 */
struct __cppobj TMap<FMovieSceneSequenceID,FMovieSceneEvaluationTemplateInstance,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FMovieSceneSequenceID,FMovieSceneEvaluationTemplateInstance,0> > : TSortableMapBase<FMovieSceneSequenceID,FMovieSceneEvaluationTemplateInstance,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FMovieSceneSequenceID,FMovieSceneEvaluationTemplateInstance,0> >
{
};

/* 40499 */
struct FMovieSceneEvaluationTemplateInstanceContainer
{
  FMovieSceneSequenceID RootID;
  FMovieSceneEvaluationTemplateInstance RootInstance;
  TMap<FMovieSceneSequenceID,FMovieSceneEvaluationTemplateInstance,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FMovieSceneSequenceID,FMovieSceneEvaluationTemplateInstance,0> > SubInstances;
};

/* 40500 */
struct TArray<FMovieSceneSequenceID,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 40501 */
struct TArray<FMovieSceneOrderedEvaluationKey,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 40502 */
struct TSparseArray<TSetElement<TTuple<FMovieSceneSequenceID,unsigned int> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<16,4> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 40503 */
struct __declspec(align(8)) TSet<TTuple<FMovieSceneSequenceID,unsigned int>,TDefaultMapHashableKeyFuncs<FMovieSceneSequenceID,unsigned int,0>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<TTuple<FMovieSceneSequenceID,unsigned int> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 40504 */
struct TMapBase<FMovieSceneSequenceID,unsigned int,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FMovieSceneSequenceID,unsigned int,0> >
{
  TSet<TTuple<FMovieSceneSequenceID,unsigned int>,TDefaultMapHashableKeyFuncs<FMovieSceneSequenceID,unsigned int,0>,FDefaultSetAllocator> Pairs;
};

/* 40505 */
struct __cppobj TSortableMapBase<FMovieSceneSequenceID,unsigned int,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FMovieSceneSequenceID,unsigned int,0> > : TMapBase<FMovieSceneSequenceID,unsigned int,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FMovieSceneSequenceID,unsigned int,0> >
{
};

/* 40506 */
struct __cppobj TMap<FMovieSceneSequenceID,unsigned int,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FMovieSceneSequenceID,unsigned int,0> > : TSortableMapBase<FMovieSceneSequenceID,unsigned int,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FMovieSceneSequenceID,unsigned int,0> >
{
};

/* 40507 */
struct FMovieSceneEvaluationMetaData
{
  TArray<FMovieSceneSequenceID,FDefaultAllocator> ActiveSequences;
  TArray<FMovieSceneOrderedEvaluationKey,FDefaultAllocator> ActiveEntities;
  TMap<FMovieSceneSequenceID,unsigned int,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FMovieSceneSequenceID,unsigned int,0> > SubTemplateSerialNumbers;
};

/* 40510 */
struct TSharedPtr<IMovieSceneSequenceTemplateStore,0>
{
  IMovieSceneSequenceTemplateStore *Object;
  SharedPointerInternals::FSharedReferencer<0> SharedReferenceCount;
};

/* 40511 */
struct __cppobj TTypeCompatibleBytes<FMovieSceneSequenceID> : TAlignedBytes<4,4>
{
};

/* 40512 */
struct __cppobj FHeapAllocator::ForElementType<FMovieSceneSequenceID> : FHeapAllocator::ForAnyElementType
{
};

/* 40513 */
struct TInlineAllocator<8,FDefaultAllocator>::ForElementType<FMovieSceneSequenceID>
{
  TTypeCompatibleBytes<FMovieSceneSequenceID> InlineData[8];
  FHeapAllocator::ForElementType<FMovieSceneSequenceID> SecondaryData;
};

/* 40514 */
struct TArray<FMovieSceneSequenceID,TInlineAllocator<8,FDefaultAllocator> >
{
  TInlineAllocator<8,FDefaultAllocator>::ForElementType<FMovieSceneSequenceID> AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 40515 */
struct FMovieSceneRootOverridePath
{
  TArray<FMovieSceneSequenceID,TInlineAllocator<8,FDefaultAllocator> > ReverseOverrideRootPath;
};

/* 40516 */
struct TArray<FMovieSceneExecutionTokens::FEntry,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 3992 */
struct TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<56,8> >,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 40517 */
struct TSparseArray<TSetElement<TTuple<FMovieSceneSharedDataId,TInlineValue<IMovieSceneSharedExecutionToken,32,8> > >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<56,8> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 40518 */
struct __declspec(align(8)) TSet<TTuple<FMovieSceneSharedDataId,TInlineValue<IMovieSceneSharedExecutionToken,32,8> >,TDefaultMapHashableKeyFuncs<FMovieSceneSharedDataId,TInlineValue<IMovieSceneSharedExecutionToken,32,8>,0>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<TTuple<FMovieSceneSharedDataId,TInlineValue<IMovieSceneSharedExecutionToken,32,8> > >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 40519 */
struct TMapBase<FMovieSceneSharedDataId,TInlineValue<IMovieSceneSharedExecutionToken,32,8>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FMovieSceneSharedDataId,TInlineValue<IMovieSceneSharedExecutionToken,32,8>,0> >
{
  TSet<TTuple<FMovieSceneSharedDataId,TInlineValue<IMovieSceneSharedExecutionToken,32,8> >,TDefaultMapHashableKeyFuncs<FMovieSceneSharedDataId,TInlineValue<IMovieSceneSharedExecutionToken,32,8>,0>,FDefaultSetAllocator> Pairs;
};

/* 40520 */
struct __cppobj TSortableMapBase<FMovieSceneSharedDataId,TInlineValue<IMovieSceneSharedExecutionToken,32,8>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FMovieSceneSharedDataId,TInlineValue<IMovieSceneSharedExecutionToken,32,8>,0> > : TMapBase<FMovieSceneSharedDataId,TInlineValue<IMovieSceneSharedExecutionToken,32,8>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FMovieSceneSharedDataId,TInlineValue<IMovieSceneSharedExecutionToken,32,8>,0> >
{
};

/* 40521 */
struct __cppobj TMap<FMovieSceneSharedDataId,TInlineValue<IMovieSceneSharedExecutionToken,32,8>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FMovieSceneSharedDataId,TInlineValue<IMovieSceneSharedExecutionToken,32,8>,0> > : TSortableMapBase<FMovieSceneSharedDataId,TInlineValue<IMovieSceneSharedExecutionToken,32,8>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FMovieSceneSharedDataId,TInlineValue<IMovieSceneSharedExecutionToken,32,8>,0> >
{
};

/* 40522 */
struct TSparseArray<TSetElement<TTuple<FMovieSceneBlendingActuatorID,TSharedRef<IMovieSceneBlendingActuator,0> > >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<32,8> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 40523 */
struct __declspec(align(8)) TSet<TTuple<FMovieSceneBlendingActuatorID,TSharedRef<IMovieSceneBlendingActuator,0> >,TDefaultMapHashableKeyFuncs<FMovieSceneBlendingActuatorID,TSharedRef<IMovieSceneBlendingActuator,0>,0>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<TTuple<FMovieSceneBlendingActuatorID,TSharedRef<IMovieSceneBlendingActuator,0> > >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 40524 */
struct TMapBase<FMovieSceneBlendingActuatorID,TSharedRef<IMovieSceneBlendingActuator,0>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FMovieSceneBlendingActuatorID,TSharedRef<IMovieSceneBlendingActuator,0>,0> >
{
  TSet<TTuple<FMovieSceneBlendingActuatorID,TSharedRef<IMovieSceneBlendingActuator,0> >,TDefaultMapHashableKeyFuncs<FMovieSceneBlendingActuatorID,TSharedRef<IMovieSceneBlendingActuator,0>,0>,FDefaultSetAllocator> Pairs;
};

/* 40525 */
struct __cppobj TSortableMapBase<FMovieSceneBlendingActuatorID,TSharedRef<IMovieSceneBlendingActuator,0>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FMovieSceneBlendingActuatorID,TSharedRef<IMovieSceneBlendingActuator,0>,0> > : TMapBase<FMovieSceneBlendingActuatorID,TSharedRef<IMovieSceneBlendingActuator,0>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FMovieSceneBlendingActuatorID,TSharedRef<IMovieSceneBlendingActuator,0>,0> >
{
};

/* 40526 */
struct __cppobj TMap<FMovieSceneBlendingActuatorID,TSharedRef<IMovieSceneBlendingActuator,0>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FMovieSceneBlendingActuatorID,TSharedRef<IMovieSceneBlendingActuator,0>,0> > : TSortableMapBase<FMovieSceneBlendingActuatorID,TSharedRef<IMovieSceneBlendingActuator,0>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FMovieSceneBlendingActuatorID,TSharedRef<IMovieSceneBlendingActuator,0>,0> >
{
};

/* 4786 */
struct TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<48,8> >,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 40527 */
struct TSparseArray<TSetElement<TTuple<FMovieSceneEvaluationOperand,FMovieSceneAccumulatedBlendState> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<48,8> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 40528 */
struct __declspec(align(8)) TSet<TTuple<FMovieSceneEvaluationOperand,FMovieSceneAccumulatedBlendState>,TDefaultMapHashableKeyFuncs<FMovieSceneEvaluationOperand,FMovieSceneAccumulatedBlendState,0>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<TTuple<FMovieSceneEvaluationOperand,FMovieSceneAccumulatedBlendState> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 40529 */
struct TMapBase<FMovieSceneEvaluationOperand,FMovieSceneAccumulatedBlendState,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FMovieSceneEvaluationOperand,FMovieSceneAccumulatedBlendState,0> >
{
  TSet<TTuple<FMovieSceneEvaluationOperand,FMovieSceneAccumulatedBlendState>,TDefaultMapHashableKeyFuncs<FMovieSceneEvaluationOperand,FMovieSceneAccumulatedBlendState,0>,FDefaultSetAllocator> Pairs;
};

/* 40530 */
struct __cppobj TSortableMapBase<FMovieSceneEvaluationOperand,FMovieSceneAccumulatedBlendState,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FMovieSceneEvaluationOperand,FMovieSceneAccumulatedBlendState,0> > : TMapBase<FMovieSceneEvaluationOperand,FMovieSceneAccumulatedBlendState,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FMovieSceneEvaluationOperand,FMovieSceneAccumulatedBlendState,0> >
{
};

/* 40531 */
struct __cppobj TMap<FMovieSceneEvaluationOperand,FMovieSceneAccumulatedBlendState,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FMovieSceneEvaluationOperand,FMovieSceneAccumulatedBlendState,0> > : TSortableMapBase<FMovieSceneEvaluationOperand,FMovieSceneAccumulatedBlendState,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FMovieSceneEvaluationOperand,FMovieSceneAccumulatedBlendState,0> >
{
};

/* 40532 */
struct TArray<TInlineValue<FMovieSceneAccumulatedBlendState::FTokenEntry,64,8>,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 40533 */
struct FMovieSceneAccumulatedBlendState
{
  TArray<TInlineValue<FMovieSceneAccumulatedBlendState::FTokenEntry,64,8>,FDefaultAllocator> TokensToBlend;
};

/* 40534 */
struct FMovieSceneBlendingAccumulator
{
  TMap<FMovieSceneBlendingActuatorID,TSharedRef<IMovieSceneBlendingActuator,0>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FMovieSceneBlendingActuatorID,TSharedRef<IMovieSceneBlendingActuator,0>,0> > Actuators;
  TMap<FMovieSceneEvaluationOperand,FMovieSceneAccumulatedBlendState,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FMovieSceneEvaluationOperand,FMovieSceneAccumulatedBlendState,0> > OperandToBlendState;
  FMovieSceneAccumulatedBlendState UnboundBlendState;
};

/* 40535 */
struct FMovieSceneEvaluationOperand
{
  FGuid ObjectBindingID;
  FMovieSceneSequenceID SequenceID;
};

/* 40537 */
struct __declspec(align(4)) FMovieSceneEvaluationScope
{
  FMovieSceneEvaluationKey Key;
  _BYTE CompletionMode[1];
};

/* 7334 */
struct TEnumAsByte<enum ERangeBoundTypes::Type>
{
  char Value;
};

/* 23323 */
struct FFrameTime
{
  FFrameNumber FrameNumber;
  float SubFrame;
};

/* 40538 */
struct TRangeBound<FFrameTime>
{
  TEnumAsByte<enum ERangeBoundTypes::Type> Type;
  FFrameTime Value;
};

/* 40539 */
struct TRange<FFrameTime>
{
  TRangeBound<FFrameTime> LowerBound;
  TRangeBound<FFrameTime> UpperBound;
};

/* 14565 */
struct FFrameRate
{
  int Numerator;
  int Denominator;
};

/* 1034 */
enum EPlayDirection
{
  Forwards = 0x0,
  Backwards = 0x1,
};

/* 40540 */
struct FMovieSceneEvaluationRange
{
  TRange<FFrameTime> EvaluationRange;
  FFrameRate CurrentFrameRate;
  EPlayDirection Direction;
  FFrameNumber TimeOverride;
};

/* 40488 */
struct FMovieSceneSequenceTransform
{
  float TimeScale;
  FFrameTime Offset;
};

/* 23 */
enum ENavigationCoordSystem::Type
{
  Unreal = 0x0,
  Recast = 0x1,
  MAX = 0x2,
};

/* 1020 */
typedef ENavigationCoordSystem::Type EMovieScenePlayerStatus::Type;

/* 40541 */
struct __cppobj __declspec(align(4)) FMovieSceneContext : FMovieSceneEvaluationRange
{
  FMovieSceneSequenceTransform RootToSequenceTransform;
  EMovieScenePlayerStatus::Type Status;
  FFrameNumber PrePostRollStartEndTime;
  int HierarchicalBias;
  __int8 bHasJumped : 1;
  __int8 bSilent : 1;
  __int8 bSectionPreRoll : 1;
  __int8 bSectionPostRoll : 1;
  __int8 bHasPreRollEndTime : 1;
  __int8 bHasPostRollStartTime : 1;
};

/* 40542 */
struct FMovieSceneExecutionTokens
{
  TArray<FMovieSceneExecutionTokens::FEntry,FDefaultAllocator> OrderedTokens;
  TMap<FMovieSceneSharedDataId,TInlineValue<IMovieSceneSharedExecutionToken,32,8>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FMovieSceneSharedDataId,TInlineValue<IMovieSceneSharedExecutionToken,32,8>,0> > SharedTokens;
  FMovieSceneBlendingAccumulator BlendingAccumulator;
  FMovieSceneEvaluationOperand Operand;
  FMovieSceneEvaluationScope Scope;
  FMovieSceneContext Context;
};

/* 40543 */
struct FMovieSceneRootEvaluationTemplateInstance
{
  TWeakObjectPtr<UMovieSceneSequence,FWeakObjectPtr> RootSequence;
  FMovieSceneEvaluationTemplate *RootTemplate;
  FMovieSceneEvaluationTemplateInstanceContainer TransientInstances;
  FMovieSceneEvaluationMetaData LastFrameMetaData;
  FMovieSceneEvaluationMetaData ThisFrameMetaData;
  TSharedPtr<IMovieSceneSequenceTemplateStore,0> TemplateStore;
  FMovieSceneRootOverridePath RootOverridePath;
  FMovieSceneExecutionTokens ExecutionTokens;
};

/* 40749 */
struct __cppobj TTypeCompatibleBytes<FFrameTime> : TAlignedBytes<8,4>
{
};

/* 40750 */
struct __declspec(align(4)) TOptional<FFrameTime>
{
  TTypeCompatibleBytes<FFrameTime> Value;
  bool bIsSet;
};

/* 21547 */
struct TAlignedBytes<40,4>::TPadding
{
  char Pad[40];
};

/* 21548 */
struct TAlignedBytes<40,4>
{
  TAlignedBytes<40,4>::TPadding Padding;
};

/* 40919 */
struct __cppobj TTypeCompatibleBytes<FMovieSceneEvaluationRange> : TAlignedBytes<40,4>
{
};

/* 40920 */
struct __declspec(align(4)) TOptional<FMovieSceneEvaluationRange>
{
  TTypeCompatibleBytes<FMovieSceneEvaluationRange> Value;
  bool bIsSet;
};

/* 40921 */
struct FMovieScenePlaybackPosition
{
  FFrameRate InputRate;
  FFrameRate OutputRate;
  _BYTE EvaluationType[1];
  FFrameTime CurrentPosition;
  TOptional<FFrameTime> PreviousPlayEvalPosition;
  TOptional<FMovieSceneEvaluationRange> LastRange;
};

/* 41169 */
struct TSharedPtr<FMovieSceneSpawnRegister,0>
{
  FMovieSceneSpawnRegister *Object;
  SharedPointerInternals::FSharedReferencer<0> SharedReferenceCount;
};

/* 64214 */
struct __cppobj TBaseMulticastDelegate<void,UMovieSceneSequencePlayer const &,FFrameTime,FFrameTime> : FMulticastDelegateBase<FWeakObjectPtr>
{
};

/* 64215 */
struct __cppobj UMovieSceneSequencePlayer::FOnMovieSceneSequencePlayerUpdated : TBaseMulticastDelegate<void,UMovieSceneSequencePlayer const &,FFrameTime,FFrameTime>
{
};

/* 14927 */
struct __cppobj TTypeCompatibleBytes<double> : TAlignedBytes<8,8>
{
};

/* 14928 */
struct __declspec(align(8)) TOptional<double>
{
  TTypeCompatibleBytes<double> Value;
  bool bIsSet;
};

/* 64216 */
struct __cppobj UMovieSceneSequencePlayer : UObject, IMovieScenePlayer
{
  FOnMovieSceneSequencePlayerEvent OnPlay;
  FOnMovieSceneSequencePlayerEvent OnPlayReverse;
  FOnMovieSceneSequencePlayerEvent OnStop;
  FOnMovieSceneSequencePlayerEvent OnPause;
  FOnMovieSceneSequencePlayerEvent OnFinished;
  TEnumAsByte<enum EMovieScenePlayerStatus::Type> Status;
  unsigned __int32 bReversePlayback : 1;
  __int8 bIsEvaluating : 1;
  UMovieSceneSequence *Sequence;
  FFrameNumber StartTime;
  int DurationFrames;
  int CurrentNumLoops;
  TArray<UMovieSceneSequencePlayer::FLatentAction,FDefaultAllocator> LatentActions;
  FMovieSceneSequencePlaybackSettings PlaybackSettings;
  FMovieSceneRootEvaluationTemplateInstance RootTemplateInstance;
  FMovieScenePlaybackPosition PlayPosition;
  TSharedPtr<FMovieSceneSpawnRegister,0> SpawnRegister;
  UMovieSceneSequencePlayer::FOnMovieSceneSequencePlayerUpdated OnMovieSceneSequencePlayerUpdate;
  TOptional<double> OldMaxTickRate;
};

/* 69041 */
struct __cppobj TBaseDynamicMulticastDelegate<FWeakObjectPtr,void,UCameraComponent *> : TMulticastScriptDelegate<FWeakObjectPtr>
{
};

/* 69042 */
struct __cppobj FOnLevelSequencePlayerCameraCutEvent : TBaseDynamicMulticastDelegate<FWeakObjectPtr,void,UCameraComponent *>
{
};

/* 120 */
enum EAspectRatioAxisConstraint
{
  AspectRatio_MaintainYFOV = 0x0,
  AspectRatio_MaintainXFOV = 0x1,
  AspectRatio_MajorAxisFOV = 0x2,
  AspectRatio_MAX = 0x3,
};

/* 69043 */
struct FLevelSequenceSnapshotSettings
{
  char ZeroPadAmount;
  FFrameRate FrameRate;
};

/* 6139 */
struct __cppobj TTypeCompatibleBytes<int> : TAlignedBytes<4,4>
{
};

/* 12631 */
struct __declspec(align(4)) TOptional<int>
{
  TTypeCompatibleBytes<int> Value;
  bool bIsSet;
};

/* 69044 */
struct __cppobj TWeakObjectPtr<UCameraComponent,FWeakObjectPtr> : FWeakObjectPtr
{
};

/* 69045 */
struct TSparseArray<TSetElement<FObjectKey>,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<16,4> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 69046 */
struct __declspec(align(8)) TSet<FObjectKey,DefaultKeyFuncs<FObjectKey,0>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<FObjectKey>,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 69047 */
struct __cppobj ULevelSequencePlayer : UMovieSceneSequencePlayer
{
  FOnLevelSequencePlayerCameraCutEvent OnCameraCut;
  TWeakObjectPtr<UWorld,FWeakObjectPtr> World;
  TWeakObjectPtr<AActor,FWeakObjectPtr> LastViewTarget;
  EAspectRatioAxisConstraint LastAspectRatioAxisConstraint;
  FLevelSequenceSnapshotSettings SnapshotSettings;
  TOptional<int> SnapshotOffsetTime;
  TWeakObjectPtr<UCameraComponent,FWeakObjectPtr> CachedCameraComponent;
  TArray<UObject *,FDefaultAllocator> AdditionalEventReceivers;
  TSet<FObjectKey,DefaultKeyFuncs<FObjectKey,0>,FDefaultSetAllocator> PrerequisiteActors;
};

/* 69049 */
struct __cppobj ULevelSequenceBurnInOptions : UObject
{
  bool bUseBurnIn;
  FSoftClassPath BurnInClass;
  ULevelSequenceBurnInInitSettings *Settings;
};

/* 40552 */
const struct IMovieSceneBindingOverridesInterface
{
  IMovieSceneBindingOverridesInterfaceVtbl *vfptr;
};

/* 69050 */
struct TArray<FMovieSceneBindingOverrideData,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 13703 */
struct TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<28,4> >,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 13704 */
struct TSparseArray<TSetElement<TTuple<FGuid,int> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<28,4> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 69051 */
struct __declspec(align(8)) TSet<TTuple<FGuid,int>,TDefaultMapHashableKeyFuncs<FGuid,int,1>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<TTuple<FGuid,int> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 69052 */
struct TMapBase<FGuid,int,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FGuid,int,1> >
{
  TSet<TTuple<FGuid,int>,TDefaultMapHashableKeyFuncs<FGuid,int,1>,FDefaultSetAllocator> Pairs;
};

/* 69053 */
struct __cppobj TSortableMapBase<FGuid,int,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FGuid,int,1> > : TMapBase<FGuid,int,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FGuid,int,1> >
{
};

/* 69054 */
struct __cppobj TMultiMap<FGuid,int,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FGuid,int,1> > : TSortableMapBase<FGuid,int,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FGuid,int,1> >
{
};

/* 69055 */
struct __cppobj UMovieSceneBindingOverrides : UObject, IMovieSceneBindingOverridesInterface
{
  TArray<FMovieSceneBindingOverrideData,FDefaultAllocator> BindingData;
  bool bLookupDirty;
  TMultiMap<FGuid,int,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FGuid,int,1> > LookupMap;
};

/* 40679 */
struct FQualifiedFrameTime
{
  FFrameTime Time;
  FFrameRate Rate;
};

/* 69056 */
struct FLevelSequencePlayerSnapshot
{
  FString MasterName;
  FQualifiedFrameTime MasterTime;
  FString CurrentShotName;
  FQualifiedFrameTime CurrentShotLocalTime;
  UCameraComponent *CameraComponent;
  FLevelSequenceSnapshotSettings Settings;
  FMovieSceneSequenceID ShotID;
};

/* 69058 */
struct __cppobj ULevelSequenceBurnIn : UUserWidget
{
  FLevelSequencePlayerSnapshot FrameInformation;
  ALevelSequenceActor *LevelSequenceActor;
};

/* 4634 */
struct FDeferredCleanupInterfaceVtbl
{
  void *(__cdecl *__vecDelDtor)(FDeferredCleanupInterface *this, unsigned int);
  void (__cdecl *FinishCleanup)(FDeferredCleanupInterface *this);
};

/* 5189 */
struct SharedPointerInternals::FWeakReferencer<1>
{
  SharedPointerInternals::FReferenceControllerBase *ReferenceController;
};

/* 36380 */
struct TWeakPtr<ISlate3DRenderer,1>
{
  ISlate3DRenderer *Object;
  SharedPointerInternals::FWeakReferencer<1> WeakReferenceCount;
};

/* 36377 */
struct TSharedFromThis<ISlate3DRenderer,1>
{
  TWeakPtr<ISlate3DRenderer,1> WeakThis;
};

/* 36378 */
struct __cppobj ISlate3DRenderer : TSharedFromThis<ISlate3DRenderer,1>
{
  ISlate3DRendererVtbl *vfptr;
};

/* 30631 */
struct __cppobj UPanelSlot : UVisual
{
  UPanelWidget *Parent;
  UWidget *Content;
};

/* 30636 */
struct __cppobj TBaseDynamicDelegate<FWeakObjectPtr,UWidget *> : TScriptDelegate<FWeakObjectPtr>
{
};

/* 30637 */
struct __cppobj UWidget::FGetWidget : TBaseDynamicDelegate<FWeakObjectPtr,UWidget *>
{
};

/* 201498 */
typedef HDC__ *HDC;

/* 206082 */
typedef const char *LPCSTR;

/* 203482 */
typedef void *LPVOID;

/* 862 */
typedef int __stdcall EUINavigationRule(HDC, int, int, LPCSTR, LPVOID);

/* 30641 */
struct __cppobj TWeakObjectPtr<UWidget,FWeakObjectPtr> : FWeakObjectPtr
{
};

/* 30642 */
struct __cppobj TBaseDynamicDelegate<FWeakObjectPtr,UWidget *,enum EUINavigation> : TScriptDelegate<FWeakObjectPtr>
{
};

/* 30643 */
struct __cppobj FCustomWidgetNavigationDelegate : TBaseDynamicDelegate<FWeakObjectPtr,UWidget *,enum EUINavigation>
{
};

/* 30644 */
struct FWidgetNavigationData
{
  EUINavigationRule Rule;
  FName WidgetToFocus;
  TWeakObjectPtr<UWidget,FWeakObjectPtr> Widget;
  FCustomWidgetNavigationDelegate CustomDelegate;
};

/* 30645 */
struct __cppobj UWidgetNavigation : UObject
{
  FWidgetNavigationData Up;
  FWidgetNavigationData Down;
  FWidgetNavigationData Left;
  FWidgetNavigationData Right;
  FWidgetNavigationData Next;
  FWidgetNavigationData Previous;
};

/* 5163 */
struct FChildren
{
  FChildrenVtbl *vfptr;
  SWidget *Owner;
};

/* 5138 */
struct TSharedRef<SWidget,0>
{
  SWidget *Object;
  SharedPointerInternals::FSharedReferencer<0> SharedReferenceCount;
};

/* 5165 */
const struct FSlotBase
{
  FSlotBaseVtbl *vfptr;
  SWidget *RawParentPtr;
  TSharedRef<SWidget,0> Widget;
};

/* 5169 */
struct __cppobj TSlotBase<FSimpleSlot> : FSlotBase
{
};

/* 5170 */
struct __cppobj TSupportsOneChildMixin<FSimpleSlot> : FChildren, TSlotBase<FSimpleSlot>
{
};

/* 69 */
enum EHorizontalAlignment
{
  HAlign_Fill = 0x0,
  HAlign_Left = 0x1,
  HAlign_Center = 0x2,
  HAlign_Right = 0x3,
};

/* 70 */
enum EVerticalAlignment
{
  VAlign_Fill = 0x0,
  VAlign_Top = 0x1,
  VAlign_Center = 0x2,
  VAlign_Bottom = 0x3,
};

/* 5171 */
struct TSupportsContentAlignmentMixin<FSimpleSlot>
{
  EHorizontalAlignment HAlignment;
  EVerticalAlignment VAlignment;
};

/* 5172 */
struct __cppobj TBaseDelegate<FMargin> : FDelegateBase
{
};

/* 5173 */
struct TAttribute<FMargin>
{
  FMargin Value;
  bool bIsSet;
  TBaseDelegate<FMargin> Getter;
};

/* 5174 */
struct TSupportsContentPaddingMixin<FSimpleSlot>
{
  TAttribute<FMargin> SlotPadding;
};

/* 5175 */
struct __cppobj FSimpleSlot : TSupportsOneChildMixin<FSimpleSlot>, TSupportsContentAlignmentMixin<FSimpleSlot>, TSupportsContentPaddingMixin<FSimpleSlot>
{
};

/* 5176 */
struct __cppobj TBaseDelegate<FLinearColor> : FDelegateBase
{
};

/* 5177 */
struct TAttribute<FLinearColor>
{
  FLinearColor Value;
  bool bIsSet;
  TBaseDelegate<FLinearColor> Getter;
};

/* 5181 */
struct __cppobj TBaseDelegate<FSlateColor> : FDelegateBase
{
};

/* 5182 */
struct TAttribute<FSlateColor>
{
  FSlateColor Value;
  bool bIsSet;
  TBaseDelegate<FSlateColor> Getter;
};

/* 5183 */
struct __cppobj SCompoundWidget : SWidget
{
  FSimpleSlot ChildSlot;
  TAttribute<FVector2D> ContentScale;
  TAttribute<FLinearColor> ColorAndOpacity;
  TAttribute<FSlateColor> ForegroundColor;
};

/* 3941 */
struct __declspec(align(8)) FGCObject
{
  FGCObjectVtbl *vfptr;
  bool bReferenceAdded;
};

/* 30647 */
struct __cppobj SObjectWidget : SCompoundWidget, FGCObject
{
  UUserWidget *WidgetObject;
};

/* 30651 */
struct INamedSlotInterfaceVtbl
{
  void *(__cdecl *__vecDelDtor)(INamedSlotInterface *this, unsigned int);
  UObject *(__cdecl *_getUObject)(INamedSlotInterface *this);
  void (__cdecl *GetSlotNames)(INamedSlotInterface *this, TArray<FName,FDefaultAllocator> *);
  UWidget *(__cdecl *GetContentForSlot)(INamedSlotInterface *this, FName);
  void (__cdecl *SetContentForSlot)(INamedSlotInterface *this, FName, UWidget *);
};

/* 30658 */
struct __cppobj UWidgetTree : UObject
{
  UWidget *RootWidget;
};

/* 30181 */
struct TArray<FText,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 68987 */
struct TSparseArray<TSetElement<TTuple<FName,UImage *> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<24,8> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 68988 */
struct __declspec(align(8)) TSet<TTuple<FName,UImage *>,TDefaultMapHashableKeyFuncs<FName,UImage *,0>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<TTuple<FName,UImage *> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 68989 */
struct TMapBase<FName,UImage *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,UImage *,0> >
{
  TSet<TTuple<FName,UImage *>,TDefaultMapHashableKeyFuncs<FName,UImage *,0>,FDefaultSetAllocator> Pairs;
};

/* 68990 */
struct __cppobj TSortableMapBase<FName,UImage *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,UImage *,0> > : TMapBase<FName,UImage *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,UImage *,0> >
{
};

/* 68991 */
struct __cppobj TMap<FName,UImage *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,UImage *,0> > : TSortableMapBase<FName,UImage *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,UImage *,0> >
{
};

/* 69007 */
struct TSparseArray<TSetElement<TTuple<FName,UAcControllerIcon *> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<24,8> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 69008 */
struct __declspec(align(8)) TSet<TTuple<FName,UAcControllerIcon *>,TDefaultMapHashableKeyFuncs<FName,UAcControllerIcon *,0>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<TTuple<FName,UAcControllerIcon *> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 69009 */
struct TMapBase<FName,UAcControllerIcon *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,UAcControllerIcon *,0> >
{
  TSet<TTuple<FName,UAcControllerIcon *>,TDefaultMapHashableKeyFuncs<FName,UAcControllerIcon *,0>,FDefaultSetAllocator> Pairs;
};

/* 69010 */
struct __cppobj TSortableMapBase<FName,UAcControllerIcon *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,UAcControllerIcon *,0> > : TMapBase<FName,UAcControllerIcon *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,UAcControllerIcon *,0> >
{
};

/* 69011 */
struct __cppobj TMap<FName,UAcControllerIcon *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,UAcControllerIcon *,0> > : TSortableMapBase<FName,UAcControllerIcon *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,UAcControllerIcon *,0> >
{
};

/* 69012 */
struct TSparseArray<TSetElement<TTuple<FName,UCanvasPanel *> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<24,8> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 69013 */
struct __declspec(align(8)) TSet<TTuple<FName,UCanvasPanel *>,TDefaultMapHashableKeyFuncs<FName,UCanvasPanel *,0>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<TTuple<FName,UCanvasPanel *> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 69014 */
struct TMapBase<FName,UCanvasPanel *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,UCanvasPanel *,0> >
{
  TSet<TTuple<FName,UCanvasPanel *>,TDefaultMapHashableKeyFuncs<FName,UCanvasPanel *,0>,FDefaultSetAllocator> Pairs;
};

/* 69015 */
struct __cppobj TSortableMapBase<FName,UCanvasPanel *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,UCanvasPanel *,0> > : TMapBase<FName,UCanvasPanel *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,UCanvasPanel *,0> >
{
};

/* 69016 */
struct __cppobj TMap<FName,UCanvasPanel *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,UCanvasPanel *,0> > : TSortableMapBase<FName,UCanvasPanel *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,UCanvasPanel *,0> >
{
};

/* 69018 */
struct __cppobj UAcPanelBase : UUserWidget
{
  TMap<FName,TSubclassOf<UAcPageBase>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,TSubclassOf<UAcPageBase>,0> > PageClasses;
  bool IsActive;
  bool IsNavigable;
  bool canHandleForward;
  bool canHandleBackward;
  FText PageInfo;
  int PanelIndex;
  int UpDirectionIndex;
  int LeftDirectionIndex;
  int RightDirectionIndex;
  int DownDirectionIndex;
  int ShoulderLeftDirectionIndex;
  int ShoulderRightDirectionIndex;
  UTexture2D *NormalImage;
  UTexture2D *HoveredImage;
  UUserWidget *SetupElement;
  TArray<FText,FDefaultAllocator> HelpInfos;
  float HoverAnimationSpeed;
  bool bHasFocus;
  bool bIsUpPressed;
  bool bCanHandleUpReleased;
  bool bIsDownPressed;
  bool bCanHandleDownReleased;
  bool bIsLeftPressed;
  bool bCanHandleLeftReleased;
  bool bIsRightPressed;
  bool bCanHandleRightReleased;
  bool bIsShoulderLeftPressed;
  bool bCanHandleShoulderLeftReleased;
  bool bIsShoulderRightPressed;
  bool bCanHandleShoulderRightReleased;
  float PressedTime;
  float CurrentTimeStep;
  TMap<FName,UImage *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,UImage *,0> > Images;
  TMap<FName,UTextBlock *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,UTextBlock *,0> > TextBlocks;
  TMap<FName,UWidgetAnimation *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,UWidgetAnimation *,0> > Animations;
  TMap<FName,UButton *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,UButton *,0> > Buttons;
  TMap<FName,UAcControllerIcon *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,UAcControllerIcon *,0> > ControllerIcons;
  TMap<FName,UCanvasPanel *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,UCanvasPanel *,0> > Canvases;
  UUserWidget *ParentWidget;
  UAcGameInstance *GameInstance;
};

/* 69020 */
struct FShapedTextOptions
{
  __int8 bOverride_TextShapingMethod : 1;
  __int8 bOverride_TextFlowDirection : 1;
  _BYTE TextShapingMethod[1];
  _BYTE TextFlowDirection[1];
};

/* 69021 */
struct TEnumAsByte<enum ETextJustify::Type>
{
  char Value;
};

/* 69022 */
struct __cppobj UTextLayoutWidget : UWidget
{
  FShapedTextOptions ShapedTextOptions;
  TEnumAsByte<enum ETextJustify::Type> Justification;
  _BYTE WrappingPolicy[1];
  __int8 AutoWrapText : 1;
  float WrapTextAt;
  FMargin Margin;
  float LineHeightPercentage;
};

/* 5324 */
struct FFontOutlineSettings
{
  int OutlineSize;
  bool bSeparateFillAlpha;
  UObject *OutlineMaterial;
  FLinearColor OutlineColor;
};

/* 5325 */
struct TSharedPtr<FCompositeFont const ,0>
{
  FCompositeFont *Object;
  SharedPointerInternals::FSharedReferencer<0> SharedReferenceCount;
};

/* 5326 */
struct __declspec(align(4)) FSlateFontInfo
{
  UObject *FontObject;
  UObject *FontMaterial;
  FFontOutlineSettings OutlineSettings;
  TSharedPtr<FCompositeFont const ,0> CompositeFont;
  FName TypefaceFontName;
  int Size;
  _BYTE FontFallback[1];
};

/* 8711 */
struct TSharedPtr<STextBlock,0>
{
  STextBlock *Object;
  SharedPointerInternals::FSharedReferencer<0> SharedReferenceCount;
};

/* 69023 */
struct __cppobj UTextBlock : UTextLayoutWidget
{
  FText Text;
  UWidget::FGetText TextDelegate;
  FSlateColor ColorAndOpacity;
  UWidget::FGetSlateColor ColorAndOpacityDelegate;
  FSlateFontInfo Font;
  FVector2D ShadowOffset;
  FLinearColor ShadowColorAndOpacity;
  UWidget::FGetLinearColor ShadowColorAndOpacityDelegate;
  float MinDesiredWidth;
  bool bWrapWithInvalidationPanel;
  bool bAutoWrapText;
  TSharedPtr<STextBlock,0> MyTextBlock;
};

/* 69024 */
struct TArray<FMultipleHelpText,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 69038 */
struct __cppobj UHelpInMenu : UUserWidget
{
  UAcGameInstance *GameInstance;
  TSubclassOf<UUserWidget> BodyTextWidgetClass;
  TSubclassOf<UUserWidget> TitleWidgetClass;
  TSubclassOf<UUserWidget> WdgHotlapStandingSpacerItemClass;
  FText HelpTitle;
  TArray<FText,FDefaultAllocator> DefaultTexts;
  TArray<FMultipleHelpText,FDefaultAllocator> MultipleDefaultTexts;
  bool IsFixed;
  UTextBlock *txtHelpTitle;
  UScrollBox *ScrollHelpText;
  UVerticalBox *vboxHelpTitle;
  UVerticalBox *vboxHelpText;
  APlayerController *PlayerController;
};

/* 69059 */
struct TArray<FCompetitionEntryList,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 69060 */
struct __cppobj FCompetitionList : FTableRowBase
{
  TArray<FCompetitionEntryList,FDefaultAllocator> EntryList;
};

/* 69061 */
struct TSparseArray<TSetElement<TTuple<FName,UMaterialInterface *> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<24,8> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 69062 */
struct __declspec(align(8)) TSet<TTuple<FName,UMaterialInterface *>,TDefaultMapHashableKeyFuncs<FName,UMaterialInterface *,0>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<TTuple<FName,UMaterialInterface *> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 69063 */
struct TMapBase<FName,UMaterialInterface *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,UMaterialInterface *,0> >
{
  TSet<TTuple<FName,UMaterialInterface *>,TDefaultMapHashableKeyFuncs<FName,UMaterialInterface *,0>,FDefaultSetAllocator> Pairs;
};

/* 69064 */
struct __cppobj TSortableMapBase<FName,UMaterialInterface *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,UMaterialInterface *,0> > : TMapBase<FName,UMaterialInterface *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,UMaterialInterface *,0> >
{
};

/* 69065 */
struct __cppobj TMap<FName,UMaterialInterface *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,UMaterialInterface *,0> > : TSortableMapBase<FName,UMaterialInterface *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,UMaterialInterface *,0> >
{
};

/* 65923 */
struct TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<168,8> >,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 69066 */
struct TSparseArray<TSetElement<TTuple<FName,FCarInfo> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<168,8> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 69067 */
struct __declspec(align(8)) TSet<TTuple<FName,FCarInfo>,TDefaultMapHashableKeyFuncs<FName,FCarInfo,0>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<TTuple<FName,FCarInfo> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 69068 */
struct TMapBase<FName,FCarInfo,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,FCarInfo,0> >
{
  TSet<TTuple<FName,FCarInfo>,TDefaultMapHashableKeyFuncs<FName,FCarInfo,0>,FDefaultSetAllocator> Pairs;
};

/* 69069 */
struct __cppobj TSortableMapBase<FName,FCarInfo,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,FCarInfo,0> > : TMapBase<FName,FCarInfo,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,FCarInfo,0> >
{
};

/* 69070 */
struct __cppobj TMap<FName,FCarInfo,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,FCarInfo,0> > : TSortableMapBase<FName,FCarInfo,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,FCarInfo,0> >
{
};

/* 6330 */
struct TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<224,8> >,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 69071 */
struct TSparseArray<TSetElement<TTuple<FName,FDriverInfo> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<224,8> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 69072 */
struct __declspec(align(8)) TSet<TTuple<FName,FDriverInfo>,TDefaultMapHashableKeyFuncs<FName,FDriverInfo,0>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<TTuple<FName,FDriverInfo> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 69073 */
struct TMapBase<FName,FDriverInfo,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,FDriverInfo,0> >
{
  TSet<TTuple<FName,FDriverInfo>,TDefaultMapHashableKeyFuncs<FName,FDriverInfo,0>,FDefaultSetAllocator> Pairs;
};

/* 69074 */
struct __cppobj TSortableMapBase<FName,FDriverInfo,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,FDriverInfo,0> > : TMapBase<FName,FDriverInfo,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,FDriverInfo,0> >
{
};

/* 69075 */
struct __cppobj TMap<FName,FDriverInfo,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,FDriverInfo,0> > : TSortableMapBase<FName,FDriverInfo,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,FDriverInfo,0> >
{
};

/* 69076 */
struct TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<424,8> >,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 69077 */
struct TSparseArray<TSetElement<TTuple<FName,FCircuitInfo> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<424,8> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 69078 */
struct __declspec(align(8)) TSet<TTuple<FName,FCircuitInfo>,TDefaultMapHashableKeyFuncs<FName,FCircuitInfo,0>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<TTuple<FName,FCircuitInfo> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 69079 */
struct TMapBase<FName,FCircuitInfo,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,FCircuitInfo,0> >
{
  TSet<TTuple<FName,FCircuitInfo>,TDefaultMapHashableKeyFuncs<FName,FCircuitInfo,0>,FDefaultSetAllocator> Pairs;
};

/* 69080 */
struct __cppobj TSortableMapBase<FName,FCircuitInfo,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,FCircuitInfo,0> > : TMapBase<FName,FCircuitInfo,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,FCircuitInfo,0> >
{
};

/* 69081 */
struct __cppobj TMap<FName,FCircuitInfo,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,FCircuitInfo,0> > : TSortableMapBase<FName,FCircuitInfo,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,FCircuitInfo,0> >
{
};

/* 69102 */
struct TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<304,16> >,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 69103 */
struct TSparseArray<TSetElement<TTuple<enum ECarModelType,FGuiCar> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<304,16> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 69104 */
struct __declspec(align(8)) TSet<TTuple<enum ECarModelType,FGuiCar>,TDefaultMapHashableKeyFuncs<enum ECarModelType,FGuiCar,0>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<TTuple<enum ECarModelType,FGuiCar> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 69105 */
struct TMapBase<enum ECarModelType,FGuiCar,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<enum ECarModelType,FGuiCar,0> >
{
  TSet<TTuple<enum ECarModelType,FGuiCar>,TDefaultMapHashableKeyFuncs<enum ECarModelType,FGuiCar,0>,FDefaultSetAllocator> Pairs;
};

/* 69106 */
struct __cppobj TSortableMapBase<enum ECarModelType,FGuiCar,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<enum ECarModelType,FGuiCar,0> > : TMapBase<enum ECarModelType,FGuiCar,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<enum ECarModelType,FGuiCar,0> >
{
};

/* 69107 */
struct __cppobj TMap<enum ECarModelType,FGuiCar,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<enum ECarModelType,FGuiCar,0> > : TSortableMapBase<enum ECarModelType,FGuiCar,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<enum ECarModelType,FGuiCar,0> >
{
};

/* 69108 */
struct __cppobj AAcMenuGameMode : AGameModeBase
{
  bool IsShowRoom;
  FCompetitionList CompetitionList;
  TMap<FName,UMaterialInterface *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,UMaterialInterface *,0> > OriginalCarMaterials;
  TMap<FName,FCarInfo,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,FCarInfo,0> > Cars;
  TMap<FName,FDriverInfo,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,FDriverInfo,0> > Drivers;
  TMap<FName,FCircuitInfo,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,FCircuitInfo,0> > Circuits;
  _BYTE ScreenSaverCarModel[1];
  FName ScreenSaverCarName;
  UTextureRenderTarget2D *WidgetTarget;
  UAcStereoLayerComponent *StereoLayer;
  UAcGameInstance *GameInstance;
  UAcInputDeviceManager *InputDeviceManager;
  FString RaceGameModePath;
  UViewOptionsLibrary *ViewOptions;
  TMap<enum ECarModelType,FGuiCar,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<enum ECarModelType,FGuiCar,0> > GuiCars;
  UAcRaceEventGenerator *RaceEventGenerator;
  FTransform CarBoxPosition;
  FTransform ShowRoomPosition;
  FTransform HidePosition;
  ACarAvatar *currentShowroomCar;
  UClientAvatar *clientAvatar;
  bool hmdEnabled;
  TSharedPtr<FWidgetRenderer,0> WidgetRenderer;
  UAcPageBase *CurrentPage;
  TSharedPtr<SWidget,0> InternalWidget;
};

/* 5112 */
struct FSlateControlledConstructionVtbl
{
  void *(__cdecl *__vecDelDtor)(FSlateControlledConstruction *this, unsigned int);
};

/* 5139 */
struct IToolTip
{
  IToolTipVtbl *vfptr;
};

/* 5143 */
struct ILayoutCache
{
  ILayoutCacheVtbl *vfptr;
};

/* 68915 */
struct FSteerData
{
  float SteerLock;
  float SteerRatio;
  float LinearSteerRodRatio;
  float FFMult;
  float SteerAssist;
};

/* 68916 */
struct FFuelData
{
  float FuelKG;
  float FuelConsumptionK;
  float MaxFuel;
  FVector fuelTankPosition;
  float Fuel;
  float FuelUsedPerKm;
};

/* 68917 */
struct FBrakeDiscData
{
  float CoolTransfer;
  float TorqueK;
  float CoolSpeedFactor;
  float Emissivity;
  float Surface;
  float ThermalCapacity;
  float CoreThermalCapacity;
  float ThermalConductivity;
  float ConductionThickness;
  UCurveFloat *PerfCurve;
};

/* 68918 */
struct __declspec(align(8)) FBrakesData
{
  float TotalTorque;
  float FrontBias;
  float MinBias;
  float MaxBias;
  float HandBrakeTorque;
  bool HasCockpitBias;
  float CockpitBiasAdjustStep;
  _BYTE EBBMode[1];
  float EBBFrontShareMultiplier;
  FBrakeDiscData DiscDataFront;
  FBrakeDiscData DiscDataRear;
  bool IsBrakeTempActive;
};

/* 68919 */
struct TArray<FEngineMapData,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 68870 */
struct TArray<FTurboData,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 68920 */
struct FStartECUAssistData
{
  float RpmRange;
  float Gain;
  float SpeedRangeKHM;
};

/* 68921 */
struct __declspec(align(8)) FEngineData
{
  float Inertia;
  UCurveFloat *PowerCurve;
  UCurveFloat *CoastCurve;
  TArray<FEngineMapData,FDefaultAllocator> Maps;
  int Minimum;
  int Limiter;
  int LimiterCycles;
  TArray<FTurboData,FDefaultAllocator> Turbos;
  float DefaultTurboAdjustment;
  UCurveFloat *ThrottleResponseCurve;
  float RpmDamageThreshold;
  float TurboBoostDamageThreshold;
  float TurboBoostDamageK;
  float RpmDamageK;
  float BovThreshold;
  float StarterTime;
  float IgnitionTime;
  float EngineStartupTime;
  float EngineDamping;
  float OmegaN;
  float OmegaGainRPM;
  float RpmSuggestedShift;
  float RpmLimiterAlarm;
  FStartECUAssistData StartECUAssistData;
  float StarterEngineTorque;
};

/* 68922 */
struct FDifferentialData
{
  float Power;
  float Coast;
  float Preload;
};

/* 68923 */
struct __declspec(align(4)) FDownshiftProtectionData
{
  bool IsActive;
  bool IsDebug;
  int Overrev;
  bool LockN;
};

/* 68924 */
struct __declspec(align(8)) FAutoBlipData
{
  UCurveFloat *BlipProfile;
  bool IsElectronic;
};

/* 68925 */
struct __declspec(align(8)) FAutoClutchData
{
  UCurveFloat *UpshiftProfile;
  UCurveFloat *DownshiftProfile;
  bool IsForcedOn;
  float RpmMin;
  float RpmMax;
};

/* 68926 */
struct FAutoShifterData
{
  int ChangeUpRpm;
  int ChangeDnRpm;
  float SlipThreshold;
  float GasCutoffTimeS;
};

/* 68927 */
struct FDrivetrainData
{
  _BYTE TractionType[1];
  float DriveInertia;
  float ClutchInertia;
  float GearR;
  TArray<float,FDefaultAllocator> Gears;
  float FinalRatio;
  FDifferentialData Differential;
  float GearUpTimeMS;
  float GearDnTimeMS;
  float AutoCutOffTimeMS;
  bool IsShifterSupported;
  FDownshiftProtectionData DownshiftProtection;
  float ClutchMaxTorque;
  float ValidShiftRPMWindow;
  float ControlsWindowGain;
  float DamageRpmWindow;
  FAutoBlipData AutoBlip;
  FAutoClutchData AutoClutch;
  FAutoShifterData AutoShifter;
};

/* 68928 */
struct FSuspBumpStopDef
{
  float Range;
  float Reference;
  float Force;
  float Gamma;
};

/* 68929 */
struct FSuspBumpStop
{
  FSuspBumpStopDef up;
  FSuspBumpStopDef down;
};

/* 68930 */
struct FSuspDamageData
{
  float minSpeed;
  float gain;
  float maxDamage;
};

/* 68931 */
struct FDamperData2W
{
  float bump;
  float rebound;
};

/* 68932 */
struct FDamperData
{
  FDamperData2W slow;
  FDamperData2W fast;
  float fastThresholdBump;
  float fastThresholdRebound;
  UCurveFloat *Lut;
};

/* 68933 */
struct FSuspHubData
{
  _BYTE type[1];
  float mass;
  float rimOffset;
  FSuspBumpStop bumpStop;
  float rodLength;
  float k;
  float progressiveK;
  float toeOut;
  float staticCamber;
  float packerRange;
  FSuspDamageData damage;
  FDamperData damper;
};

/* 68934 */
struct FWishboneData
{
  FVector carFront;
  FVector carRear;
  FVector wheel;
};

/* 68935 */
struct FRodData
{
  FVector car;
  FVector wheel;
};

/* 68936 */
struct FSuspDataDW
{
  FWishboneData wbTop;
  FWishboneData wbBottom;
  FRodData steer;
};

/* 68937 */
struct FSuspDataStrut
{
  FRodData strut;
  FWishboneData wbBottom;
  FRodData steer;
};

/* 68938 */
struct FSuspData
{
  float wheelbase;
  float cgLocation;
  bool isBumpStopAbsolute;
  float baseYFront;
  float baseYRear;
  float trackFront;
  float trackRear;
  FSuspHubData hubFront;
  FSuspHubData hubRear;
  FSuspDataDW dwFront;
  FSuspDataDW dwRear;
  FSuspDataStrut strutFront;
  FSuspDataStrut strutRear;
};

/* 68939 */
struct FARBData
{
  float k;
};

/* 68940 */
struct TArray<FTractionControlSettings,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 68941 */
struct FTractionControl
{
  bool IsPresent;
  float FrequencylHZ;
  float MinSpeedKMH;
  int DefaultIndex;
  TArray<FTractionControlSettings,FDefaultAllocator> Settings;
};

/* 68942 */
struct TArray<FABSSettings,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 68943 */
struct FABSData
{
  bool IsPresent;
  _BYTE Channels[1];
  float FrequencylHZ;
  float MinSpeedKMH;
  int DefaultIndex;
  TArray<FABSSettings,FDefaultAllocator> Settings;
};

/* 68944 */
struct __cppobj UCarData : UDataAsset
{
  FString ScreenName;
  float MassKG;
  FVector Inertia;
  float MinimumHeight;
  FSteerData SteerData;
  FFuelData FuelData;
  FBrakesData BrakesData;
  FEngineData EngineData;
  FDrivetrainData Drivetrain;
  FSuspData Suspensions;
  FARBData ARBFront;
  FARBData ARBRear;
  FTractionControl TractionControl;
  FABSData ABS;
  FString FilePath;
};

/* 68945 */
struct __cppobj UAIDataAsset : UDataAsset
{
  float GearChangeDownPerc;
  float SteerGain;
  float SteerMinLookahead;
  float UndersteerHint;
  float TyresHint;
  float BrakeHint;
  float AeroHint;
  float GasHint;
};

/* 68946 */
struct __declspec(align(8)) FSetupSelectorLimits
{
  int Min;
  int Step;
  int Max;
  float Scale;
  UCurveFloat *Curve;
  bool ShowValue;
};

/* 68947 */
struct FSetupAeroLimits
{
  FSetupSelectorLimits RearWing;
  FSetupSelectorLimits Splitter;
  FSetupSelectorLimits RideHeight[4];
};

/* 68948 */
struct FSetupAlignmentLimits
{
  FSetupSelectorLimits Camber[4];
  FSetupSelectorLimits Toe[4];
  FSetupSelectorLimits SteerRatio;
};

/* 68949 */
struct FSetupSuspensionsLimits
{
  FSetupSelectorLimits ARB[2];
  FSetupSelectorLimits WheelRate[4];
  FSetupSelectorLimits BumpStopRateUp[4];
  FSetupSelectorLimits BumpStopRateDn[4];
  FSetupSelectorLimits BumpStopRange[4];
};

/* 68950 */
struct FSetupDamperLimits
{
  FSetupSelectorLimits BumpSlow[4];
  FSetupSelectorLimits ReboundSlow[4];
  FSetupSelectorLimits BumpFast[4];
  FSetupSelectorLimits ReboundFast[4];
};

/* 68951 */
struct FSetupDifferentialLimits
{
  FSetupSelectorLimits Preload;
};

/* 68952 */
struct FSetupTyresLimits
{
  FSetupSelectorLimits TyreSetLimits;
  FSetupSelectorLimits Pressure[4];
};

/* 68953 */
struct FSetupElectronicsLimits
{
  FSetupSelectorLimits TC1;
  FSetupSelectorLimits ABS;
  FSetupSelectorLimits ECU;
};

/* 68954 */
struct FSetupBrakesLimits
{
  FSetupSelectorLimits Torque;
  FSetupSelectorLimits Bias;
};

/* 68955 */
struct FSetupStrategyLimits
{
  FSetupSelectorLimits Fuel;
  FSetupSelectorLimits Compound;
};

/* 68956 */
struct FSetupLimits
{
  FSetupAeroLimits AeroLimits;
  FSetupAlignmentLimits AlignmentLimits;
  FSetupSuspensionsLimits SuspensionLimits;
  FSetupDamperLimits DamperLimits;
  FSetupDifferentialLimits DifferentialLimits;
  FSetupTyresLimits TyresLimits;
  FSetupElectronicsLimits ElectronicsLimits;
  FSetupBrakesLimits BrakesLimits;
  FSetupStrategyLimits StrategyLimits;
};

/* 68957 */
struct __cppobj USetupManager : UDataAsset
{
  FSetupLimits SetupLimits;
  UDataTable *FrontDamperLuts;
  UDataTable *RearDamperLuts;
};

/* 68958 */
struct __cppobj TBaseDynamicMulticastDelegate<FWeakObjectPtr,void,enum ECarAnimation> : TMulticastScriptDelegate<FWeakObjectPtr>
{
};

/* 68959 */
struct __cppobj FOnCarAnimationEvent : TBaseDynamicMulticastDelegate<FWeakObjectPtr,void,enum ECarAnimation>
{
};

/* 6162 */
struct TArray<FVector2D,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 68961 */
struct TArray<FCarLoosePart,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 68962 */
struct TArray<FCarWiper,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 69648 */
struct UAcCarAnimations::SmoothValue
{
  float alpha;
  float value;
};

/* 69649 */
struct __cppobj __declspec(align(8)) UAcCarAnimations : UActorComponent
{
  FOnCarAnimationEvent OnCarAnimationEvent;
  ACarAvatar *CarAvatar;
  float LeftFootFrameStep;
  float RightFootFrameStep;
  float HalfSteerAnimationSeconds;
  float MaximumSteerAnimationRotation;
  float HelmetGForceFilter;
  FVector2D HelmetGForceXMaxRange;
  FVector2D HelmetGForceYMaxRange;
  float FeetFilter;
  float RightFootPositionForAnimation;
  FVector2D LeftFootPositionForAnimation;
  float DriverSteerRotation;
  FVector HelmetGForceForAnimation;
  bool ShiftUpForAnimation;
  bool ShiftDownForAnimation;
  float LeftDoorOpenRate;
  float RightDoorOpenRate;
  TArray<FVector2D,FDefaultAllocator> WiperIntervalsAndRate;
  float CarSteerRotation;
  float ClutchPedalPosition;
  float BrakePedalPosition;
  float GasPedalPosition;
  TArray<FCarLoosePart,FDefaultAllocator> CarLooseParts;
  TArray<FCarWiper,FDefaultAllocator> Wipers;
  AACPlayerCameraManager *CameraManager;
  bool bIsDetailedAnimation;
  float Gas;
  float Brake;
  float Clutch;
  float CarSpeed;
  char lastWiperLevel;
  FVector CurrentHelmetGForce;
  float RightFootPosition;
  FVector2D LeftFootPosition;
  char LastGear;
  UAcCarAnimations::SmoothValue testSmoothSteer;
};

/* 69650 */
struct TArray<FCarLights,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 69651 */
struct FCarLightStage
{
  TArray<FCarLights,FDefaultAllocator> MaterialsParameters;
};

/* 69652 */
struct TArray<USpotLightComponent *,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 4730 */
struct TSparseArray<TSetElement<TTuple<FName,float> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<24,8> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 4731 */
struct __declspec(align(8)) TSet<TTuple<FName,float>,TDefaultMapHashableKeyFuncs<FName,float,0>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<TTuple<FName,float> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 4732 */
struct TMapBase<FName,float,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,float,0> >
{
  TSet<TTuple<FName,float>,TDefaultMapHashableKeyFuncs<FName,float,0>,FDefaultSetAllocator> Pairs;
};

/* 4733 */
struct __cppobj TSortableMapBase<FName,float,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,float,0> > : TMapBase<FName,float,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,float,0> >
{
};

/* 4734 */
struct __cppobj TMap<FName,float,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,float,0> > : TSortableMapBase<FName,float,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,float,0> >
{
};

/* 69653 */
struct __cppobj TBaseMulticastDelegate<void,enum ECarLightEvent const ,bool const ,bool const > : FMulticastDelegateBase<FWeakObjectPtr>
{
};

/* 69654 */
struct __cppobj UAcCarLightingSystem::FCarLightEvent : TBaseMulticastDelegate<void,enum ECarLightEvent const ,bool const ,bool const >
{
};

/* 69655 */
struct __cppobj UAcCarLightingSystem : UActorComponent
{
  FCarLightStage SprintDayLights;
  FCarLightStage SprintHighBeam;
  FCarLightStage SprintBrakes;
  FCarLightStage SprintEndurance;
  FCarLightStage SprintFlashing;
  FCarLightStage SprintPitLimiter;
  FCarLightStage SprintRain;
  FCarLightStage SprintDirectionLightLeft;
  FCarLightStage SprintDirectionLightRight;
  FCarLightStage EnduranceDayLights;
  FCarLightStage EnduranceHighBeam;
  FCarLightStage EnduranceBrakes;
  FCarLightStage EnduranceEndurance;
  FCarLightStage EnduranceFlashing;
  FCarLightStage EndurancePitLimiter;
  FCarLightStage EnduranceRain;
  FCarLightStage EnduranceDirectionLightLeft;
  FCarLightStage EnduranceDirectionLightRight;
  FCarLightStage DayLights;
  FCarLightStage HighBeam;
  FCarLightStage Brakes;
  FCarLightStage Endurance;
  FCarLightStage Flashing;
  FCarLightStage PitLimiter;
  FCarLightStage Rain;
  FCarLightStage DirectionLightLeft;
  FCarLightStage DirectionLightRight;
  FName FrontMaterialSlotName;
  FName RearMaterialSlotName;
  FName FrontGlassMaterialSlotName;
  FName RearGlassMaterialSlotName;
  float DamageLeft;
  float DamageRight;
  char MaxFlashingCount;
  float IntAuxLightMaterialEmissive;
  float IntAuxLightIntensity;
  UMaterialInstanceDynamic *FrontMaterial;
  UMaterialInstanceDynamic *RearMaterial;
  UMaterialInstanceDynamic *FrontGlassMaterial;
  UMaterialInstanceDynamic *RearGlassMaterial;
  UMaterialInstanceDynamic *intAuxLightMaterial;
  ACarAvatar *CarAvatar;
  CarPhysicsState *physicsState;
  USkeletalMeshComponent *Mesh;
  TArray<FName,FDefaultAllocator> FrontParametersToReset;
  TArray<FName,FDefaultAllocator> RearParametersToReset;
  TArray<FName,FDefaultAllocator> EnduranceParametersToReset;
  TArray<USpotLightComponent *,FDefaultAllocator> PointLights;
  float DefaultLeftFrontAttenuationRadius;
  float DefaultRightFrontAttenuationRadius;
  USpotLightComponent *RainLight;
  USpotLightComponent *intAuxLight;
  TMap<FName,float,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,float,0> > CurrentFrontValues;
  TMap<FName,float,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,float,0> > CurrentRearValues;
  TMap<FName,float,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,float,0> > CurrentEnduranceValues;
  TArray<float,FDefaultAllocator> CurrentLightsValues;
  TArray<float,FDefaultAllocator> TemporaryIntensity;
  bool isBraking;
  char FlashingCount;
  bool isDirectionLeftBlinkingOn;
  bool isDirectionRightBlinkingOn;
  bool isFlashingLightBlinkOn;
  bool isOverrideVisibilityOn;
  FName DayLightsParameterName;
  FCarLightStage *DayLightsPtr;
  FCarLightStage *HighBeamPtr;
  FCarLightStage *BrakesPtr;
  FCarLightStage *EndurancePtr;
  FCarLightStage *FlashingPtr;
  FCarLightStage *PitLimiterPtr;
  FCarLightStage *RainPtr;
  FCarLightStage *DirectionLightLeftPtr;
  FCarLightStage *DirectionLightRightPtr;
  UAcCarLightingSystem::FCarLightEvent CarLightEvent;
};

/* 69656 */
struct __cppobj __declspec(align(8)) UAcCarSystems : UObject
{
  UAcGameInstance *gameInstance;
  ACarAvatar *carAvatar;
  AAcRaceGameMode *raceGameMode;
  _BYTE starterStatus[1];
  bool isEngineRunning;
  bool currentPhysicsStart;
  bool currentPhysicsStop;
};

/* 69657 */
struct TArray<FLedInstance,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 69658 */
struct __cppobj __declspec(align(4)) UAcLedSystem : UActorComponent
{
  FName LedMaterialSlotName;
  TArray<FLedInstance,FDefaultAllocator> RpmLeds;
  TArray<FLedInstance,FDefaultAllocator> PitLimiterLeds;
  TArray<FLedInstance,FDefaultAllocator> EngineLimiterLeds;
  TArray<FLedInstance,FDefaultAllocator> FuelLeds;
  TArray<FLedInstance,FDefaultAllocator> Slip_LF_Leds;
  TArray<FLedInstance,FDefaultAllocator> Slip_RF_Leds;
  TArray<FLedInstance,FDefaultAllocator> Slip_LR_Leds;
  TArray<FLedInstance,FDefaultAllocator> Slip_RR_Leds;
  TArray<FLedInstance,FDefaultAllocator> Slip_Front_Leds;
  TArray<FLedInstance,FDefaultAllocator> Slip_Rear_Leds;
  TArray<FLedInstance,FDefaultAllocator> Lock_LF_Leds;
  TArray<FLedInstance,FDefaultAllocator> Lock_RF_Leds;
  TArray<FLedInstance,FDefaultAllocator> Lock_LR_Leds;
  TArray<FLedInstance,FDefaultAllocator> Lock_RR_Leds;
  TArray<FLedInstance,FDefaultAllocator> Lock_Front_Leds;
  TArray<FLedInstance,FDefaultAllocator> Lock_Rear_Leds;
  TArray<FLedInstance,FDefaultAllocator> ABS_InAction_Leds;
  TArray<FLedInstance,FDefaultAllocator> TC_InAction_Leds;
  TArray<FLedInstance,FDefaultAllocator> DayLightStageLeds;
  TArray<FLedInstance,FDefaultAllocator> HighBeamStageLeds;
  TArray<FLedInstance,FDefaultAllocator> EnduranceStageLeds;
  TArray<FLedInstance,FDefaultAllocator> RainLightLeds;
  TArray<FLedInstance,FDefaultAllocator> FlashingLeds;
  TArray<FLedInstance,FDefaultAllocator> DirectionLeftLeds;
  TArray<FLedInstance,FDefaultAllocator> DirectionRightLeds;
  TArray<FLedInstance,FDefaultAllocator> DirectionSharedLeds;
  float RpmTimeOn;
  float RpmTimeOff;
  float RpmBlinkCurrentTime;
  float RpmBlinkTotalTime;
  float RpmBlinkMinRpm;
  float EngineLimiterTimeOn;
  float EngineLimiterTimeOff;
  float EngineLimiterBlinkCurrentTime;
  float EngineLimiterBlinkTotalTime;
  bool EngineLimiterBlinkOn;
  bool LastEngineLimiterBlinkValue;
  float EngineLimiterMinRpm;
  float PitLimiterTimeOn;
  float PitLimiterTimeOff;
  float PitLimiterCurrentTime;
  float PitLimiterTotalTime;
  bool PitLimiterBlinkOn;
  bool LastPitLimiterBlinkValue;
  float FuelTimeOn;
  float FuelTimeOff;
  float FuelCurrentTime;
  float FuelTotalTime;
  bool FuelBlinkOn;
  bool LastFuelBlinkValue;
  ACarAvatar *CarAvatar;
  CarPhysicsState *PhysicsState;
  USkeletalMeshComponent *Mesh;
  UMaterialInstanceDynamic *LedMaterial;
  float CurrentValue;
  bool RpmBlinkValue;
  bool LastRpmBlinkValue;
  bool EngineLimiterValue;
  bool LastEngineLimiterValue;
  bool FuelValue;
  bool LastFuelValue;
  bool DayLightStageValue;
  bool HighBeamStageValue;
  bool EnduranceStageValue;
  bool LastDayLightStageValue;
  bool LastHighBeamStageValue;
  bool LastEnduranceStageValue;
  bool PitLimiterValue;
  bool LastPitLimiterValue;
  bool RainLightValue;
  bool LastRainLightValue;
  bool FlashingValue;
  bool LastFlashingValue;
  bool FlashingEnabled;
  bool LastFlashingEnabled;
  bool DirectionLeftValue;
  bool LastDirectionLeftValue;
  bool DirectionRightValue;
  bool LastDirectionRightValue;
  bool DirectionSharedValue;
  bool LastDirectionSharedValue;
};

/* 69659 */
struct __cppobj TBaseMulticastDelegate<void,double const > : FMulticastDelegateBase<FWeakObjectPtr>
{
};

/* 69660 */
struct __cppobj UAcCarTimingServices::FOnStartingLap : TBaseMulticastDelegate<void,double const >
{
};

/* 69661 */
struct __declspec(align(4)) FLapTimeReference
{
  int lapTime;
  _BYTE referenceType[1];
};

/* 69662 */
struct __cppobj UAcCarTimingServices : UObject
{
  char CurrentSector;
  UAcCarTimingServices::FOnStartingLap StartingLapEvent;
  ACarAvatar *CarAvatar;
  AAcRaceGameMode *raceGameMode;
  ksRacing::RaceManager *raceManager;
  UAcGameInstance *GameInstance;
  char SectorCount;
  float fastLaneUnlockTime;
  bool bIsSplitCrossingValid;
  float LastSplitTimeStamp;
  float CurrentLapTime;
  int LaptimesSum;
  unsigned __int16 LapCount;
  ksRacing::Lap BestLap;
  ksRacing::Lap LastLap;
  int lapTimeDiff;
  float speedDiff;
  int predictedLapTime;
  FLapTimeReference bestLapReference;
  std::vector<unsigned int,std::allocator<unsigned int> > deltaTimeBestLap;
  std::vector<unsigned int,std::allocator<unsigned int> > deltaTimeCurrentLap;
  std::vector<float,std::allocator<float> > deltaSpeedBestLap;
  std::vector<float,std::allocator<float> > deltaSpeedCurrentLap;
  unsigned __int16 deltaSectorIndex;
  int lastDeltaIndex;
  float deltaStep;
  TArray<int,FDefaultAllocator> speedAvgs;
  bool mustRecordSpeed;
  float relativeSpeed;
  bool updateRelativeSpeed;
  bool useTrackMicroSectorTimes;
  float startingFuelOnLastLap;
  float totalFuelUsedInSession;
  float fuelPerSingleLap;
  float fuelPerKm;
  bool isCarOutOfTrack;
  int onCarOutOfTrackTimeStart;
  int onCarOutOfTrackTimeEnd;
  int onCarOutOfTrackSectorStart;
  int onCarOutOfTrackSectorEnd;
  int onCarOutOfTrackTimeJoin;
  int outOfTrackRealDeltaTime;
  AGhostCarManager *ghostCarManager;
};

/* 69664 */
struct TArray<UKSAudioComponent *,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 69665 */
struct TArray<FHitAudio *,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 69666 */
struct UCarAudio::SmoothValue
{
  float alpha;
  float value;
};

/* 16223 */
struct TArray<TEnumAsByte<enum EObjectTypeQuery>,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 69667 */
struct __cppobj __declspec(align(16)) UCarAudio : USceneComponent
{
  UKSAudioComponent *EngineExt;
  UKSAudioComponent *EngineReturnTest;
  UKSAudioComponent *WheelIntRF;
  UKSAudioComponent *WheelIntLF;
  UKSAudioComponent *WheelIntRR;
  UKSAudioComponent *WheelIntLR;
  UKSAudioComponent *WheelExtRF;
  UKSAudioComponent *WheelExtLF;
  UKSAudioComponent *WheelExtRR;
  UKSAudioComponent *WheelExtLR;
  UKSAudioComponent *Bodywork;
  UKSAudioComponent *Wind;
  UKSAudioComponent *HitComponent;
  UFMODBank *Bank;
  float RayLength;
  float EngineReflectionSmooth;
  bool AudioReflection;
  bool drawTestSphere;
  float volumeMultiplier;
  float GasAlphaSmooth;
  int HitNumEvents;
  float HitMinTime;
  float HitMaxDistance;
  float HitReplacingTime;
  AAcRaceGameMode *RaceGameMode;
  AAcRaceGameState *GameState;
  ACarAvatar *carAvatar;
  TArray<UKSAudioComponent *,FDefaultAllocator> HitSounds;
  TArray<UKSAudioComponent *,FDefaultAllocator> RollingInt;
  TArray<UKSAudioComponent *,FDefaultAllocator> RollingExt;
  TArray<UKSAudioComponent *,FDefaultAllocator> Engines;
  TArray<UKSAudioComponent *,FDefaultAllocator> HitAudioComponents;
  TArray<FHitAudio *,FDefaultAllocator> hitAudios;
  FTransform engineExtTransform;
  UCarAudio::SmoothValue skidVolumes[4];
  UCarAudio::SmoothValue skidPitches[4];
  UCarAudio::SmoothValue bodyworkVolume;
  UCarAudio::SmoothValue EngineReturnSmooth;
  UCarAudio::SmoothValue EngineExtVolume;
  UCarAudio::SmoothValue gasValue;
  UCarAudio::SmoothValue rainIntensity;
  UCarAudio::SmoothValue rainLevelSmoothed[4];
  UCarAudio::SmoothValue forwardCarMarbles;
  LerpValue rpmStarter;
  bool engineStarted;
  float engineStatusTime;
  bool pauseSounds;
  AACPlayerCameraManager *CameraManager;
  UAcGameInstance *GameInstance;
  TArray<TEnumAsByte<enum EObjectTypeQuery>,FDefaultAllocator> ObjectTypes;
  unsigned __int16 ListenerPriority;
  float ListenerDistance;
  float ListenerDistanceAbsolute;
  bool OnExternalReverb;
  float distanceFactor;
  float dirtForwardCar;
  int lastGear;
  float EngineExtReverbVolume;
  float minimumRpm;
  float hitTime;
  vec3d lastHit;
  char engineFlags;
  _BYTE oldIgnition[1];
  _BYTE oldStarter[1];
  TArray<float,FDefaultAllocator> numTeeth;
  float starterSafeTime;
  float ignitionSafeTime;
  float bottoming[2];
  char wheelHubStatus[4];
  FDelegateHandle pitstopHandle;
  float engineOnSmoothAlpha;
  float engineOffSmoothAlpha;
  char airJackStatus;
  bool initialized;
  bool doppler;
  bool EngineExtEnabled;
  bool EngineIntEnabled;
  bool BodyWorkEnabled;
  bool WheelEnabled;
  bool WindEnabled;
  bool firstFrame;
  FVector listenerPosition;
  FVector listenerForward;
  float gearBoxPressure;
  bool gearBoxCompressor;
  bool bankNotLoadedError;
};

/* 69671 */
struct FBackfireFlame
{
  _BYTE flameType[1];
  char spawnProbability;
};

/* 69672 */
struct __declspec(align(4)) FBackFireData
{
  _BYTE status[1];
  float currentBackFireTime;
  _BYTE currentType[1];
  float backFireTime;
  float backFireTimeDelay;
  float backFireBlipTime;
  float rpmRate;
  float rpmLast;
  float rpmStart;
  float variationFactor;
  bool blip;
  int lastGear;
  _BYTE lastStatus[1];
};

/* 69673 */
struct __cppobj __declspec(align(8)) UAcExhaustComponent : UActorComponent
{
  bool hasFixedTemperature;
  float TGasMin;
  float TimeConstant;
  float MinEmissive;
  float MaxEmissive;
  float MinTemperature;
  float MaxTemperature;
  FName MaterialSlot;
  float backFireHighRpms;
  float backFireLowRpms;
  float backFireMinRpms;
  float backFireHighRate;
  float backFireBlipTime;
  float backfireDelay;
  float backFireVariation;
  float backFireTime;
  TArray<int,FDefaultAllocator> BackfireProbability;
  FBackfireFlame Flame_Type1;
  FBackfireFlame Flame_Type2;
  FBackfireFlame Flame_Type3;
  FBackfireFlame Flame_Type4;
  FBackfireFlame Flame_Type5;
  ACarAvatar *CarAvatar;
  CarPhysicsState *physicsState;
  FBackFireData backFireData;
  float TermCapacity;
  float Temperature;
  UMaterialInstanceDynamic *Material;
  AAcRaceGameState *RaceGameState;
  TArray<UParticleSystemComponent *,FDefaultAllocator> flameComponents;
  _BYTE debugType[1];
  char debugCounter;
};

/* 69687 */
struct __cppobj __declspec(align(8)) UAcCarPitstopManager : UActorComponent
{
  float MinDistance;
  float MaxDistance;
  float SecondaryDistance;
  float MaxAngle;
  float PushingSpeed;
  float PushingAngularSpeed;
  float OnSkateSpeed;
  float OnSkateAngularSpeed;
  float FakePitstopTime;
  float SecondsToExtend;
  float SecondsToBaseStartProcedure;
  float SecondsToRaiseProcedure;
  float targetHeight;
  AAcRaceGameMode *RaceGameMode;
  ACarAvatar *CarAvatar;
  UStaticMeshComponent *AirJacksMesh;
  AAcPitstopProcedure *pitCrew;
  char newTyresetCompoundIndex;
  FTransform baseTransform;
  AAcPlayerStart *pitZone;
  unsigned __int16 mainPitZoneIndex;
  unsigned __int16 secondaryPitZoneIndex;
  bool bIsPitstopAnimationRunning;
  bool isPitstopRequested;
  _BYTE outside[1];
  _BYTE inside[1];
  FVector hubLocations[2];
  FVector airJackLocations[2];
  float distanceBetweenAirJacks;
  float distanceBetweenFrontHubAndRearAirJack;
  float distanceBetweenRearHubAndFrontAirJack;
  float distanceGrounds[2];
  float timeStarts[2];
  float timeStart;
  float airJackHeights[2];
  FTransform carMovementTransform;
  FTransform pitMovementTransform;
  float movementMult;
  float blendMovement;
  bool isOnSkate;
  bool isSecondaryZone;
  bool useAngleSpeed;
};

/* 69689 */
struct USkidmarks::SkidPoint
{
  FVector position;
  FVector forward;
  FVector normal;
};

/* 69690 */
struct USkidmarks::WheelInfo
{
  float width;
  FVector position;
  FVector normal;
  bool on;
  bool newSegment;
  USkidmarks::SkidPoint prev;
};

/* 8498 */
struct TArray<FLinearColor,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 66560 */
struct TArray<FProcMeshTangent,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 69691 */
struct __cppobj USkidmarks : USceneComponent
{
  int MaxSegments;
  UMaterial *Material;
  USkidmarks::WheelInfo wheelInfos[4];
  int segments;
  int currentSegment;
  TArray<FVector,FDefaultAllocator> positions;
  TArray<FVector,FDefaultAllocator> normals;
  TArray<FVector2D,FDefaultAllocator> uvs;
  TArray<FLinearColor,FDefaultAllocator> colors;
  TArray<FProcMeshTangent,FDefaultAllocator> tangents;
  TArray<int,FDefaultAllocator> indices;
  UProceduralMeshComponent *mesh;
};

/* 5389 */
struct __cppobj __declspec(align(8)) UCameraComponent : USceneComponent
{
  float OrthoNearClipPlane;
  float OrthoFarClipPlane;
  float AspectRatio;
  unsigned __int32 bConstrainAspectRatio : 1;
  unsigned __int32 bUseFieldOfViewForLOD : 1;
  unsigned __int32 bLockToHmd : 1;
  unsigned __int32 bUsePawnControlRotation : 1;
  unsigned __int32 bUseAdditiveOffset : 1;
  TEnumAsByte<enum ECameraProjectionMode::Type> ProjectionMode;
  float PostProcessBlendWeight;
  FPostProcessSettings PostProcessSettings;
  FTransform AdditiveOffset;
  float AdditiveFOVOffset;
  TArray<FPostProcessSettings,FDefaultAllocator> ExtraPostProcessBlends;
  TArray<float,FDefaultAllocator> ExtraPostProcessBlendWeights;
  unsigned __int32 bUseControllerViewRotation_DEPRECATED : 1;
};

/* 6178 */
struct TArray<USkeletalMeshComponent *,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 6179 */
struct TEnumAsByte<enum ParticleReplayState>
{
  char Value;
};

/* 6180 */
struct TArray<FParticleSysParam,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 6181 */
struct __cppobj TBaseDynamicMulticastDelegate<FWeakObjectPtr,void,FName,float,FVector,FVector> : TMulticastScriptDelegate<FWeakObjectPtr>
{
};

/* 6182 */
struct __cppobj FParticleSpawnSignature : TBaseDynamicMulticastDelegate<FWeakObjectPtr,void,FName,float,FVector,FVector>
{
};

/* 6183 */
struct __cppobj TBaseDynamicMulticastDelegate<FWeakObjectPtr,void,FName,float,int> : TMulticastScriptDelegate<FWeakObjectPtr>
{
};

/* 6184 */
struct __cppobj FParticleBurstSignature : TBaseDynamicMulticastDelegate<FWeakObjectPtr,void,FName,float,int>
{
};

/* 6185 */
struct __cppobj TBaseDynamicMulticastDelegate<FWeakObjectPtr,void,FName,float,int,FVector,FVector,FVector> : TMulticastScriptDelegate<FWeakObjectPtr>
{
};

/* 6186 */
struct __cppobj FParticleDeathSignature : TBaseDynamicMulticastDelegate<FWeakObjectPtr,void,FName,float,int,FVector,FVector,FVector>
{
};

/* 6187 */
struct __cppobj TBaseDynamicMulticastDelegate<FWeakObjectPtr,void,FName,float,int,FVector,FVector,FVector,FVector,FName,UPhysicalMaterial *> : TMulticastScriptDelegate<FWeakObjectPtr>
{
};

/* 6188 */
struct __cppobj FParticleCollisionSignature : TBaseDynamicMulticastDelegate<FWeakObjectPtr,void,FName,float,int,FVector,FVector,FVector,FVector,FName,UPhysicalMaterial *>
{
};

/* 6189 */
struct TArray<FMaterialRelevance,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 6190 */
struct TArray<UParticleSystemReplay *,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 6191 */
struct TArray<FParticleEventSpawnData,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 6192 */
struct TArray<FParticleEventDeathData,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 6193 */
struct TArray<FParticleEventCollideData,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 6194 */
struct TArray<FParticleEventBurstData,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 6195 */
struct TArray<FParticleEventKismetData,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 6196 */
struct __cppobj TBaseDynamicMulticastDelegate<FWeakObjectPtr,void,UParticleSystemComponent *> : TMulticastScriptDelegate<FWeakObjectPtr>
{
};

/* 6197 */
struct __cppobj FOnSystemFinished : TBaseDynamicMulticastDelegate<FWeakObjectPtr,void,UParticleSystemComponent *>
{
};

/* 6198 */
struct TArray<FParticleEmitterInstance *,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 6169 */
struct __cppobj __declspec(align(16)) UParticleSystemComponent : UPrimitiveComponent
{
  UParticleSystem *Template;
  TArray<UMaterialInterface *,FDefaultAllocator> EmitterMaterials;
  TArray<USkeletalMeshComponent *,FDefaultAllocator> SkelMeshComponents;
  __int8 bWasCompleted : 1;
  __int8 bSuppressSpawning : 1;
  __int8 bIsElligibleForAsyncTick : 1;
  __int8 bIsElligibleForAsyncTickComputed : 1;
  __int8 bWasDeactivated : 1;
  __int8 bWasActive : 1;
  __int8 bResetTriggered : 1;
  __int8 bResetOnDetach : 1;
  __int8 bUpdateOnDedicatedServer : 1;
  __int8 bJustRegistered : 1;
  __int8 bHasBeenActivated : 1;
  __int8 bAllowRecycling : 1;
  __int8 bAutoManageAttachment : 1;
  __int8 bIsManagingSignificance : 1;
  __int8 bWasManagingSignificance : 1;
  __int8 bWarmingUp : 1;
  __int8 bOverrideLODMethod : 1;
  __int8 bSkipUpdateDynamicDataDuringTick : 1;
  __int8 bForcedInActive : 1;
  __int8 bForceLODUpdateFromRenderer : 1;
  __int8 bIsViewRelevanceDirty : 1;
  __int8 bAutoDestroy : 1;
  __int8 bIsTransformDirty : 1;
  __int8 bDidAutoAttach : 1;
  __int8 bAsyncDataCopyIsValid : 1;
  __int8 bParallelRenderThreadUpdate : 1;
  __int8 bNeedsFinalize : 1;
  __int8 bAsyncWorkOutstanding : 1;
  _BYTE PoolingMethod[1];
  TEnumAsByte<enum ParticleSystemLODMethod> LODMethod;
  _BYTE RequiredSignificance[1];
  TEnumAsByte<enum ParticleReplayState> ReplayState;
  TArray<FParticleSysParam,FDefaultAllocator> InstanceParameters;
  FParticleSpawnSignature OnParticleSpawn;
  FParticleBurstSignature OnParticleBurst;
  FParticleDeathSignature OnParticleDeath;
  FParticleCollisionSignature OnParticleCollide;
  FVector OldPosition;
  FVector PartSysVelocity;
  float WarmupTime;
  float WarmupTickRate;
  int LODLevel;
  float SecondsBeforeInactive;
  float TimeSinceLastForceUpdateTransform;
  float MaxTimeBeforeForceUpdateTransform;
  float AccumTickTime;
  float LastSignificantTime;
  float AccumLODDistanceCheckTime;
  unsigned int LastCheckedDetailMode;
  TArray<FMaterialRelevance,FDefaultAllocator> CachedViewRelevanceFlags;
  TArray<UParticleSystemReplay *,FDefaultAllocator> ReplayClips;
  int ReplayClipIDNumber;
  int ReplayFrameIndex;
  float CustomTimeDilation;
  float EmitterDelay;
  TArray<FParticleEventSpawnData,FDefaultAllocator> SpawnEvents;
  TArray<FParticleEventDeathData,FDefaultAllocator> DeathEvents;
  TArray<FParticleEventCollideData,FDefaultAllocator> CollisionEvents;
  TArray<FParticleEventBurstData,FDefaultAllocator> BurstEvents;
  TArray<FParticleEventKismetData,FDefaultAllocator> KismetEvents;
  TWeakObjectPtr<USceneComponent,FWeakObjectPtr> AutoAttachParent;
  FName AutoAttachSocketName;
  _BYTE AutoAttachLocationRule[1];
  _BYTE AutoAttachRotationRule[1];
  _BYTE AutoAttachScaleRule[1];
  FVector SavedAutoAttachRelativeLocation;
  FRotator SavedAutoAttachRelativeRotation;
  FVector SavedAutoAttachRelativeScale3D;
  FFXSystemInterface *FXSystem;
  FOnSystemFinished OnSystemFinished;
  TArray<FParticleSysParam,FDefaultAllocator> AsyncInstanceParameters;
  TArray<FVector,FDefaultAllocator> PlayerLocations;
  TArray<float,FDefaultAllocator> PlayerLODDistanceFactor;
  FBoxSphereBounds AsyncBounds;
  FVector AsyncPartSysVelocity;
  FRenderCommandFence *ReleaseResourcesFence;
  TArray<FParticleEmitterInstance *,FDefaultAllocator> EmitterInstances;
  FTransform AsyncComponentToWorld;
  TRefCountPtr<FGraphEvent> AsyncWork;
  float DeltaTimeTick;
  int TotalActiveParticles;
  unsigned int NumSignificantEmitters;
  unsigned int TimeSinceLastTick;
};

/* 6502 */
struct TArray<bool,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 69692 */
struct __cppobj __declspec(align(16)) UAC2WaterSpray : UParticleSystemComponent
{
  UParticleSystemComponent *waterSprayDrops[2];
  UParticleSystemComponent *backSpray;
  UParticleSystemComponent *waterSprayDetail[4];
  UParticleSystemComponent *waterSprayFog;
  UCurveFloat *waterCurve;
  UCurveFloat *fogSpeedRateCurve;
  UCurveFloat *detailsSpeedRateCurve;
  UCurveVector *detailsSpeedVelMinCurve;
  UCurveVector *detailsSpeedVelMaxCurve;
  UCurveFloat *dropsSpeedRateCurve;
  UCurveFloat *chaseSpeedRateCurve;
  UCurveFloat *fogChaseFocusedVelMinCurve;
  UCurveFloat *fogChaseFocusedVelMaxCurve;
  UCurveFloat *fogChaseFocusedAlphaLifeCurve;
  UCurveFloat *fogChaseNotFocusedRateCurve;
  UCurveFloat *fogChaseNotFocusedVelMinCurve;
  UCurveFloat *fogChaseNotFocusedVelMaxCurve;
  UCurveFloat *fogChaseNotFocusedAlphaLifeCurve;
  TArray<bool,FDefaultAllocator> bdetActive;
  TArray<bool,FDefaultAllocator> bdropsActive;
  bool bIsFog;
  bool bIsSpray;
  bool bIsChase;
};

/* 66890 */
struct __cppobj UAC2TyreSmoke : UParticleSystemComponent
{
  TArray<UParticleSystemComponent *,FDefaultAllocator> smoke;
  TArray<UParticleSystemComponent *,FDefaultAllocator> dirt;
  TArray<UParticleSystemComponent *,FDefaultAllocator> stone;
  UCurveFloat *rate1Curve;
  UCurveFloat *rate2Curve;
  UCurveFloat *smokeRateCurve;
  UCurveFloat *stonesRateCurve;
  UCurveFloat *smokeBuildCurve;
  UCurveFloat *smokeCoolCurve;
  TArray<bool,FDefaultAllocator> bsActive;
  TArray<bool,FDefaultAllocator> bdActive;
  TArray<float,FDefaultAllocator> smokeBuild;
};

/* 31485 */
struct __cppobj __declspec(align(8)) UCurveLinearColor : UCurveBase
{
  FRichCurve FloatCurves[4];
  float AdjustHue;
  float AdjustSaturation;
  float AdjustBrightness;
  float AdjustBrightnessCurve;
  float AdjustVibrance;
  float AdjustMinAlpha;
  float AdjustMaxAlpha;
};

/* 4938 */
struct __cppobj UTexture2D : UTexture
{
  int StreamingIndex;
  int LevelIndex;
  int FirstResourceMemMip;
  __int8 bTemporarilyDisableStreaming : 1;
  __int8 bIsStreamable : 1;
  __int8 bHasStreamingUpdatePending : 1;
  __int8 bForceMiplevelsToBeResident : 1;
  __int8 bIgnoreStreamingMipBias : 1;
  __int8 bGlobalForceMipLevelsToBeResident : 1;
  TEnumAsByte<enum TextureAddress> AddressX;
  TEnumAsByte<enum TextureAddress> AddressY;
  FIntPoint ImportedSize;
  long double ForceMipLevelsToBeResidentTimestamp;
  FTexturePlatformData *PlatformData;
  FTexture2DResourceMem *ResourceMem;
  FTexture2DUpdate *PendingUpdate;
};

/* 69695 */
struct __cppobj TBaseDynamicMulticastDelegate<FWeakObjectPtr,void,FLapCarRating const &,FCornerSectionCarRating const &> : TMulticastScriptDelegate<FWeakObjectPtr>
{
};

/* 69696 */
struct __cppobj FCarAvatarRatingCalculatorCornerSectionCompleted : TBaseDynamicMulticastDelegate<FWeakObjectPtr,void,FLapCarRating const &,FCornerSectionCarRating const &>
{
};

/* 69697 */
struct TSparseArray<TSetElement<TTuple<int,FCircuitSectionDefinition> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<80,8> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 69698 */
struct __declspec(align(8)) TSet<TTuple<int,FCircuitSectionDefinition>,TDefaultMapHashableKeyFuncs<int,FCircuitSectionDefinition,0>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<TTuple<int,FCircuitSectionDefinition> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 69699 */
struct TMapBase<int,FCircuitSectionDefinition,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<int,FCircuitSectionDefinition,0> >
{
  TSet<TTuple<int,FCircuitSectionDefinition>,TDefaultMapHashableKeyFuncs<int,FCircuitSectionDefinition,0>,FDefaultSetAllocator> Pairs;
};

/* 69700 */
struct __cppobj TSortableMapBase<int,FCircuitSectionDefinition,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<int,FCircuitSectionDefinition,0> > : TMapBase<int,FCircuitSectionDefinition,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<int,FCircuitSectionDefinition,0> >
{
};

/* 69701 */
struct __cppobj TMap<int,FCircuitSectionDefinition,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<int,FCircuitSectionDefinition,0> > : TSortableMapBase<int,FCircuitSectionDefinition,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<int,FCircuitSectionDefinition,0> >
{
};

/* 69702 */
struct TArray<FLapCarRating,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 69703 */
struct FRealtimeCarRatingState
{
  float loadDistribution;
  float slipFront;
  float slipRear;
  float lastSplinePos;
  float inputThrottle;
  float inputBrake;
  float kph;
  FDateTime lastABSActivity;
  float uiCurrentNdSlip;
  bool isInNdSlipActionTime;
  float steeringAngle;
  float adjustedSteeringAngle;
};

/* 69704 */
struct FStateCarControlRating
{
  float ndSlipThreshold[15];
  float ndSlipTimeSpent[15];
  float actionTime;
  float totalTime;
  float throttleTime;
  float brakeTime;
  float trailBrakeTime;
  float controlledDriftTime;
  float outOfControlTime;
};

/* 69705 */
struct __cppobj __declspec(align(8)) UCarAvatarRatingCalculator : UObject
{
  FCarAvatarRatingCalculatorCornerSectionCompleted OnCornerCompletedEvent;
  int CircuitId;
  unsigned __int16 PlayerCarIndex;
  unsigned __int16 PlayerDriverIndex;
  TMap<int,FCircuitSectionDefinition,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<int,FCircuitSectionDefinition,0> > SectionDefinitions;
  UOnlineServices *OnlineServices;
  FRatingReport currentRating;
  FCarInfo CarInfo;
  UCarData *CarData;
  TArray<FLapCarRating,FDefaultAllocator> LapRatings;
  FRealtimeCarRatingState CurrentRealtimeState;
  FStateCarControlRating CurrentSectionCarControlState;
  FStateCarControlRating LastSectionCarControlState;
  int CornerSectionDefinitionCount;
  int ValidLapsForNextTrackMedal;
  bool IsHotlapOutlap;
  int SessionPostRacePenalty;
  bool UseRaceDirectorPenalties;
};

/* 4626 */
struct __cppobj TWeakObjectPtr<USkinnedMeshComponent,FWeakObjectPtr> : FWeakObjectPtr
{
};

/* 4557 */
struct TArray<FTransform,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 4627 */
struct TArray<TWeakObjectPtr<USkinnedMeshComponent,FWeakObjectPtr>,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 4629 */
struct TArray<FActiveMorphTarget,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 4631 */
struct TArray<FSkelMeshComponentLODInfo,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 4632 */
struct TEnumAsByte<enum EMeshComponentUpdateFlag::Type>
{
  char Value;
};

/* 4660 */
struct __cppobj TBaseDelegate<TTypeWrapper<void>,FAnimUpdateRateParameters *> : FDelegateBase
{
};

/* 4661 */
struct __cppobj TBaseDelegate<void,FAnimUpdateRateParameters *> : TBaseDelegate<TTypeWrapper<void>,FAnimUpdateRateParameters *>
{
};

/* 4668 */
struct __cppobj USkinnedMeshComponent : UMeshComponent
{
  TWeakObjectPtr<USkinnedMeshComponent,FWeakObjectPtr> MasterPoseComponent;
  TArray<FTransform,FDefaultAllocator> ComponentSpaceTransformsArray[2];
  TArray<unsigned char,FDefaultAllocator> PreviousBoneVisibilityStates;
  TArray<FTransform,FDefaultAllocator> PreviousComponentSpaceTransformsArray;
  bool bHasValidBoneTransform;
  int CurrentEditableComponentTransforms;
  int CurrentReadComponentTransforms;
  unsigned int CurrentBoneTransformRevisionNumber;
  TArray<TWeakObjectPtr<USkinnedMeshComponent,FWeakObjectPtr>,FDefaultAllocator> SlavePoseComponents;
  TArray<int,FDefaultAllocator> MasterBoneMap;
  int MasterBoneMapCacheCount;
  TMap<FName,FName,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,FName,0> > SocketOverrideLookup;
  FSkelMeshRefPoseOverride *RefPoseOverride;
  TArray<FActiveMorphTarget,FDefaultAllocator> ActiveMorphTargets;
  TArray<float,FDefaultAllocator> MorphTargetWeights;
  UPhysicsAsset *PhysicsAssetOverride;
  int ForcedLodModel;
  bool bOverrideMinLod;
  int MinLodModel;
  int PredictedLODLevel;
  int OldPredictedLODLevel;
  float MaxDistanceFactor;
  float StreamingDistanceMultiplier;
  TArray<FSkelMeshComponentLODInfo,FDefaultAllocator> LODInfo;
  TArray<unsigned char,FDefaultAllocator> BoneVisibilityStates;
  TEnumAsByte<enum EMeshComponentUpdateFlag::Type> MeshComponentUpdateFlag;
  __int8 bUseBoundsFromMasterPoseComponent : 1;
  __int8 bForceWireframe : 1;
  __int8 bDisplayBones_DEPRECATED : 1;
  __int8 bDisableMorphTarget : 1;
  __int8 bHideSkin : 1;
  __int8 bPerBoneMotionBlur : 1;
  __int8 bComponentUseFixedSkelBounds : 1;
  __int8 bConsiderAllBodiesForBounds : 1;
  unsigned __int32 bSyncAttachParentLOD : 1;
  __int8 bCanHighlightSelectedSections : 1;
  __int8 bRecentlyRendered : 1;
  __int8 bCastCapsuleDirectShadow : 1;
  __int8 bCastCapsuleIndirectShadow : 1;
  __int8 bCPUSkinning : 1;
  __int8 bEnableUpdateRateOptimizations : 1;
  __int8 bDisplayDebugUpdateRateOptimizations : 1;
  __int8 bRenderStatic : 1;
  __int8 bDoubleBufferedComponentSpaceTransforms : 1;
  __int8 bNeedToFlipSpaceBaseBuffers : 1;
  __int8 bCachedLocalBoundsUpToDate : 1;
  __int8 bForceMeshObjectUpdate : 1;
  FSkeletalMeshObject *MeshObject;
  float CapsuleIndirectShadowMinVisibility;
  FBoxSphereBounds CachedLocalBounds;
  TBaseDelegate<void,FAnimUpdateRateParameters *> OnAnimUpdateRateParamsCreated;
  FAnimUpdateRateParameters *AnimUpdateRateParams;
};

/* 4542 */
struct IInterface_CollisionDataProvider
{
  IInterface_CollisionDataProviderVtbl *vfptr;
};

/* 4619 */
struct TSubclassOf<UAnimInstance>
{
  UClass *Class;
};

/* 4837 */
struct TArray<UAnimInstance *,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 4838 */
struct __declspec(align(8)) FSingleAnimationPlayData
{
  UAnimationAsset *AnimToPlay;
  unsigned __int32 bSavedLooping : 1;
  unsigned __int32 bSavedPlaying : 1;
  float SavedPosition;
  float SavedPlayRate;
};

/* 4817 */
struct TArray<FCurveElement,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 4818 */
struct __declspec(align(8)) FBaseBlendedCurve<FDefaultAllocator>
{
  TArray<FCurveElement,FDefaultAllocator> Elements;
  TArray<unsigned short,FDefaultAllocator> *UIDToArrayIndexLUT;
  unsigned __int16 NumValidCurveCount;
  bool bInitialized;
};

/* 4819 */
struct __cppobj FBlendedHeapCurve : FBaseBlendedCurve<FDefaultAllocator>
{
};

/* 4839 */
struct TEnumAsByte<enum EKinematicBonesUpdateToPhysics::Type>
{
  char Value;
};

/* 4840 */
struct TEnumAsByte<enum EPhysicsTransformUpdateMode::Type>
{
  char Value;
};

/* 4841 */
struct TEnumAsByte<enum EAnimationMode::Type>
{
  char Value;
};

/* 4843 */
struct __cppobj FConstraintBrokenSignature : TBaseDynamicMulticastDelegate<FWeakObjectPtr,void,int>
{
};

/* 4844 */
struct TSubclassOf<UClothingSimulationFactory>
{
  UClass *Class;
};

/* 4845 */
struct TArray<USkeletalMeshComponent::FPendingRadialForces,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 4846 */
struct $429CEDF15ACEB1CA4223F1B6C88F93AA
{
  int BodyIndex;
  FTransform TransformToRoot;
};

/* 4848 */
struct TArray<FConstraintInstance *,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 4849 */
struct __cppobj FSkeletalMeshComponentClothTickFunction : FTickFunction
{
  USkeletalMeshComponent *Target;
};

/* 4860 */
struct TArray<USkeletalMeshComponent::FClothCollisionSource,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 4651 */
struct TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<160,16> >,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 4652 */
struct TSparseArray<TSetElement<TTuple<int,FClothSimulData> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<160,16> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 4653 */
struct __declspec(align(8)) TSet<TTuple<int,FClothSimulData>,TDefaultMapHashableKeyFuncs<int,FClothSimulData,0>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<TTuple<int,FClothSimulData> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 4654 */
struct TMapBase<int,FClothSimulData,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<int,FClothSimulData,0> >
{
  TSet<TTuple<int,FClothSimulData>,TDefaultMapHashableKeyFuncs<int,FClothSimulData,0>,FDefaultSetAllocator> Pairs;
};

/* 4655 */
struct __cppobj TSortableMapBase<int,FClothSimulData,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<int,FClothSimulData,0> > : TMapBase<int,FClothSimulData,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<int,FClothSimulData,0> >
{
};

/* 4656 */
struct __cppobj TMap<int,FClothSimulData,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<int,FClothSimulData,0> > : TSortableMapBase<int,FClothSimulData,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<int,FClothSimulData,0> >
{
};

/* 4861 */
struct __cppobj FOnAnimInitialized : TBaseDynamicMulticastDelegate<FWeakObjectPtr,void>
{
};

/* 4862 */
struct __cppobj FSkeletalMeshComponentEndPhysicsTickFunction : FTickFunction
{
  USkeletalMeshComponent *Target;
};

/* 4863 */
struct FAnimationEvaluationContext
{
  UAnimInstance *AnimInstance;
  USkeletalMesh *SkeletalMesh;
  TArray<FTransform,FDefaultAllocator> ComponentSpaceTransforms;
  TArray<FTransform,FDefaultAllocator> BoneSpaceTransforms;
  FVector RootBoneTranslation;
  bool bDoInterpolation;
  bool bDoEvaluation;
  bool bDuplicateToCacheBones;
  bool bDuplicateToCacheCurve;
  FBlendedHeapCurve Curve;
};

/* 4813 */
struct __cppobj USkeletalMeshComponent : USkinnedMeshComponent, IInterface_CollisionDataProvider
{
  UAnimBlueprintGeneratedClass *AnimBlueprintGeneratedClass;
  TSubclassOf<UAnimInstance> AnimClass;
  UAnimInstance *AnimScriptInstance;
  TArray<UAnimInstance *,FDefaultAllocator> SubInstances;
  UAnimInstance *PostProcessAnimInstance;
  bool bDisablePostProcessBlueprint;
  FSingleAnimationPlayData AnimationData;
  TArray<FTransform,FDefaultAllocator> BoneSpaceTransforms;
  FVector RootBoneTranslation;
  FVector LineCheckBoundsScale;
  FBlendedHeapCurve AnimCurves;
  TArray<FTransform,FDefaultAllocator> CachedBoneSpaceTransforms;
  TArray<FTransform,FDefaultAllocator> CachedComponentSpaceTransforms;
  FBlendedHeapCurve CachedCurve;
  float GlobalAnimRateScale;
  _BYTE UseAsyncScene[1];
  TEnumAsByte<enum EKinematicBonesUpdateToPhysics::Type> KinematicBonesUpdateType;
  TEnumAsByte<enum EPhysicsTransformUpdateMode::Type> PhysicsTransformUpdateMode;
  _BYTE ClothTeleportMode[1];
  TEnumAsByte<enum EAnimationMode::Type> AnimationMode;
  _BYTE PendingTeleportType[1];
  __int8 bLocalSpaceKinematics : 1;
  __int8 bHasValidBodies : 1;
  __int8 bDeferredKinematicUpdate : 1;
  __int8 bBlendPhysics : 1;
  __int8 bEnablePhysicsOnDedicatedServer : 1;
  __int8 bUpdateJointsFromAnimation : 1;
  __int8 bDisableClothSimulation : 1;
  __int8 bAllowAnimCurveEvaluation : 1;
  __int8 bDisableAnimCurves_DEPRECATED : 1;
  __int8 bBindClothToMasterComponent : 1;
  __int8 bPendingClothTransformUpdate : 1;
  __int8 bPendingClothCollisionUpdate : 1;
  __int8 bCollideWithEnvironment : 1;
  __int8 bCollideWithAttachedChildren : 1;
  __int8 bLocalSpaceSimulation : 1;
  __int8 bResetAfterTeleport : 1;
  __int8 bPrevDisableClothSimulation : 1;
  __int8 bDeferMovementFromSceneQueries : 1;
  __int8 bNoSkeletonUpdate : 1;
  __int8 bPauseAnims : 1;
  __int8 bUseRefPoseOnInitAnim : 1;
  __int8 bEnablePerPolyCollision : 1;
  __int8 bForceRefpose : 1;
  __int8 bOnlyAllowAutonomousTickPose : 1;
  __int8 bIsAutonomousTickPose : 1;
  __int8 bOldForceRefPose : 1;
  __int8 bShowPrePhysBones : 1;
  __int8 bRequiredBonesUpToDate : 1;
  __int8 bAnimTreeInitialised : 1;
  __int8 bIncludeComponentLocationIntoBounds : 1;
  __int8 bEnableLineCheckWithBounds : 1;
  __int8 bClothingSimulationSuspended : 1;
  __int8 bNeedsQueuedAnimEventsDispatched : 1;
  __int8 bPostEvaluatingAnimation : 1;
  TArray<FName,FDefaultAllocator> DisallowedAnimCurves;
  unsigned __int16 CachedAnimCurveUidVersion;
  float ClothBlendWeight;
  float EdgeStiffness;
  float BendingStiffness;
  float AreaStiffness;
  float VolumeStiffness;
  float StrainLimitingStiffness;
  float ShapeTargetStiffness;
  bool bUseBendingElements;
  bool bUseTetrahedralConstraints;
  bool bUseThinShellVolumeConstraints;
  bool bUseSelfCollisions;
  bool bUseContinuousCollisionDetection;
  UBodySetup *BodySetup;
  int RagdollAggregateThreshold;
  float ClothMaxDistanceScale;
  FConstraintBrokenSignature OnConstraintBroken;
  TSubclassOf<UClothingSimulationFactory> ClothingSimulationFactory;
  TArray<USkeletalMeshComponent::FPendingRadialForces,FDefaultAllocator> PendingRadialForces;
  $429CEDF15ACEB1CA4223F1B6C88F93AA RootBodyData;
  TArray<unsigned short,FDefaultAllocator> RequiredBones;
  TArray<unsigned short,FDefaultAllocator> FillComponentSpaceTransformsRequiredBones;
  TArray<FBodyInstance *,FDefaultAllocator> Bodies;
  TArray<FConstraintInstance *,FDefaultAllocator> Constraints;
  physx::PxAggregate *Aggregate;
  FSkeletalMeshComponentClothTickFunction ClothTickFunction;
  float TeleportDistanceThreshold;
  float TeleportRotationThreshold;
  float ClothTeleportCosineThresholdInRad;
  float ClothTeleportDistThresholdSquared;
  unsigned int LastPoseTickFrame;
  __declspec(align(16)) FMatrix PrevRootBoneMatrix;
  IClothingSimulation *ClothingSimulation;
  IClothingSimulationContext *ClothingSimulationContext;
  UClothingSimulationInteractor *ClothingInteractor;
  TArray<USkeletalMeshComponent::FClothCollisionSource,FDefaultAllocator> ClothCollisionSources;
  TRefCountPtr<FGraphEvent> ParallelClothTask;
  TMap<int,FClothSimulData,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<int,FClothSimulData,0> > CurrentSimulationData_GameThread;
  TMap<FName,float,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,float,0> > MorphTargetCurves;
  FOnAnimInitialized OnAnimInitialized;
  FSkeletalMeshComponentEndPhysicsTickFunction EndPhysicsTickFunction;
  TRefCountPtr<FGraphEvent> ParallelAnimationEvaluationTask;
  TRefCountPtr<FGraphEvent> ParallelBlendPhysicsCompletionTask;
  FAnimationEvaluationContext AnimEvaluationContext;
  TMulticastDelegate<void> OnSkelMeshPhysicsCreated;
  TMulticastDelegate<void> OnSkelMeshPhysicsTeleported;
};

/* 69708 */
struct __cppobj __declspec(align(16)) UAcLumirankComponent : UStaticMeshComponent
{
  bool bIsTwoDigit;
  FLinearColor Color_Pro;
  FLinearColor Color_ProAm;
  FLinearColor Color_Am;
  FLinearColor Color_Cup;
  float BlinkTime;
  float Emissive;
  float NameBlinkTime;
  float FormationPulseTime;
  float FormationMinEmissive;
  float FormationMaxEmissive;
  AAcRaceGameMode *GameMode;
  ACarAvatar *carAvatar;
  UMaterialInstanceDynamic *LumirankMaterial;
  bool bIsInFirstPosition;
  bool bIsInFormationPhase;
  float CurrentBlinkTime;
  float CurrentNameTime;
  bool bIsNameOn;
  bool bIsPulseUp;
  FVector2D NameDigit0;
  FVector2D NameDigit1;
  FVector2D NameDigit2;
  FVector2D PosDigit0;
  FVector2D PosDigit1;
  FVector2D PosDigit2;
};

/* 69709 */
struct __declspec(align(16)) FPSGlassDropletsConstParams
{
  float EvapFactor;
  float ExtForceMult;
  float GravForceMult;
  float MassEnterPerc;
  float MassLeavePerc;
  float WiperAccumMult;
};

/* 69710 */
struct FPSGlassDropletsVarParams
{
  FMatrix WorldMatrix;
  FVector ExtForce;
  __declspec(align(8)) FVector GForce;
  float DeltaTime;
  float WiperMinPos;
  float WiperMaxPos;
  float RainDensity;
};

/* 4084 */
struct TRefCountPtr<FRHIShaderResourceView>
{
  FRHIShaderResourceView *Reference;
};

/* 69711 */
struct __declspec(align(16)) FGlassDroplets
{
  int TexSize;
  bool bIsPixelShaderExecuting;
  bool bMustRegenerateSRV;
  bool bIsUnloading;
  FPSGlassDropletsConstParams ConstantParameters;
  FPSGlassDropletsVarParams VariableParameters;
  ERHIFeatureLevel::Type FeatureLevel;
  UTextureRenderTarget2D *GridRT;
  UTextureRenderTarget2D *NormalsRT;
  UTexture2D *AreaMask;
  UTexture2D *NormalsMask;
  TRefCountPtr<FRHITexture> TextureRef;
  TRefCountPtr<FRHIShaderResourceView> TextureParameterSRV;
  UTexture2D *TexDropletsGrid;
  UTexture2D *TexNewDroplets;
  float PreviousWiperPos;
  float CurrentWiperPos;
  float RainDensity;
  float EvapFactor;
  float GForceMult;
  int MinRandomDrops;
  int MaxRandomDrops;
  bool m_bNewDropletsDirty;
  FColor *m_pNewDropsBuffer;
  TArray<FVector2D,FDefaultAllocator> m_arrCoords;
  bool m_bFirstCallAfterInit;
};

/* 69712 */
struct __cppobj __declspec(align(16)) UAcGlassDropletsComponent : UActorComponent
{
  bool bEnabled;
  FString MeshTag;
  UMaterialInterface *Material;
  FName MaterialSlotName;
  bool bInternalView;
  int MinRandomDrops;
  int MaxRandomDrops;
  UCurveFloat *RainIntensityNewDropsCurve;
  float EvaporationFactor;
  float EvaporationMaxTime;
  float GForceMultiplier;
  float VelocityMultiplier;
  float GravityMultiplier;
  float WiperAccumMultiplier;
  float MassLeavePerc;
  float MassEnterPerc;
  bool bFrameLimited;
  int FPS;
  UTexture2D *AreaMask;
  UTexture2D *NormalsMask;
  UTextureRenderTarget2D *RTGrid;
  UTextureRenderTarget2D *RTNormals;
  UTexture2D *ExtDropsMask;
  UTexture2D *ExtStreaksMask;
  bool bLogEnabled;
  UTexture2D *DRSTexture;
  UCurveLinearColor *DRSCurveBasedOnSunElev;
  UCurveLinearColor *DRSCurveBasedOnCloudDensity;
  float DirtStrength;
  float ReflectionStrength;
  float ScratchesStrength;
  float SunBehindValue;
  AAcRaceGameMode *RaceGameMode;
  FGlassDroplets GlassDroplets;
  UMaterialInstanceDynamic *MatDynamic;
  ACarAvatar *CarAvatar;
  UMeshComponent *MeshComp;
  UMeshComponent *SteerMeshComp;
  UAcCarAnimations *AnimComp;
  ATrackAvatar *TrackAvatar;
  ADirectionalLight *pSunLight;
  float AccumTime;
  bool m_bRainStopped;
  float m_timeFromRainStopped;
  bool m_bTargetsAreDirty;
  bool m_bHasEverRained;
  bool bShaderReadyToRun;
  float PreviousWiperPos;
  float WetnessWhenRainStops;
  float Wetness;
  FVector SunDir;
  FLinearColor DRSValues;
  FLinearColor DRSValues2;
  bool bIsInitialized;
};

/* 6876 */
struct TArray<FEngineShowFlagsSetting,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 5102 */
struct FEngineShowFlags
{
  unsigned __int32 PostProcessing : 1;
  unsigned __int32 Bloom : 1;
  unsigned __int32 AntiAliasing : 1;
  unsigned __int32 TemporalAA : 1;
  unsigned __int32 AmbientCubemap : 1;
  unsigned __int32 EyeAdaptation : 1;
  unsigned __int32 GlobalIllumination : 1;
  unsigned __int32 AmbientOcclusion : 1;
  unsigned __int32 Decals : 1;
  unsigned __int32 OnScreenDebug : 1;
  unsigned __int32 PointLights : 1;
  unsigned __int32 SpotLights : 1;
  unsigned __int32 RectLights : 1;
  unsigned __int32 MotionBlur : 1;
  unsigned __int32 CameraInterpolation : 1;
  unsigned __int32 SeparateTranslucency : 1;
  unsigned __int32 ScreenPercentage : 1;
  unsigned __int32 ReflectionEnvironment : 1;
  unsigned __int32 Specular : 1;
  unsigned __int32 ScreenSpaceReflections : 1;
  unsigned __int32 ContactShadows : 1;
  unsigned __int32 RayTracedDistanceFieldShadows : 1;
  unsigned __int32 CapsuleShadows : 1;
  unsigned __int32 VolumetricLightmap : 1;
  unsigned __int32 IndirectLightingCache : 1;
  unsigned __int32 TexturedLightProfiles : 1;
  unsigned __int32 LightFunctions : 1;
  unsigned __int32 InstancedStaticMeshes : 1;
  unsigned __int32 InstancedFoliage : 1;
  unsigned __int32 InstancedGrass : 1;
  unsigned __int32 DynamicShadows : 1;
  unsigned __int32 Particles : 1;
  unsigned __int32 SkeletalMeshes : 1;
  unsigned __int32 Translucency : 1;
  unsigned __int32 LOD : 1;
  unsigned __int32 Lighting : 1;
  unsigned __int32 DeferredLighting : 1;
  unsigned __int32 StaticMeshes : 1;
  unsigned __int32 Landscape : 1;
  unsigned __int32 Fog : 1;
  unsigned __int32 Game : 1;
  unsigned __int32 BSP : 1;
  unsigned __int32 LightShafts : 1;
  unsigned __int32 AtmosphericFog : 1;
  unsigned __int32 TextRender : 1;
  unsigned __int32 Rendering : 1;
  unsigned __int32 HMDDistortion : 1;
  unsigned __int32 StereoRendering : 1;
  unsigned __int32 DistanceCulledPrimitives : 1;
  unsigned __int32 SkyLighting : 1;
  unsigned __int32 Paper2DSprites : 1;
  unsigned __int32 ScreenSpaceAO : 1;
  unsigned __int32 DistanceFieldAO : 1;
  unsigned __int32 VolumetricFog : 1;
  unsigned __int32 WidgetComponents : 1;
  unsigned __int32 MediaPlanes : 1;
};

/* 300 */
enum EStereoscopicPass
{
  eSSP_FULL = 0x0,
  eSSP_LEFT_EYE = 0x1,
  eSSP_RIGHT_EYE = 0x2,
  eSSP_MONOSCOPIC_EYE = 0x3,
};

/* 4337 */
struct TArray<void *,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 6877 */
struct TIndirectArray<FSceneViewStateReference,FDefaultAllocator>
{
  TArray<void *,FDefaultAllocator> Array;
};

/* 6878 */
struct __cppobj USceneCaptureComponent : USceneComponent
{
  TArray<TWeakObjectPtr<UPrimitiveComponent,FWeakObjectPtr>,FDefaultAllocator> HiddenComponents;
  TArray<AActor *,FDefaultAllocator> HiddenActors;
  TArray<TWeakObjectPtr<UPrimitiveComponent,FWeakObjectPtr>,FDefaultAllocator> ShowOnlyComponents;
  TArray<AActor *,FDefaultAllocator> ShowOnlyActors;
  bool bCaptureEveryFrame;
  bool bCaptureOnMovement;
  bool bAlwaysPersistRenderingState;
  float LODDistanceFactor;
  float MaxViewDistanceOverride;
  int CaptureSortPriority;
  TArray<FEngineShowFlagsSetting,FDefaultAllocator> ShowFlagSettings;
  FEngineShowFlags ShowFlags;
  EStereoscopicPass CaptureStereoPass;
  FString ProfilingEventName;
  TIndirectArray<FSceneViewStateReference,FDefaultAllocator> ViewStates;
};

/* 6887 */
struct TEnumAsByte<enum ESceneCaptureSource>
{
  char Value;
};

/* 6888 */
struct TEnumAsByte<enum ESceneCaptureCompositeMode>
{
  char Value;
};

/* 6889 */
struct __cppobj USceneCaptureComponent2D : USceneCaptureComponent
{
  TEnumAsByte<enum ECameraProjectionMode::Type> ProjectionType;
  float FOVAngle;
  float OrthoWidth;
  UTextureRenderTarget2D *TextureTarget;
  TEnumAsByte<enum ESceneCaptureSource> CaptureSource;
  TEnumAsByte<enum ESceneCaptureCompositeMode> CompositeMode;
  FPostProcessSettings PostProcessSettings;
  float PostProcessBlendWeight;
  bool bUseCustomProjectionMatrix;
  __declspec(align(16)) FMatrix CustomProjectionMatrix;
  bool bEnableClipPlane;
  FVector ClipPlaneBase;
  FVector ClipPlaneNormal;
  unsigned __int32 bCameraCutThisFrame : 1;
};

/* 69440 */
struct __cppobj std::_Arg_types<FCornerSectionCarResult const &>
{
};

/* 69445 */
union std::_Func_class<void,FCornerSectionCarResult const &>::_Storage
{
  long double _Dummy1;
  char _Dummy2[56];
  std::_Func_base<void,FCornerSectionCarResult const &> *_Ptrs[8];
};

/* 69446 */
struct __cppobj std::_Func_class<void,FCornerSectionCarResult const &> : std::_Arg_types<FCornerSectionCarResult const &>
{
  std::_Func_class<void,FCornerSectionCarResult const &>::_Storage _Mystorage;
};

/* 69447 */
struct __cppobj std::function<void __cdecl(FCornerSectionCarResult const &)> : std::_Func_class<void,FCornerSectionCarResult const &>
{
};

/* 69448 */
struct std::pair<void *,std::function<void __cdecl(FCornerSectionCarResult const &)> >
{
  void *first;
  std::function<void __cdecl(FCornerSectionCarResult const &)> second;
};

/* 69488 */
struct __cppobj std::allocator<std::pair<void *,std::function<void __cdecl(int const &)> > >
{
};

/* 69496 */
struct __cppobj std::_Vector_val<std::_Simple_types<std::pair<void *,std::function<void __cdecl(int const &)> > > > : std::_Container_base0
{
  std::pair<void *,std::function<void __cdecl(int const &)> > *_Myfirst;
  std::pair<void *,std::function<void __cdecl(int const &)> > *_Mylast;
  std::pair<void *,std::function<void __cdecl(int const &)> > *_Myend;
};

/* 69497 */
struct __cppobj std::_Compressed_pair<std::allocator<std::pair<void *,std::function<void __cdecl(int const &)> > >,std::_Vector_val<std::_Simple_types<std::pair<void *,std::function<void __cdecl(int const &)> > > >,1> : std::allocator<std::pair<void *,std::function<void __cdecl(int const &)> > >
{
  std::_Vector_val<std::_Simple_types<std::pair<void *,std::function<void __cdecl(int const &)> > > > _Myval2;
};

/* 69498 */
struct std::_Vector_alloc<std::_Vec_base_types<std::pair<void *,std::function<void __cdecl(int const &)> >,std::allocator<std::pair<void *,std::function<void __cdecl(int const &)> > > > >
{
  std::_Compressed_pair<std::allocator<std::pair<void *,std::function<void __cdecl(int const &)> > >,std::_Vector_val<std::_Simple_types<std::pair<void *,std::function<void __cdecl(int const &)> > > >,1> _Mypair;
};

/* 69499 */
struct __cppobj std::vector<std::pair<void *,std::function<void __cdecl(int const &)> >,std::allocator<std::pair<void *,std::function<void __cdecl(int const &)> > > > : std::_Vector_alloc<std::_Vec_base_types<std::pair<void *,std::function<void __cdecl(int const &)> >,std::allocator<std::pair<void *,std::function<void __cdecl(int const &)> > > > >
{
};

/* 69500 */
struct Event<int>
{
  std::vector<std::pair<void *,std::function<void __cdecl(int const &)> >,std::allocator<std::pair<void *,std::function<void __cdecl(int const &)> > > > handlers;
};

/* 69501 */
struct TSparseArray<TSetElement<TTuple<enum EAudioCommsDataType,TArray<FAudioCommsData *,FDefaultAllocator> > >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<32,8> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 69502 */
struct __declspec(align(8)) TSet<TTuple<enum EAudioCommsDataType,TArray<FAudioCommsData *,FDefaultAllocator> >,TDefaultMapHashableKeyFuncs<enum EAudioCommsDataType,TArray<FAudioCommsData *,FDefaultAllocator>,0>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<TTuple<enum EAudioCommsDataType,TArray<FAudioCommsData *,FDefaultAllocator> > >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 69503 */
struct TMapBase<enum EAudioCommsDataType,TArray<FAudioCommsData *,FDefaultAllocator>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<enum EAudioCommsDataType,TArray<FAudioCommsData *,FDefaultAllocator>,0> >
{
  TSet<TTuple<enum EAudioCommsDataType,TArray<FAudioCommsData *,FDefaultAllocator> >,TDefaultMapHashableKeyFuncs<enum EAudioCommsDataType,TArray<FAudioCommsData *,FDefaultAllocator>,0>,FDefaultSetAllocator> Pairs;
};

/* 69504 */
struct __cppobj TSortableMapBase<enum EAudioCommsDataType,TArray<FAudioCommsData *,FDefaultAllocator>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<enum EAudioCommsDataType,TArray<FAudioCommsData *,FDefaultAllocator>,0> > : TMapBase<enum EAudioCommsDataType,TArray<FAudioCommsData *,FDefaultAllocator>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<enum EAudioCommsDataType,TArray<FAudioCommsData *,FDefaultAllocator>,0> >
{
};

/* 69505 */
struct __cppobj TMap<enum EAudioCommsDataType,TArray<FAudioCommsData *,FDefaultAllocator>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<enum EAudioCommsDataType,TArray<FAudioCommsData *,FDefaultAllocator>,0> > : TSortableMapBase<enum EAudioCommsDataType,TArray<FAudioCommsData *,FDefaultAllocator>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<enum EAudioCommsDataType,TArray<FAudioCommsData *,FDefaultAllocator>,0> >
{
};

/* 69506 */
struct TArray<FAudioCommsData *,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 69507 */
struct __cppobj __declspec(align(8)) UAudioComms : UObject
{
  Event<int> onEventEnd;
  TMap<enum EAudioCommsDataType,TArray<FAudioCommsData *,FDefaultAllocator>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<enum EAudioCommsDataType,TArray<FAudioCommsData *,FDefaultAllocator>,0> > mapComms;
  TArray<FAudioCommsData *,FDefaultAllocator> commsPlaying;
  int audioEventCounter;
};

/* 3913 */
struct TArray<FObjectImport,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 3914 */
struct TArray<FObjectExport,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 3915 */
struct TArray<TArray<FPackageIndex,FDefaultAllocator>,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 3918 */
struct TSparseArray<TSetElement<TTuple<FPackageIndex,TArray<FName,FDefaultAllocator> > >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<32,8> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 3919 */
struct __declspec(align(8)) TSet<TTuple<FPackageIndex,TArray<FName,FDefaultAllocator> >,TDefaultMapHashableKeyFuncs<FPackageIndex,TArray<FName,FDefaultAllocator>,0>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<TTuple<FPackageIndex,TArray<FName,FDefaultAllocator> > >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 3920 */
struct TMapBase<FPackageIndex,TArray<FName,FDefaultAllocator>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FPackageIndex,TArray<FName,FDefaultAllocator>,0> >
{
  TSet<TTuple<FPackageIndex,TArray<FName,FDefaultAllocator> >,TDefaultMapHashableKeyFuncs<FPackageIndex,TArray<FName,FDefaultAllocator>,0>,FDefaultSetAllocator> Pairs;
};

/* 3921 */
struct __cppobj TSortableMapBase<FPackageIndex,TArray<FName,FDefaultAllocator>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FPackageIndex,TArray<FName,FDefaultAllocator>,0> > : TMapBase<FPackageIndex,TArray<FName,FDefaultAllocator>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FPackageIndex,TArray<FName,FDefaultAllocator>,0> >
{
};

/* 3922 */
struct __cppobj TMap<FPackageIndex,TArray<FName,FDefaultAllocator>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FPackageIndex,TArray<FName,FDefaultAllocator>,0> > : TSortableMapBase<FPackageIndex,TArray<FName,FDefaultAllocator>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FPackageIndex,TArray<FName,FDefaultAllocator>,0> >
{
};

/* 3923 */
struct FLinkerTables
{
  TArray<FObjectImport,FDefaultAllocator> ImportMap;
  TArray<FObjectExport,FDefaultAllocator> ExportMap;
  TArray<TArray<FPackageIndex,FDefaultAllocator>,FDefaultAllocator> DependsMap;
  TArray<FName,FDefaultAllocator> SoftPackageReferenceList;
  TMap<FPackageIndex,TArray<FName,FDefaultAllocator>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FPackageIndex,TArray<FName,FDefaultAllocator>,0> > SearchableNamesMap;
};

/* 284 */
typedef _PaddingMode ELinkerType::Type;

/* 4030 */
struct TArray<FGenerationInfo,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 4033 */
struct FPackageFileSummary
{
  int Tag;
  int FileVersionUE4;
  int FileVersionLicenseeUE4;
  FCustomVersionContainer CustomVersionContainer;
  int TotalHeaderSize;
  unsigned int PackageFlags;
  FString FolderName;
  int NameCount;
  int NameOffset;
  FString LocalizationId;
  int GatherableTextDataCount;
  int GatherableTextDataOffset;
  int ExportCount;
  int ExportOffset;
  int ImportCount;
  int ImportOffset;
  int DependsOffset;
  int SoftPackageReferencesCount;
  int SoftPackageReferencesOffset;
  int SearchableNamesOffset;
  int ThumbnailTableOffset;
  FGuid Guid;
  TArray<FGenerationInfo,FDefaultAllocator> Generations;
  FEngineVersion SavedByEngineVersion;
  FEngineVersion CompatibleWithEngineVersion;
  unsigned int CompressionFlags;
  unsigned int PackageSource;
  bool bUnversioned;
  int AssetRegistryDataOffset;
  __int64 BulkDataStartOffset;
  int WorldTileInfoDataOffset;
  TArray<int,FDefaultAllocator> ChunkIDs;
  int PreloadDependencyCount;
  int PreloadDependencyOffset;
};

/* 4034 */
struct TArray<FGatherableTextData,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 3924 */
struct __cppobj FLinker : FLinkerTables
{
  FLinkerVtbl *vfptr;
  ELinkerType::Type LinkerType;
  UPackage *LinkerRoot;
  FPackageFileSummary Summary;
  TArray<FName,FDefaultAllocator> NameMap;
  TArray<FGatherableTextData,FDefaultAllocator> GatherableTextDataMap;
  FString Filename;
  bool FilterClientButNotServer;
  bool FilterServerButNotClient;
  FSHA1 *ScriptSHA;
};

/* 4039 */
struct __declspec(align(8)) FUntypedBulkData::FAllocatedPtr
{
  void *Ptr;
  bool bAllocated;
};

/* 4049 */
struct TSharedPtr<TFutureState<bool>,1>
{
  TFutureState<bool> *Object;
  SharedPointerInternals::FSharedReferencer<1> SharedReferenceCount;
};

/* 4050 */
struct TFutureBase<bool>
{
  TSharedPtr<TFutureState<bool>,1> State;
};

/* 4051 */
struct __cppobj TFuture<bool> : TFutureBase<bool>
{
};

/* 4052 */
struct __cppobj TWeakObjectPtr<UPackage,FWeakObjectPtr> : FWeakObjectPtr
{
};

/* 4037 */
struct FUntypedBulkData
{
  FUntypedBulkDataVtbl *vfptr;
  unsigned int BulkDataFlags;
  int ElementCount;
  __int64 BulkDataOffsetInFile;
  int BulkDataSizeOnDisk;
  int BulkDataAlignment;
  FUntypedBulkData::FAllocatedPtr BulkData;
  FUntypedBulkData::FAllocatedPtr BulkDataAsync;
  unsigned int LockStatus;
  TFuture<bool> SerializeFuture;
  FString Filename;
  TWeakObjectPtr<UPackage,FWeakObjectPtr> Package;
};

/* 4053 */
struct TArray<FCompressedChunk,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 4054 */
struct UE4Function_Private::TFunctionRefBase<TFunction<bool __cdecl(double)>,bool __cdecl(double)>
{
  bool (__cdecl *Callable)(void *, long double *);
};

/* 4055 */
struct __cppobj TFunction<bool __cdecl(double)> : UE4Function_Private::TFunctionRefBase<TFunction<bool __cdecl(double)>,bool __cdecl(double)>
{
  UE4Function_Private::FFunctionStorage Storage;
};

/* 258 */
typedef _MEDIA_TYPE EBuildTargets::Type;

/* 1542 */
enum ETargetPlatformFeatures
{
  AudioStreaming = 0x0,
  DistanceFieldShadows = 0x1,
  GrayscaleSRGB = 0x2,
  HighQualityLightmaps = 0x3,
  LowQualityLightmaps = 0x4,
  MultipleGameInstances = 0x5,
  Packaging = 0x6,
  SdkConnectDisconnect = 0x7,
  Tessellation = 0x8,
  TextureStreaming = 0x9,
  UserCredentials = 0xA,
  MobileRendering = 0xB,
  DeferredRendering = 0xC,
  ShouldSplitPaksIntoSmallerSizes = 0xD,
  SoftwareOcclusion = 0xE,
  HalfFloatVertexFormat = 0xF,
};

/* 4361 */
union $7E7EC2B2A020651663F1C35C34DD0BBF
{
  void (__cdecl *~ITargetPlatform)(ITargetPlatform *this);
  void *(__cdecl *__vecDelDtor)(ITargetPlatform *this, unsigned int);
};

/* 4362 */
struct ITargetPlatformVtbl
{
  bool (__cdecl *AddDevice)(ITargetPlatform *this, FString *, bool);
  _BYTE gap8[40];
  void (__cdecl *EnableDeviceCheck)(ITargetPlatform *this, bool);
  void (__cdecl *GetAllDevices)(ITargetPlatform *this, struct TArray<TSharedPtr<ITargetDevice,1>,FDefaultAllocator> *);
  ECompressionFlags (__cdecl *GetBaseCompressionMethod)(ITargetPlatform *this);
  int (__cdecl *GetCompressionBitWindow)(ITargetPlatform *this);
  bool (__cdecl *GenerateStreamingInstallManifest)(ITargetPlatform *this, const struct TMultiMap<FString,int,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FString,int,1> > *, TSet<int,DefaultKeyFuncs<int,0>,FDefaultSetAllocator> *);
  struct TSharedPtr<ITargetDevice,1> (__cdecl *GetDefaultDevice)(ITargetPlatform *this);
  TSharedPtr<ITargetDevice,1> (__cdecl *GetDevice)(ITargetPlatform *this, FTargetDeviceId *);
  bool (__cdecl *HasEditorOnlyData)(ITargetPlatform *this);
  bool (__cdecl *IsClientOnly)(ITargetPlatform *this);
  bool (__cdecl *IsLittleEndian)(ITargetPlatform *this);
  bool (__cdecl *IsRunningPlatform)(ITargetPlatform *this);
  bool (__cdecl *IsServerOnly)(ITargetPlatform *this);
  bool (__cdecl *CanSupportXGEShaderCompile)(ITargetPlatform *this);
  bool (__cdecl *IsSdkInstalled)(ITargetPlatform *this, bool, FString *);
  bool (__cdecl *RequiresCookedData)(ITargetPlatform *this);
  bool (__cdecl *RequiresUserCredentials)(ITargetPlatform *this);
  bool (__cdecl *SupportsAutoSDK)(ITargetPlatform *this);
  bool (__cdecl *SupportsBuildTarget)(ITargetPlatform *this, EBuildTargets::Type);
  bool (__cdecl *SupportsFeature)(ITargetPlatform *this, ETargetPlatformFeatures);
  FName *(__cdecl *GetPhysicsFormat)(ITargetPlatform *this, FName *result, UBodySetup *);
  void (__cdecl *GetReflectionCaptureFormats)(ITargetPlatform *this, TArray<FName,FDefaultAllocator> *);
  void (__cdecl *GetAllPossibleShaderFormats)(ITargetPlatform *this, TArray<FName,FDefaultAllocator> *);
  void (__cdecl *GetAllTargetedShaderFormats)(ITargetPlatform *this, TArray<FName,FDefaultAllocator> *);
  void (__cdecl *GetTextureFormats)(ITargetPlatform *this, UTexture *, TArray<FName,FDefaultAllocator> *);
  void (__cdecl *GetAllTextureFormats)(ITargetPlatform *this, TArray<FName,FDefaultAllocator> *);
  FName *(__cdecl *GetWaveFormat)(ITargetPlatform *this, FName *result, USoundWave *);
  FPlatformAudioCookOverrides *(__cdecl *GetAudioCompressionSettings)(ITargetPlatform *this);
  void (__cdecl *GetAllWaveFormats)(ITargetPlatform *this, TArray<FName,FDefaultAllocator> *);
  UTextureLODSettings *(__cdecl *GetTextureLODSettings)(ITargetPlatform *this);
  void (__cdecl *RegisterTextureLODSettings)(ITargetPlatform *this, UTextureLODSettings *);
  FStaticMeshLODSettings *(__cdecl *GetStaticMeshLODSettings)(ITargetPlatform *this);
  bool (__cdecl *PackageBuild)(ITargetPlatform *this, FString *);
  bool (__cdecl *SupportsVariants)(ITargetPlatform *this);
  FText *(__cdecl *GetVariantDisplayName)(ITargetPlatform *this, FText *result);
  FText *(__cdecl *GetVariantTitle)(ITargetPlatform *this, FText *result);
  float (__cdecl *GetVariantPriority)(ITargetPlatform *this);
  bool (__cdecl *SendLowerCaseFilePaths)(ITargetPlatform *this);
  void (__cdecl *GetBuildProjectSettingKeys)(ITargetPlatform *this, FString *, TArray<FString,FDefaultAllocator> *, TArray<FString,FDefaultAllocator> *, TArray<FString,FDefaultAllocator> *);
  ITargetPlatform::FOnTargetDeviceDiscovered *(__cdecl *OnDeviceDiscovered)(ITargetPlatform *this);
  ITargetPlatform::FOnTargetDeviceLost *(__cdecl *OnDeviceLost)(ITargetPlatform *this);
  $7E7EC2B2A020651663F1C35C34DD0BBF ___u41;
};

/* 33349 */
struct type_infoVtbl
{
  void *(__cdecl *__vecDelDtor)(type_info *this, unsigned int);
};

/* 67432 */
struct std::_Func_base<void,UDPMessage const &>Vtbl
{
  std::_Func_base<void,UDPMessage const &> *(__cdecl *_Copy)(std::_Func_base<void,UDPMessage const &> *this, void *);
  std::_Func_base<void,UDPMessage const &> *(__cdecl *_Move)(std::_Func_base<void,UDPMessage const &> *this, void *);
  void (__cdecl *_Do_call)(std::_Func_base<void,UDPMessage const &> *this, UDPMessage *);
  type_info *(__cdecl *_Target_type)(std::_Func_base<void,UDPMessage const &> *this);
  void (__cdecl *_Delete_this)(std::_Func_base<void,UDPMessage const &> *this, bool);
  const void *(__cdecl *_Get)(std::_Func_base<void,UDPMessage const &> *this);
};

/* 1715 */
enum eCombinatorModeW
{
  eAdd = 0x0,
  eMult = 0x1,
};

/* 1716 */
enum eInputVarW
{
  eBrake = 0x0,
  eGas = 0x1,
  eLatG = 0x2,
  eLonG = 0x3,
  eSteer = 0x4,
  eSpeed = 0x5,
  SusTravelLR = 0x6,
  SusTravelRR = 0x7,
};

/* 66980 */
struct __declspec(align(8)) DynamicWingControllerData
{
  eCombinatorModeW combinatorMode;
  eInputVarW inputVar;
  Curve lut;
  float filter;
  float upLimit;
  float downLimit;
};

/* 1717 */
enum eCombinatorModeDF
{
  eAddH = 0x0,
  eMultH = 0x1,
  eAddDH = 0x2,
  eMultDH = 0x3,
  eAddYawGain = 0x4,
  eMultYawGain = 0x5,
  eAddClGain = 0x6,
  eMultClGain = 0x7,
};

/* 1718 */
typedef eInputVarW eInputVarDF;

/* 66992 */
struct __declspec(align(8)) DynamicDownForceControllerData
{
  eCombinatorModeDF combinatorMode;
  eInputVarDF inputVar;
  Curve lut;
  float filter;
  float upLimit;
  float downLimit;
};

/* 67039 */
struct std::_Func_base<void,TimeLineEvent const &>
{
  std::_Func_base<void,TimeLineEvent const &>Vtbl *vfptr;
};

/* 67053 */
struct std::_Func_base<void,OnStepCompleteEvent const &>
{
  std::_Func_base<void,OnStepCompleteEvent const &>Vtbl *vfptr;
};

/* 67068 */
struct std::_Func_base<void,OnControlsProviderChanged const &>
{
  std::_Func_base<void,OnControlsProviderChanged const &>Vtbl *vfptr;
};

/* 67087 */
struct std::_Func_base<void,OnLapCompletedEvent const &>
{
  std::_Func_base<void,OnLapCompletedEvent const &>Vtbl *vfptr;
};

/* 67101 */
struct std::_Func_base<void,OnSectorSplitEvent const &>
{
  std::_Func_base<void,OnSectorSplitEvent const &>Vtbl *vfptr;
};

/* 67115 */
struct std::_Func_base<void,vec3d const &>
{
  std::_Func_base<void,vec3d const &>Vtbl *vfptr;
};

/* 67128 */
struct std::_Func_base<void,std::pair<int,int> const &>
{
  std::_Func_base<void,std::pair<int,int> const &>Vtbl *vfptr;
};

/* 67142 */
struct std::_Func_base<void,OnCollisionEvent const &>
{
  std::_Func_base<void,OnCollisionEvent const &>Vtbl *vfptr;
};

/* 67144 */
union $9DEB612798B6C53A36148839FC6E5917
{
  void (__cdecl *~IRigidBody)(IRigidBody *this);
  void *(__cdecl *__vecDelDtor)(IRigidBody *this, unsigned int);
};

/* 67145 */
struct IRigidBodyVtbl
{
  bool (__cdecl *isEnabled)(IRigidBody *this);
  _BYTE gap8[40];
  void (__cdecl *setMassBox)(IRigidBody *this, long double, long double, long double, long double);
  vec3d *(__cdecl *getLocalInertia)(IRigidBody *this, vec3d *result);
  mat44d *(__cdecl *getWorldMatrix)(IRigidBody *this, mat44d *result);
  vec3d *(__cdecl *localToWorld)(IRigidBody *this, vec3d *result, vec3d *);
  vec3d *(__cdecl *worldToLocal)(IRigidBody *this, vec3d *result, vec3d *);
  vec3d *(__cdecl *localToWorldNormal)(IRigidBody *this, vec3d *result, vec3d *);
  vec3d *(__cdecl *worldToLocalNormal)(IRigidBody *this, vec3d *result, vec3d *);
  void (__cdecl *stop)(IRigidBody *this, float);
  vec3d *(__cdecl *getVelocity)(IRigidBody *this, vec3d *result);
  void (__cdecl *setVelocity)(IRigidBody *this, vec3d *);
  void (__cdecl *setAngularVelocity)(IRigidBody *this, vec3d *);
  void (__cdecl *setPosition)(IRigidBody *this, vec3d *);
  void (__cdecl *setRotation)(IRigidBody *this, mat44d *);
  vec3d *(__cdecl *getPosition)(IRigidBody *this, vec3d *result);
  vec3d *(__cdecl *getAngularVelocity)(IRigidBody *this, vec3d *result);
  vec3d *(__cdecl *getLocalAngularVelocity)(IRigidBody *this, vec3d *result);
  vec3d *(__cdecl *getLocalVelocity)(IRigidBody *this, vec3d *result);
  void (__cdecl *setBoxColliderMask)(IRigidBody *this, unsigned __int64, unsigned int);
  unsigned __int64 (__cdecl *addBoxCollider)(IRigidBody *this, vec3f *, vec3f *, float, unsigned int, unsigned int, unsigned int);
  void (__cdecl *addLocalForce)(IRigidBody *this, vec3d *);
  void (__cdecl *addLocalTorque)(IRigidBody *this, vec3d *);
  void (__cdecl *addLocalForceAtPos)(IRigidBody *this, vec3d *, vec3d *);
  void (__cdecl *addLocalForceAtLocalPos)(IRigidBody *this, vec3d *, vec3d *);
  void (__cdecl *addForceAtLocalPos)(IRigidBody *this, vec3d *, vec3d *);
  vec3d *(__cdecl *getLocalPointVelocity)(IRigidBody *this, vec3d *result, vec3d *);
  vec3d *(__cdecl *getPointVelocity)(IRigidBody *this, vec3d *result, vec3d *);
  void (__cdecl *addForceAtPos)(IRigidBody *this, vec3d *, vec3d *);
  void (__cdecl *addTorque)(IRigidBody *this, vec3d *);
  void (__cdecl *addMeshCollider)(IRigidBody *this, float *, unsigned int, unsigned __int16 *, unsigned int, mat44f, unsigned int, unsigned int, unsigned int);
  void (__cdecl *setMeshCollideCategory)(IRigidBody *this, unsigned int, unsigned int);
  void (__cdecl *setMeshCollideMask)(IRigidBody *this, unsigned int, unsigned int);
  unsigned int (__cdecl *getMeshCollideCategory)(IRigidBody *this, unsigned int);
  unsigned int (__cdecl *getMeshCollideMask)(IRigidBody *this, unsigned int);
  int (__cdecl *getMeshColliderCount)(IRigidBody *this);
  void (__cdecl *setDamping)(IRigidBody *this, float, float);
  $9DEB612798B6C53A36148839FC6E5917 ___u36;
};

/* 67702 */
struct std::_Func_base<void,OnGearRequestEvent const &>
{
  std::_Func_base<void,OnGearRequestEvent const &>Vtbl *vfptr;
};

/* 67760 */
struct DynamicWingController
{
  float outputAngle;
  DynamicWingControllerData data;
  float filter;
  CarPhysicsState *state;
  Car *car;
};

/* 66904 */
struct RaceEngineerVtbl
{
  void *(__cdecl *__vecDelDtor)(RaceEngineer *this, unsigned int);
};

/* 67774 */
struct DynamicDownForceController
{
  DynamicDownForceControllerData *data;
  float output;
  float filter;
  Car *car;
  DownForce *dfrc;
};

/* 67718 */
struct ISuspensionVtbl
{
  void *(__cdecl *__vecDelDtor)(ISuspension *this, unsigned int);
  _BYTE gap8[24];
  void (__cdecl *addForceAtPos)(ISuspension *this, vec3d *, vec3d *, bool, bool);
  void (__cdecl *addTorque)(ISuspension *this, vec3d *);
  void (__cdecl *setSteerLengthOffset)(ISuspension *this, long double);
  long double (__cdecl *getSteerTorque)(ISuspension *this);
  vec3d *(__cdecl *getHubAngularVelocity)(ISuspension *this, vec3d *result);
  IRigidBody *(__cdecl *getHub)(ISuspension *this);
  void (__cdecl *attach)(ISuspension *this);
  SuspensionStatus *(__cdecl *getStatus)(ISuspension *this);
  vec3d *(__cdecl *getBasePosition)(ISuspension *this, vec3d *result);
  float (__cdecl *getK)(ISuspension *this);
  long double (__cdecl *getPackerRange)(ISuspension *this);
  std::vector<DebugLine,std::allocator<DebugLine> > *(__cdecl *getDebugLines)(ISuspension *this, std::vector<DebugLine,std::allocator<DebugLine> > *result, mat44f *, mat44f *);
  void (__cdecl *setDamage)(ISuspension *this, long double);
  void (__cdecl *resetDamage)(ISuspension *this);
  long double (__cdecl *getDamage)(ISuspension *this);
  long double (__cdecl *getMass)(ISuspension *this);
  void (__cdecl *stop)(ISuspension *this);
  vec3d *(__cdecl *getVelocity)(ISuspension *this, vec3d *result);
  void (__cdecl *getSteerBasis)(ISuspension *this, vec3d *, vec3d *);
  void (__cdecl *step)(ISuspension *this, long double);
  void (__cdecl *setERPCFM)(ISuspension *this, long double, long double);
  void (__cdecl *addLocalForceAndTorque)(ISuspension *this, vec3d *, vec3d *, vec3d *);
};

/* 67481 */
struct IRayCasterVtbl
{
  void *(__cdecl *__vecDelDtor)(IRayCaster *this, unsigned int);
  RayCastHit *(__cdecl *rayCast)(IRayCaster *this, RayCastHit *result, vec3d *, vec3d *, unsigned int);
  void (__cdecl *release)(IRayCaster *this);
  void (__cdecl *setCollisionCategories)(IRayCaster *this, unsigned int, unsigned int);
};

/* 67741 */
struct TyreModelOutput
{
  float Fy;
  float Fx;
  float Mz;
  float trail;
  float ndSlip;
  float Dy;
  float Dx;
};

/* 67742 */
const struct TyreModelInput
{
  float load;
  float slipAngleRAD;
  float slipRatio;
  float camberRAD;
  float speed;
  float u;
  int tyreIndex;
  float cpLength;
  float grain;
  float blister;
  float pressureRatio;
  bool useSimpleModel;
  float rain;
  float marblesGrooveAddition;
};

/* 67833 */
struct DistanceJointODE
{
  struct dxJoint *id;
  long double distance;
};

/* 67073 */
struct ICarControlsProviderVtbl
{
  void *(__cdecl *__vecDelDtor)(ICarControlsProvider *this, unsigned int);
  _BYTE gap8[8];
  void (__cdecl *sendFF)(ICarControlsProvider *this, float, float, float);
  const char *(__cdecl *getName)(ICarControlsProvider *this);
  float (__cdecl *getFFGlobalGain)(ICarControlsProvider *this);
  bool (__cdecl *isDeviceConnected)(ICarControlsProvider *this);
  void (__cdecl *onAutoShifterChanged)(ICarControlsProvider *this, bool);
  bool (__cdecl *IsKeyboardControl)(ICarControlsProvider *this);
  void (__cdecl *setVibrations)(ICarControlsProvider *this, VibrationDef *);
  void (__cdecl *setEngineRPM)(ICarControlsProvider *this, float, float, float, bool);
  bool (__cdecl *shouldDelete)(ICarControlsProvider *this);
};

/* 67568 */
struct AISplineVtbl
{
  void *(__cdecl *__vecDelDtor)(AISpline *this, unsigned int);
};

/* 67570 */
struct AIStraightData
{
  float start;
  float end;
  float length;
};

/* 67576 */
struct SplineVtbl
{
  void *(__cdecl *__vecDelDtor)(Spline *this, unsigned int);
  void (__cdecl *clear)(Spline *this);
};

/* 67578 */
struct __declspec(align(8)) SplinePoint
{
  vec3d point;
  long double pointLength;
  int tag;
};

/* 67584 */
struct __cppobj std::allocator<GridElement>
{
};

/* 67586 */
struct __cppobj std::_Vector_val<std::_Simple_types<GridElement> > : std::_Container_base0
{
  GridElement *_Myfirst;
  GridElement *_Mylast;
  GridElement *_Myend;
};

/* 67587 */
struct __cppobj std::_Compressed_pair<std::allocator<GridElement>,std::_Vector_val<std::_Simple_types<GridElement> >,1> : std::allocator<GridElement>
{
  std::_Vector_val<std::_Simple_types<GridElement> > _Myval2;
};

/* 67588 */
struct std::_Vector_alloc<std::_Vec_base_types<GridElement,std::allocator<GridElement> > >
{
  std::_Compressed_pair<std::allocator<GridElement>,std::_Vector_val<std::_Simple_types<GridElement> >,1> _Mypair;
};

/* 67589 */
struct __cppobj std::vector<GridElement,std::allocator<GridElement> > : std::_Vector_alloc<std::_Vec_base_types<GridElement,std::allocator<GridElement> > >
{
};

/* 67160 */
struct std::_Func_base<void,double const &>Vtbl
{
  std::_Func_base<void,double const &> *(__cdecl *_Copy)(std::_Func_base<void,double const &> *this, void *);
  std::_Func_base<void,double const &> *(__cdecl *_Move)(std::_Func_base<void,double const &> *this, void *);
  void (__cdecl *_Do_call)(std::_Func_base<void,double const &> *this, const long double *);
  type_info *(__cdecl *_Target_type)(std::_Func_base<void,double const &> *this);
  void (__cdecl *_Delete_this)(std::_Func_base<void,double const &> *this, bool);
  const void *(__cdecl *_Get)(std::_Func_base<void,double const &> *this);
};

/* 67503 */
struct std::_Func_base<void,SessionInfo const &>Vtbl
{
  std::_Func_base<void,SessionInfo const &> *(__cdecl *_Copy)(std::_Func_base<void,SessionInfo const &> *this, void *);
  std::_Func_base<void,SessionInfo const &> *(__cdecl *_Move)(std::_Func_base<void,SessionInfo const &> *this, void *);
  void (__cdecl *_Do_call)(std::_Func_base<void,SessionInfo const &> *this, SessionInfo *);
  type_info *(__cdecl *_Target_type)(std::_Func_base<void,SessionInfo const &> *this);
  void (__cdecl *_Delete_this)(std::_Func_base<void,SessionInfo const &> *this, bool);
  const void *(__cdecl *_Get)(std::_Func_base<void,SessionInfo const &> *this);
};

/* 202091 */
typedef int HRESULT;

/* 38011 */
struct IUnknownVtbl
{
  HRESULT (__cdecl *QueryInterface)(IUnknown *this, _GUID *, void **);
  unsigned int (__cdecl *AddRef)(IUnknown *this);
  unsigned int (__cdecl *Release)(IUnknown *this);
};

/* 67524 */
struct __declspec(align(8)) THMRS
{
  IDirectInputEffectDriver *m_pDIEffectDriver;
  HICON__ *m_hIcon;
  wchar_t m_tszDevice[260];
  unsigned int m_dwExternalID;
};

/* 67525 */
struct __cppobj IDirectInputEffect : IUnknown
{
};

/* 67526 */
struct __cppobj IDirectInputDevice8W : IUnknown
{
};

/* 67477 */
struct kContactGeom
{
  vec3d pos;
  vec3d normal;
  long double depth;
  void *g1;
  void *g2;
  int side1;
  int side2;
};

/* 67478 */
struct RayCastResult
{
  SurfaceDef *surfaceDef;
  vec3d pos;
  vec3d normal;
  bool hasHit;
  ICollisionObject *collisionObject;
  int triangleIndex;
  kContactGeom contact;
  bool hasMarbles;
  long double depth;
};

/* 67173 */
union $7EB0A45BA03CCFC6711125B3602CE062
{
  void (__cdecl *~ICollisionObject)(ICollisionObject *this);
  void *(__cdecl *__vecDelDtor)(ICollisionObject *this, unsigned int);
};

/* 67174 */
struct ICollisionObjectVtbl
{
  void (__cdecl *release)(ICollisionObject *this);
  void (__cdecl *setUserPointer)(ICollisionObject *this, void *);
  void *(__cdecl *getUserPointer)(ICollisionObject *this);
  unsigned int (__cdecl *getGroup)(ICollisionObject *this);
  unsigned int (__cdecl *getMask)(ICollisionObject *this);
  vec4f *(__cdecl *getVertexColor)(ICollisionObject *this, vec4f *result, int, vec3f *);
  $7EB0A45BA03CCFC6711125B3602CE062 ___u6;
};

/* 67559 */
struct TimeLineVtbl
{
  void *(__cdecl *__vecDelDtor)(TimeLine *this, unsigned int);
};

/* 67566 */
struct AISplineRecorderVtbl
{
  void *(__cdecl *__vecDelDtor)(AISplineRecorder *this, unsigned int);
};

/* 67615 */
struct __declspec(align(8)) DebugString
{
  vec3f p;
  std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > text;
  vec4f color;
  float seconds;
  float scale;
  int stringId;
};

/* 58286 */
struct std::_Iterator_base12
{
  std::_Container_proxy *_Myproxy;
  std::_Iterator_base12 *_Mynextiter;
};

/* 4926 */
struct __cppobj __declspec(align(8)) UPlayer : UObject, FExec
{
  APlayerController *PlayerController;
  int CurrentNetSpeed;
  int ConfiguredInternetSpeed;
  int ConfiguredLanSpeed;
};

/* 5493 */
struct TArray<UChildConnection *,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 5602 */
struct TSubclassOf<UPackageMap>
{
  UClass *Class;
};

/* 5603 */
struct TArray<UChannel *,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 420 */
enum EConnectionState
{
  USOCK_Invalid = 0x0,
  USOCK_Closed = 0x1,
  USOCK_Pending = 0x2,
  USOCK_Open = 0x3,
};

/* 423 */
typedef EVertexColorViewMode::Type EClientLoginState::Type;

/* 5605 */
struct FBitWriterMark
{
  bool Overflowed;
  __int64 Num;
};

/* 4401 */
struct __cppobj FBitArchive : FArchive
{
};

/* 4402 */
struct __cppobj __declspec(align(8)) FBitWriter : FBitArchive
{
  TArray<unsigned char,FDefaultAllocator> Buffer;
  __int64 Num;
  __int64 Max;
  bool AllowResize;
  bool bAllowOverflow;
};

/* 5606 */
struct __cppobj FNetBitWriter : FBitWriter
{
  UPackageMap *PackageMap;
};

/* 5613 */
struct TArray<unsigned __int64,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 5607 */
struct __cppobj FOutBunch : FNetBitWriter
{
  FOutBunch *Next;
  UChannel *Channel;
  long double Time;
  bool ReceivedAck;
  int ChIndex;
  int ChType;
  int ChSequence;
  int PacketId;
  char bOpen;
  char bClose;
  char bDormant;
  char bIsReplicationPaused;
  char bReliable;
  char bPartial;
  char bPartialInitial;
  char bPartialFinal;
  char bHasPackageMapExports;
  char bHasMustBeMappedGUIDs;
  TArray<FNetworkGUID,FDefaultAllocator> ExportNetGUIDs;
  TArray<unsigned __int64,FDefaultAllocator> NetFieldExports;
};

/* 5614 */
struct TSparseArray<TSetElement<TTuple<TWeakObjectPtr<AActor,FWeakObjectPtr>,UActorChannel *> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<24,8> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 5615 */
struct __declspec(align(8)) TSet<TTuple<TWeakObjectPtr<AActor,FWeakObjectPtr>,UActorChannel *>,TWeakObjectPtrMapKeyFuncs<TWeakObjectPtr<AActor,FWeakObjectPtr>,UActorChannel *,0>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<TTuple<TWeakObjectPtr<AActor,FWeakObjectPtr>,UActorChannel *> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 5616 */
struct TMapBase<TWeakObjectPtr<AActor,FWeakObjectPtr>,UActorChannel *,FDefaultSetAllocator,TWeakObjectPtrMapKeyFuncs<TWeakObjectPtr<AActor,FWeakObjectPtr>,UActorChannel *,0> >
{
  TSet<TTuple<TWeakObjectPtr<AActor,FWeakObjectPtr>,UActorChannel *>,TWeakObjectPtrMapKeyFuncs<TWeakObjectPtr<AActor,FWeakObjectPtr>,UActorChannel *,0>,FDefaultSetAllocator> Pairs;
};

/* 5617 */
struct __cppobj TSortableMapBase<TWeakObjectPtr<AActor,FWeakObjectPtr>,UActorChannel *,FDefaultSetAllocator,TWeakObjectPtrMapKeyFuncs<TWeakObjectPtr<AActor,FWeakObjectPtr>,UActorChannel *,0> > : TMapBase<TWeakObjectPtr<AActor,FWeakObjectPtr>,UActorChannel *,FDefaultSetAllocator,TWeakObjectPtrMapKeyFuncs<TWeakObjectPtr<AActor,FWeakObjectPtr>,UActorChannel *,0> >
{
};

/* 5618 */
struct __cppobj TMap<TWeakObjectPtr<AActor,FWeakObjectPtr>,UActorChannel *,FDefaultSetAllocator,TWeakObjectPtrMapKeyFuncs<TWeakObjectPtr<AActor,FWeakObjectPtr>,UActorChannel *,0> > : TSortableMapBase<TWeakObjectPtr<AActor,FWeakObjectPtr>,UActorChannel *,FDefaultSetAllocator,TWeakObjectPtrMapKeyFuncs<TWeakObjectPtr<AActor,FWeakObjectPtr>,UActorChannel *,0> >
{
};

/* 5620 */
struct TSparseArray<TSetElement<TTuple<FNetworkGUID,TArray<UActorChannel *,FDefaultAllocator> > >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<32,8> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 5621 */
struct __declspec(align(8)) TSet<TTuple<FNetworkGUID,TArray<UActorChannel *,FDefaultAllocator> >,TDefaultMapHashableKeyFuncs<FNetworkGUID,TArray<UActorChannel *,FDefaultAllocator>,0>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<TTuple<FNetworkGUID,TArray<UActorChannel *,FDefaultAllocator> > >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 5622 */
struct TMapBase<FNetworkGUID,TArray<UActorChannel *,FDefaultAllocator>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FNetworkGUID,TArray<UActorChannel *,FDefaultAllocator>,0> >
{
  TSet<TTuple<FNetworkGUID,TArray<UActorChannel *,FDefaultAllocator> >,TDefaultMapHashableKeyFuncs<FNetworkGUID,TArray<UActorChannel *,FDefaultAllocator>,0>,FDefaultSetAllocator> Pairs;
};

/* 5623 */
struct __cppobj TSortableMapBase<FNetworkGUID,TArray<UActorChannel *,FDefaultAllocator>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FNetworkGUID,TArray<UActorChannel *,FDefaultAllocator>,0> > : TMapBase<FNetworkGUID,TArray<UActorChannel *,FDefaultAllocator>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FNetworkGUID,TArray<UActorChannel *,FDefaultAllocator>,0> >
{
};

/* 5624 */
struct __cppobj TMap<FNetworkGUID,TArray<UActorChannel *,FDefaultAllocator>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FNetworkGUID,TArray<UActorChannel *,FDefaultAllocator>,0> > : TSortableMapBase<FNetworkGUID,TArray<UActorChannel *,FDefaultAllocator>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FNetworkGUID,TArray<UActorChannel *,FDefaultAllocator>,0> >
{
};

/* 5625 */
struct TSparseArray<TSetElement<TTuple<TWeakObjectPtr<UObject,FWeakObjectPtr>,TSharedRef<FObjectReplicator,0> > >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<32,8> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 5626 */
struct __declspec(align(8)) TSet<TTuple<TWeakObjectPtr<UObject,FWeakObjectPtr>,TSharedRef<FObjectReplicator,0> >,TDefaultMapHashableKeyFuncs<TWeakObjectPtr<UObject,FWeakObjectPtr>,TSharedRef<FObjectReplicator,0>,0>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<TTuple<TWeakObjectPtr<UObject,FWeakObjectPtr>,TSharedRef<FObjectReplicator,0> > >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 5627 */
struct TMapBase<TWeakObjectPtr<UObject,FWeakObjectPtr>,TSharedRef<FObjectReplicator,0>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<TWeakObjectPtr<UObject,FWeakObjectPtr>,TSharedRef<FObjectReplicator,0>,0> >
{
  TSet<TTuple<TWeakObjectPtr<UObject,FWeakObjectPtr>,TSharedRef<FObjectReplicator,0> >,TDefaultMapHashableKeyFuncs<TWeakObjectPtr<UObject,FWeakObjectPtr>,TSharedRef<FObjectReplicator,0>,0>,FDefaultSetAllocator> Pairs;
};

/* 5628 */
struct __cppobj TSortableMapBase<TWeakObjectPtr<UObject,FWeakObjectPtr>,TSharedRef<FObjectReplicator,0>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<TWeakObjectPtr<UObject,FWeakObjectPtr>,TSharedRef<FObjectReplicator,0>,0> > : TMapBase<TWeakObjectPtr<UObject,FWeakObjectPtr>,TSharedRef<FObjectReplicator,0>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<TWeakObjectPtr<UObject,FWeakObjectPtr>,TSharedRef<FObjectReplicator,0>,0> >
{
};

/* 5629 */
struct __cppobj TMap<TWeakObjectPtr<UObject,FWeakObjectPtr>,TSharedRef<FObjectReplicator,0>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<TWeakObjectPtr<UObject,FWeakObjectPtr>,TSharedRef<FObjectReplicator,0>,0> > : TSortableMapBase<TWeakObjectPtr<UObject,FWeakObjectPtr>,TSharedRef<FObjectReplicator,0>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<TWeakObjectPtr<UObject,FWeakObjectPtr>,TSharedRef<FObjectReplicator,0>,0> >
{
};

/* 5070 */
struct TSparseArray<TSetElement<FName>,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<16,8> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 5071 */
struct __declspec(align(8)) TSet<FName,DefaultKeyFuncs<FName,0>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<FName>,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 5630 */
struct TArray<FHistogram::FBin,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 5631 */
struct FHistogram
{
  TArray<FHistogram::FBin,FDefaultAllocator> Bins;
  long double SumOfAllMeasures;
  __int64 CountOfAllMeasures;
  long double MinimalMeasurement;
  long double MaximalMeasurement;
};

/* 5632 */
struct TSparseArray<TSetElement<TTuple<UObject *,bool> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<24,8> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 5633 */
struct __declspec(align(8)) TSet<TTuple<UObject *,bool>,TDefaultMapHashableKeyFuncs<UObject *,bool,0>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<TTuple<UObject *,bool> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 5634 */
struct TMapBase<UObject *,bool,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<UObject *,bool,0> >
{
  TSet<TTuple<UObject *,bool>,TDefaultMapHashableKeyFuncs<UObject *,bool,0>,FDefaultSetAllocator> Pairs;
};

/* 5635 */
struct __cppobj TSortableMapBase<UObject *,bool,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<UObject *,bool,0> > : TMapBase<UObject *,bool,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<UObject *,bool,0> >
{
};

/* 5636 */
struct __cppobj TMap<UObject *,bool,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<UObject *,bool,0> > : TSortableMapBase<UObject *,bool,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<UObject *,bool,0> >
{
};

/* 5637 */
struct TSparseArray<TSetElement<TTuple<FString,TArray<float,FDefaultAllocator> > >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<40,8> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 5638 */
struct __declspec(align(8)) TSet<TTuple<FString,TArray<float,FDefaultAllocator> >,TDefaultMapHashableKeyFuncs<FString,TArray<float,FDefaultAllocator>,0>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<TTuple<FString,TArray<float,FDefaultAllocator> > >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 5639 */
struct TMapBase<FString,TArray<float,FDefaultAllocator>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FString,TArray<float,FDefaultAllocator>,0> >
{
  TSet<TTuple<FString,TArray<float,FDefaultAllocator> >,TDefaultMapHashableKeyFuncs<FString,TArray<float,FDefaultAllocator>,0>,FDefaultSetAllocator> Pairs;
};

/* 5640 */
struct __cppobj TSortableMapBase<FString,TArray<float,FDefaultAllocator>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FString,TArray<float,FDefaultAllocator>,0> > : TMapBase<FString,TArray<float,FDefaultAllocator>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FString,TArray<float,FDefaultAllocator>,0> >
{
};

/* 5641 */
struct __cppobj TMap<FString,TArray<float,FDefaultAllocator>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FString,TArray<float,FDefaultAllocator>,0> > : TSortableMapBase<FString,TArray<float,FDefaultAllocator>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FString,TArray<float,FDefaultAllocator>,0> >
{
};

/* 5642 */
struct TSparseArray<TSetElement<TTuple<int,FNetworkGUID> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<16,4> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 5643 */
struct __declspec(align(8)) TSet<TTuple<int,FNetworkGUID>,TDefaultMapHashableKeyFuncs<int,FNetworkGUID,0>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<TTuple<int,FNetworkGUID> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 5644 */
struct TMapBase<int,FNetworkGUID,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<int,FNetworkGUID,0> >
{
  TSet<TTuple<int,FNetworkGUID>,TDefaultMapHashableKeyFuncs<int,FNetworkGUID,0>,FDefaultSetAllocator> Pairs;
};

/* 5645 */
struct __cppobj TSortableMapBase<int,FNetworkGUID,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<int,FNetworkGUID,0> > : TMapBase<int,FNetworkGUID,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<int,FNetworkGUID,0> >
{
};

/* 5646 */
struct __cppobj TMap<int,FNetworkGUID,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<int,FNetworkGUID,0> > : TSortableMapBase<int,FNetworkGUID,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<int,FNetworkGUID,0> >
{
};

/* 5451 */
struct __cppobj __declspec(align(8)) UNetConnection : UPlayer
{
  TArray<UChildConnection *,FDefaultAllocator> Children;
  UNetDriver *Driver;
  TSubclassOf<UPackageMap> PackageMapClass;
  UPackageMap *PackageMap;
  TArray<UChannel *,FDefaultAllocator> OpenChannels;
  TArray<AActor *,FDefaultAllocator> SentTemporaries;
  AActor *ViewTarget;
  AActor *OwningActor;
  int MaxPacket;
  unsigned __int32 InternalAck : 1;
  FURL URL;
  int NumPacketIdBits;
  int NumBunchBits;
  int NumAckBits;
  int NumPaddingBits;
  int MaxPacketHandlerBits;
  EConnectionState State;
  unsigned __int32 bPendingDestroy : 1;
  TUniquePtr<PacketHandler,TDefaultDelete<PacketHandler> > Handler;
  TWeakPtr<StatelessConnectHandlerComponent,0> StatelessConnectComponent;
  bool bNeedsByteSwapping;
  FUniqueNetIdRepl PlayerId;
  int PacketOverhead;
  FString Challenge;
  FString ClientResponse;
  int ResponseId;
  FString RequestURL;
  EClientLoginState::Type ClientLoginState;
  char ExpectedClientLoginMsgType;
  FString CDKeyHash;
  FString CDKeyResponse;
  long double LastReceiveTime;
  long double LastReceiveRealtime;
  long double LastGoodPacketRealtime;
  long double LastSendTime;
  long double LastTickTime;
  int QueuedBits;
  int TickCount;
  float LastRecvAckTime;
  float ConnectTime;
  FBitWriterMark LastStart;
  FBitWriterMark LastEnd;
  bool AllowMerge;
  bool TimeSensitive;
  FOutBunch *LastOutBunch;
  FOutBunch LastOut;
  FBitWriter SendBunchHeader;
  long double StatUpdateTime;
  float StatPeriod;
  float BestLag;
  float AvgLag;
  long double LagAcc;
  long double BestLagAcc;
  int LagCount;
  long double LastTime;
  long double FrameTime;
  long double CumulativeTime;
  long double AverageFrameTime;
  int CountedFrames;
  int InBytes;
  int OutBytes;
  int InTotalBytes;
  int OutTotalBytes;
  int InPackets;
  int OutPackets;
  int InTotalPackets;
  int OutTotalPackets;
  int InBytesPerSecond;
  int OutBytesPerSecond;
  int InPacketsPerSecond;
  int OutPacketsPerSecond;
  int InPacketsLost;
  int OutPacketsLost;
  int InTotalPacketsLost;
  int OutTotalPacketsLost;
  FBitWriter SendBuffer;
  long double OutLagTime[256];
  int OutLagPacketId[256];
  int OutBytesPerSecondHistory[256];
  float RemoteSaturation;
  int InPacketId;
  int OutPacketId;
  int OutAckPacketId;
  bool bLastHasServerFrameTime;
  int MaxChannelSize;
  TArray<UChannel *,FDefaultAllocator> Channels;
  TArray<int,FDefaultAllocator> OutReliable;
  TArray<int,FDefaultAllocator> InReliable;
  TArray<int,FDefaultAllocator> PendingOutRec;
  TArray<int,FDefaultAllocator> QueuedAcks;
  TArray<int,FDefaultAllocator> ResendAcks;
  int InitOutReliable;
  int InitInReliable;
  unsigned int EngineNetworkProtocolVersion;
  unsigned int GameNetworkProtocolVersion;
  long double LogCallLastTime;
  int LogCallCount;
  int LogSustainedCount;
  TMap<TWeakObjectPtr<AActor,FWeakObjectPtr>,UActorChannel *,FDefaultSetAllocator,TWeakObjectPtrMapKeyFuncs<TWeakObjectPtr<AActor,FWeakObjectPtr>,UActorChannel *,0> > ActorChannels;
  UReplicationConnectionDriver *ReplicationConnectionDriver;
  TSet<FNetworkGUID,DefaultKeyFuncs<FNetworkGUID,0>,FDefaultSetAllocator> DestroyedStartupOrDormantActorGUIDs;
  TMap<FNetworkGUID,TArray<UActorChannel *,FDefaultAllocator>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FNetworkGUID,TArray<UActorChannel *,FDefaultAllocator>,0> > KeepProcessingActorChannelBunchesMap;
  TMap<TWeakObjectPtr<UObject,FWeakObjectPtr>,TSharedRef<FObjectReplicator,0>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<TWeakObjectPtr<UObject,FWeakObjectPtr>,TSharedRef<FObjectReplicator,0>,0> > DormantReplicatorMap;
  TSet<FName,DefaultKeyFuncs<FName,0>,FDefaultSetAllocator> ClientVisibleLevelNames;
  bool bResendAllDataSinceOpen;
  TArray<UChannel *,FDefaultAllocator> ChannelsToTick;
  FHistogram NetConnectionHistogram;
  FName PlayerOnlinePlatformName;
  TMap<UObject *,bool,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<UObject *,bool,0> > ClientVisibileActorOuters;
  FName ClientWorldPackageName;
  TMap<FString,TArray<float,FDefaultAllocator>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FString,TArray<float,FDefaultAllocator>,0> > ActorsStarvedByClassTimeMap;
  TMap<int,FNetworkGUID,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<int,FNetworkGUID,0> > IgnoringChannels;
  bool bIgnoreAlreadyOpenedChannels;
};

/* 5608 */
struct FPacketIdRange
{
  int First;
  int Last;
};

/* 282 */
enum EChannelType
{
  CHTYPE_None = 0x0,
  CHTYPE_Control = 0x1,
  CHTYPE_Actor = 0x2,
  CHTYPE_File = 0x3,
  CHTYPE_Voice = 0x4,
  CHTYPE_MAX = 0x8,
};

/* 5611 */
struct __cppobj UChannel : UObject
{
  UNetConnection *Connection;
  unsigned __int32 OpenAcked : 1;
  unsigned __int32 Closing : 1;
  unsigned __int32 Dormant : 1;
  unsigned __int32 bIsReplicationPaused : 1;
  unsigned __int32 OpenTemporary : 1;
  unsigned __int32 Broken : 1;
  unsigned __int32 bTornOff : 1;
  unsigned __int32 bPendingDormancy : 1;
  unsigned __int32 bPausedUntilReliableACK : 1;
  unsigned __int32 SentClosingBunch : 1;
  int ChIndex;
  int OpenedLocally;
  FPacketIdRange OpenPacketId;
  EChannelType ChType;
  int NumInRec;
  int NumOutRec;
  FInBunch *InRec;
  FOutBunch *OutRec;
  FInBunch *InPartialBunch;
};

/* 4403 */
struct __cppobj FBitReader : FBitArchive
{
  TArray<unsigned char,FDefaultAllocator> Buffer;
  __int64 Num;
  __int64 Pos;
};

/* 5609 */
struct __cppobj FNetBitReader : FBitReader
{
  UPackageMap *PackageMap;
};

/* 5610 */
struct __cppobj __declspec(align(2)) FInBunch : FNetBitReader
{
  int PacketId;
  FInBunch *Next;
  UNetConnection *Connection;
  int ChIndex;
  int ChType;
  int ChSequence;
  char bOpen;
  char bClose;
  char bDormant;
  char bIsReplicationPaused;
  char bReliable;
  char bPartial;
  char bPartialInitial;
  char bPartialFinal;
  char bHasPackageMapExports;
  char bHasMustBeMappedGUIDs;
  char bIgnoreRPCs;
};

/* 5648 */
struct TArray<FBspNode,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 5649 */
struct TArray<FVert,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 5650 */
struct TArray<FBspSurf,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 5651 */
struct TArray<FLightmassPrimitiveSettings,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 5652 */
struct TSparseArray<TSetElement<TTuple<UMaterialInterface *,TUniquePtr<FRawIndexBuffer16or32,TDefaultDelete<FRawIndexBuffer16or32> > > >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<24,8> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 5653 */
struct __declspec(align(8)) TSet<TTuple<UMaterialInterface *,TUniquePtr<FRawIndexBuffer16or32,TDefaultDelete<FRawIndexBuffer16or32> > >,TDefaultMapHashableKeyFuncs<UMaterialInterface *,TUniquePtr<FRawIndexBuffer16or32,TDefaultDelete<FRawIndexBuffer16or32> >,0>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<TTuple<UMaterialInterface *,TUniquePtr<FRawIndexBuffer16or32,TDefaultDelete<FRawIndexBuffer16or32> > > >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 5654 */
struct TMapBase<UMaterialInterface *,TUniquePtr<FRawIndexBuffer16or32,TDefaultDelete<FRawIndexBuffer16or32> >,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<UMaterialInterface *,TUniquePtr<FRawIndexBuffer16or32,TDefaultDelete<FRawIndexBuffer16or32> >,0> >
{
  TSet<TTuple<UMaterialInterface *,TUniquePtr<FRawIndexBuffer16or32,TDefaultDelete<FRawIndexBuffer16or32> > >,TDefaultMapHashableKeyFuncs<UMaterialInterface *,TUniquePtr<FRawIndexBuffer16or32,TDefaultDelete<FRawIndexBuffer16or32> >,0>,FDefaultSetAllocator> Pairs;
};

/* 5655 */
struct __cppobj TSortableMapBase<UMaterialInterface *,TUniquePtr<FRawIndexBuffer16or32,TDefaultDelete<FRawIndexBuffer16or32> >,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<UMaterialInterface *,TUniquePtr<FRawIndexBuffer16or32,TDefaultDelete<FRawIndexBuffer16or32> >,0> > : TMapBase<UMaterialInterface *,TUniquePtr<FRawIndexBuffer16or32,TDefaultDelete<FRawIndexBuffer16or32> >,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<UMaterialInterface *,TUniquePtr<FRawIndexBuffer16or32,TDefaultDelete<FRawIndexBuffer16or32> >,0> >
{
};

/* 5656 */
struct __cppobj TMap<UMaterialInterface *,TUniquePtr<FRawIndexBuffer16or32,TDefaultDelete<FRawIndexBuffer16or32> >,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<UMaterialInterface *,TUniquePtr<FRawIndexBuffer16or32,TDefaultDelete<FRawIndexBuffer16or32> >,0> > : TSortableMapBase<UMaterialInterface *,TUniquePtr<FRawIndexBuffer16or32,TDefaultDelete<FRawIndexBuffer16or32> >,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<UMaterialInterface *,TUniquePtr<FRawIndexBuffer16or32,TDefaultDelete<FRawIndexBuffer16or32> >,0> >
{
};

/* 5657 */
struct TArray<FModelVertex,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 4075 */
struct TRefCountPtr<FRHIVertexBuffer>
{
  FRHIVertexBuffer *Reference;
};

/* 4076 */
struct __cppobj FVertexBuffer : FRenderResource
{
  TRefCountPtr<FRHIVertexBuffer> VertexBufferRHI;
};

/* 4077 */
struct __cppobj FStaticMeshVertexBuffer::FTangentsVertexBuffer : FVertexBuffer
{
};

/* 4078 */
struct __cppobj FStaticMeshVertexBuffer::FTexcoordVertexBuffer : FVertexBuffer
{
};

/* 4085 */
struct __cppobj __declspec(align(8)) FStaticMeshVertexBuffer : FRenderResource
{
  FStaticMeshVertexBuffer::FTangentsVertexBuffer TangentsVertexBuffer;
  FStaticMeshVertexBuffer::FTexcoordVertexBuffer TexCoordVertexBuffer;
  FStaticMeshVertexDataInterface *TangentsData;
  TRefCountPtr<FRHIShaderResourceView> TangentsSRV;
  FStaticMeshVertexDataInterface *TexcoordData;
  TRefCountPtr<FRHIShaderResourceView> TextureCoordinatesSRV;
  char *TangentsDataPtr;
  char *TexcoordDataPtr;
  unsigned int TangentsStride;
  unsigned int TexcoordStride;
  unsigned int NumTexCoords;
  unsigned int NumVertices;
  bool bUseFullPrecisionUVs;
  bool bUseHighPrecisionTangentBasis;
};

/* 4091 */
struct __cppobj FPositionVertexBuffer : FVertexBuffer
{
  TRefCountPtr<FRHIShaderResourceView> PositionComponentSRV;
  FPositionVertexData *VertexData;
  char *Data;
  unsigned int Stride;
  unsigned int NumVertices;
};

/* 4096 */
struct __cppobj FColorVertexBuffer : FVertexBuffer
{
  FColorVertexData *VertexData;
  TRefCountPtr<FRHIShaderResourceView> ColorComponentsSRV;
  char *Data;
  unsigned int Stride;
  unsigned int NumVertices;
};

/* 4097 */
struct FStaticMeshVertexBuffers
{
  FStaticMeshVertexBuffer StaticMeshVertexBuffer;
  FPositionVertexBuffer PositionVertexBuffer;
  FColorVertexBuffer ColorVertexBuffer;
};

/* 5659 */
struct __declspec(align(8)) FModelVertexBuffer
{
  unsigned int RefCount;
  TArray<FModelVertex,FDefaultAllocator> Vertices;
  FStaticMeshVertexBuffers Buffers;
  UModel *Model;
  unsigned int NumVerticesRHI;
};

/* 5658 */
struct __cppobj __declspec(align(8)) UModel : UObject
{
  TArray<FBspNode,FDefaultAllocator> Nodes;
  TArray<FVert,FDefaultAllocator> Verts;
  TArray<FVector,FDefaultAllocator> Vectors;
  TArray<FVector,FDefaultAllocator> Points;
  TArray<FBspSurf,FDefaultAllocator> Surfs;
  TArray<FLightmassPrimitiveSettings,FDefaultAllocator> LightmassSettings;
  TMap<UMaterialInterface *,TUniquePtr<FRawIndexBuffer16or32,TDefaultDelete<FRawIndexBuffer16or32> >,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<UMaterialInterface *,TUniquePtr<FRawIndexBuffer16or32,TDefaultDelete<FRawIndexBuffer16or32> >,0> > MaterialIndexBuffers;
  FModelVertexBuffer VertexBuffer;
  FRenderCommandFence ReleaseResourcesFence;
  bool InvalidSurfaces;
  bool bOnlyRebuildMaterialIndexBuffers;
  bool bInvalidForStaticLighting;
  unsigned int NumUniqueVertices;
  FGuid LightingGuid;
  bool RootOutside;
  bool Linked;
  int NumSharedSides;
  FBoxSphereBounds Bounds;
};

/* 5661 */
struct __cppobj ULevelActorContainer : UObject
{
  TArray<AActor *,FDefaultAllocator> Actors;
};

/* 5662 */
struct __cppobj __declspec(align(8)) ALevelScriptActor : AActor
{
  unsigned __int32 bInputEnabled : 1;
};

/* 5664 */
struct __cppobj __declspec(align(8)) ANavigationObjectBase : AActor, INavAgentInterface
{
  UCapsuleComponent *CapsuleComponent;
  UBillboardComponent *GoodSprite;
  UBillboardComponent *BadSprite;
  unsigned __int32 bIsPIEPlayerStart : 1;
};

/* 5673 */
struct __declspec(align(8)) FPrecomputedLightVolume
{
  FPrecomputedLightVolumeData *Data;
  bool bAddedToScene;
  TOctree<TVolumeLightingSample<3>,FLightVolumeOctreeSemantics> *OctreeForRendering;
  FVector WorldOriginOffset;
};

/* 5679 */
struct FPrecomputedVolumetricLightmap
{
  FPrecomputedVolumetricLightmapData *Data;
  bool bAddedToScene;
  FVector WorldOriginOffset;
};

/* 5683 */
struct TEnumAsByte<enum ELightingBuildQuality>
{
  char Value;
};

/* 5685 */
struct TSparseArray<TSetElement<TTuple<FGuid,FMeshMapBuildData> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<72,8> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 5686 */
struct __declspec(align(8)) TSet<TTuple<FGuid,FMeshMapBuildData>,TDefaultMapHashableKeyFuncs<FGuid,FMeshMapBuildData,0>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<TTuple<FGuid,FMeshMapBuildData> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 5687 */
struct TMapBase<FGuid,FMeshMapBuildData,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FGuid,FMeshMapBuildData,0> >
{
  TSet<TTuple<FGuid,FMeshMapBuildData>,TDefaultMapHashableKeyFuncs<FGuid,FMeshMapBuildData,0>,FDefaultSetAllocator> Pairs;
};

/* 5688 */
struct __cppobj TSortableMapBase<FGuid,FMeshMapBuildData,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FGuid,FMeshMapBuildData,0> > : TMapBase<FGuid,FMeshMapBuildData,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FGuid,FMeshMapBuildData,0> >
{
};

/* 5689 */
struct __cppobj TMap<FGuid,FMeshMapBuildData,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FGuid,FMeshMapBuildData,0> > : TSortableMapBase<FGuid,FMeshMapBuildData,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FGuid,FMeshMapBuildData,0> >
{
};

/* 5690 */
struct TSparseArray<TSetElement<TTuple<FGuid,FPrecomputedLightVolumeData *> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<32,8> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 5691 */
struct __declspec(align(8)) TSet<TTuple<FGuid,FPrecomputedLightVolumeData *>,TDefaultMapHashableKeyFuncs<FGuid,FPrecomputedLightVolumeData *,0>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<TTuple<FGuid,FPrecomputedLightVolumeData *> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 5692 */
struct TMapBase<FGuid,FPrecomputedLightVolumeData *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FGuid,FPrecomputedLightVolumeData *,0> >
{
  TSet<TTuple<FGuid,FPrecomputedLightVolumeData *>,TDefaultMapHashableKeyFuncs<FGuid,FPrecomputedLightVolumeData *,0>,FDefaultSetAllocator> Pairs;
};

/* 5693 */
struct __cppobj TSortableMapBase<FGuid,FPrecomputedLightVolumeData *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FGuid,FPrecomputedLightVolumeData *,0> > : TMapBase<FGuid,FPrecomputedLightVolumeData *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FGuid,FPrecomputedLightVolumeData *,0> >
{
};

/* 5694 */
struct __cppobj TMap<FGuid,FPrecomputedLightVolumeData *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FGuid,FPrecomputedLightVolumeData *,0> > : TSortableMapBase<FGuid,FPrecomputedLightVolumeData *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FGuid,FPrecomputedLightVolumeData *,0> >
{
};

/* 5695 */
struct TSparseArray<TSetElement<TTuple<FGuid,FPrecomputedVolumetricLightmapData *> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<32,8> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 5696 */
struct __declspec(align(8)) TSet<TTuple<FGuid,FPrecomputedVolumetricLightmapData *>,TDefaultMapHashableKeyFuncs<FGuid,FPrecomputedVolumetricLightmapData *,0>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<TTuple<FGuid,FPrecomputedVolumetricLightmapData *> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 5697 */
struct TMapBase<FGuid,FPrecomputedVolumetricLightmapData *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FGuid,FPrecomputedVolumetricLightmapData *,0> >
{
  TSet<TTuple<FGuid,FPrecomputedVolumetricLightmapData *>,TDefaultMapHashableKeyFuncs<FGuid,FPrecomputedVolumetricLightmapData *,0>,FDefaultSetAllocator> Pairs;
};

/* 5698 */
struct __cppobj TSortableMapBase<FGuid,FPrecomputedVolumetricLightmapData *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FGuid,FPrecomputedVolumetricLightmapData *,0> > : TMapBase<FGuid,FPrecomputedVolumetricLightmapData *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FGuid,FPrecomputedVolumetricLightmapData *,0> >
{
};

/* 5699 */
struct __cppobj TMap<FGuid,FPrecomputedVolumetricLightmapData *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FGuid,FPrecomputedVolumetricLightmapData *,0> > : TSortableMapBase<FGuid,FPrecomputedVolumetricLightmapData *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FGuid,FPrecomputedVolumetricLightmapData *,0> >
{
};

/* 5700 */
struct TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<144,16> >,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 5701 */
struct TSparseArray<TSetElement<TTuple<FGuid,FLightComponentMapBuildData> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<144,16> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 5702 */
struct __declspec(align(8)) TSet<TTuple<FGuid,FLightComponentMapBuildData>,TDefaultMapHashableKeyFuncs<FGuid,FLightComponentMapBuildData,0>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<TTuple<FGuid,FLightComponentMapBuildData> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 5703 */
struct TMapBase<FGuid,FLightComponentMapBuildData,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FGuid,FLightComponentMapBuildData,0> >
{
  TSet<TTuple<FGuid,FLightComponentMapBuildData>,TDefaultMapHashableKeyFuncs<FGuid,FLightComponentMapBuildData,0>,FDefaultSetAllocator> Pairs;
};

/* 5704 */
struct __cppobj TSortableMapBase<FGuid,FLightComponentMapBuildData,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FGuid,FLightComponentMapBuildData,0> > : TMapBase<FGuid,FLightComponentMapBuildData,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FGuid,FLightComponentMapBuildData,0> >
{
};

/* 5705 */
struct __cppobj TMap<FGuid,FLightComponentMapBuildData,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FGuid,FLightComponentMapBuildData,0> > : TSortableMapBase<FGuid,FLightComponentMapBuildData,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FGuid,FLightComponentMapBuildData,0> >
{
};

/* 5707 */
struct TSparseArray<TSetElement<TTuple<FGuid,FReflectionCaptureMapBuildData> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<88,8> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 5708 */
struct __declspec(align(8)) TSet<TTuple<FGuid,FReflectionCaptureMapBuildData>,TDefaultMapHashableKeyFuncs<FGuid,FReflectionCaptureMapBuildData,0>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<TTuple<FGuid,FReflectionCaptureMapBuildData> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 5709 */
struct TMapBase<FGuid,FReflectionCaptureMapBuildData,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FGuid,FReflectionCaptureMapBuildData,0> >
{
  TSet<TTuple<FGuid,FReflectionCaptureMapBuildData>,TDefaultMapHashableKeyFuncs<FGuid,FReflectionCaptureMapBuildData,0>,FDefaultSetAllocator> Pairs;
};

/* 5710 */
struct __cppobj TSortableMapBase<FGuid,FReflectionCaptureMapBuildData,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FGuid,FReflectionCaptureMapBuildData,0> > : TMapBase<FGuid,FReflectionCaptureMapBuildData,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FGuid,FReflectionCaptureMapBuildData,0> >
{
};

/* 5711 */
struct __cppobj TMap<FGuid,FReflectionCaptureMapBuildData,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FGuid,FReflectionCaptureMapBuildData,0> > : TSortableMapBase<FGuid,FReflectionCaptureMapBuildData,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FGuid,FReflectionCaptureMapBuildData,0> >
{
};

/* 5712 */
struct __cppobj UMapBuildDataRegistry : UObject
{
  TEnumAsByte<enum ELightingBuildQuality> LevelLightingQuality;
  TMap<FGuid,FMeshMapBuildData,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FGuid,FMeshMapBuildData,0> > MeshBuildData;
  TMap<FGuid,FPrecomputedLightVolumeData *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FGuid,FPrecomputedLightVolumeData *,0> > LevelPrecomputedLightVolumeBuildData;
  TMap<FGuid,FPrecomputedVolumetricLightmapData *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FGuid,FPrecomputedVolumetricLightmapData *,0> > LevelPrecomputedVolumetricLightmapBuildData;
  TMap<FGuid,FLightComponentMapBuildData,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FGuid,FLightComponentMapBuildData,0> > LightBuildData;
  TMap<FGuid,FReflectionCaptureMapBuildData,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FGuid,FReflectionCaptureMapBuildData,0> > ReflectionCaptureBuildData;
  FRenderCommandFence DestroyFence;
};

/* 5719 */
struct TSubclassOf<UDamageType>
{
  UClass *Class;
};

/* 5720 */
struct TSubclassOf<ADefaultPhysicsVolume>
{
  UClass *Class;
};

/* 5721 */
struct TSubclassOf<UPhysicsCollisionHandler>
{
  UClass *Class;
};

/* 5723 */
struct TSubclassOf<AGameNetworkManager>
{
  UClass *Class;
};

/* 5724 */
struct TEnumAsByte<enum EVisibilityAggressiveness>
{
  char Value;
};

/* 5725 */
struct TEnumAsByte<enum EVolumeLightingMethod>
{
  char Value;
};

/* 5726 */
struct FLightmassWorldInfoSettings
{
  float StaticLightingLevelScale;
  int NumIndirectLightingBounces;
  int NumSkyLightingBounces;
  float IndirectLightingQuality;
  float IndirectLightingSmoothness;
  FColor EnvironmentColor;
  float EnvironmentIntensity;
  float EmissiveBoost;
  float DiffuseBoost;
  TEnumAsByte<enum EVolumeLightingMethod> VolumeLightingMethod;
  float VolumetricLightmapDetailCellSize;
  float VolumetricLightmapMaximumBrickMemoryMb;
  float VolumetricLightmapSphericalHarmonicSmoothing;
  float VolumeLightSamplePlacementScale;
  unsigned __int32 bUseAmbientOcclusion : 1;
  unsigned __int32 bGenerateAmbientOcclusionMaterialMask : 1;
  float DirectIlluminationOcclusionFraction;
  float IndirectIlluminationOcclusionFraction;
  float OcclusionExponent;
  float FullyOccludedSamplesFraction;
  float MaxOcclusionDistance;
  unsigned __int32 bVisualizeMaterialDiffuse : 1;
  unsigned __int32 bVisualizeAmbientOcclusion : 1;
  unsigned __int32 bCompressLightmaps : 1;
};

/* 5727 */
struct TEnumAsByte<enum ReverbPreset>
{
  char Value;
};

/* 5732 */
struct FReverbSettings
{
  unsigned __int32 bApplyReverb : 1;
  TEnumAsByte<enum ReverbPreset> ReverbType_DEPRECATED;
  UReverbEffect *ReverbEffect;
  USoundEffectSubmixPreset *ReverbPluginEffect;
  float Volume;
  float FadeTime;
};

/* 5733 */
struct FInteriorSettings
{
  unsigned __int32 bIsWorldSettings : 1;
  float ExteriorVolume;
  float ExteriorTime;
  float ExteriorLPF;
  float ExteriorLPFTime;
  float InteriorVolume;
  float InteriorTime;
  float InteriorLPF;
  float InteriorLPFTime;
};

/* 5738 */
struct TArray<FNetViewer,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 5739 */
struct FBroadphaseSettings
{
  bool bUseMBPOnClient;
  bool bUseMBPOnServer;
  FBox MBPBounds;
  unsigned int MBPNumSubdivs;
};

/* 5740 */
struct __cppobj AWorldSettings : AInfo, IInterface_AssetUserData
{
  unsigned __int32 bEnableWorldBoundsChecks : 1;
  unsigned __int32 bEnableNavigationSystem : 1;
  unsigned __int32 bEnableAISystem : 1;
  unsigned __int32 bEnableWorldComposition : 1;
  unsigned __int32 bUseClientSideLevelStreamingVolumes : 1;
  unsigned __int32 bEnableWorldOriginRebasing : 1;
  unsigned __int32 bWorldGravitySet : 1;
  unsigned __int32 bGlobalGravitySet : 1;
  UNavigationSystemConfig *NavigationSystemConfig;
  float KillZ;
  TSubclassOf<UDamageType> KillZDamageType;
  float WorldGravityZ;
  float GlobalGravityZ;
  TSubclassOf<ADefaultPhysicsVolume> DefaultPhysicsVolumeClass;
  TSubclassOf<UPhysicsCollisionHandler> PhysicsCollisionHandlerClass;
  TSubclassOf<AGameModeBase> DefaultGameMode;
  TSubclassOf<AGameNetworkManager> GameNetworkManagerClass;
  int PackedLightAndShadowMapTextureSize;
  unsigned __int32 bMinimizeBSPSections : 1;
  FVector DefaultColorScale;
  float DefaultMaxDistanceFieldOcclusionDistance;
  float GlobalDistanceFieldViewDistance;
  float DynamicIndirectShadowsSelfShadowingIntensity;
  unsigned __int32 bPrecomputeVisibility : 1;
  unsigned __int32 bPlaceCellsOnlyAlongCameraTracks : 1;
  int VisibilityCellSize;
  TEnumAsByte<enum EVisibilityAggressiveness> VisibilityAggressiveness;
  unsigned __int32 bForceNoPrecomputedLighting : 1;
  FLightmassWorldInfoSettings LightmassSettings;
  FReverbSettings DefaultReverbSettings;
  FInteriorSettings DefaultAmbientZoneSettings;
  USoundMix *DefaultBaseSoundMix;
  float WorldToMeters;
  float MonoCullingDistance;
  UBookMark *BookMarks[10];
  float TimeDilation;
  float MatineeTimeDilation;
  float DemoPlayTimeDilation;
  float MinGlobalTimeDilation;
  float MaxGlobalTimeDilation;
  float MinUndilatedFrameTime;
  float MaxUndilatedFrameTime;
  APlayerState *Pauser;
  unsigned __int32 bHighPriorityLoading : 1;
  unsigned __int32 bHighPriorityLoadingLocal : 1;
  TArray<FNetViewer,FDefaultAllocator> ReplicationViewers;
  bool bOverrideDefaultBroadphaseSettings;
  FBroadphaseSettings BroadphaseSettings;
  TArray<UAssetUserData *,FDefaultAllocator> AssetUserData;
};

/* 82 */
enum $1B117507190249A313A65B168F561FD6
{
  BlueprintImplementableEvent = 0x0,
  BlueprintNativeEvent = 0x1,
  SealedEvent = 0x2,
  Exec = 0x3,
  Server = 0x4,
  Client = 0x5,
  NetMulticast = 0x6,
  Reliable = 0x7,
  Unreliable = 0x8,
  BlueprintPure = 0x9,
  BlueprintCallable = 0xA,
  BlueprintGetter = 0xB,
  BlueprintSetter = 0xC,
  BlueprintAuthorityOnly = 0xD,
  BlueprintCosmetic = 0xE,
  BlueprintInternalUseOnly = 0xF,
  CallInEditor = 0x10,
  CustomThunk = 0x11,
  Category = 0x12,
  WithValidation = 0x13,
  ServiceRequest = 0x14,
  ServiceResponse = 0x15,
};

/* 232 */
typedef $1B117507190249A313A65B168F561FD6 Handler::Mode;

/* 5498 */
struct __cppobj TBaseDelegate<TTypeWrapper<void>,void *,int,int> : FDelegateBase
{
};

/* 5499 */
struct __cppobj TBaseDelegate<void,void *,int,int> : TBaseDelegate<TTypeWrapper<void>,void *,int,int>
{
};

/* 5500 */
struct TArray<TSharedPtr<HandlerComponent,0>,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 5509 */
struct TSharedPtr<FEncryptionComponent,0>
{
  FEncryptionComponent *Object;
  SharedPointerInternals::FSharedReferencer<0> SharedReferenceCount;
};

/* 231 */
enum Handler::State
{
  Uninitialized = 0x0,
  InitializingComponents = 0x1,
  Initialized = 0x2,
};

/* 5510 */
struct TArray<BufferedPacket *,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 5513 */
struct TQueue<BufferedPacket *,1>
{
  TQueue<BufferedPacket *,1>::TNode *volatile Head;
  TQueue<BufferedPacket *,1>::TNode *Tail;
};

/* 5515 */
struct TSharedPtr<ReliabilityHandlerComponent,0>
{
  ReliabilityHandlerComponent *Object;
  SharedPointerInternals::FSharedReferencer<0> SharedReferenceCount;
};

/* 5496 */
struct PacketHandler
{
  PacketHandlerVtbl *vfptr;
  __declspec(align(16)) Handler::Mode Mode;
  float Time;
  bool bConnectionlessHandler;
  TBaseDelegate<void,void *,int,int> LowLevelSendDel;
  TBaseDelegate<void> HandshakeCompleteDel;
  FBitWriter OutgoingPacket;
  FBitReader IncomingPacket;
  TArray<TSharedPtr<HandlerComponent,0>,FDefaultAllocator> HandlerComponents;
  TSharedPtr<FEncryptionComponent,0> EncryptionComponent;
  unsigned int MaxPacketBits;
  Handler::State State;
  TArray<BufferedPacket *,FDefaultAllocator> BufferedPackets;
  TQueue<BufferedPacket *,1> QueuedPackets;
  TQueue<BufferedPacket *,1> QueuedRawPackets;
  TQueue<BufferedPacket *,1> QueuedHandlerPackets;
  TArray<BufferedPacket *,FDefaultAllocator> BufferedConnectionlessPackets;
  TQueue<BufferedPacket *,1> QueuedConnectionlessPackets;
  TSharedPtr<ReliabilityHandlerComponent,0> ReliabilityComponent;
  bool bRawSend;
  TSharedPtr<IAnalyticsProvider,0> Provider;
  bool bBeganHandshaking;
};

/* 233 */
typedef Handler::State Handler::Component::State;

/* 5501 */
struct HandlerComponent
{
  HandlerComponentVtbl *vfptr;
  PacketHandler *Handler;
  Handler::Component::State State;
  unsigned int MaxOutgoingBits;
  bool bRequiresHandshake;
  bool bRequiresReliability;
  bool bActive;
  bool bInitialized;
  FName Name;
};

/* 5518 */
struct __cppobj __declspec(align(8)) StatelessConnectHandlerComponent : HandlerComponent
{
  UNetDriver *Driver;
  TArray<unsigned char,FDefaultAllocator> HandshakeSecret[2];
  char ActiveSecret;
  float LastSecretUpdateTimestamp;
  FString LastChallengeSuccessAddress;
  int LastServerSequence;
  int LastClientSequence;
  long double LastClientSendTimestamp;
  long double LastChallengeTimestamp;
  char LastSecretId;
  float LastTimestamp;
  char LastCookie[20];
};

/* 5503 */
struct IAnalyticsProvider
{
  IAnalyticsProviderVtbl *vfptr;
};

/* 4024 */
struct __cppobj TDefaultDelete<FWorldTileInfo>
{
};

/* 4029 */
struct __cppobj TUniquePtr<FWorldTileInfo,TDefaultDelete<FWorldTileInfo> > : TDefaultDelete<FWorldTileInfo>
{
  FWorldTileInfo *Ptr;
};

/* 3951 */
struct __cppobj UPackage : UObject
{
  __int8 bDirty : 1;
  __int8 bHasBeenFullyLoaded : 1;
  float LoadTime;
  FGuid Guid;
  TArray<int,FDefaultAllocator> ChunkIDs;
  unsigned int PackageFlagsPrivate;
  int PIEInstanceID;
  FName FileName;
  FLinkerLoad *LinkerLoad;
  int LinkerPackageVersion;
  int LinkerLicenseeVersion;
  FCustomVersionContainer LinkerCustomVersion;
  unsigned __int64 FileSize;
  TUniquePtr<FWorldTileInfo,TDefaultDelete<FWorldTileInfo> > WorldTileInfo;
};

/* 5520 */
struct TSparseArray<TSetElement<TTuple<FNetworkGUID,FNetGuidCacheObject> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<64,8> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 5521 */
struct __declspec(align(8)) TSet<TTuple<FNetworkGUID,FNetGuidCacheObject>,TDefaultMapHashableKeyFuncs<FNetworkGUID,FNetGuidCacheObject,0>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<TTuple<FNetworkGUID,FNetGuidCacheObject> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 5522 */
struct TMapBase<FNetworkGUID,FNetGuidCacheObject,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FNetworkGUID,FNetGuidCacheObject,0> >
{
  TSet<TTuple<FNetworkGUID,FNetGuidCacheObject>,TDefaultMapHashableKeyFuncs<FNetworkGUID,FNetGuidCacheObject,0>,FDefaultSetAllocator> Pairs;
};

/* 5523 */
struct __cppobj TSortableMapBase<FNetworkGUID,FNetGuidCacheObject,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FNetworkGUID,FNetGuidCacheObject,0> > : TMapBase<FNetworkGUID,FNetGuidCacheObject,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FNetworkGUID,FNetGuidCacheObject,0> >
{
};

/* 5524 */
struct __cppobj TMap<FNetworkGUID,FNetGuidCacheObject,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FNetworkGUID,FNetGuidCacheObject,0> > : TSortableMapBase<FNetworkGUID,FNetGuidCacheObject,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FNetworkGUID,FNetGuidCacheObject,0> >
{
};

/* 5525 */
struct TSparseArray<TSetElement<TTuple<TWeakObjectPtr<UObject,FWeakObjectPtr>,FNetworkGUID> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<20,4> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 5526 */
struct __declspec(align(8)) TSet<TTuple<TWeakObjectPtr<UObject,FWeakObjectPtr>,FNetworkGUID>,TDefaultMapHashableKeyFuncs<TWeakObjectPtr<UObject,FWeakObjectPtr>,FNetworkGUID,0>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<TTuple<TWeakObjectPtr<UObject,FWeakObjectPtr>,FNetworkGUID> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 5527 */
struct TMapBase<TWeakObjectPtr<UObject,FWeakObjectPtr>,FNetworkGUID,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<TWeakObjectPtr<UObject,FWeakObjectPtr>,FNetworkGUID,0> >
{
  TSet<TTuple<TWeakObjectPtr<UObject,FWeakObjectPtr>,FNetworkGUID>,TDefaultMapHashableKeyFuncs<TWeakObjectPtr<UObject,FWeakObjectPtr>,FNetworkGUID,0>,FDefaultSetAllocator> Pairs;
};

/* 5528 */
struct __cppobj TSortableMapBase<TWeakObjectPtr<UObject,FWeakObjectPtr>,FNetworkGUID,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<TWeakObjectPtr<UObject,FWeakObjectPtr>,FNetworkGUID,0> > : TMapBase<TWeakObjectPtr<UObject,FWeakObjectPtr>,FNetworkGUID,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<TWeakObjectPtr<UObject,FWeakObjectPtr>,FNetworkGUID,0> >
{
};

/* 5529 */
struct __cppobj TMap<TWeakObjectPtr<UObject,FWeakObjectPtr>,FNetworkGUID,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<TWeakObjectPtr<UObject,FWeakObjectPtr>,FNetworkGUID,0> > : TSortableMapBase<TWeakObjectPtr<UObject,FWeakObjectPtr>,FNetworkGUID,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<TWeakObjectPtr<UObject,FWeakObjectPtr>,FNetworkGUID,0> >
{
};

/* 5530 */
struct TSparseArray<TSetElement<TTuple<FNetworkGUID,TSet<FNetworkGUID,DefaultKeyFuncs<FNetworkGUID,0>,FDefaultSetAllocator> > >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<96,8> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 5531 */
struct __declspec(align(8)) TSet<TTuple<FNetworkGUID,TSet<FNetworkGUID,DefaultKeyFuncs<FNetworkGUID,0>,FDefaultSetAllocator> >,TDefaultMapHashableKeyFuncs<FNetworkGUID,TSet<FNetworkGUID,DefaultKeyFuncs<FNetworkGUID,0>,FDefaultSetAllocator>,0>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<TTuple<FNetworkGUID,TSet<FNetworkGUID,DefaultKeyFuncs<FNetworkGUID,0>,FDefaultSetAllocator> > >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 5532 */
struct TMapBase<FNetworkGUID,TSet<FNetworkGUID,DefaultKeyFuncs<FNetworkGUID,0>,FDefaultSetAllocator>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FNetworkGUID,TSet<FNetworkGUID,DefaultKeyFuncs<FNetworkGUID,0>,FDefaultSetAllocator>,0> >
{
  TSet<TTuple<FNetworkGUID,TSet<FNetworkGUID,DefaultKeyFuncs<FNetworkGUID,0>,FDefaultSetAllocator> >,TDefaultMapHashableKeyFuncs<FNetworkGUID,TSet<FNetworkGUID,DefaultKeyFuncs<FNetworkGUID,0>,FDefaultSetAllocator>,0>,FDefaultSetAllocator> Pairs;
};

/* 5533 */
struct __cppobj TSortableMapBase<FNetworkGUID,TSet<FNetworkGUID,DefaultKeyFuncs<FNetworkGUID,0>,FDefaultSetAllocator>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FNetworkGUID,TSet<FNetworkGUID,DefaultKeyFuncs<FNetworkGUID,0>,FDefaultSetAllocator>,0> > : TMapBase<FNetworkGUID,TSet<FNetworkGUID,DefaultKeyFuncs<FNetworkGUID,0>,FDefaultSetAllocator>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FNetworkGUID,TSet<FNetworkGUID,DefaultKeyFuncs<FNetworkGUID,0>,FDefaultSetAllocator>,0> >
{
};

/* 5534 */
struct __cppobj TMap<FNetworkGUID,TSet<FNetworkGUID,DefaultKeyFuncs<FNetworkGUID,0>,FDefaultSetAllocator>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FNetworkGUID,TSet<FNetworkGUID,DefaultKeyFuncs<FNetworkGUID,0>,FDefaultSetAllocator>,0> > : TSortableMapBase<FNetworkGUID,TSet<FNetworkGUID,DefaultKeyFuncs<FNetworkGUID,0>,FDefaultSetAllocator>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FNetworkGUID,TSet<FNetworkGUID,DefaultKeyFuncs<FNetworkGUID,0>,FDefaultSetAllocator>,0> >
{
};

/* 5535 */
struct TSparseArray<TSetElement<TTuple<FName,FNetworkGUID> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<24,8> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 5536 */
struct __declspec(align(8)) TSet<TTuple<FName,FNetworkGUID>,TDefaultMapHashableKeyFuncs<FName,FNetworkGUID,0>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<TTuple<FName,FNetworkGUID> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 5537 */
struct TMapBase<FName,FNetworkGUID,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,FNetworkGUID,0> >
{
  TSet<TTuple<FName,FNetworkGUID>,TDefaultMapHashableKeyFuncs<FName,FNetworkGUID,0>,FDefaultSetAllocator> Pairs;
};

/* 5538 */
struct __cppobj TSortableMapBase<FName,FNetworkGUID,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,FNetworkGUID,0> > : TMapBase<FName,FNetworkGUID,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,FNetworkGUID,0> >
{
};

/* 5539 */
struct __cppobj TMap<FName,FNetworkGUID,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,FNetworkGUID,0> > : TSortableMapBase<FName,FNetworkGUID,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,FNetworkGUID,0> >
{
};

/* 938 */
typedef _PaddingMode FNetGUIDCache::ENetworkChecksumMode;

/* 939 */
enum FNetGUIDCache::EAsyncLoadMode
{
  UseCVar = 0x0,
  ForceDisable = 0x1,
  ForceEnable = 0x2,
};

/* 5540 */
struct TSparseArray<TSetElement<TTuple<FString,TSharedPtr<FNetFieldExportGroup,0> > >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<40,8> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 5541 */
struct __declspec(align(8)) TSet<TTuple<FString,TSharedPtr<FNetFieldExportGroup,0> >,TDefaultMapHashableKeyFuncs<FString,TSharedPtr<FNetFieldExportGroup,0>,0>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<TTuple<FString,TSharedPtr<FNetFieldExportGroup,0> > >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 5542 */
struct TMapBase<FString,TSharedPtr<FNetFieldExportGroup,0>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FString,TSharedPtr<FNetFieldExportGroup,0>,0> >
{
  TSet<TTuple<FString,TSharedPtr<FNetFieldExportGroup,0> >,TDefaultMapHashableKeyFuncs<FString,TSharedPtr<FNetFieldExportGroup,0>,0>,FDefaultSetAllocator> Pairs;
};

/* 5543 */
struct __cppobj TSortableMapBase<FString,TSharedPtr<FNetFieldExportGroup,0>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FString,TSharedPtr<FNetFieldExportGroup,0>,0> > : TMapBase<FString,TSharedPtr<FNetFieldExportGroup,0>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FString,TSharedPtr<FNetFieldExportGroup,0>,0> >
{
};

/* 5544 */
struct __cppobj TMap<FString,TSharedPtr<FNetFieldExportGroup,0>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FString,TSharedPtr<FNetFieldExportGroup,0>,0> > : TSortableMapBase<FString,TSharedPtr<FNetFieldExportGroup,0>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FString,TSharedPtr<FNetFieldExportGroup,0>,0> >
{
};

/* 5545 */
struct TSparseArray<TSetElement<TTuple<FString,unsigned int> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<32,8> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 5546 */
struct __declspec(align(8)) TSet<TTuple<FString,unsigned int>,TDefaultMapHashableKeyFuncs<FString,unsigned int,0>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<TTuple<FString,unsigned int> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 5547 */
struct TMapBase<FString,unsigned int,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FString,unsigned int,0> >
{
  TSet<TTuple<FString,unsigned int>,TDefaultMapHashableKeyFuncs<FString,unsigned int,0>,FDefaultSetAllocator> Pairs;
};

/* 5548 */
struct __cppobj TSortableMapBase<FString,unsigned int,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FString,unsigned int,0> > : TMapBase<FString,unsigned int,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FString,unsigned int,0> >
{
};

/* 5549 */
struct __cppobj TMap<FString,unsigned int,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FString,unsigned int,0> > : TSortableMapBase<FString,unsigned int,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FString,unsigned int,0> >
{
};

/* 5550 */
struct TSparseArray<TSetElement<TTuple<unsigned int,FString> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<32,8> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 5551 */
struct __declspec(align(8)) TSet<TTuple<unsigned int,FString>,TDefaultMapHashableKeyFuncs<unsigned int,FString,0>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<TTuple<unsigned int,FString> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 5552 */
struct TMapBase<unsigned int,FString,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<unsigned int,FString,0> >
{
  TSet<TTuple<unsigned int,FString>,TDefaultMapHashableKeyFuncs<unsigned int,FString,0>,FDefaultSetAllocator> Pairs;
};

/* 5553 */
struct __cppobj TSortableMapBase<unsigned int,FString,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<unsigned int,FString,0> > : TMapBase<unsigned int,FString,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<unsigned int,FString,0> >
{
};

/* 5554 */
struct __cppobj TMap<unsigned int,FString,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<unsigned int,FString,0> > : TSortableMapBase<unsigned int,FString,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<unsigned int,FString,0> >
{
};

/* 5555 */
struct __declspec(align(8)) FNetGUIDCache
{
  TMap<FNetworkGUID,FNetGuidCacheObject,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FNetworkGUID,FNetGuidCacheObject,0> > ObjectLookup;
  TMap<TWeakObjectPtr<UObject,FWeakObjectPtr>,FNetworkGUID,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<TWeakObjectPtr<UObject,FWeakObjectPtr>,FNetworkGUID,0> > NetGUIDLookup;
  int UniqueNetIDs[2];
  TSet<FNetworkGUID,DefaultKeyFuncs<FNetworkGUID,0>,FDefaultSetAllocator> ImportedNetGuids;
  TMap<FNetworkGUID,TSet<FNetworkGUID,DefaultKeyFuncs<FNetworkGUID,0>,FDefaultSetAllocator>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FNetworkGUID,TSet<FNetworkGUID,DefaultKeyFuncs<FNetworkGUID,0>,FDefaultSetAllocator>,0> > PendingOuterNetGuids;
  bool IsExportingNetGUIDBunch;
  UNetDriver *Driver;
  TMap<FName,FNetworkGUID,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,FNetworkGUID,0> > PendingAsyncPackages;
  FNetGUIDCache::ENetworkChecksumMode NetworkChecksumMode;
  FNetGUIDCache::EAsyncLoadMode AsyncLoadMode;
  TMap<FString,TSharedPtr<FNetFieldExportGroup,0>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FString,TSharedPtr<FNetFieldExportGroup,0>,0> > NetFieldExportGroupMap;
  TMap<FString,unsigned int,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FString,unsigned int,0> > NetFieldExportGroupPathToIndex;
  TMap<unsigned int,FString,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<unsigned int,FString,0> > NetFieldExportGroupIndexToPath;
  int UniqueNetFieldExportGroupPathIndex;
};

/* 5557 */
struct TSparseArray<TSetElement<TTuple<TWeakObjectPtr<UClass const ,FWeakObjectPtr>,FClassNetCache *> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<24,8> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 5558 */
struct __declspec(align(8)) TSet<TTuple<TWeakObjectPtr<UClass const ,FWeakObjectPtr>,FClassNetCache *>,TDefaultMapHashableKeyFuncs<TWeakObjectPtr<UClass const ,FWeakObjectPtr>,FClassNetCache *,0>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<TTuple<TWeakObjectPtr<UClass const ,FWeakObjectPtr>,FClassNetCache *> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 5559 */
struct TMapBase<TWeakObjectPtr<UClass const ,FWeakObjectPtr>,FClassNetCache *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<TWeakObjectPtr<UClass const ,FWeakObjectPtr>,FClassNetCache *,0> >
{
  TSet<TTuple<TWeakObjectPtr<UClass const ,FWeakObjectPtr>,FClassNetCache *>,TDefaultMapHashableKeyFuncs<TWeakObjectPtr<UClass const ,FWeakObjectPtr>,FClassNetCache *,0>,FDefaultSetAllocator> Pairs;
};

/* 5560 */
struct __cppobj TSortableMapBase<TWeakObjectPtr<UClass const ,FWeakObjectPtr>,FClassNetCache *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<TWeakObjectPtr<UClass const ,FWeakObjectPtr>,FClassNetCache *,0> > : TMapBase<TWeakObjectPtr<UClass const ,FWeakObjectPtr>,FClassNetCache *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<TWeakObjectPtr<UClass const ,FWeakObjectPtr>,FClassNetCache *,0> >
{
};

/* 5561 */
struct __cppobj TMap<TWeakObjectPtr<UClass const ,FWeakObjectPtr>,FClassNetCache *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<TWeakObjectPtr<UClass const ,FWeakObjectPtr>,FClassNetCache *,0> > : TSortableMapBase<TWeakObjectPtr<UClass const ,FWeakObjectPtr>,FClassNetCache *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<TWeakObjectPtr<UClass const ,FWeakObjectPtr>,FClassNetCache *,0> >
{
};

/* 5562 */
struct FClassNetCacheMgr
{
  bool bDebugChecksum;
  int DebugChecksumIndent;
  TMap<TWeakObjectPtr<UClass const ,FWeakObjectPtr>,FClassNetCache *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<TWeakObjectPtr<UClass const ,FWeakObjectPtr>,FClassNetCache *,0> > ClassFieldIndices;
};

/* 5592 */
struct __cppobj UReplicationDriver : UObject
{
};

/* 5593 */
struct TSparseArray<TSetElement<TSharedPtr<FNetworkObjectInfo,0> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<24,8> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 5594 */
struct __declspec(align(8)) TSet<TSharedPtr<FNetworkObjectInfo,0>,FNetworkObjectKeyFuncs,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<TSharedPtr<FNetworkObjectInfo,0> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 5595 */
struct TSparseArray<TSetElement<TTuple<TWeakObjectPtr<UNetConnection,FWeakObjectPtr>,int> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<20,4> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 5596 */
struct __declspec(align(8)) TSet<TTuple<TWeakObjectPtr<UNetConnection,FWeakObjectPtr>,int>,TDefaultMapHashableKeyFuncs<TWeakObjectPtr<UNetConnection,FWeakObjectPtr>,int,0>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<TTuple<TWeakObjectPtr<UNetConnection,FWeakObjectPtr>,int> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 5597 */
struct TMapBase<TWeakObjectPtr<UNetConnection,FWeakObjectPtr>,int,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<TWeakObjectPtr<UNetConnection,FWeakObjectPtr>,int,0> >
{
  TSet<TTuple<TWeakObjectPtr<UNetConnection,FWeakObjectPtr>,int>,TDefaultMapHashableKeyFuncs<TWeakObjectPtr<UNetConnection,FWeakObjectPtr>,int,0>,FDefaultSetAllocator> Pairs;
};

/* 5598 */
struct __cppobj TSortableMapBase<TWeakObjectPtr<UNetConnection,FWeakObjectPtr>,int,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<TWeakObjectPtr<UNetConnection,FWeakObjectPtr>,int,0> > : TMapBase<TWeakObjectPtr<UNetConnection,FWeakObjectPtr>,int,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<TWeakObjectPtr<UNetConnection,FWeakObjectPtr>,int,0> >
{
};

/* 5599 */
struct __cppobj TMap<TWeakObjectPtr<UNetConnection,FWeakObjectPtr>,int,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<TWeakObjectPtr<UNetConnection,FWeakObjectPtr>,int,0> > : TSortableMapBase<TWeakObjectPtr<UNetConnection,FWeakObjectPtr>,int,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<TWeakObjectPtr<UNetConnection,FWeakObjectPtr>,int,0> >
{
};

/* 5600 */
struct FNetworkObjectList
{
  TSet<TSharedPtr<FNetworkObjectInfo,0>,FNetworkObjectKeyFuncs,FDefaultSetAllocator> AllNetworkObjects;
  TSet<TSharedPtr<FNetworkObjectInfo,0>,FNetworkObjectKeyFuncs,FDefaultSetAllocator> ActiveNetworkObjects;
  TSet<TSharedPtr<FNetworkObjectInfo,0>,FNetworkObjectKeyFuncs,FDefaultSetAllocator> ObjectsDormantOnAllConnections;
  TMap<TWeakObjectPtr<UNetConnection,FWeakObjectPtr>,int,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<TWeakObjectPtr<UNetConnection,FWeakObjectPtr>,int,0> > NumDormantObjectsPerConnection;
};

/* 4160 */
struct __declspec(align(4)) FConstraintBaseParams
{
  float Stiffness;
  float Damping;
  float Restitution;
  float ContactDistance;
  __int8 bSoftConstraint : 1;
};

/* 4161 */
struct TEnumAsByte<enum ELinearConstraintMotion>
{
  char Value;
};

/* 4162 */
struct __cppobj __declspec(align(2)) FLinearConstraint : FConstraintBaseParams
{
  float Limit;
  TEnumAsByte<enum ELinearConstraintMotion> XMotion;
  TEnumAsByte<enum ELinearConstraintMotion> YMotion;
  TEnumAsByte<enum ELinearConstraintMotion> ZMotion;
};

/* 4163 */
struct TEnumAsByte<enum EAngularConstraintMotion>
{
  char Value;
};

/* 4164 */
struct __cppobj __declspec(align(4)) FConeConstraint : FConstraintBaseParams
{
  float Swing1LimitDegrees;
  float Swing2LimitDegrees;
  TEnumAsByte<enum EAngularConstraintMotion> Swing1Motion;
  TEnumAsByte<enum EAngularConstraintMotion> Swing2Motion;
};

/* 4165 */
struct __cppobj __declspec(align(4)) FTwistConstraint : FConstraintBaseParams
{
  float TwistLimitDegrees;
  TEnumAsByte<enum EAngularConstraintMotion> TwistMotion;
};

/* 4166 */
struct __declspec(align(4)) FConstraintDrive
{
  float Stiffness;
  float Damping;
  float MaxForce;
  __int8 bEnablePositionDrive : 1;
  __int8 bEnableVelocityDrive : 1;
};

/* 4167 */
struct __declspec(align(4)) FLinearDriveConstraint
{
  FVector PositionTarget;
  FVector VelocityTarget;
  FConstraintDrive XDrive;
  FConstraintDrive YDrive;
  FConstraintDrive ZDrive;
  __int8 bEnablePositionDrive : 1;
};

/* 4168 */
struct TEnumAsByte<enum EAngularDriveMode::Type>
{
  char Value;
};

/* 4169 */
struct __declspec(align(4)) FAngularDriveConstraint
{
  FConstraintDrive TwistDrive;
  FConstraintDrive SwingDrive;
  FConstraintDrive SlerpDrive;
  FRotator OrientationTarget;
  FVector AngularVelocityTarget;
  TEnumAsByte<enum EAngularDriveMode::Type> AngularDriveMode;
};

/* 4170 */
struct __declspec(align(4)) FConstraintProfileProperties
{
  float ProjectionLinearTolerance;
  float ProjectionAngularTolerance;
  float LinearBreakThreshold;
  float AngularBreakThreshold;
  FLinearConstraint LinearLimit;
  FConeConstraint ConeLimit;
  FTwistConstraint TwistLimit;
  FLinearDriveConstraint LinearDrive;
  FAngularDriveConstraint AngularDrive;
  __int8 bDisableCollision : 1;
  __int8 bParentDominates : 1;
  __int8 bEnableProjection : 1;
  __int8 bAngularBreakable : 1;
  __int8 bLinearBreakable : 1;
};

/* 4171 */
struct __cppobj TBaseDelegate<TTypeWrapper<void>,int> : FDelegateBase
{
};

/* 4172 */
struct __cppobj TBaseDelegate<void,int> : TBaseDelegate<TTypeWrapper<void>,int>
{
};

/* 4173 */
struct FConstraintInstance
{
  int ConstraintIndex;
  physx::PxD6Joint *ConstraintData;
  int SceneIndex;
  FName JointName;
  FName ConstraintBone1;
  FName ConstraintBone2;
  FVector Pos1;
  FVector PriAxis1;
  FVector SecAxis1;
  FVector Pos2;
  FVector PriAxis2;
  FVector SecAxis2;
  FRotator AngularRotationOffset;
  unsigned __int32 bScaleLinearLimits : 1;
  float AverageMass;
  FConstraintProfileProperties ProfileInstance;
  FPhysxUserData PhysxUserData;
  float LastKnownScale;
  TBaseDelegate<void,int> OnConstraintBrokenDelegate;
};

/* 4140 */
struct TEnumAsByte<enum EWalkableSlopeBehavior>
{
  char Value;
};

/* 4141 */
struct FWalkableSlopeOverride
{
  TEnumAsByte<enum EWalkableSlopeBehavior> WalkableSlopeBehavior;
  float WalkableSlopeAngle;
  float CachedSlopeAngle;
  float CachedSlopeCos;
};

/* 4129 */
struct TEnumAsByte<enum EFrictionCombineMode::Type>
{
  char Value;
};

/* 4131 */
struct TEnumAsByte<enum EPhysicalSurface>
{
  char Value;
};

/* 4132 */
struct TArray<FTireFrictionScalePair,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 4139 */
struct __cppobj UPhysicalMaterial : UObject
{
  float Friction;
  TEnumAsByte<enum EFrictionCombineMode::Type> FrictionCombineMode;
  bool bOverrideFrictionCombineMode;
  float Restitution;
  TEnumAsByte<enum EFrictionCombineMode::Type> RestitutionCombineMode;
  bool bOverrideRestitutionCombineMode;
  float Density;
  float RaiseMassToPower;
  float DestructibleDamageThresholdScale;
  UDEPRECATED_PhysicalMaterialPropertyBase *PhysicalMaterialProperty;
  TEnumAsByte<enum EPhysicalSurface> SurfaceType;
  float TireFrictionScale;
  TArray<FTireFrictionScalePair,FDefaultAllocator> TireFrictionScales;
  physx::PxMaterial *PMaterial;
  FPhysxUserData PhysxUserData;
};

/* 4136 */
struct physx::PxFlags<enum physx::PxBaseFlag::Enum,unsigned short>
{
  unsigned __int16 mBits;
};

/* 4133 */
struct __declspec(align(8)) physx::PxBase
{
  physx::PxBaseVtbl *vfptr;
  unsigned __int16 mConcreteType;
  physx::PxFlags<enum physx::PxBaseFlag::Enum,unsigned short> mBaseFlags;
};

/* 4175 */
struct __cppobj physx::PxActor : physx::PxBase
{
  void *userData;
};

/* 4176 */
struct __cppobj physx::PxRigidActor : physx::PxActor
{
};

/* 4177 */
struct __cppobj physx::PxAggregate : physx::PxBase
{
};

/* 4178 */
struct TArray<char,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 4188 */
struct TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<96,16> >,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 4189 */
struct TSparseArray<TSetElement<TTuple<physx::PxShape *,FBodyInstance::FWeldInfo> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<96,16> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 4190 */
struct __declspec(align(8)) TSet<TTuple<physx::PxShape *,FBodyInstance::FWeldInfo>,TDefaultMapHashableKeyFuncs<physx::PxShape *,FBodyInstance::FWeldInfo,0>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<TTuple<physx::PxShape *,FBodyInstance::FWeldInfo> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 4191 */
struct TMapBase<physx::PxShape *,FBodyInstance::FWeldInfo,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<physx::PxShape *,FBodyInstance::FWeldInfo,0> >
{
  TSet<TTuple<physx::PxShape *,FBodyInstance::FWeldInfo>,TDefaultMapHashableKeyFuncs<physx::PxShape *,FBodyInstance::FWeldInfo,0>,FDefaultSetAllocator> Pairs;
};

/* 4192 */
struct __cppobj TSortableMapBase<physx::PxShape *,FBodyInstance::FWeldInfo,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<physx::PxShape *,FBodyInstance::FWeldInfo,0> > : TMapBase<physx::PxShape *,FBodyInstance::FWeldInfo,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<physx::PxShape *,FBodyInstance::FWeldInfo,0> >
{
};

/* 4193 */
struct __cppobj TMap<physx::PxShape *,FBodyInstance::FWeldInfo,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<physx::PxShape *,FBodyInstance::FWeldInfo,0> > : TSortableMapBase<physx::PxShape *,FBodyInstance::FWeldInfo,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<physx::PxShape *,FBodyInstance::FWeldInfo,0> >
{
};

/* 326 */
enum EComponentMobility::Type
{
  Static = 0x0,
  Stationary = 0x1,
  Movable = 0x2,
};

/* 349 */
enum EStencilMask
{
  SM_Default = 0x0,
  SM_255 = 0x1,
  SM_1 = 0x2,
  SM_2 = 0x3,
  SM_4 = 0x4,
  SM_8 = 0x5,
  SM_16 = 0x6,
  SM_32 = 0x7,
  SM_64 = 0x8,
  SM_128 = 0x9,
  SM_Count = 0xA,
};

/* 142 */
enum EIndirectLightingCacheQuality
{
  ILCQ_Off = 0x0,
  ILCQ_Point = 0x1,
  ILCQ_Volume = 0x2,
};

/* 6511 */
struct TArray<AActor const *,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 4659 */
struct __cppobj TStatId
{
};

/* 360 */
enum EUniformBufferUsage
{
  UniformBuffer_SingleDraw = 0x0,
  UniformBuffer_SingleFrame = 0x1,
  UniformBuffer_MultiFrame = 0x2,
};

/* 6089 */
const struct __cppobj TUniformBuffer<FPrimitiveUniformShaderParameters> : FRenderResource
{
  EUniformBufferUsage BufferUsage;
  TRefCountPtr<FRHIUniformBuffer> UniformBufferRHI;
  char *Contents;
};

/* 6091 */
struct FPrimitiveSceneProxy
{
  FPrimitiveSceneProxyVtbl *vfptr;
  __declspec(align(16)) EComponentMobility::Type Mobility;
  _BYTE LightmapType[1];
  unsigned __int32 bIsLocalToWorldDeterminantNegative : 1;
  unsigned __int32 DrawInGame : 1;
  unsigned __int32 DrawInEditor : 1;
  unsigned __int32 bRenderInMono : 1;
  unsigned __int32 bReceivesDecals : 1;
  unsigned __int32 bOnlyOwnerSee : 1;
  unsigned __int32 bOwnerNoSee : 1;
  unsigned __int32 bOftenMoving : 1;
  unsigned __int32 bParentSelected : 1;
  unsigned __int32 bIndividuallySelected : 1;
  unsigned __int32 bHovered : 1;
  unsigned __int32 bUseViewOwnerDepthPriorityGroup : 1;
  unsigned __int32 bHasMotionBlurVelocityMeshes : 1;
  unsigned __int32 StaticDepthPriorityGroup : 3;
  unsigned __int32 ViewOwnerDepthPriorityGroup : 3;
  unsigned __int32 bStaticLighting : 1;
  unsigned __int32 bVisibleInReflectionCaptures : 1;
  unsigned __int32 bRenderInMainPass : 1;
  unsigned __int32 bRequiresVisibleLevelToRender : 1;
  unsigned __int32 bIsComponentLevelVisible : 1;
  unsigned __int32 bCollisionEnabled : 1;
  unsigned __int32 bTreatAsBackgroundForOcclusion : 1;
  unsigned __int32 bDisableStaticPath : 1;
  unsigned __int32 bGoodCandidateForCachedShadowmap : 1;
  unsigned __int32 bNeedsUnbuiltPreviewLighting : 1;
  unsigned __int32 bHasValidSettingsForStaticLighting : 1;
  unsigned __int32 bWillEverBeLit : 1;
  unsigned __int32 bCastDynamicShadow : 1;
  unsigned __int32 bAffectDynamicIndirectLighting : 1;
  unsigned __int32 bAffectDistanceFieldLighting : 1;
  unsigned __int32 bCastStaticShadow : 1;
  unsigned __int32 bCastVolumetricTranslucentShadow : 1;
  unsigned __int32 bCastCapsuleDirectShadow : 1;
  unsigned __int32 bCastsDynamicIndirectShadow : 1;
  unsigned __int32 bCastHiddenShadow : 1;
  unsigned __int32 bCastShadowAsTwoSided : 1;
  unsigned __int32 bSelfShadowOnly : 1;
  unsigned __int32 bCastInsetShadow : 1;
  unsigned __int32 bCastCinematicShadow : 1;
  unsigned __int32 bCastFarShadow : 1;
  unsigned __int32 bLightAttachmentsAsGroup : 1;
  unsigned __int32 bSingleSampleShadowFromStationaryLights : 1;
  unsigned __int32 bStaticElementsAlwaysUseProxyPrimitiveUniformBuffer : 1;
  unsigned __int32 bAlwaysHasVelocity : 1;
  unsigned __int32 bUseEditorDepthTest : 1;
  unsigned __int32 bSupportsDistanceFieldRepresentation : 1;
  unsigned __int32 bSupportsHeightfieldRepresentation : 1;
  unsigned __int32 bNeedsLevelAddedToWorldNotification : 1;
  unsigned __int32 bWantsSelectionOutline : 1;
  unsigned __int32 bVerifyUsedMaterials : 1;
  unsigned __int32 bUseAsOccluder : 1;
  unsigned __int32 bAllowApproximateOcclusion : 1;
  unsigned __int32 bSelectable : 1;
  unsigned __int32 bHasPerInstanceHitProxies : 1;
  unsigned __int32 bUseEditorCompositing : 1;
  unsigned __int32 bReceiveMobileCSMShadows : 1;
  unsigned __int32 bRenderCustomDepth : 1;
  char CustomDepthStencilValue;
  EStencilMask CustomDepthStencilWriteMask;
  char LightingChannelMask;
  float LpvBiasMultiplier;
  EIndirectLightingCacheQuality IndirectLightingCacheQuality;
  float DynamicIndirectShadowMinVisibility;
  float DistanceFieldSelfShadowBias;
  __declspec(align(8)) FMatrix LocalToWorld;
  FBoxSphereBounds Bounds;
  FBoxSphereBounds LocalBounds;
  FVector ActorPosition;
  TArray<AActor const *,FDefaultAllocator> Owners;
  FSceneInterface *Scene;
  FPrimitiveComponentId PrimitiveComponentId;
  FPrimitiveSceneInfo *PrimitiveSceneInfo;
  FName OwnerName;
  FName ResourceName;
  FName LevelName;
  __int16 TranslucencySortPriority;
  int VisibilityId;
  TStatId StatId;
  float MaxDrawDistance;
  float MinDrawDistance;
  TUniformBuffer<FPrimitiveUniformShaderParameters> UniformBuffer;
  UPrimitiveComponent *ComponentForDebuggingOnly;
};

/* 6870 */
struct __cppobj FPrimitiveComponentPostPhysicsTickFunction : FTickFunction
{
  UPrimitiveComponent *Target;
};

/* 4239 */
struct TEnumAsByte<enum EMaxConcurrentResolutionRule::Type>
{
  char Value;
};

/* 4240 */
struct FSoundConcurrencySettings
{
  int MaxCount;
  unsigned __int32 bLimitToOwner : 1;
  TEnumAsByte<enum EMaxConcurrentResolutionRule::Type> ResolutionRule;
  float VolumeScale;
};

/* 4316 */
struct TArray<FSoundSubmixSendInfo,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 4319 */
struct TArray<FSoundSourceBusSendInfo,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 4320 */
struct __cppobj USoundBase : UObject
{
  USoundClass *SoundClassObject;
  __int8 bDebug : 1;
  __int8 bOverrideConcurrency : 1;
  __int8 bOutputToBusOnly : 1;
  __int8 bIgnoreFocus_DEPRECATED : 1;
  __int8 bHasDelayNode : 1;
  __int8 bHasConcatenatorNode : 1;
  __int8 bHasVirtualizeWhenSilent : 1;
  __int8 bBypassVolumeScaleForPriority : 1;
  int CurrentPlayCount;
  USoundConcurrency *SoundConcurrencySettings;
  FSoundConcurrencySettings ConcurrencyOverrides;
  float Duration;
  float MaxDistance;
  float TotalSamples;
  float Priority;
  USoundAttenuation *AttenuationSettings;
  USoundSubmix *SoundSubmixObject;
  TArray<FSoundSubmixSendInfo,FDefaultAllocator> SoundSubmixSends;
  USoundEffectSourcePresetChain *SourceEffectChain;
  TArray<FSoundSourceBusSendInfo,FDefaultAllocator> BusSends;
  TArray<FSoundSourceBusSendInfo,FDefaultAllocator> PreEffectBusSends;
};

/* 5755 */
struct INetworkReplayStreamer
{
  INetworkReplayStreamerVtbl *vfptr;
};

/* 5825 */
struct TWeakPtr<FQueuedReplayTask,0>
{
  FQueuedReplayTask *Object;
  SharedPointerInternals::FWeakReferencer<0> WeakReferenceCount;
};

/* 5826 */
struct TSharedFromThis<FQueuedReplayTask,0>
{
  TWeakPtr<FQueuedReplayTask,0> WeakThis;
};

/* 5828 */
struct __cppobj TWeakObjectPtr<UDemoNetDriver,FWeakObjectPtr> : FWeakObjectPtr
{
};

/* 5824 */
struct __cppobj FQueuedReplayTask : TSharedFromThis<FQueuedReplayTask,0>
{
  FQueuedReplayTaskVtbl *vfptr;
  TWeakObjectPtr<UDemoNetDriver,FWeakObjectPtr> Driver;
};

/* 5865 */
struct __cppobj __declspec(align(8)) UBrushComponent : UPrimitiveComponent
{
  UModel *Brush;
  UBodySetup *BrushBodySetup;
  FVector PrePivot_DEPRECATED;
};

/* 5880 */
struct INavEdgeProviderInterface
{
  INavEdgeProviderInterfaceVtbl *vfptr;
};

/* 4946 */
struct __cppobj __declspec(align(8)) UReporterBase : UObject
{
  bool bVisible;
};

/* 4947 */
struct FRect
{
  FVector2D Min;
  FVector2D Max;
};

/* 4948 */
struct TArray<FGraphThreshold,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 4949 */
struct TArray<FGraphLine,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 3175 */
enum EGraphAxisStyle::Type
{
  Lines = 0x0,
  Notches = 0x1,
  Grid = 0x2,
};

/* 3176 */
typedef EGraphAxisStyle::Type EGraphDataStyle::Type;

/* 3177 */
enum ELegendPosition::Type
{
  Outside = 0x0,
  Inside = 0x1,
};

/* 4950 */
struct __cppobj __declspec(align(8)) UReporterGraph : UReporterBase
{
  FRect GraphScreenSize;
  FRect GraphMinMaxData;
  TArray<FGraphThreshold,FDefaultAllocator> Thresholds;
  TArray<FGraphLine,FDefaultAllocator> CurrentData;
  FLinearColor AxesColor;
  int NumXNotches;
  int NumYNotches;
  EGraphAxisStyle::Type AxisStyle;
  EGraphDataStyle::Type DataStyle;
  ELegendPosition::Type LegendPosition;
  float LegendWidth;
  FColor BackgroundColor;
  float CursorLocation;
  __int32 bOffsetDataSets : 1;
  __int32 bUseTinyFont : 1;
  __int32 bDrawCursorOnGraph : 1;
  __int32 bDrawExtremes : 1;
};

/* 4969 */
struct FCanvasItemVtbl
{
  void *(__cdecl *__vecDelDtor)(FCanvasItem *this, unsigned int);
  void (__cdecl *Draw)(FCanvasItem *this, FCanvas *, float, float);
  void (__cdecl *Draw)(FCanvasItem *this, FCanvas *, FVector2D *);
  void (__cdecl *Draw)(FCanvasItem *this, FCanvas *);
  void (__cdecl *SetColor)(FCanvasItem *this, FLinearColor *);
};

/* 4959 */
struct __declspec(align(8)) FRefCountedObject
{
  FRefCountedObjectVtbl *vfptr;
  int NumRefs;
};

/* 4970 */
struct __cppobj FBatchedElementParameters : FRefCountedObject
{
};

/* 4975 */
struct FLocalUniformBuffer
{
  FLocalUniformBufferWorkArea *WorkArea;
  TRefCountPtr<FRHIUniformBuffer> BypassUniform;
};

/* 5017 */
struct FUniformExpressionCache
{
  TRefCountPtr<FRHIUniformBuffer> UniformBuffer;
  FLocalUniformBuffer LocalUniformBuffer;
  TArray<FGuid,FDefaultAllocator> ParameterCollections;
  bool bUpToDate;
  FMaterialShaderMap *CachedUniformExpressionShaderMap;
};

/* 5020 */
const struct __cppobj FMaterialRenderProxy : FRenderResource
{
  FUniformExpressionCache UniformExpressionCache[4];
  __int8 bSelected : 1;
  __int8 bHovered : 1;
  USubsurfaceProfile *SubsurfaceProfileRT;
};

/* 5022 */
struct TArray<FSimpleElementVertex,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 5023 */
struct TArray<FBatchedElements::FBatchedPoint,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 5024 */
struct TArray<FBatchedElements::FBatchedWireTris,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 5025 */
struct TArray<FBatchedElements::FBatchedThickLines,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 5026 */
struct TArray<FBatchedElements::FBatchedSprite,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 5027 */
struct TAlignedBytes<96,8>::TPadding
{
  char Pad[96];
};

/* 5028 */
struct TAlignedBytes<96,8>
{
  TAlignedBytes<96,8>::TPadding Padding;
};

/* 5029 */
struct __cppobj TTypeCompatibleBytes<FBatchedElements::FBatchedMeshElement> : TAlignedBytes<96,8>
{
};

/* 5030 */
struct __cppobj FHeapAllocator::ForElementType<FBatchedElements::FBatchedMeshElement> : FHeapAllocator::ForAnyElementType
{
};

/* 5031 */
struct TInlineAllocator<2,FDefaultAllocator>::ForElementType<FBatchedElements::FBatchedMeshElement>
{
  TTypeCompatibleBytes<FBatchedElements::FBatchedMeshElement> InlineData[2];
  FHeapAllocator::ForElementType<FBatchedElements::FBatchedMeshElement> SecondaryData;
};

/* 5032 */
struct TArray<FBatchedElements::FBatchedMeshElement,TInlineAllocator<2,FDefaultAllocator> >
{
  TInlineAllocator<2,FDefaultAllocator>::ForElementType<FBatchedElements::FBatchedMeshElement> AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 5033 */
struct TAlignedBytes<48,16>::TPadding
{
  char Pad[48];
};

/* 5034 */
struct TAlignedBytes<48,16>
{
  TAlignedBytes<48,16>::TPadding Padding;
};

/* 5035 */
struct __cppobj TTypeCompatibleBytes<FSimpleElementVertex> : TAlignedBytes<48,16>
{
};

/* 5036 */
struct __cppobj FHeapAllocator::ForElementType<FSimpleElementVertex> : FHeapAllocator::ForAnyElementType
{
};

/* 5037 */
struct __declspec(align(16)) TInlineAllocator<4,FDefaultAllocator>::ForElementType<FSimpleElementVertex>
{
  TTypeCompatibleBytes<FSimpleElementVertex> InlineData[4];
  FHeapAllocator::ForElementType<FSimpleElementVertex> SecondaryData;
};

/* 5038 */
struct __declspec(align(16)) TArray<FSimpleElementVertex,TInlineAllocator<4,FDefaultAllocator> >
{
  TInlineAllocator<4,FDefaultAllocator>::ForElementType<FSimpleElementVertex> AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 5039 */
struct __declspec(align(16)) FBatchedElements
{
  TArray<FSimpleElementVertex,FDefaultAllocator> LineVertices;
  TArray<FBatchedElements::FBatchedPoint,FDefaultAllocator> Points;
  TArray<FBatchedElements::FBatchedWireTris,FDefaultAllocator> WireTris;
  TArray<FSimpleElementVertex,FDefaultAllocator> WireTriVerts;
  TArray<FBatchedElements::FBatchedThickLines,FDefaultAllocator> ThickLines;
  TArray<FBatchedElements::FBatchedSprite,FDefaultAllocator> Sprites;
  int MaxMeshIndicesAllowed;
  int MaxMeshVerticesAllowed;
  TArray<FBatchedElements::FBatchedMeshElement,TInlineAllocator<2,FDefaultAllocator> > MeshElements;
  TArray<FSimpleElementVertex,TInlineAllocator<4,FDefaultAllocator> > MeshVertices;
  bool bEnableHDREncoding;
};

/* 5041 */
struct IFontProviderInterface
{
  IFontProviderInterfaceVtbl *vfptr;
};

/* 5048 */
struct TArray<FFontCharacter,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 5049 */
struct TArray<UTexture2D *,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 5050 */
struct TEnumAsByte<enum EFontImportCharacterSet>
{
  char Value;
};

/* 5051 */
struct __declspec(align(8)) FFontImportOptionsData
{
  FString FontName;
  float Height;
  unsigned __int32 bEnableAntialiasing : 1;
  unsigned __int32 bEnableBold : 1;
  unsigned __int32 bEnableItalic : 1;
  unsigned __int32 bEnableUnderline : 1;
  unsigned __int32 bAlphaOnly : 1;
  TEnumAsByte<enum EFontImportCharacterSet> CharacterSet;
  FString Chars;
  FString UnicodeRange;
  FString CharsFilePath;
  FString CharsFileWildcard;
  unsigned __int32 bCreatePrintableOnly : 1;
  unsigned __int32 bIncludeASCIIRange : 1;
  FLinearColor ForegroundColor;
  unsigned __int32 bEnableDropShadow : 1;
  int TexturePageWidth;
  int TexturePageMaxHeight;
  int XPadding;
  int YPadding;
  int ExtendBoxTop;
  int ExtendBoxBottom;
  int ExtendBoxRight;
  int ExtendBoxLeft;
  unsigned __int32 bEnableLegacyMode : 1;
  int Kerning;
  unsigned __int32 bUseDistanceFieldAlpha : 1;
  int DistanceFieldScaleFactor;
  float DistanceFieldScanRadiusScale;
};

/* 5042 */
struct TArray<FTypefaceEntry,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 5043 */
struct FTypeface
{
  TArray<FTypefaceEntry,FDefaultAllocator> Fonts;
};

/* 5044 */
struct __declspec(align(8)) FCompositeFallbackFont
{
  FTypeface Typeface;
  float ScalingFactor;
};

/* 5045 */
struct TArray<FCompositeSubFont,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 5046 */
const struct FCompositeFont
{
  FTypeface DefaultTypeface;
  FCompositeFallbackFont FallbackTypeface;
  TArray<FCompositeSubFont,FDefaultAllocator> SubTypefaces;
};

/* 5052 */
struct TSparseArray<TSetElement<TTuple<unsigned short,unsigned short> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<12,4> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 5053 */
struct __declspec(align(8)) TSet<TTuple<unsigned short,unsigned short>,TDefaultMapHashableKeyFuncs<unsigned short,unsigned short,0>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<TTuple<unsigned short,unsigned short> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 5054 */
struct TMapBase<unsigned short,unsigned short,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<unsigned short,unsigned short,0> >
{
  TSet<TTuple<unsigned short,unsigned short>,TDefaultMapHashableKeyFuncs<unsigned short,unsigned short,0>,FDefaultSetAllocator> Pairs;
};

/* 5055 */
struct __cppobj TSortableMapBase<unsigned short,unsigned short,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<unsigned short,unsigned short,0> > : TMapBase<unsigned short,unsigned short,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<unsigned short,unsigned short,0> >
{
};

/* 5056 */
struct __cppobj TMap<unsigned short,unsigned short,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<unsigned short,unsigned short,0> > : TSortableMapBase<unsigned short,unsigned short,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<unsigned short,unsigned short,0> >
{
};

/* 5057 */
const struct __cppobj UFont : UObject, IFontProviderInterface
{
  _BYTE FontCacheType[1];
  TArray<FFontCharacter,FDefaultAllocator> Characters;
  TArray<UTexture2D *,FDefaultAllocator> Textures;
  int IsRemapped;
  float EmScale;
  float Ascent;
  float Descent;
  float Leading;
  int Kerning;
  FFontImportOptionsData ImportOptions;
  int NumCharacters;
  TArray<int,FDefaultAllocator> MaxCharHeight;
  float ScalingFactor;
  int LegacyFontSize;
  FName LegacyFontName;
  FCompositeFont CompositeFont;
  TMap<unsigned short,unsigned short,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<unsigned short,unsigned short,0> > CharRemap;
};

/* 4956 */
struct TSharedPtr<FCanvasWordWrapper,0>
{
  FCanvasWordWrapper *Object;
  SharedPointerInternals::FSharedReferencer<0> SharedReferenceCount;
};

/* 4957 */
struct TArray<FCanvas::FTransformEntry,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 4958 */
struct FIntRect
{
  FIntPoint Min;
  FIntPoint Max;
};

/* 4965 */
struct TRefCountPtr<HHitProxy>
{
  HHitProxy *Reference;
};

/* 1668 */
enum FCanvas::ECanvasDrawMode
{
  CDM_DeferDrawing = 0x0,
  CDM_ImmediateDrawing = 0x1,
};

/* 4967 */
struct TArray<FCanvas::FCanvasSortElement,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 4662 */
struct TSparseArray<TSetElement<TTuple<int,int> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<16,4> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 4663 */
struct __declspec(align(8)) TSet<TTuple<int,int>,TDefaultMapHashableKeyFuncs<int,int,0>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<TTuple<int,int> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 4664 */
struct TMapBase<int,int,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<int,int,0> >
{
  TSet<TTuple<int,int>,TDefaultMapHashableKeyFuncs<int,int,0>,FDefaultSetAllocator> Pairs;
};

/* 4665 */
struct __cppobj TSortableMapBase<int,int,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<int,int,0> > : TMapBase<int,int,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<int,int,0> >
{
};

/* 4666 */
struct __cppobj TMap<int,int,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<int,int,0> > : TSortableMapBase<int,int,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<int,int,0> >
{
};

/* 4968 */
struct __declspec(align(16)) FCanvas
{
  float AlphaModulate;
  TSharedPtr<FCanvasWordWrapper,0> WordWrapper;
  TArray<int,FDefaultAllocator> DepthSortKeyStack;
  TArray<FCanvas::FTransformEntry,FDefaultAllocator> TransformStack;
  FIntRect ViewRect;
  FIntRect ScissorRect;
  FRenderTarget *RenderTarget;
  FHitProxyConsumer *HitProxyConsumer;
  TRefCountPtr<HHitProxy> CurrentHitProxy;
  FSceneInterface *Scene;
  unsigned int AllowedModes;
  bool bRenderTargetDirty;
  float CurrentRealTime;
  float CurrentWorldTime;
  float CurrentDeltaWorldTime;
  bool bScaledToRenderTarget;
  bool bAllowsToSwitchVerticalAxis;
  ERHIFeatureLevel::Type FeatureLevel;
  bool bStereoRendering;
  bool bUseInternalTexture;
  int StereoDepth;
  __declspec(align(8)) FMatrix CachedOrthoProjection[2];
  int CachedRTWidth;
  int CachedRTHeight;
  int CachedDrawDepth;
  FIntPoint ParentSize;
  FCanvas::ECanvasDrawMode DrawMode;
  float DPIScale;
  TArray<FCanvas::FCanvasSortElement,FDefaultAllocator> SortedElements;
  TMap<int,int,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<int,int,0> > SortedElementLookupMap;
  int LastElementIndex;
};

/* 7028 */
struct __cppobj TUniformBufferRef<FViewUniformShaderParameters> : TRefCountPtr<FRHIUniformBuffer>
{
};

/* 7029 */
struct __cppobj TUniformBufferRef<FMobileDirectionalLightShaderParameters> : TRefCountPtr<FRHIUniformBuffer>
{
};

/* 7030 */
struct FSceneViewProjectionData
{
  FVector ViewOrigin;
  __declspec(align(8)) FMatrix ViewRotationMatrix;
  FMatrix ProjectionMatrix;
  FIntRect ViewRect;
  FIntRect ConstrainedViewRect;
};

/* 5922 */
struct TSparseArray<TSetElement<FPrimitiveComponentId>,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<12,4> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 5923 */
struct __declspec(align(8)) TSet<FPrimitiveComponentId,DefaultKeyFuncs<FPrimitiveComponentId,0>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<FPrimitiveComponentId>,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 7033 */
struct __cppobj TTypeCompatibleBytes<TSet<FPrimitiveComponentId,DefaultKeyFuncs<FPrimitiveComponentId,0>,FDefaultSetAllocator> > : TAlignedBytes<80,8>
{
};

/* 7034 */
struct __declspec(align(8)) TOptional<TSet<FPrimitiveComponentId,DefaultKeyFuncs<FPrimitiveComponentId,0>,FDefaultSetAllocator> >
{
  TTypeCompatibleBytes<TSet<FPrimitiveComponentId,DefaultKeyFuncs<FPrimitiveComponentId,0>,FDefaultSetAllocator> > Value;
  bool bIsSet;
};

/* 7035 */
struct __cppobj __declspec(align(16)) FSceneViewInitOptions : FSceneViewProjectionData
{
  FSceneViewFamily *ViewFamily;
  FSceneViewStateInterface *SceneViewStateInterface;
  AActor *ViewActor;
  int PlayerIndex;
  FViewElementDrawer *ViewElementDrawer;
  FLinearColor BackgroundColor;
  FLinearColor OverlayColor;
  FLinearColor ColorScale;
  EStereoscopicPass StereoPass;
  float StereoIPD;
  float WorldToMetersScale;
  TSet<FPrimitiveComponentId,DefaultKeyFuncs<FPrimitiveComponentId,0>,FDefaultSetAllocator> HiddenPrimitives;
  TOptional<TSet<FPrimitiveComponentId,DefaultKeyFuncs<FPrimitiveComponentId,0>,FDefaultSetAllocator> > ShowOnlyPrimitives;
  FIntPoint CursorPos;
  float LODDistanceFactor;
  float OverrideFarClippingPlaneDistance;
  FVector OriginOffsetThisFrame;
  bool bInCameraCut;
  bool bUseFieldOfViewForLOD;
  float FOV;
  float DesiredFOV;
};

/* 5964 */
struct __declspec(align(8)) FViewMatrices
{
  FMatrix ProjectionMatrix;
  FMatrix ProjectionNoAAMatrix;
  FMatrix InvProjectionMatrix;
  FMatrix ViewMatrix;
  FMatrix InvViewMatrix;
  FMatrix ViewProjectionMatrix;
  FMatrix InvViewProjectionMatrix;
  FMatrix HMDViewMatrixNoRoll;
  FMatrix TranslatedViewMatrix;
  FMatrix InvTranslatedViewMatrix;
  FMatrix OverriddenTranslatedViewMatrix;
  FMatrix OverriddenInvTranslatedViewMatrix;
  FMatrix TranslatedViewProjectionMatrix;
  FMatrix InvTranslatedViewProjectionMatrix;
  FVector PreViewTranslation;
  FVector ViewOrigin;
  FVector2D ProjectionScale;
  FVector2D TemporalAAProjectionJitter;
  float ScreenScale;
};

/* 322 */
typedef _PaddingMode EDrawDynamicFlags::Type;

/* 6110 */
struct __cppobj TTypeCompatibleBytes<FPlane> : TAlignedBytes<16,16>
{
};

/* 6111 */
struct __cppobj FHeapAllocator::ForElementType<FPlane> : FHeapAllocator::ForAnyElementType
{
};

/* 6112 */
struct __declspec(align(16)) TInlineAllocator<6,FDefaultAllocator>::ForElementType<FPlane>
{
  TTypeCompatibleBytes<FPlane> InlineData[6];
  FHeapAllocator::ForElementType<FPlane> SecondaryData;
};

/* 6113 */
struct __declspec(align(16)) TArray<FPlane,TInlineAllocator<6,FDefaultAllocator> >
{
  TInlineAllocator<6,FDefaultAllocator>::ForElementType<FPlane> AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 6114 */
struct __declspec(align(16)) TInlineAllocator<8,FDefaultAllocator>::ForElementType<FPlane>
{
  TTypeCompatibleBytes<FPlane> InlineData[8];
  FHeapAllocator::ForElementType<FPlane> SecondaryData;
};

/* 6115 */
struct __declspec(align(16)) TArray<FPlane,TInlineAllocator<8,FDefaultAllocator> >
{
  TInlineAllocator<8,FDefaultAllocator>::ForElementType<FPlane> AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 6116 */
struct FConvexVolume
{
  TArray<FPlane,TInlineAllocator<6,FDefaultAllocator> > Planes;
  TArray<FPlane,TInlineAllocator<8,FDefaultAllocator> > PermutedPlanes;
};

/* 7036 */
struct TEnumAsByte<enum ETranslucentSortPolicy::Type>
{
  char Value;
};

/* 7037 */
struct __cppobj TTypeCompatibleBytes<FFinalPostProcessSettings::FCubemapEntry> : TAlignedBytes<24,8>
{
};

/* 7038 */
struct __cppobj FHeapAllocator::ForElementType<FFinalPostProcessSettings::FCubemapEntry> : FHeapAllocator::ForAnyElementType
{
};

/* 7039 */
struct TInlineAllocator<8,FDefaultAllocator>::ForElementType<FFinalPostProcessSettings::FCubemapEntry>
{
  TTypeCompatibleBytes<FFinalPostProcessSettings::FCubemapEntry> InlineData[8];
  FHeapAllocator::ForElementType<FFinalPostProcessSettings::FCubemapEntry> SecondaryData;
};

/* 7040 */
struct TArray<FFinalPostProcessSettings::FCubemapEntry,TInlineAllocator<8,FDefaultAllocator> >
{
  TInlineAllocator<8,FDefaultAllocator>::ForElementType<FFinalPostProcessSettings::FCubemapEntry> AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 7041 */
struct __cppobj TTypeCompatibleBytes<FFinalPostProcessSettings::FLUTBlenderEntry> : TAlignedBytes<16,8>
{
};

/* 7042 */
struct __cppobj FHeapAllocator::ForElementType<FFinalPostProcessSettings::FLUTBlenderEntry> : FHeapAllocator::ForAnyElementType
{
};

/* 7043 */
struct TInlineAllocator<8,FDefaultAllocator>::ForElementType<FFinalPostProcessSettings::FLUTBlenderEntry>
{
  TTypeCompatibleBytes<FFinalPostProcessSettings::FLUTBlenderEntry> InlineData[8];
  FHeapAllocator::ForElementType<FFinalPostProcessSettings::FLUTBlenderEntry> SecondaryData;
};

/* 7044 */
struct TArray<FFinalPostProcessSettings::FLUTBlenderEntry,TInlineAllocator<8,FDefaultAllocator> >
{
  TInlineAllocator<8,FDefaultAllocator>::ForElementType<FFinalPostProcessSettings::FLUTBlenderEntry> AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 7045 */
struct FBlendableManager
{
  TArray<unsigned char,FDefaultAllocator> Scratch;
};

/* 7046 */
struct __cppobj FFinalPostProcessSettings : FPostProcessSettings
{
  TArray<FFinalPostProcessSettings::FCubemapEntry,TInlineAllocator<8,FDefaultAllocator> > ContributingCubemaps;
  TArray<FFinalPostProcessSettings::FLUTBlenderEntry,TInlineAllocator<8,FDefaultAllocator> > ContributingLUTs;
  TArray<UMaterialInterface *,FDefaultAllocator> BufferVisualizationOverviewMaterials;
  UMaterialInterface *HighResScreenshotMaterial;
  UMaterialInterface *HighResScreenshotMaskMaterial;
  UMaterialInstanceDynamic *HighResScreenshotCaptureRegionMaterial;
  bool bBufferVisualizationDumpRequired;
  FString BufferVisualizationDumpBaseFilename;
  FBlendableManager BlendableManager;
};

/* 188 */
enum EAntiAliasingMethod
{
  AAM_None = 0x0,
  AAM_FXAA = 0x1,
  AAM_TemporalAA = 0x2,
  AAM_MSAA = 0x3,
  AAM_MAX = 0x4,
};

/* 593 */
enum EPrimaryScreenPercentageMethod
{
  SpatialUpscale = 0x0,
  TemporalUpscale = 0x1,
  RawOutput = 0x2,
};

/* 5065 */
struct FSceneView
{
  FSceneViewFamily *Family;
  FSceneViewStateInterface *State;
  TUniformBufferRef<FViewUniformShaderParameters> ViewUniformBuffer;
  TUniformBufferRef<FMobileDirectionalLightShaderParameters> MobileDirectionalLightUniformBuffers[4];
  FConvexVolume *DynamicMeshElementsShadowCullFrustum;
  FVector PreShadowTranslation;
  FSceneViewInitOptions SceneViewInitOptions;
  AActor *ViewActor;
  int PlayerIndex;
  FViewElementDrawer *Drawer;
  FIntRect UnscaledViewRect;
  FIntRect UnconstrainedViewRect;
  int MaxShadowCascades;
  FViewMatrices ViewMatrices;
  FVector ViewLocation;
  FRotator ViewRotation;
  __declspec(align(16)) FQuat BaseHmdOrientation;
  FVector BaseHmdLocation;
  float WorldToMetersScale;
  FViewMatrices ShadowViewMatrices;
  FMatrix ProjectionMatrixUnadjustedForRHI;
  FLinearColor BackgroundColor;
  FLinearColor OverlayColor;
  FLinearColor ColorScale;
  EStereoscopicPass StereoPass;
  float StereoIPD;
  bool bRenderFirstInstanceOnly;
  bool bUseFieldOfViewForLOD;
  float FOV;
  float DesiredFOV;
  EDrawDynamicFlags::Type DrawDynamicFlags;
  FName CurrentBufferVisualizationMode;
  FVector4 DiffuseOverrideParameter;
  FVector4 SpecularOverrideParameter;
  FVector4 NormalOverrideParameter;
  FVector2D RoughnessOverrideParameter;
  TSet<FPrimitiveComponentId,DefaultKeyFuncs<FPrimitiveComponentId,0>,FDefaultSetAllocator> HiddenPrimitives;
  TOptional<TSet<FPrimitiveComponentId,DefaultKeyFuncs<FPrimitiveComponentId,0>,FDefaultSetAllocator> > ShowOnlyPrimitives;
  bool bAllowTemporalJitter;
  FConvexVolume ViewFrustum;
  bool bHasNearClippingPlane;
  __declspec(align(16)) FPlane NearClippingPlane;
  float NearClippingDistance;
  bool bReverseCulling;
  __declspec(align(16)) FVector4 InvDeviceZToWorldZTransform;
  FVector OriginOffsetThisFrame;
  float LODDistanceFactor;
  float LODDistanceFactorSquared;
  bool bCameraCut;
  FIntPoint CursorPos;
  bool bIsGameView;
  bool bIsViewInfo;
  bool bIsSceneCapture;
  bool bIsReflectionCapture;
  bool bIsPlanarReflection;
  bool bRenderSceneTwoSided;
  bool bIsLocked;
  bool bStaticSceneOnly;
  bool bIsInstancedStereoEnabled;
  bool bIsMultiViewEnabled;
  bool bIsMobileMultiViewEnabled;
  bool bIsMobileMultiViewDirectEnabled;
  bool bShouldBindInstancedViewUB;
  FPlane GlobalClippingPlane;
  FIntRect CameraConstrainedViewRect;
  FVector TranslucentSortAxis;
  TEnumAsByte<enum ETranslucentSortPolicy::Type> TranslucentSortPolicy;
  FFinalPostProcessSettings FinalPostProcessSettings;
  EAntiAliasingMethod AntiAliasingMethod;
  EPrimaryScreenPercentageMethod PrimaryScreenPercentageMethod;
  TRefCountPtr<FRHITexture> AtmosphereTransmittanceTexture;
  TRefCountPtr<FRHITexture> AtmosphereIrradianceTexture;
  TRefCountPtr<FRHITexture> AtmosphereInscatterTexture;
  FForwardLightingViewResources *ForwardLightingResources;
  ERHIFeatureLevel::Type FeatureLevel;
  TArray<void *,FDefaultAllocator> PrimitivesCustomData;
  TArray<bool,FDefaultAllocator> FrameSubIsOccluded[2];
};

/* 7019 */
union $0DD9EEF0B5D996200E1E2D639A276DF7
{
  void (__cdecl *~FSceneInterface)(FSceneInterface *this);
  void *(__cdecl *__vecDelDtor)(FSceneInterface *this, unsigned int);
};

/* 7020 */
struct FSceneInterfaceVtbl
{
  void (__cdecl *AddPrimitive)(FSceneInterface *this, UPrimitiveComponent *);
  _BYTE gap8[72];
  void (__cdecl *SetSkyLight)(FSceneInterface *this, FSkyLightSceneProxy *);
  void (__cdecl *DisableSkyLight)(FSceneInterface *this, FSkyLightSceneProxy *);
  void (__cdecl *AddDecal)(FSceneInterface *this, UDecalComponent *);
  void (__cdecl *RemoveDecal)(FSceneInterface *this, UDecalComponent *);
  void (__cdecl *UpdateDecalTransform)(FSceneInterface *this, UDecalComponent *);
  void (__cdecl *AddReflectionCapture)(FSceneInterface *this, UReflectionCaptureComponent *);
  void (__cdecl *RemoveReflectionCapture)(FSceneInterface *this, UReflectionCaptureComponent *);
  void (__cdecl *GetReflectionCaptureData)(FSceneInterface *this, UReflectionCaptureComponent *, FReflectionCaptureData *);
  void (__cdecl *UpdateReflectionCaptureTransform)(FSceneInterface *this, UReflectionCaptureComponent *);
  void (__cdecl *AllocateReflectionCaptures)(FSceneInterface *this, TArray<UReflectionCaptureComponent *,FDefaultAllocator> *, const wchar_t *, bool);
  void (__cdecl *ReleaseReflectionCubemap)(FSceneInterface *this, UReflectionCaptureComponent *);
  void (__cdecl *UpdateSkyCaptureContents)(FSceneInterface *this, USkyLightComponent *, bool, UTextureCube *, FTexture *, float *, TSHVectorRGB<3> *, TArray<FFloat16Color,FDefaultAllocator> *);
  void (__cdecl *AddPlanarReflection)(FSceneInterface *this, UPlanarReflectionComponent *);
  void (__cdecl *RemovePlanarReflection)(FSceneInterface *this, UPlanarReflectionComponent *);
  void (__cdecl *UpdatePlanarReflectionTransform)(FSceneInterface *this, UPlanarReflectionComponent *);
  void (__cdecl *UpdateSceneCaptureContents)(FSceneInterface *this, USceneCaptureComponentCube *);
  void (__cdecl *UpdateSceneCaptureContents)(FSceneInterface *this, USceneCaptureComponent2D *);
  void (__cdecl *UpdatePlanarReflectionContents)(FSceneInterface *this, UPlanarReflectionComponent *, FSceneRenderer *);
  void (__cdecl *AddPrecomputedLightVolume)(FSceneInterface *this, FPrecomputedLightVolume *);
  void (__cdecl *RemovePrecomputedLightVolume)(FSceneInterface *this, FPrecomputedLightVolume *);
  bool (__cdecl *HasPrecomputedVolumetricLightmap_RenderThread)(FSceneInterface *this);
  void (__cdecl *AddPrecomputedVolumetricLightmap)(FSceneInterface *this, FPrecomputedVolumetricLightmap *);
  void (__cdecl *RemovePrecomputedVolumetricLightmap)(FSceneInterface *this, FPrecomputedVolumetricLightmap *);
  void (__cdecl *UpdateLightTransform)(FSceneInterface *this, ULightComponent *);
  void (__cdecl *UpdateLightColorAndBrightness)(FSceneInterface *this, ULightComponent *);
  void (__cdecl *SetPrecomputedVisibility)(FSceneInterface *this, FPrecomputedVisibilityHandler *);
  void (__cdecl *SetPrecomputedVolumeDistanceField)(FSceneInterface *this, FPrecomputedVolumeDistanceField *);
  void (__cdecl *SetShaderMapsOnMaterialResources)(FSceneInterface *this, TMap<FMaterial *,FMaterialShaderMap *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FMaterial *,FMaterialShaderMap *,0> > *);
  void (__cdecl *UpdateStaticDrawListsForMaterials)(FSceneInterface *this, TArray<FMaterial const *,FDefaultAllocator> *);
  void (__cdecl *AddExponentialHeightFog)(FSceneInterface *this, UExponentialHeightFogComponent *);
  void (__cdecl *RemoveExponentialHeightFog)(FSceneInterface *this, UExponentialHeightFogComponent *);
  void (__cdecl *AddAtmosphericFog)(FSceneInterface *this, UAtmosphericFogComponent *);
  void (__cdecl *RemoveAtmosphericFog)(FSceneInterface *this, UAtmosphericFogComponent *);
  void (__cdecl *RemoveAtmosphericFogResource_RenderThread)(FSceneInterface *this, FRenderResource *);
  FAtmosphericFogSceneInfo *(__cdecl *GetAtmosphericFogSceneInfo)(FSceneInterface *this);
  void (__cdecl *AddWindSource)(FSceneInterface *this, UWindDirectionalSourceComponent *);
  void (__cdecl *RemoveWindSource)(FSceneInterface *this, UWindDirectionalSourceComponent *);
  TArray<FWindSourceSceneProxy *,FDefaultAllocator> *(__cdecl *GetWindSources_RenderThread)(FSceneInterface *this);
  void (__cdecl *GetWindParameters)(FSceneInterface *this, FVector *, FVector *, float *, float *, float *);
  void (__cdecl *GetWindParameters_GameThread)(FSceneInterface *this, FVector *, FVector *, float *, float *, float *);
  void (__cdecl *GetDirectionalWindParameters)(FSceneInterface *this, FVector *, float *, float *, float *);
  void (__cdecl *AddSpeedTreeWind)(FSceneInterface *this, FVertexFactory *, UStaticMesh *);
  void (__cdecl *RemoveSpeedTreeWind_RenderThread)(FSceneInterface *this, FVertexFactory *, UStaticMesh *);
  void (__cdecl *UpdateSpeedTreeWind)(FSceneInterface *this, long double);
  FRHIUniformBuffer *(__cdecl *GetSpeedTreeUniformBuffer)(FSceneInterface *this, FVertexFactory *);
  void (__cdecl *Release)(FSceneInterface *this);
  void (__cdecl *GetRelevantLights)(FSceneInterface *this, UPrimitiveComponent *, TArray<ULightComponent const *,FDefaultAllocator> *);
  bool (__cdecl *RequiresHitProxies)(FSceneInterface *this);
  UWorld *(__cdecl *GetWorld)(FSceneInterface *this);
  FScene *(__cdecl *GetRenderScene)(FSceneInterface *this);
  void (__cdecl *UpdateSceneSettings)(FSceneInterface *this, AWorldSettings *);
  FGPUSkinCache *(__cdecl *GetGPUSkinCache)(FSceneInterface *this);
  void (__cdecl *SetFXSystem)(FSceneInterface *this, FFXSystemInterface *);
  FFXSystemInterface *(__cdecl *GetFXSystem)(FSceneInterface *this);
  void (__cdecl *DumpUnbuiltLightInteractions)(FSceneInterface *this, FOutputDevice *);
  void (__cdecl *DumpStaticMeshDrawListStats)(FSceneInterface *this);
  void (__cdecl *SetClearMotionBlurInfoGameThread)(FSceneInterface *this);
  void (__cdecl *UpdateParameterCollections)(FSceneInterface *this, TArray<FMaterialParameterCollectionInstanceResource *,FDefaultAllocator> *);
  void (__cdecl *Export)(FSceneInterface *this, FArchive *);
  void (__cdecl *ApplyWorldOffset)(FSceneInterface *this, FVector);
  void (__cdecl *OnLevelAddedToWorld)(FSceneInterface *this, FName, UWorld *, bool);
  void (__cdecl *OnLevelRemovedFromWorld)(FSceneInterface *this, UWorld *, bool);
  bool (__cdecl *HasAnyLights)(FSceneInterface *this);
  bool (__cdecl *IsEditorScene)(FSceneInterface *this);
  TArray<FPrimitiveComponentId,FDefaultAllocator> *(__cdecl *GetScenePrimitiveComponentIds)(FSceneInterface *this, TArray<FPrimitiveComponentId,FDefaultAllocator> *result);
  unsigned int (__cdecl *GetFrameNumber)(FSceneInterface *this);
  void (__cdecl *IncrementFrameNumber)(FSceneInterface *this);
  $0DD9EEF0B5D996200E1E2D639A276DF7 ___u68;
};

/* 6665 */
struct TSparseArray<TSetElement<TTuple<TWeakObjectPtr<UPrimitiveComponent,FWeakObjectPtr>,FReplicatedPhysicsTarget> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<144,16> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 6666 */
struct __declspec(align(8)) TSet<TTuple<TWeakObjectPtr<UPrimitiveComponent,FWeakObjectPtr>,FReplicatedPhysicsTarget>,TDefaultMapHashableKeyFuncs<TWeakObjectPtr<UPrimitiveComponent,FWeakObjectPtr>,FReplicatedPhysicsTarget,0>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<TTuple<TWeakObjectPtr<UPrimitiveComponent,FWeakObjectPtr>,FReplicatedPhysicsTarget> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 6667 */
struct TMapBase<TWeakObjectPtr<UPrimitiveComponent,FWeakObjectPtr>,FReplicatedPhysicsTarget,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<TWeakObjectPtr<UPrimitiveComponent,FWeakObjectPtr>,FReplicatedPhysicsTarget,0> >
{
  TSet<TTuple<TWeakObjectPtr<UPrimitiveComponent,FWeakObjectPtr>,FReplicatedPhysicsTarget>,TDefaultMapHashableKeyFuncs<TWeakObjectPtr<UPrimitiveComponent,FWeakObjectPtr>,FReplicatedPhysicsTarget,0>,FDefaultSetAllocator> Pairs;
};

/* 6668 */
struct __cppobj TSortableMapBase<TWeakObjectPtr<UPrimitiveComponent,FWeakObjectPtr>,FReplicatedPhysicsTarget,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<TWeakObjectPtr<UPrimitiveComponent,FWeakObjectPtr>,FReplicatedPhysicsTarget,0> > : TMapBase<TWeakObjectPtr<UPrimitiveComponent,FWeakObjectPtr>,FReplicatedPhysicsTarget,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<TWeakObjectPtr<UPrimitiveComponent,FWeakObjectPtr>,FReplicatedPhysicsTarget,0> >
{
};

/* 6669 */
struct __cppobj TMap<TWeakObjectPtr<UPrimitiveComponent,FWeakObjectPtr>,FReplicatedPhysicsTarget,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<TWeakObjectPtr<UPrimitiveComponent,FWeakObjectPtr>,FReplicatedPhysicsTarget,0> > : TSortableMapBase<TWeakObjectPtr<UPrimitiveComponent,FWeakObjectPtr>,FReplicatedPhysicsTarget,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<TWeakObjectPtr<UPrimitiveComponent,FWeakObjectPtr>,FReplicatedPhysicsTarget,0> >
{
};

/* 6664 */
struct FPhysicsReplication
{
  FPhysicsReplicationVtbl *vfptr;
  TMap<TWeakObjectPtr<UPrimitiveComponent,FWeakObjectPtr>,FReplicatedPhysicsTarget,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<TWeakObjectPtr<UPrimitiveComponent,FWeakObjectPtr>,FReplicatedPhysicsTarget,0> > ComponentToTargets;
  FPhysScene *PhysScene;
};

/* 6677 */
struct physx::PxCpuDispatcher
{
  physx::PxCpuDispatcherVtbl *vfptr;
};

/* 6704 */
struct physx::PxSimulationEventCallback
{
  physx::PxSimulationEventCallbackVtbl *vfptr;
};

/* 6724 */
struct physx::PxContactModifyCallback
{
  physx::PxContactModifyCallbackVtbl *vfptr;
};

/* 6727 */
struct __cppobj FContactModifyCallback : physx::PxContactModifyCallback
{
};

/* 6728 */
struct physx::PxBroadPhaseCallback
{
  physx::PxBroadPhaseCallbackVtbl *vfptr;
};

/* 6730 */
struct __cppobj FPhysXMbpBroadphaseCallback : physx::PxBroadPhaseCallback
{
};

/* 6735 */
struct TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<224,16> >,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 6736 */
struct TSparseArray<TSetElement<TTuple<FBodyInstance *,FPhysTarget> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<224,16> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 6737 */
struct __declspec(align(8)) TSet<TTuple<FBodyInstance *,FPhysTarget>,TDefaultMapHashableKeyFuncs<FBodyInstance *,FPhysTarget,0>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<TTuple<FBodyInstance *,FPhysTarget> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 6738 */
struct TMapBase<FBodyInstance *,FPhysTarget,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FBodyInstance *,FPhysTarget,0> >
{
  TSet<TTuple<FBodyInstance *,FPhysTarget>,TDefaultMapHashableKeyFuncs<FBodyInstance *,FPhysTarget,0>,FDefaultSetAllocator> Pairs;
};

/* 6739 */
struct __cppobj TSortableMapBase<FBodyInstance *,FPhysTarget,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FBodyInstance *,FPhysTarget,0> > : TMapBase<FBodyInstance *,FPhysTarget,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FBodyInstance *,FPhysTarget,0> >
{
};

/* 6740 */
struct __cppobj TMap<FBodyInstance *,FPhysTarget,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FBodyInstance *,FPhysTarget,0> > : TSortableMapBase<FBodyInstance *,FPhysTarget,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FBodyInstance *,FPhysTarget,0> >
{
};

/* 3977 */
struct __cppobj FThreadSafeBool : FThreadSafeCounter
{
};

/* 6753 */
struct FPhysSubstepTask
{
  TMap<FBodyInstance *,FPhysTarget,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FBodyInstance *,FPhysTarget,0> > PhysTargetBuffers[2];
  unsigned int NumSubsteps;
  float SubTime;
  float DeltaSeconds;
  FThreadSafeBool External;
  PhysXCompletionTask *FullSimulationTask;
  float Alpha;
  float StepScale;
  float TotalSubTime;
  unsigned int CurrentSubStep;
  int SubstepCallbackGuard;
  TRefCountPtr<FGraphEvent> CompletionEvent;
  FPhysScene *PhysScene;
  unsigned int SceneType;
  nvidia::apex::Scene *PAScene;
};

/* 6636 */
struct FTimerManagerVtbl
{
  void *(__cdecl *__vecDelDtor)(FTimerManager *this, unsigned int);
  void (__cdecl *OnCrash)(FTimerManager *this);
};

/* 6303 */
union $496374A2E27B79536D6610D1C3E5DCF1
{
  void (__cdecl *~FFXSystemInterface)(FFXSystemInterface *this);
  void *(__cdecl *__vecDelDtor)(FFXSystemInterface *this, unsigned int);
};

/* 6304 */
struct FFXSystemInterfaceVtbl
{
  void (__cdecl *Tick)(FFXSystemInterface *this, float);
  _BYTE gap8[8];
  void (__cdecl *AddVectorField)(FFXSystemInterface *this, UVectorFieldComponent *);
  void (__cdecl *RemoveVectorField)(FFXSystemInterface *this, UVectorFieldComponent *);
  void (__cdecl *UpdateVectorField)(FFXSystemInterface *this, UVectorFieldComponent *);
  FParticleEmitterInstance *(__cdecl *CreateGPUSpriteEmitterInstance)(FFXSystemInterface *this, FGPUSpriteEmitterInfo *);
  void (__cdecl *PreInitViews)(FFXSystemInterface *this);
  bool (__cdecl *UsesGlobalDistanceField)(FFXSystemInterface *this);
  void (__cdecl *PreRender)(FFXSystemInterface *this, FRHICommandListImmediate *, FGlobalDistanceFieldParameterData *);
  void (__cdecl *PostRenderOpaque)(FFXSystemInterface *this, FRHICommandListImmediate *, FRHIUniformBuffer *const , FUniformBufferStruct *, FRHIUniformBuffer *);
  $496374A2E27B79536D6610D1C3E5DCF1 ___u9;
};

/* 4483 */
struct IPathFollowingAgentInterfaceVtbl
{
  void *(__cdecl *__vecDelDtor)(IPathFollowingAgentInterface *this, unsigned int);
  UObject *(__cdecl *_getUObject)(IPathFollowingAgentInterface *this);
  void (__cdecl *OnUnableToMove)(IPathFollowingAgentInterface *this, UObject *);
  void (__cdecl *OnStartedFalling)(IPathFollowingAgentInterface *this);
  void (__cdecl *OnLanded)(IPathFollowingAgentInterface *this);
  void (__cdecl *OnMoveBlockedBy)(IPathFollowingAgentInterface *this, FHitResult *);
};

/* 4493 */
union $0A22AE827982054558DFFE68A7B40CA3
{
  void (__cdecl *~FUniqueNetId)(FUniqueNetId *this);
  void *(__cdecl *__vecDelDtor)(FUniqueNetId *this, unsigned int);
};

/* 4494 */
struct FUniqueNetIdVtbl
{
  bool (__cdecl *Compare)(FUniqueNetId *this, FUniqueNetId *);
  FName *(__cdecl *GetType)(FUniqueNetId *this, FName *result);
  const char *(__cdecl *GetBytes)(FUniqueNetId *this);
  int (__cdecl *GetSize)(FUniqueNetId *this);
  bool (__cdecl *IsValid)(FUniqueNetId *this);
  FString *(__cdecl *ToString)(FUniqueNetId *this, FString *result);
  FString *(__cdecl *ToDebugString)(FUniqueNetId *this, FString *result);
  $0A22AE827982054558DFFE68A7B40CA3 ___u7;
};

/* 394 */
enum EMoveComponentFlags
{
  MOVECOMP_NoFlags = 0x0,
  MOVECOMP_IgnoreBases = 0x1,
  MOVECOMP_SkipPhysicsMove = 0x2,
  MOVECOMP_NeverIgnoreBlockingOverlaps = 0x4,
  MOVECOMP_DisableBlockingOverlapDispatch = 0x8,
};

/* 4864 */
struct __cppobj UMovementComponent : UActorComponent
{
  USceneComponent *UpdatedComponent;
  UPrimitiveComponent *UpdatedPrimitive;
  EMoveComponentFlags MoveComponentFlags;
  FVector Velocity;
  unsigned __int32 bConstrainToPlane : 1;
  unsigned __int32 bSnapToPlaneAtStart : 1;
  _BYTE PlaneConstraintAxisSetting[1];
  FVector PlaneConstraintNormal;
  FVector PlaneConstraintOrigin;
  unsigned __int32 bUpdateOnlyIfRendered : 1;
  unsigned __int32 bAutoUpdateTickRegistration : 1;
  unsigned __int32 bTickBeforeOwner : 1;
  unsigned __int32 bAutoRegisterUpdatedComponent : 1;
  bool bInOnRegister;
  bool bInInitializeComponent;
};

/* 4865 */
struct __cppobj __declspec(align(8)) UNavMovementComponent : UMovementComponent
{
  FNavAgentProperties NavAgentProps;
  float FixedPathBrakingDistance;
  unsigned __int32 bUpdateNavAgentWithOwnersCollision : 1;
  unsigned __int32 bUseAccelerationForPaths : 1;
  unsigned __int32 bUseFixedBrakingDistanceForPaths : 1;
  unsigned __int32 bStopMovementAbortPaths : 1;
  UObject *PathFollowingComp;
  FMovementProperties MovementState;
};

/* 4866 */
struct __cppobj UPawnMovementComponent : UNavMovementComponent
{
  APawn *PawnOwner;
};

/* 4867 */
struct IRVOAvoidanceInterface
{
  IRVOAvoidanceInterfaceVtbl *vfptr;
};

/* 4869 */
struct INetworkPredictionInterface
{
  INetworkPredictionInterfaceVtbl *vfptr;
};

/* 4876 */
struct TEnumAsByte<enum EMovementMode>
{
  char Value;
};

/* 4478 */
struct __cppobj FVector_NetQuantize : FVector
{
};

/* 4479 */
struct __cppobj FVector_NetQuantizeNormal : FVector
{
};

/* 4480 */
struct __cppobj TWeakObjectPtr<UPhysicalMaterial,FWeakObjectPtr> : FWeakObjectPtr
{
};

/* 4482 */
const struct FHitResult
{
  __int8 bBlockingHit : 1;
  __int8 bStartPenetrating : 1;
  int FaceIndex;
  float Time;
  float Distance;
  FVector_NetQuantize Location;
  FVector_NetQuantize ImpactPoint;
  FVector_NetQuantizeNormal Normal;
  FVector_NetQuantizeNormal ImpactNormal;
  FVector_NetQuantize TraceStart;
  FVector_NetQuantize TraceEnd;
  float PenetrationDepth;
  int Item;
  TWeakObjectPtr<UPhysicalMaterial,FWeakObjectPtr> PhysMaterial;
  TWeakObjectPtr<AActor,FWeakObjectPtr> Actor;
  TWeakObjectPtr<UPrimitiveComponent,FWeakObjectPtr> Component;
  FName BoneName;
  FName MyBoneName;
};

/* 4877 */
struct FFindFloorResult
{
  unsigned __int32 bBlockingHit : 1;
  unsigned __int32 bWalkableFloor : 1;
  unsigned __int32 bLineTrace : 1;
  float FloorDist;
  float LineDist;
  FHitResult HitResult;
};

/* 4878 */
struct $EF00A3F3C0FB8F1732B72504A8D5BC01
{
  unsigned __int32 bGroup0 : 1;
  unsigned __int32 bGroup1 : 1;
  unsigned __int32 bGroup2 : 1;
  unsigned __int32 bGroup3 : 1;
  unsigned __int32 bGroup4 : 1;
  unsigned __int32 bGroup5 : 1;
  unsigned __int32 bGroup6 : 1;
  unsigned __int32 bGroup7 : 1;
  unsigned __int32 bGroup8 : 1;
  unsigned __int32 bGroup9 : 1;
  unsigned __int32 bGroup10 : 1;
  unsigned __int32 bGroup11 : 1;
  unsigned __int32 bGroup12 : 1;
  unsigned __int32 bGroup13 : 1;
  unsigned __int32 bGroup14 : 1;
  unsigned __int32 bGroup15 : 1;
  unsigned __int32 bGroup16 : 1;
  unsigned __int32 bGroup17 : 1;
  unsigned __int32 bGroup18 : 1;
  unsigned __int32 bGroup19 : 1;
  unsigned __int32 bGroup20 : 1;
  unsigned __int32 bGroup21 : 1;
  unsigned __int32 bGroup22 : 1;
  unsigned __int32 bGroup23 : 1;
  unsigned __int32 bGroup24 : 1;
  unsigned __int32 bGroup25 : 1;
  unsigned __int32 bGroup26 : 1;
  unsigned __int32 bGroup27 : 1;
  unsigned __int32 bGroup28 : 1;
  unsigned __int32 bGroup29 : 1;
  unsigned __int32 bGroup30 : 1;
  unsigned __int32 bGroup31 : 1;
};

/* 4879 */
union $8A5DEE21A4FEE7B9704900CE550A5470
{
  $EF00A3F3C0FB8F1732B72504A8D5BC01 __s0;
  int Packed;
};

/* 4880 */
struct FNavAvoidanceMask
{
  $8A5DEE21A4FEE7B9704900CE550A5470 ___u0;
};

/* 4883 */
struct __cppobj FCharacterMovementComponentPostPhysicsTickFunction : FTickFunction
{
  UCharacterMovementComponent *Target;
};

/* 4906 */
struct __cppobj TTypeCompatibleBytes<FRootMotionServerToLocalIDMapping> : TAlignedBytes<8,4>
{
};

/* 4907 */
struct __cppobj FHeapAllocator::ForElementType<FRootMotionServerToLocalIDMapping> : FHeapAllocator::ForAnyElementType
{
};

/* 4908 */
struct TInlineAllocator<16,FDefaultAllocator>::ForElementType<FRootMotionServerToLocalIDMapping>
{
  TTypeCompatibleBytes<FRootMotionServerToLocalIDMapping> InlineData[16];
  FHeapAllocator::ForElementType<FRootMotionServerToLocalIDMapping> SecondaryData;
};

/* 4909 */
struct TArray<FRootMotionServerToLocalIDMapping,TInlineAllocator<16,FDefaultAllocator> >
{
  TInlineAllocator<16,FDefaultAllocator>::ForElementType<FRootMotionServerToLocalIDMapping> AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 4910 */
struct __cppobj TBaseDelegate<FTransform,FTransform const &,UCharacterMovementComponent *> : FDelegateBase
{
};

/* 4882 */
struct __cppobj __declspec(align(16)) UCharacterMovementComponent : UPawnMovementComponent, IRVOAvoidanceInterface, INetworkPredictionInterface
{
  ACharacter *CharacterOwner;
  unsigned __int32 bApplyGravityWhileJumping : 1;
  float GravityScale;
  float MaxStepHeight;
  float JumpZVelocity;
  float JumpOffJumpZFactor;
  float WalkableFloorAngle;
  float WalkableFloorZ;
  TEnumAsByte<enum EMovementMode> MovementMode;
  char CustomMovementMode;
  FVector OldBaseLocation;
  __declspec(align(8)) FQuat OldBaseQuat;
  float GroundFriction;
  float MaxWalkSpeed;
  float MaxWalkSpeedCrouched;
  float MaxSwimSpeed;
  float MaxFlySpeed;
  float MaxCustomMovementSpeed;
  float MaxAcceleration;
  float MinAnalogWalkSpeed;
  float BrakingFrictionFactor;
  float BrakingFriction;
  unsigned __int32 bUseSeparateBrakingFriction : 1;
  float BrakingDecelerationWalking;
  float BrakingDecelerationFalling;
  float BrakingDecelerationSwimming;
  float BrakingDecelerationFlying;
  float AirControl;
  float AirControlBoostMultiplier;
  float AirControlBoostVelocityThreshold;
  float FallingLateralFriction;
  float CrouchedHalfHeight;
  float Buoyancy;
  float PerchRadiusThreshold;
  float PerchAdditionalHeight;
  FRotator RotationRate;
  unsigned __int32 bUseControllerDesiredRotation : 1;
  unsigned __int32 bOrientRotationToMovement : 1;
  unsigned __int32 bSweepWhileNavWalking : 1;
  unsigned __int32 bNeedsSweepWhileWalkingUpdate : 1;
  unsigned __int32 bMovementInProgress : 1;
  unsigned __int32 bEnableScopedMovementUpdates : 1;
  unsigned __int32 bForceMaxAccel : 1;
  unsigned __int32 bRunPhysicsWithNoController : 1;
  unsigned __int32 bForceNextFloorCheck : 1;
  unsigned __int32 bShrinkProxyCapsule : 1;
  unsigned __int32 bCanWalkOffLedges : 1;
  unsigned __int32 bCanWalkOffLedgesWhenCrouching : 1;
  unsigned __int32 bNetworkSmoothingComplete : 1;
  unsigned __int32 bNetworkLargeClientCorrection : 1;
  unsigned __int32 bNetworkSkipProxyPredictionOnNetUpdate : 1;
  unsigned __int32 bNetworkAlwaysReplicateTransformUpdateTimestamp : 1;
  unsigned __int32 bDeferUpdateMoveComponent : 1;
  USceneComponent *DeferredUpdatedMoveComponent;
  float MaxOutOfWaterStepHeight;
  float OutofWaterZ;
  float Mass;
  bool bEnablePhysicsInteraction;
  bool bTouchForceScaledToMass;
  bool bPushForceScaledToMass;
  bool bPushForceUsingZOffset;
  bool bScalePushForceToVelocity;
  float StandingDownwardForceScale;
  float InitialPushForceFactor;
  float PushForceFactor;
  float PushForcePointZOffsetFactor;
  float TouchForceFactor;
  float MinTouchForce;
  float MaxTouchForce;
  float RepulsionForce;
  unsigned __int32 bForceBraking_DEPRECATED : 1;
  float CrouchedSpeedMultiplier_DEPRECATED;
  float UpperImpactNormalScale_DEPRECATED;
  FVector Acceleration;
  FVector LastUpdateLocation;
  FQuat LastUpdateRotation;
  FVector LastUpdateVelocity;
  float ServerLastTransformUpdateTimeStamp;
  float ServerLastClientGoodMoveAckTime;
  float ServerLastClientAdjustmentTime;
  FVector PendingImpulseToApply;
  FVector PendingForceToApply;
  float AnalogInputModifier;
  float LastStuckWarningTime;
  unsigned int StuckWarningCountSinceNotify;
  float MaxSimulationTimeStep;
  int MaxSimulationIterations;
  float MaxDepenetrationWithGeometry;
  float MaxDepenetrationWithGeometryAsProxy;
  float MaxDepenetrationWithPawn;
  float MaxDepenetrationWithPawnAsProxy;
  float NetworkSimulatedSmoothLocationTime;
  float NetworkSimulatedSmoothRotationTime;
  float ListenServerNetworkSimulatedSmoothLocationTime;
  float ListenServerNetworkSimulatedSmoothRotationTime;
  float NetProxyShrinkRadius;
  float NetProxyShrinkHalfHeight;
  float NetworkMaxSmoothUpdateDistance;
  float NetworkNoSmoothUpdateDistance;
  _BYTE NetworkSmoothingMode[1];
  float NetworkMinTimeBetweenClientAckGoodMoves;
  float NetworkMinTimeBetweenClientAdjustments;
  float NetworkMinTimeBetweenClientAdjustmentsLargeCorrection;
  float NetworkLargeClientCorrectionDistance;
  float LedgeCheckThreshold;
  float JumpOutOfWaterPitch;
  FFindFloorResult CurrentFloor;
  TEnumAsByte<enum EMovementMode> DefaultLandMovementMode;
  TEnumAsByte<enum EMovementMode> DefaultWaterMovementMode;
  TEnumAsByte<enum EMovementMode> GroundMovementMode;
  unsigned __int32 bMaintainHorizontalGroundVelocity : 1;
  unsigned __int32 bImpartBaseVelocityX : 1;
  unsigned __int32 bImpartBaseVelocityY : 1;
  unsigned __int32 bImpartBaseVelocityZ : 1;
  unsigned __int32 bImpartBaseAngularVelocity : 1;
  unsigned __int32 bJustTeleported : 1;
  unsigned __int32 bNetworkUpdateReceived : 1;
  unsigned __int32 bNetworkMovementModeChanged : 1;
  unsigned __int32 bIgnoreClientMovementErrorChecksAndCorrection : 1;
  unsigned __int32 bNotifyApex : 1;
  unsigned __int32 bCheatFlying : 1;
  unsigned __int32 bWantsToCrouch : 1;
  unsigned __int32 bCrouchMaintainsBaseLocation : 1;
  unsigned __int32 bIgnoreBaseRotation : 1;
  unsigned __int32 bFastAttachedMove : 1;
  unsigned __int32 bAlwaysCheckFloor : 1;
  unsigned __int32 bUseFlatBaseForFloorChecks : 1;
  unsigned __int32 bPerformingJumpOff : 1;
  unsigned __int32 bWantsToLeaveNavWalking : 1;
  unsigned __int32 bUseRVOAvoidance : 1;
  unsigned __int32 bRequestedMoveUseAcceleration : 1;
  unsigned __int32 bIsNavWalkingOnServer : 1;
  unsigned __int32 bHasRequestedVelocity : 1;
  unsigned __int32 bRequestedMoveWithMaxSpeed : 1;
  unsigned __int32 bWasAvoidanceUpdated : 1;
  unsigned __int32 bUseRVOPostProcess : 1;
  unsigned __int32 bDeferUpdateBasedMovement : 1;
  unsigned __int32 bProjectNavMeshWalking : 1;
  unsigned __int32 bProjectNavMeshOnBothWorldChannels : 1;
  FVector AvoidanceLockVelocity;
  float AvoidanceLockTimer;
  float AvoidanceConsiderationRadius;
  FVector RequestedVelocity;
  int AvoidanceUID;
  FNavAvoidanceMask AvoidanceGroup;
  FNavAvoidanceMask GroupsToAvoid;
  FNavAvoidanceMask GroupsToIgnore;
  float AvoidanceWeight;
  FVector PendingLaunchVelocity;
  FNavLocation CachedNavLocation;
  FHitResult CachedProjectedNavMeshHitResult;
  float NavMeshProjectionInterval;
  float NavMeshProjectionTimer;
  float NavMeshProjectionInterpSpeed;
  float NavMeshProjectionHeightScaleUp;
  float NavMeshProjectionHeightScaleDown;
  float NavWalkingFloorDistTolerance;
  FCharacterMovementComponentPostPhysicsTickFunction PostPhysicsTickFunction;
  FNetworkPredictionData_Client_Character *ClientPredictionData;
  FNetworkPredictionData_Server_Character *ServerPredictionData;
  float MinTimeBetweenTimeStampResets;
  float LastTimeStampResetServerTime;
  FRootMotionSourceGroup CurrentRootMotion;
  TArray<FRootMotionServerToLocalIDMapping,TInlineAllocator<16,FDefaultAllocator> > RootMotionIDMappings;
  FRootMotionMovementParams RootMotionParams;
  FVector AnimRootMotionVelocity;
  bool bWasSimulatingRootMotion;
  unsigned __int32 bAllowPhysicsRotationDuringAnimRootMotion : 1;
  TBaseDelegate<FTransform,FTransform const &,UCharacterMovementComponent *> ProcessRootMotionPreConvertToWorld;
  TBaseDelegate<FTransform,FTransform const &,UCharacterMovementComponent *> ProcessRootMotionPostConvertToWorld;
};

/* 4911 */
struct TSubclassOf<UNavAreaBase>
{
  UClass *Class;
};

/* 4912 */
struct __cppobj UShapeComponent : UPrimitiveComponent
{
  FColor ShapeColor;
  UBodySetup *ShapeBodySetup;
  __int8 bDrawOnlyIfSelected : 1;
  __int8 bShouldCollideWhenPlacing : 1;
  __int8 bDynamicObstacle : 1;
  __int8 bUseArchetypeBodySetup : 1;
  TSubclassOf<UNavAreaBase> AreaClass;
};

/* 4913 */
struct __cppobj __declspec(align(8)) UCapsuleComponent : UShapeComponent
{
  float CapsuleHalfHeight;
  float CapsuleRadius;
  float CapsuleHeight_DEPRECATED;
};

/* 4892 */
struct FRootMotionSourceGroupVtbl
{
  void *(__cdecl *__vecDelDtor)(FRootMotionSourceGroup *this, unsigned int);
};

/* 4553 */
struct IInterface_PreviewMeshProvider
{
  IInterface_PreviewMeshProviderVtbl *vfptr;
};

/* 4741 */
struct TArray<UAnimMetaData *,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 4742 */
struct __cppobj UAnimationAsset : UObject, IInterface_AssetUserData, IInterface_PreviewMeshProvider
{
  USkeleton *Skeleton;
  FGuid SkeletonGuid;
  FGuid SkeletonVirtualBoneGuid;
  TArray<UAnimMetaData *,FDefaultAllocator> MetaData;
  TArray<UAssetUserData *,FDefaultAllocator> AssetUserData;
};

/* 4702 */
const struct TArray<FAnimNotifyEvent,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 4743 */
struct TArray<FFloatCurve,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 4744 */
struct FRawCurveTracks
{
  TArray<FFloatCurve,FDefaultAllocator> FloatCurves;
};

/* 4745 */
struct __cppobj UAnimSequenceBase : UAnimationAsset
{
  TArray<FAnimNotifyEvent,FDefaultAllocator> Notifies;
  float SequenceLength;
  float RateScale;
  FRawCurveTracks RawCurveData;
};

/* 4746 */
struct __cppobj UAnimCompositeBase : UAnimSequenceBase
{
};

/* 4747 */
struct __declspec(align(8)) FAlphaBlend
{
  _BYTE BlendOption[1];
  UCurveFloat *CustomCurve;
  float BlendTime;
  float AlphaLerp;
  float AlphaBlend;
  float BlendTimeRemaining;
  float BlendedValue;
  float BeginValue;
  float DesiredValue;
  bool bNeedsToResetAlpha;
  bool bNeedsToResetBlendTime;
  bool bNeedsToResetCachedDesiredBlendedValue;
  float CachedDesiredBlendedValue;
};

/* 4748 */
struct TArray<FAnimSyncMarker,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 4749 */
struct FMarkerSyncData
{
  TArray<FAnimSyncMarker,FDefaultAllocator> AuthoredSyncMarkers;
  TArray<FName,FDefaultAllocator> UniqueMarkerNames;
};

/* 4750 */
struct TArray<FCompositeSection,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 4751 */
struct TArray<FSlotAnimationTrack,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 4752 */
struct TArray<FBranchingPoint,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 4753 */
struct TEnumAsByte<enum ERootMotionRootLock::Type>
{
  char Value;
};

/* 4754 */
struct TArray<FBranchingPointMarker,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 4755 */
struct TArray<FTimeStretchCurveMarker,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 4756 */
struct __declspec(align(8)) FTimeStretchCurve
{
  float SamplingRate;
  float CurveValueMinPrecision;
  TArray<FTimeStretchCurveMarker,FDefaultAllocator> Markers;
  float Sum_dT_i_by_C_i[3];
};

/* 4757 */
struct __cppobj UAnimMontage : UAnimCompositeBase
{
  FAlphaBlend BlendIn;
  float BlendInTime_DEPRECATED;
  FAlphaBlend BlendOut;
  float BlendOutTime_DEPRECATED;
  float BlendOutTriggerTime;
  FName SyncGroup;
  int SyncSlotIndex;
  FMarkerSyncData MarkerData;
  TArray<FCompositeSection,FDefaultAllocator> CompositeSections;
  TArray<FSlotAnimationTrack,FDefaultAllocator> SlotAnimTracks;
  TArray<FBranchingPoint,FDefaultAllocator> BranchingPoints_DEPRECATED;
  bool bEnableRootMotionTranslation;
  bool bEnableRootMotionRotation;
  bool bEnableAutoBlendOut;
  TEnumAsByte<enum ERootMotionRootLock::Type> RootMotionRootLock;
  TArray<FBranchingPointMarker,FDefaultAllocator> BranchingPointMarkers;
  TArray<int,FDefaultAllocator> BranchingPointStateNotifyIndices;
  FTimeStretchCurve TimeStretchCurve;
  FName TimeStretchCurveName;
};

/* 68413 */
struct std::_Func_base<void,enum ksRacing::TrackFlagLights const &>
{
  std::_Func_base<void,enum ksRacing::TrackFlagLights const &>Vtbl *vfptr;
};

/* 68426 */
struct std::_Func_base<void,ksRacing::RaceStateEvent const &>
{
  std::_Func_base<void,ksRacing::RaceStateEvent const &>Vtbl *vfptr;
};

/* 68440 */
struct std::_Func_base<void,ksRacing::RaceStartTimeEvent const &>
{
  std::_Func_base<void,ksRacing::RaceStartTimeEvent const &>Vtbl *vfptr;
};

/* 68454 */
struct std::_Func_base<void,ksRacing::StartSessionEvent const &>
{
  std::_Func_base<void,ksRacing::StartSessionEvent const &>Vtbl *vfptr;
};

/* 68468 */
struct std::_Func_base<void,ksRacing::SwapDriverEvent const &>
{
  std::_Func_base<void,ksRacing::SwapDriverEvent const &>Vtbl *vfptr;
};

/* 68482 */
struct std::_Func_base<void,bool const &>
{
  std::_Func_base<void,bool const &>Vtbl *vfptr;
};

/* 68495 */
struct std::_Func_base<void,ksRacing::AddOnlineEvent const &>
{
  std::_Func_base<void,ksRacing::AddOnlineEvent const &>Vtbl *vfptr;
};

/* 68382 */
struct __cppobj std::_Arg_types<ksRacing::EntryListUpdatedEvent const &>
{
};

/* 68386 */
union std::_Func_class<void,ksRacing::EntryListUpdatedEvent const &>::_Storage
{
  long double _Dummy1;
  char _Dummy2[56];
  std::_Func_base<void,ksRacing::EntryListUpdatedEvent const &> *_Ptrs[8];
};

/* 68387 */
struct __cppobj std::_Func_class<void,ksRacing::EntryListUpdatedEvent const &> : std::_Arg_types<ksRacing::EntryListUpdatedEvent const &>
{
  std::_Func_class<void,ksRacing::EntryListUpdatedEvent const &>::_Storage _Mystorage;
};

/* 68388 */
struct __cppobj std::function<void __cdecl(ksRacing::EntryListUpdatedEvent const &)> : std::_Func_class<void,ksRacing::EntryListUpdatedEvent const &>
{
};

/* 68389 */
struct std::pair<void *,std::function<void __cdecl(ksRacing::EntryListUpdatedEvent const &)> >
{
  void *first;
  std::function<void __cdecl(ksRacing::EntryListUpdatedEvent const &)> second;
};

/* 68363 */
struct std::pair<unsigned short const ,ksRacing::CarInfo>
{
  const unsigned __int16 first;
  ksRacing::CarInfo second;
};

/* 68396 */
struct std::_Tree_node<std::pair<unsigned short const ,ksRacing::CarInfo>,void *>
{
  std::_Tree_node<std::pair<unsigned short const ,ksRacing::CarInfo>,void *> *_Left;
  std::_Tree_node<std::pair<unsigned short const ,ksRacing::CarInfo>,void *> *_Parent;
  std::_Tree_node<std::pair<unsigned short const ,ksRacing::CarInfo>,void *> *_Right;
  char _Color;
  char _Isnil;
  std::pair<unsigned short const ,ksRacing::CarInfo> _Myval;
};

/* 68366 */
struct __declspec(align(8)) ksRacing::DriverEntry
{
  ksRacing::DriverInfo driverInfo;
  unsigned __int16 connectedCarIndex;
  bool isDriving;
};

/* 68367 */
struct std::pair<unsigned short const ,ksRacing::DriverEntry>
{
  const unsigned __int16 first;
  ksRacing::DriverEntry second;
};

/* 68404 */
struct std::_Tree_node<std::pair<unsigned short const ,ksRacing::DriverEntry>,void *>
{
  std::_Tree_node<std::pair<unsigned short const ,ksRacing::DriverEntry>,void *> *_Left;
  std::_Tree_node<std::pair<unsigned short const ,ksRacing::DriverEntry>,void *> *_Parent;
  std::_Tree_node<std::pair<unsigned short const ,ksRacing::DriverEntry>,void *> *_Right;
  char _Color;
  char _Isnil;
  std::pair<unsigned short const ,ksRacing::DriverEntry> _Myval;
};

/* 68378 */
struct std::pair<unsigned short const ,std::set<unsigned short,std::less<unsigned short>,std::allocator<unsigned short> > >
{
  const unsigned __int16 first;
  std::set<unsigned short,std::less<unsigned short>,std::allocator<unsigned short> > second;
};

/* 68733 */
struct std::_Tree_node<std::pair<unsigned short const ,std::set<unsigned short,std::less<unsigned short>,std::allocator<unsigned short> > >,void *>
{
  std::_Tree_node<std::pair<unsigned short const ,std::set<unsigned short,std::less<unsigned short>,std::allocator<unsigned short> > >,void *> *_Left;
  std::_Tree_node<std::pair<unsigned short const ,std::set<unsigned short,std::less<unsigned short>,std::allocator<unsigned short> > >,void *> *_Parent;
  std::_Tree_node<std::pair<unsigned short const ,std::set<unsigned short,std::less<unsigned short>,std::allocator<unsigned short> > >,void *> *_Right;
  char _Color;
  char _Isnil;
  std::pair<unsigned short const ,std::set<unsigned short,std::less<unsigned short>,std::allocator<unsigned short> > > _Myval;
};

/* 68514 */
struct __cppobj std::_Arg_types<ksRacing::UpdateOfficialPositionEvent const &>
{
};

/* 68518 */
union std::_Func_class<void,ksRacing::UpdateOfficialPositionEvent const &>::_Storage
{
  long double _Dummy1;
  char _Dummy2[56];
  std::_Func_base<void,ksRacing::UpdateOfficialPositionEvent const &> *_Ptrs[8];
};

/* 68519 */
struct __cppobj std::_Func_class<void,ksRacing::UpdateOfficialPositionEvent const &> : std::_Arg_types<ksRacing::UpdateOfficialPositionEvent const &>
{
  std::_Func_class<void,ksRacing::UpdateOfficialPositionEvent const &>::_Storage _Mystorage;
};

/* 68520 */
struct __cppobj std::function<void __cdecl(ksRacing::UpdateOfficialPositionEvent const &)> : std::_Func_class<void,ksRacing::UpdateOfficialPositionEvent const &>
{
};

/* 68521 */
struct std::pair<void *,std::function<void __cdecl(ksRacing::UpdateOfficialPositionEvent const &)> >
{
  void *first;
  std::function<void __cdecl(ksRacing::UpdateOfficialPositionEvent const &)> second;
};

/* 68528 */
struct __cppobj std::_Arg_types<ksRacing::UpdateCarSystems const &>
{
};

/* 68532 */
union std::_Func_class<void,ksRacing::UpdateCarSystems const &>::_Storage
{
  long double _Dummy1;
  char _Dummy2[56];
  std::_Func_base<void,ksRacing::UpdateCarSystems const &> *_Ptrs[8];
};

/* 68533 */
struct __cppobj std::_Func_class<void,ksRacing::UpdateCarSystems const &> : std::_Arg_types<ksRacing::UpdateCarSystems const &>
{
  std::_Func_class<void,ksRacing::UpdateCarSystems const &>::_Storage _Mystorage;
};

/* 68534 */
struct __cppobj std::function<void __cdecl(ksRacing::UpdateCarSystems const &)> : std::_Func_class<void,ksRacing::UpdateCarSystems const &>
{
};

/* 68535 */
struct std::pair<void *,std::function<void __cdecl(ksRacing::UpdateCarSystems const &)> >
{
  void *first;
  std::function<void __cdecl(ksRacing::UpdateCarSystems const &)> second;
};

/* 68542 */
struct __cppobj std::_Arg_types<unsigned short const &>
{
};

/* 68545 */
union std::_Func_class<void,unsigned short const &>::_Storage
{
  long double _Dummy1;
  char _Dummy2[56];
  std::_Func_base<void,unsigned short const &> *_Ptrs[8];
};

/* 68546 */
struct __cppobj std::_Func_class<void,unsigned short const &> : std::_Arg_types<unsigned short const &>
{
  std::_Func_class<void,unsigned short const &>::_Storage _Mystorage;
};

/* 68547 */
struct __cppobj std::function<void __cdecl(unsigned short const &)> : std::_Func_class<void,unsigned short const &>
{
};

/* 68548 */
struct std::pair<void *,std::function<void __cdecl(unsigned short const &)> >
{
  void *first;
  std::function<void __cdecl(unsigned short const &)> second;
};

/* 68559 */
struct ksRacing::CarState
{
  _BYTE cupCategory[1];
  std::vector<unsigned short,std::allocator<unsigned short> > officialCupPositionAsPosition;
  unsigned __int16 realtimePosition;
  float totalDistance;
  unsigned __int16 lapCount;
  int totalTime;
  unsigned __int16 splinePosition;
  float splineDistance;
  unsigned __int16 currentSpeed;
  int currentDelta;
  ksRacing::Lap bestLap;
  unsigned int sectorCount;
  float lastSectorTimeStamp;
  _BYTE carLocation[1];
  bool isBetweenSafetyCarLines;
  char formationLapCounter;
  bool isSessionOver;
  bool isDisqualified;
  bool isRetired;
  unsigned __int16 pitGarageIndex;
  unsigned __int16 lastStanding;
  unsigned __int16 driverIndex;
  ksRacing::carSystemsUnion carSystems;
};

/* 68560 */
struct std::pair<unsigned short const ,ksRacing::CarState>
{
  const unsigned __int16 first;
  ksRacing::CarState second;
};

/* 68556 */
struct std::_Tree_node<std::pair<unsigned short const ,ksRacing::CarState>,void *>
{
  std::_Tree_node<std::pair<unsigned short const ,ksRacing::CarState>,void *> *_Left;
  std::_Tree_node<std::pair<unsigned short const ,ksRacing::CarState>,void *> *_Parent;
  std::_Tree_node<std::pair<unsigned short const ,ksRacing::CarState>,void *> *_Right;
  char _Color;
  char _Isnil;
  std::pair<unsigned short const ,ksRacing::CarState> _Myval;
};

/* 68569 */
struct std::pair<unsigned short const ,ksRacing::CarState *>
{
  const unsigned __int16 first;
  ksRacing::CarState *second;
};

/* 68568 */
struct std::_Tree_node<std::pair<unsigned short const ,ksRacing::CarState *>,void *>
{
  std::_Tree_node<std::pair<unsigned short const ,ksRacing::CarState *>,void *> *_Left;
  std::_Tree_node<std::pair<unsigned short const ,ksRacing::CarState *>,void *> *_Parent;
  std::_Tree_node<std::pair<unsigned short const ,ksRacing::CarState *>,void *> *_Right;
  char _Color;
  char _Isnil;
  std::pair<unsigned short const ,ksRacing::CarState *> _Myval;
};

/* 68583 */
struct ksRacing::DriverState
{
  bool isConnected;
  char behaviourWarningPoints;
  char lightWarningsCount;
  char severeWarningsCount;
};

/* 68584 */
struct std::pair<unsigned short const ,ksRacing::DriverState>
{
  const unsigned __int16 first;
  ksRacing::DriverState second;
};

/* 68582 */
struct std::_Tree_node<std::pair<unsigned short const ,ksRacing::DriverState>,void *>
{
  std::_Tree_node<std::pair<unsigned short const ,ksRacing::DriverState>,void *> *_Left;
  std::_Tree_node<std::pair<unsigned short const ,ksRacing::DriverState>,void *> *_Parent;
  std::_Tree_node<std::pair<unsigned short const ,ksRacing::DriverState>,void *> *_Right;
  char _Color;
  char _Isnil;
  std::pair<unsigned short const ,ksRacing::DriverState> _Myval;
};

/* 68602 */
struct __declspec(align(2)) ksRacing::SeasonItem
{
  unsigned __int16 indexInSeasonList;
  _BYTE cupCategory[1];
};

/* 68613 */
struct ksRacing::GarageStock
{
  std::vector<ksRacing::TyreSet,std::allocator<ksRacing::TyreSet> > tyreSets;
};

/* 68638 */
struct __cppobj std::_Arg_types<ksRacing::Lap const &>
{
};

/* 68641 */
union std::_Func_class<void,ksRacing::Lap const &>::_Storage
{
  long double _Dummy1;
  char _Dummy2[56];
  std::_Func_base<void,ksRacing::Lap const &> *_Ptrs[8];
};

/* 68642 */
struct __cppobj std::_Func_class<void,ksRacing::Lap const &> : std::_Arg_types<ksRacing::Lap const &>
{
  std::_Func_class<void,ksRacing::Lap const &>::_Storage _Mystorage;
};

/* 68643 */
struct __cppobj std::function<void __cdecl(ksRacing::Lap const &)> : std::_Func_class<void,ksRacing::Lap const &>
{
};

/* 68644 */
struct std::pair<void *,std::function<void __cdecl(ksRacing::Lap const &)> >
{
  void *first;
  std::function<void __cdecl(ksRacing::Lap const &)> second;
};

/* 68651 */
struct __cppobj std::_Arg_types<ksRacing::BestLap const &>
{
};

/* 68655 */
union std::_Func_class<void,ksRacing::BestLap const &>::_Storage
{
  long double _Dummy1;
  char _Dummy2[56];
  std::_Func_base<void,ksRacing::BestLap const &> *_Ptrs[8];
};

/* 68656 */
struct __cppobj std::_Func_class<void,ksRacing::BestLap const &> : std::_Arg_types<ksRacing::BestLap const &>
{
  std::_Func_class<void,ksRacing::BestLap const &>::_Storage _Mystorage;
};

/* 68657 */
struct __cppobj std::function<void __cdecl(ksRacing::BestLap const &)> : std::_Func_class<void,ksRacing::BestLap const &>
{
};

/* 68658 */
struct std::pair<void *,std::function<void __cdecl(ksRacing::BestLap const &)> >
{
  void *first;
  std::function<void __cdecl(ksRacing::BestLap const &)> second;
};

/* 68232 */
struct std::pair<unsigned short const ,ksRacing::TimingRecord>
{
  const unsigned __int16 first;
  ksRacing::TimingRecord second;
};

/* 68237 */
struct std::_Tree_node<std::pair<unsigned short const ,ksRacing::TimingRecord>,void *>
{
  std::_Tree_node<std::pair<unsigned short const ,ksRacing::TimingRecord>,void *> *_Left;
  std::_Tree_node<std::pair<unsigned short const ,ksRacing::TimingRecord>,void *> *_Parent;
  std::_Tree_node<std::pair<unsigned short const ,ksRacing::TimingRecord>,void *> *_Right;
  char _Color;
  char _Isnil;
  std::pair<unsigned short const ,ksRacing::TimingRecord> _Myval;
};

/* 68670 */
struct __cppobj std::_Arg_types<ksRacing::InvestigationStart const &>
{
};

/* 68674 */
union std::_Func_class<void,ksRacing::InvestigationStart const &>::_Storage
{
  long double _Dummy1;
  char _Dummy2[56];
  std::_Func_base<void,ksRacing::InvestigationStart const &> *_Ptrs[8];
};

/* 68675 */
struct __cppobj std::_Func_class<void,ksRacing::InvestigationStart const &> : std::_Arg_types<ksRacing::InvestigationStart const &>
{
  std::_Func_class<void,ksRacing::InvestigationStart const &>::_Storage _Mystorage;
};

/* 68676 */
struct __cppobj std::function<void __cdecl(ksRacing::InvestigationStart const &)> : std::_Func_class<void,ksRacing::InvestigationStart const &>
{
};

/* 68677 */
struct std::pair<void *,std::function<void __cdecl(ksRacing::InvestigationStart const &)> >
{
  void *first;
  std::function<void __cdecl(ksRacing::InvestigationStart const &)> second;
};

/* 68684 */
struct __cppobj std::_Arg_types<ksRacing::InvestigationEnd const &>
{
};

/* 68688 */
union std::_Func_class<void,ksRacing::InvestigationEnd const &>::_Storage
{
  long double _Dummy1;
  char _Dummy2[56];
  std::_Func_base<void,ksRacing::InvestigationEnd const &> *_Ptrs[8];
};

/* 68689 */
struct __cppobj std::_Func_class<void,ksRacing::InvestigationEnd const &> : std::_Arg_types<ksRacing::InvestigationEnd const &>
{
  std::_Func_class<void,ksRacing::InvestigationEnd const &>::_Storage _Mystorage;
};

/* 68690 */
struct __cppobj std::function<void __cdecl(ksRacing::InvestigationEnd const &)> : std::_Func_class<void,ksRacing::InvestigationEnd const &>
{
};

/* 68691 */
struct std::pair<void *,std::function<void __cdecl(ksRacing::InvestigationEnd const &)> >
{
  void *first;
  std::function<void __cdecl(ksRacing::InvestigationEnd const &)> second;
};

/* 68699 */
struct __declspec(align(4)) std::_Tree_node<std::pair<unsigned short,unsigned short>,void *>
{
  std::_Tree_node<std::pair<unsigned short,unsigned short>,void *> *_Left;
  std::_Tree_node<std::pair<unsigned short,unsigned short>,void *> *_Parent;
  std::_Tree_node<std::pair<unsigned short,unsigned short>,void *> *_Right;
  char _Color;
  char _Isnil;
  std::pair<unsigned short,unsigned short> _Myval;
};

/* 68371 */
struct __declspec(align(8)) std::_Tree_node<unsigned short,void *>
{
  std::_Tree_node<unsigned short,void *> *_Left;
  std::_Tree_node<unsigned short,void *> *_Parent;
  std::_Tree_node<unsigned short,void *> *_Right;
  char _Color;
  char _Isnil;
  unsigned __int16 _Myval;
};

/* 68710 */
struct __declspec(align(4)) ksRacing::CarInvestigation
{
  _BYTE investigationType[1];
  unsigned __int16 carIndex;
  unsigned __int16 driverIndex;
  int deltaToReach;
  int gainedTime;
  int deltaDiff;
  float sessionTimeLimit;
  float sessionTime;
  unsigned __int16 lapIndex;
  std::vector<unsigned short,std::allocator<unsigned short> > investigatedCutMicroSectors;
  float notificationTriggerTime;
  bool hasBeenNotificated;
};

/* 68711 */
struct std::pair<unsigned short const ,ksRacing::CarInvestigation>
{
  const unsigned __int16 first;
  __declspec(align(8)) ksRacing::CarInvestigation second;
};

/* 68709 */
struct std::_Tree_node<std::pair<unsigned short const ,ksRacing::CarInvestigation>,void *>
{
  std::_Tree_node<std::pair<unsigned short const ,ksRacing::CarInvestigation>,void *> *_Left;
  std::_Tree_node<std::pair<unsigned short const ,ksRacing::CarInvestigation>,void *> *_Parent;
  std::_Tree_node<std::pair<unsigned short const ,ksRacing::CarInvestigation>,void *> *_Right;
  char _Color;
  char _Isnil;
  std::pair<unsigned short const ,ksRacing::CarInvestigation> _Myval;
};

/* 68720 */
struct __declspec(align(4)) ksRacing::CarPenalty
{
  unsigned __int16 carIndex;
  unsigned __int16 driverIndex;
  _BYTE penaltyType[1];
  float sessionTime;
  unsigned __int16 lapIndex;
};

/* 68721 */
struct std::pair<unsigned short const ,ksRacing::CarPenalty>
{
  const unsigned __int16 first;
  ksRacing::CarPenalty second;
};

/* 68719 */
struct std::_Tree_node<std::pair<unsigned short const ,ksRacing::CarPenalty>,void *>
{
  std::_Tree_node<std::pair<unsigned short const ,ksRacing::CarPenalty>,void *> *_Left;
  std::_Tree_node<std::pair<unsigned short const ,ksRacing::CarPenalty>,void *> *_Parent;
  std::_Tree_node<std::pair<unsigned short const ,ksRacing::CarPenalty>,void *> *_Right;
  char _Color;
  char _Isnil;
  std::pair<unsigned short const ,ksRacing::CarPenalty> _Myval;
};

/* 3839 */
struct TSharedPtr<FString,1>
{
  FString *Object;
  SharedPointerInternals::FSharedReferencer<1> SharedReferenceCount;
};

/* 3840 */
const struct __declspec(align(8)) FTextHistory
{
  FTextHistoryVtbl *vfptr;
  unsigned __int16 Revision;
};

/* 4400 */
struct UScriptStruct::ICppStructOps
{
  UScriptStruct::ICppStructOpsVtbl *vfptr;
  const int Size;
  const int Alignment;
};

/* 4212 */
struct __cppobj FRHISamplerState : FRHIResource
{
};

/* 4073 */
struct FRHIResourceVtbl
{
  void *(__cdecl *__vecDelDtor)(FRHIResource *this, unsigned int);
};

/* 69170 */
struct TWeakInterfacePtr<IGameplayTaskOwnerInterface>
{
  TWeakObjectPtr<UObject,FWeakObjectPtr> ObjectInstance;
  IGameplayTaskOwnerInterface *InterfaceInstance;
};

/* 69171 */
struct __cppobj TWeakObjectPtr<UGameplayTasksComponent,FWeakObjectPtr> : FWeakObjectPtr
{
};

/* 69172 */
const struct __cppobj UGameplayTask : UObject, IGameplayTaskOwnerInterface
{
  FName InstanceName;
  char Priority;
  _BYTE TaskState[1];
  _BYTE ResourceOverlapPolicy[1];
  unsigned __int32 bTickingTask : 1;
  unsigned __int32 bSimulatedTask : 1;
  unsigned __int32 bIsSimulating : 1;
  unsigned __int32 bIsPausable : 1;
  unsigned __int32 bCaresAboutPriority : 1;
  unsigned __int32 bOwnedByTasksComponent : 1;
  unsigned __int32 bClaimRequiredResources : 1;
  unsigned __int32 bOwnerFinished : 1;
  FGameplayResourceSet RequiredResources;
  FGameplayResourceSet ClaimedResources;
  TWeakInterfacePtr<IGameplayTaskOwnerInterface> TaskOwner;
  TWeakObjectPtr<UGameplayTasksComponent,FWeakObjectPtr> TasksComponent;
  UGameplayTask *ChildTask;
};

/* 69178 */
struct __cppobj FVisualLogEntry
{
};

/* 1943 */
typedef ENavigationCoordSystem::Type EAIRequestPriority::Type;

/* 69183 */
struct IAIResourceInterfaceVtbl
{
  void *(__cdecl *__vecDelDtor)(IAIResourceInterface *this, unsigned int);
  UObject *(__cdecl *_getUObject)(IAIResourceInterface *this);
  void (__cdecl *LockResource)(IAIResourceInterface *this, EAIRequestPriority::Type);
  void (__cdecl *ClearResourceLock)(IAIResourceInterface *this, EAIRequestPriority::Type);
  void (__cdecl *ForceUnlockResource)(IAIResourceInterface *this);
  bool (__cdecl *IsResourceLocked)(IAIResourceInterface *this);
};

/* 8833 */
struct INavigationDataInterface
{
  INavigationDataInterfaceVtbl *vfptr;
};

/* 8836 */
struct __cppobj FNavDataConfig : FNavAgentProperties
{
  FName Name;
  FColor Color;
  FVector DefaultQueryExtent;
  TSubclassOf<AActor> NavigationDataClass;
  FSoftClassPath NavigationDataClassName;
};

/* 8834 */
struct TSharedPtr<FNavigationQueryFilter const ,1>
{
  FNavigationQueryFilter *Object;
  SharedPointerInternals::FSharedReferencer<1> SharedReferenceCount;
};

/* 8849 */
struct TSharedPtr<FNavDataGenerator,1>
{
  FNavDataGenerator *Object;
  SharedPointerInternals::FSharedReferencer<1> SharedReferenceCount;
};

/* 8850 */
struct TArray<TWeakPtr<FNavigationPath,1>,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 8851 */
struct TArray<FNavPathRecalculationRequest,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 7812 */
struct TSharedPtr<FNavigationQueryFilter,1>
{
  FNavigationQueryFilter *Object;
  SharedPointerInternals::FSharedReferencer<1> SharedReferenceCount;
};

/* 8852 */
struct TSparseArray<TSetElement<TTuple<UClass *,TSharedPtr<FNavigationQueryFilter const ,1> > >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<32,8> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 8853 */
struct __declspec(align(8)) TSet<TTuple<UClass *,TSharedPtr<FNavigationQueryFilter const ,1> >,TDefaultMapHashableKeyFuncs<UClass *,TSharedPtr<FNavigationQueryFilter const ,1>,0>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<TTuple<UClass *,TSharedPtr<FNavigationQueryFilter const ,1> > >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 8854 */
struct TMapBase<UClass *,TSharedPtr<FNavigationQueryFilter const ,1>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<UClass *,TSharedPtr<FNavigationQueryFilter const ,1>,0> >
{
  TSet<TTuple<UClass *,TSharedPtr<FNavigationQueryFilter const ,1> >,TDefaultMapHashableKeyFuncs<UClass *,TSharedPtr<FNavigationQueryFilter const ,1>,0>,FDefaultSetAllocator> Pairs;
};

/* 8855 */
struct __cppobj TSortableMapBase<UClass *,TSharedPtr<FNavigationQueryFilter const ,1>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<UClass *,TSharedPtr<FNavigationQueryFilter const ,1>,0> > : TMapBase<UClass *,TSharedPtr<FNavigationQueryFilter const ,1>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<UClass *,TSharedPtr<FNavigationQueryFilter const ,1>,0> >
{
};

/* 8856 */
struct __cppobj TMap<UClass *,TSharedPtr<FNavigationQueryFilter const ,1>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<UClass *,TSharedPtr<FNavigationQueryFilter const ,1>,0> > : TSortableMapBase<UClass *,TSharedPtr<FNavigationQueryFilter const ,1>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<UClass *,TSharedPtr<FNavigationQueryFilter const ,1>,0> >
{
};

/* 8857 */
struct TArray<FSupportedAreaData,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 8858 */
struct TSparseArray<TSetElement<TTuple<UClass const *,int> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<24,8> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 8859 */
struct __declspec(align(8)) TSet<TTuple<UClass const *,int>,TDefaultMapHashableKeyFuncs<UClass const *,int,0>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<TTuple<UClass const *,int> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 8860 */
struct TMapBase<UClass const *,int,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<UClass const *,int,0> >
{
  TSet<TTuple<UClass const *,int>,TDefaultMapHashableKeyFuncs<UClass const *,int,0>,FDefaultSetAllocator> Pairs;
};

/* 8861 */
struct __cppobj TSortableMapBase<UClass const *,int,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<UClass const *,int,0> > : TMapBase<UClass const *,int,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<UClass const *,int,0> >
{
};

/* 8862 */
struct __cppobj TMap<UClass const *,int,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<UClass const *,int,0> > : TSortableMapBase<UClass const *,int,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<UClass const *,int,0> >
{
};

/* 8843 */
const struct __cppobj ANavigationData : AActor, INavigationDataInterface
{
  UPrimitiveComponent *RenderingComp;
  FNavDataConfig NavDataConfig;
  unsigned __int32 bEnableDrawing : 1;
  unsigned __int32 bForceRebuildOnLoad : 1;
  unsigned __int32 bCanBeMainNavData : 1;
  unsigned __int32 bCanSpawnOnRebuild : 1;
  unsigned __int32 bRebuildAtRuntime_DEPRECATED : 1;
  _BYTE RuntimeGeneration[1];
  float ObservedPathsTickInterval;
  unsigned int DataVersion;
  FPathFindingResult *(__cdecl *FindPathImplementation)(FPathFindingResult *result, FNavAgentProperties *, FPathFindingQuery *);
  FPathFindingResult *(__cdecl *FindHierarchicalPathImplementation)(FPathFindingResult *result, FNavAgentProperties *, FPathFindingQuery *);
  bool (__cdecl *TestPathImplementation)(FNavAgentProperties *, FPathFindingQuery *, int *);
  bool (__cdecl *TestHierarchicalPathImplementation)(FNavAgentProperties *, FPathFindingQuery *, int *);
  bool (__cdecl *RaycastImplementation)(ANavigationData *, FVector *, FVector *, FVector *, TSharedPtr<FNavigationQueryFilter const ,1>, UObject *);
  TSharedPtr<FNavDataGenerator,1> NavDataGenerator;
  TArray<TWeakPtr<FNavigationPath,1>,FDefaultAllocator> ActivePaths;
  TArray<TWeakPtr<FNavigationPath,1>,FDefaultAllocator> ObservedPaths;
  TArray<FNavPathRecalculationRequest,FDefaultAllocator> RepathRequests;
  float NextObservedPathsTickInSeconds;
  TSharedPtr<FNavigationQueryFilter,1> DefaultQueryFilter;
  TMap<UClass *,TSharedPtr<FNavigationQueryFilter const ,1>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<UClass *,TSharedPtr<FNavigationQueryFilter const ,1>,0> > QueryFilters;
  TArray<FSupportedAreaData,FDefaultAllocator> SupportedAreas;
  TMap<UClass const *,int,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<UClass const *,int,0> > AreaClassToIdMap;
  unsigned __int32 bRegistered : 1;
  unsigned __int32 bSupportsDefaultAgent : 1;
  unsigned __int16 NavDataUniqueID;
};

/* 8830 */
struct TWeakPtr<FNavigationPath,1>
{
  FNavigationPath *Object;
  SharedPointerInternals::FWeakReferencer<1> WeakReferenceCount;
};

/* 8831 */
struct TSharedFromThis<FNavigationPath,1>
{
  TWeakPtr<FNavigationPath,1> WeakThis;
};

/* 8864 */
struct TArray<FNavPathPoint,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 8865 */
struct __cppobj TWeakObjectPtr<AActor const ,FWeakObjectPtr> : FWeakObjectPtr
{
};

/* 8866 */
struct FNavPathType
{
  unsigned int Id;
  FNavPathType *ParentType;
};

/* 8867 */
struct __cppobj TBaseMulticastDelegate<void,FNavigationPath *,enum ENavPathEvent::Type> : FMulticastDelegateBase<FWeakObjectPtr>
{
};

/* 8868 */
struct __cppobj TMulticastDelegate<void,FNavigationPath *,enum ENavPathEvent::Type> : TBaseMulticastDelegate<void,FNavigationPath *,enum ENavPathEvent::Type>
{
};

/* 8869 */
struct __cppobj TWeakObjectPtr<ANavigationData,FWeakObjectPtr> : FWeakObjectPtr
{
};

/* 8839 */
struct __cppobj TWeakObjectPtr<UObject const ,FWeakObjectPtr> : FWeakObjectPtr
{
};

/* 8840 */
struct FPathFindingQueryData
{
  TWeakObjectPtr<UObject const ,FWeakObjectPtr> Owner;
  FVector StartLocation;
  FVector EndLocation;
  TSharedPtr<FNavigationQueryFilter const ,1> QueryFilter;
  int NavDataFlags;
  unsigned __int32 bAllowPartialPaths : 1;
};

/* 8832 */
struct __cppobj __declspec(align(8)) FNavigationPath : TSharedFromThis<FNavigationPath,1>
{
  FNavigationPathVtbl *vfptr;
  TArray<unsigned __int64,FDefaultAllocator> ShortcutNodeRefs;
  TArray<FNavPathPoint,FDefaultAllocator> PathPoints;
  TWeakObjectPtr<AActor,FWeakObjectPtr> Base;
  TWeakObjectPtr<AActor const ,FWeakObjectPtr> GoalActor;
  INavAgentInterface *GoalActorAsNavAgent;
  TWeakObjectPtr<AActor const ,FWeakObjectPtr> SourceActor;
  INavAgentInterface *SourceActorAsNavAgent;
  TSharedPtr<FNavigationQueryFilter const ,1> Filter;
  FNavPathType PathType;
  TMulticastDelegate<void,FNavigationPath *,enum ENavPathEvent::Type> ObserverDelegate;
  unsigned __int32 bUpToDate : 1;
  unsigned __int32 bIsReady : 1;
  unsigned __int32 bIsPartial : 1;
  unsigned __int32 bReachedSearchLimit : 1;
  unsigned __int32 bDoAutoUpdateOnInvalidation : 1;
  unsigned __int32 bIgnoreInvalidation : 1;
  unsigned __int32 bUpdateStartPointOnRepath : 1;
  unsigned __int32 bUpdateEndPointOnRepath : 1;
  unsigned __int32 bWaitingForRepath : 1;
  unsigned __int32 bUseOnPathUpdatedNotify : 1;
  TWeakObjectPtr<ANavigationData,FWeakObjectPtr> NavigationDataUsed;
  FPathFindingQueryData PathFindingQueryData;
  float LastUpdateTimeStamp;
  float GoalActorLocationTetherDistanceSq;
  FVector GoalActorLastLocation;
};

/* 69190 */
struct __cppobj FMoveRequestCustomData
{
};

/* 69217 */
struct TArray<TSharedPtr<FAIMessageObserver,0>,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 69218 */
struct __cppobj TBaseDelegate<TTypeWrapper<void>,UPawnAction &,enum EPawnActionEventType::Type> : FDelegateBase
{
};

/* 69219 */
struct __cppobj TBaseDelegate<void,UPawnAction &,enum EPawnActionEventType::Type> : TBaseDelegate<TTypeWrapper<void>,UPawnAction &,enum EPawnActionEventType::Type>
{
};

/* 69220 */
struct FAIResourcesSet
{
  unsigned int Flags;
};

/* 3525 */
typedef ENavigationCoordSystem::Type EPawnActionAbortState::Type;

/* 564 */
enum ESoundWavePrecacheState
{
  NotStarted = 0x0,
  InProgress = 0x1,
  Done = 0x2,
};

/* 3526 */
typedef ESoundWavePrecacheState EPawnActionResult::Type;

/* 69215 */
struct __cppobj __declspec(align(8)) UPawnAction : UObject
{
  UPawnAction *ChildAction;
  UPawnAction *ParentAction;
  UPawnActionsComponent *OwnerComponent;
  UObject *Instigator;
  UBrainComponent *BrainComp;
  TArray<TSharedPtr<FAIMessageObserver,0>,FDefaultAllocator> MessageHandlers;
  EAIRequestPriority::Type ExecutionPriority;
  TBaseDelegate<void,UPawnAction &,enum EPawnActionEventType::Type> ActionObserver;
  FAIRequestID RequestID;
  FAIResourcesSet RequiredResources;
  unsigned __int32 bAllowNewSameClassInstance : 1;
  unsigned __int32 bReplaceActiveSameClassInstance : 1;
  unsigned __int32 bShouldPauseMovement : 1;
  unsigned __int32 bAlwaysNotifyOnFinished : 1;
  EPawnActionAbortState::Type AbortState;
  EPawnActionResult::Type FinishResult;
  int IndexOnStack;
  unsigned __int32 bPaused : 1;
  unsigned __int32 bHasBeenStarted : 1;
  unsigned __int32 bFailedToStart : 1;
  unsigned __int32 bWantsTick : 1;
};

/* 69197 */
struct __cppobj UBlackboardData : UDataAsset
{
  UBlackboardData *Parent;
  TArray<FBlackboardEntry,FDefaultAllocator> Keys;
  unsigned __int32 bHasSynchronizedKeys : 1;
  char FirstKeyID;
};

/* 69232 */
struct AIKersArea
{
  float start;
  float end;
  float length;
  float time;
};

/* 69238 */
struct __declspec(align(8)) AIOpponentData
{
  float dist_front;
  float dist_back;
  float lateral_offset;
  bool isEngaged;
  float speedMS;
  float tti;
  float spaceLeft;
  float spaceRight;
  vec3d relPos;
  float relAngle;
  bool isBlocker;
  float isUnderAttack;
  float relXSpeed;
  float distToPass;
  Car *car;
  bool isOutsideTrack;
};

/* 69244 */
struct AIBrakeObstacle
{
  float distance;
  float speedMS;
  AIOpponentData *odata;
};

/* 69250 */
struct AIBrakeProfilerItem
{
  float npos;
  float speed;
  float accx;
  float accz;
};

/* 69258 */
struct TyreCompoundStrategy
{
  float maxKm;
};

/* 69259 */
struct __declspec(align(8)) std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > const ,TyreCompoundStrategy>
{
  std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > first;
  TyreCompoundStrategy second;
};

/* 69257 */
struct std::_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > const ,TyreCompoundStrategy>,void *>
{
  std::_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > const ,TyreCompoundStrategy>,void *> *_Left;
  std::_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > const ,TyreCompoundStrategy>,void *> *_Parent;
  std::_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > const ,TyreCompoundStrategy>,void *> *_Right;
  char _Color;
  char _Isnil;
  std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > const ,TyreCompoundStrategy> _Myval;
};

/* 69268 */
struct AIWingSetup
{
  int index;
  struct SetupItem *item;
  float minValue;
  float maxValue;
};

/* 6170 */
struct TArray<FCurveEdTab,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 6171 */
struct __cppobj __declspec(align(8)) UInterpCurveEdSetup : UObject
{
  TArray<FCurveEdTab,FDefaultAllocator> Tabs;
  int ActiveTab;
};

/* 4119 */
struct __cppobj __declspec(align(8)) FRHIUniformBuffer : FRHIResource
{
  FRHIUniformBufferLayout *Layout;
  unsigned int LayoutConstantBufferSize;
};

/* 6298 */
struct FUniformBufferStructVtbl
{
  void *(__cdecl *__vecDelDtor)(FUniformBufferStruct *this, unsigned int);
};

/* 6299 */
struct __declspec(align(2)) FShaderUniformBufferParameter
{
  unsigned int SetParametersId;
  unsigned __int16 BaseIndex;
  bool bIsBound;
};

/* 4927 */
struct __cppobj UInterpTrackInst : UObject
{
};

/* 4928 */
struct __cppobj UInterpTrackInstDirector : UInterpTrackInst
{
  AActor *OldViewTarget;
};

/* 5066 */
struct TArray<FDebugTextInfo,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 5068 */
struct TArray<FHUDHitBox,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 5069 */
struct TArray<FHUDHitBox *,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 5072 */
struct __cppobj AHUD : AActor
{
  APlayerController *PlayerOwner;
  __int8 bLostFocusPaused : 1;
  __int8 bShowHUD : 1;
  __int8 bShowDebugInfo : 1;
  int CurrentTargetIndex;
  __int8 bShowHitBoxDebugInfo : 1;
  __int8 bShowOverlays : 1;
  __int8 bEnableDebugTextShadow : 1;
  __int8 bShowDebugForReticleTarget : 1;
  TArray<AActor *,FDefaultAllocator> PostRenderedActors;
  float LastHUDRenderTime;
  float RenderDelta;
  TArray<FName,FDefaultAllocator> DebugDisplay;
  TArray<FName,FDefaultAllocator> ToggledDebugCategories;
  UCanvas *Canvas;
  UCanvas *DebugCanvas;
  TArray<FDebugTextInfo,FDefaultAllocator> DebugTextList;
  TSubclassOf<AActor> ShowDebugTargetDesiredClass;
  AActor *ShowDebugTargetActor;
  TArray<FHUDHitBox,FDefaultAllocator> HitBoxMap;
  TArray<FHUDHitBox *,FDefaultAllocator> HitBoxHits;
  TSet<FName,DefaultKeyFuncs<FName,0>,FDefaultSetAllocator> HitBoxesOver;
};

/* 5396 */
struct TSubclassOf<ADebugCameraController>
{
  UClass *Class;
};

/* 5397 */
struct TArray<FDebugTraceInfo,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 5398 */
struct __cppobj UCheatManager : UObject
{
  ADebugCameraController *DebugCameraControllerRef;
  TSubclassOf<ADebugCameraController> DebugCameraControllerClass;
  unsigned __int32 bDebugCapsuleSweep : 1;
  unsigned __int32 bDebugCapsuleTraceComplex : 1;
  unsigned __int32 bToggleAILogging : 1;
  float DebugTraceDistance;
  float DebugCapsuleHalfHeight;
  float DebugCapsuleRadius;
  float DebugTraceDrawNormalLength;
  TEnumAsByte<enum ECollisionChannel> DebugTraceChannel;
  TArray<FDebugTraceInfo,FDefaultAllocator> DebugTraceInfoList;
  TArray<FDebugTraceInfo,FDefaultAllocator> DebugTracePawnInfoList;
  int CurrentTraceIndex;
  int CurrentTracePawnIndex;
};

/* 5401 */
struct TSparseArray<TSetElement<TTuple<unsigned int,FVector> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<24,4> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 5402 */
struct __declspec(align(8)) TSet<TTuple<unsigned int,FVector>,TDefaultMapHashableKeyFuncs<unsigned int,FVector,0>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<TTuple<unsigned int,FVector> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 5403 */
struct TMapBase<unsigned int,FVector,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<unsigned int,FVector,0> >
{
  TSet<TTuple<unsigned int,FVector>,TDefaultMapHashableKeyFuncs<unsigned int,FVector,0>,FDefaultSetAllocator> Pairs;
};

/* 5404 */
struct __cppobj TSortableMapBase<unsigned int,FVector,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<unsigned int,FVector,0> > : TMapBase<unsigned int,FVector,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<unsigned int,FVector,0> >
{
};

/* 5405 */
struct __cppobj TMap<unsigned int,FVector,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<unsigned int,FVector,0> > : TSortableMapBase<unsigned int,FVector,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<unsigned int,FVector,0> >
{
};

/* 5406 */
struct TEnumAsByte<enum EInputEvent>
{
  char Value;
};

/* 5407 */
struct TArray<FKeyBind,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 5408 */
struct TArray<FInputAxisConfigEntry,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 5409 */
struct TArray<FInputActionKeyMapping,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 5410 */
struct TArray<FInputAxisKeyMapping,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 5411 */
struct TSparseArray<TSetElement<TTuple<FKey,FInputAxisProperties> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<48,8> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 5412 */
struct __declspec(align(8)) TSet<TTuple<FKey,FInputAxisProperties>,TDefaultMapHashableKeyFuncs<FKey,FInputAxisProperties,0>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<TTuple<FKey,FInputAxisProperties> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 5413 */
struct TMapBase<FKey,FInputAxisProperties,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FKey,FInputAxisProperties,0> >
{
  TSet<TTuple<FKey,FInputAxisProperties>,TDefaultMapHashableKeyFuncs<FKey,FInputAxisProperties,0>,FDefaultSetAllocator> Pairs;
};

/* 5414 */
struct __cppobj TSortableMapBase<FKey,FInputAxisProperties,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FKey,FInputAxisProperties,0> > : TMapBase<FKey,FInputAxisProperties,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FKey,FInputAxisProperties,0> >
{
};

/* 5415 */
struct __cppobj TMap<FKey,FInputAxisProperties,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FKey,FInputAxisProperties,0> > : TSortableMapBase<FKey,FInputAxisProperties,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FKey,FInputAxisProperties,0> >
{
};

/* 5417 */
struct TSparseArray<TSetElement<TTuple<FName,UPlayerInput::FActionKeyDetails> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<64,8> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 5418 */
struct __declspec(align(8)) TSet<TTuple<FName,UPlayerInput::FActionKeyDetails>,TDefaultMapHashableKeyFuncs<FName,UPlayerInput::FActionKeyDetails,0>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<TTuple<FName,UPlayerInput::FActionKeyDetails> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 5419 */
struct TMapBase<FName,UPlayerInput::FActionKeyDetails,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,UPlayerInput::FActionKeyDetails,0> >
{
  TSet<TTuple<FName,UPlayerInput::FActionKeyDetails>,TDefaultMapHashableKeyFuncs<FName,UPlayerInput::FActionKeyDetails,0>,FDefaultSetAllocator> Pairs;
};

/* 5420 */
struct __cppobj TSortableMapBase<FName,UPlayerInput::FActionKeyDetails,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,UPlayerInput::FActionKeyDetails,0> > : TMapBase<FName,UPlayerInput::FActionKeyDetails,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,UPlayerInput::FActionKeyDetails,0> >
{
};

/* 5421 */
struct __cppobj TMap<FName,UPlayerInput::FActionKeyDetails,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,UPlayerInput::FActionKeyDetails,0> > : TSortableMapBase<FName,UPlayerInput::FActionKeyDetails,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,UPlayerInput::FActionKeyDetails,0> >
{
};

/* 5422 */
struct TSparseArray<TSetElement<TTuple<FName,UPlayerInput::FAxisKeyDetails> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<40,8> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 5423 */
struct __declspec(align(8)) TSet<TTuple<FName,UPlayerInput::FAxisKeyDetails>,TDefaultMapHashableKeyFuncs<FName,UPlayerInput::FAxisKeyDetails,0>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<TTuple<FName,UPlayerInput::FAxisKeyDetails> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 5424 */
struct TMapBase<FName,UPlayerInput::FAxisKeyDetails,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,UPlayerInput::FAxisKeyDetails,0> >
{
  TSet<TTuple<FName,UPlayerInput::FAxisKeyDetails>,TDefaultMapHashableKeyFuncs<FName,UPlayerInput::FAxisKeyDetails,0>,FDefaultSetAllocator> Pairs;
};

/* 5425 */
struct __cppobj TSortableMapBase<FName,UPlayerInput::FAxisKeyDetails,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,UPlayerInput::FAxisKeyDetails,0> > : TMapBase<FName,UPlayerInput::FAxisKeyDetails,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,UPlayerInput::FAxisKeyDetails,0> >
{
};

/* 5426 */
struct __cppobj TMap<FName,UPlayerInput::FAxisKeyDetails,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,UPlayerInput::FAxisKeyDetails,0> > : TSortableMapBase<FName,UPlayerInput::FAxisKeyDetails,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,UPlayerInput::FAxisKeyDetails,0> >
{
};

/* 5427 */
struct TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<240,8> >,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 5428 */
struct TSparseArray<TSetElement<TTuple<FKey,FKeyState> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<240,8> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 5429 */
struct __declspec(align(8)) TSet<TTuple<FKey,FKeyState>,TDefaultMapHashableKeyFuncs<FKey,FKeyState,0>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<TTuple<FKey,FKeyState> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 5430 */
struct TMapBase<FKey,FKeyState,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FKey,FKeyState,0> >
{
  TSet<TTuple<FKey,FKeyState>,TDefaultMapHashableKeyFuncs<FKey,FKeyState,0>,FDefaultSetAllocator> Pairs;
};

/* 5431 */
struct __cppobj TSortableMapBase<FKey,FKeyState,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FKey,FKeyState,0> > : TMapBase<FKey,FKeyState,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FKey,FKeyState,0> >
{
};

/* 5432 */
struct __cppobj TMap<FKey,FKeyState,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FKey,FKeyState,0> > : TSortableMapBase<FKey,FKeyState,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FKey,FKeyState,0> >
{
};

/* 5433 */
struct TSparseArray<TSetElement<TTuple<FKey,float> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<40,8> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 5434 */
struct __declspec(align(8)) TSet<TTuple<FKey,float>,TDefaultMapHashableKeyFuncs<FKey,float,0>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<TTuple<FKey,float> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 5435 */
struct TMapBase<FKey,float,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FKey,float,0> >
{
  TSet<TTuple<FKey,float>,TDefaultMapHashableKeyFuncs<FKey,float,0>,FDefaultSetAllocator> Pairs;
};

/* 5436 */
struct __cppobj TSortableMapBase<FKey,float,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FKey,float,0> > : TMapBase<FKey,float,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FKey,float,0> >
{
};

/* 5437 */
struct __cppobj TMap<FKey,float,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FKey,float,0> > : TSortableMapBase<FKey,float,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FKey,float,0> >
{
};

/* 5438 */
struct FGestureRecognizer
{
  TMap<FKey,float,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FKey,float,0> > CurrentGestureValues;
  FVector2D AnchorPoints[11];
  FVector2D LastPinchPoint_Start;
  FVector2D LastPinchPoint_End;
  bool bIsReadyForPinch;
  float AnchorDistanceSq;
  float StartAngle;
  bool bIsReadyForFlick;
  FVector2D FlickCurrent;
  float FlickTime;
  int PreviousTouchCount;
};

/* 5439 */
struct __cppobj UPlayerInput : UObject
{
  FVector Touches[11];
  TMap<unsigned int,FVector,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<unsigned int,FVector,0> > TouchEventLocations;
  float ZeroTime[2];
  float SmoothedMouse[2];
  int MouseSamples;
  float MouseSamplingTotal;
  TEnumAsByte<enum EInputEvent> CurrentEvent;
  TArray<FKeyBind,FDefaultAllocator> DebugExecBindings;
  TArray<FInputAxisConfigEntry,FDefaultAllocator> AxisConfig;
  TArray<FInputActionKeyMapping,FDefaultAllocator> ActionMappings;
  TArray<FInputAxisKeyMapping,FDefaultAllocator> AxisMappings;
  TArray<FName,FDefaultAllocator> InvertedAxis;
  TMap<FKey,FInputAxisProperties,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FKey,FInputAxisProperties,0> > AxisProperties;
  TMap<FName,UPlayerInput::FActionKeyDetails,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,UPlayerInput::FActionKeyDetails,0> > ActionKeyMap;
  TMap<FName,UPlayerInput::FAxisKeyDetails,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,UPlayerInput::FAxisKeyDetails,0> > AxisKeyMap;
  TMap<FKey,FKeyState,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FKey,FKeyState,0> > KeyStateMap;
  unsigned int KeyMapBuildIndex;
  __int8 bKeyMapsBuilt : 1;
  FGestureRecognizer GestureRecognizer;
  TArray<unsigned int,FDefaultAllocator> EventIndices;
  unsigned int EventCount;
  float LastTimeDilation;
};

/* 5446 */
struct __declspec(align(8)) FActiveHapticFeedbackEffect
{
  UHapticFeedbackEffect_Base *HapticEffect;
  bool bLoop;
  float PlayTime;
  float Scale;
};

/* 5455 */
struct __cppobj SLeafWidget : SWidget
{
};

/* 5456 */
struct TArray<SVirtualJoystick::FControlInfo,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 2424 */
enum SVirtualJoystick::EVirtualJoystickState
{
  State_Active = 0x0,
  State_CountingDownToInactive = 0x1,
  State_CountingDownToReset = 0x2,
  State_Inactive = 0x3,
  State_WaitForStart = 0x4,
  State_CountingDownToStart = 0x5,
};

/* 5457 */
struct __cppobj SVirtualJoystick : SLeafWidget
{
  TArray<SVirtualJoystick::FControlInfo,FDefaultAllocator> Controls;
  float ActiveOpacity;
  float InactiveOpacity;
  float TimeUntilDeactive;
  float TimeUntilReset;
  float ActivationDelay;
  float StartupDelay;
  SVirtualJoystick::EVirtualJoystickState State;
  unsigned __int32 bVisible : 1;
  unsigned __int32 bCenterOnEvent : 1;
  unsigned __int32 bPreventReCenter : 1;
  float CurrentOpacity;
  float Countdown;
};

/* 5459 */
struct TArray<FTouchInputControl,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 5460 */
struct __cppobj __declspec(align(8)) UTouchInterface : UObject
{
  TArray<FTouchInputControl,FDefaultAllocator> Controls;
  float ActiveOpacity;
  float InactiveOpacity;
  float TimeUntilDeactive;
  float TimeUntilReset;
  float ActivationDelay;
  bool bPreventRecenter;
  float StartupDelay;
};

/* 5491 */
struct __cppobj __declspec(align(8)) ADefaultPawn : APawn
{
  float BaseTurnRate;
  float BaseLookUpRate;
  UPawnMovementComponent *MovementComponent;
  USphereComponent *CollisionComponent;
  UStaticMeshComponent *MeshComponent;
  unsigned __int32 bAddDefaultMovementBindings : 1;
};

/* 5492 */
struct __cppobj ASpectatorPawn : ADefaultPawn
{
};

/* 4412 */
struct __declspec(align(8)) FOutputDevice
{
  FOutputDeviceVtbl *vfptr;
  bool bSuppressEventTag;
  bool bAutoEmitLineTerminator;
};

/* 5888 */
struct __cppobj UPendingNetGame : UObject, FNetworkNotify
{
  UNetDriver *NetDriver;
  UDemoNetDriver *DemoNetDriver;
  FURL URL;
  bool bSuccessfullyConnected;
  bool bSentJoinRequest;
  FString ConnectionError;
};

/* 5100 */
struct FViewportClient
{
  FViewportClientVtbl *vfptr;
};

/* 5892 */
struct __cppobj __declspec(align(4)) FCommonViewportClient : FViewportClient
{
  float CachedDPIScale;
  bool bShouldUpdateDPIScale;
};

/* 5893 */
struct __cppobj UScriptViewportClient : UObject, FCommonViewportClient
{
};

/* 6587 */
struct TArray<FDebugDisplayProperty,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 6588 */
struct TArray<FSplitscreenData,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 6589 */
struct TEnumAsByte<enum ESplitScreenType::Type>
{
  char Value;
};

/* 5187 */
struct TWeakPtr<SWindow,0>
{
  SWindow *Object;
  SharedPointerInternals::FWeakReferencer<0> WeakReferenceCount;
};

/* 6593 */
struct TWeakPtr<SOverlay,0>
{
  SOverlay *Object;
  SharedPointerInternals::FWeakReferencer<0> WeakReferenceCount;
};

/* 6603 */
struct TWeakPtr<IGameLayerManager,0>
{
  IGameLayerManager *Object;
  SharedPointerInternals::FWeakReferencer<0> WeakReferenceCount;
};

/* 6604 */
struct TSparseArray<TSetElement<TTuple<FName,TSharedPtr<FHardwareCursor,0> > >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<32,8> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 6605 */
struct __declspec(align(8)) TSet<TTuple<FName,TSharedPtr<FHardwareCursor,0> >,TDefaultMapHashableKeyFuncs<FName,TSharedPtr<FHardwareCursor,0>,0>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<TTuple<FName,TSharedPtr<FHardwareCursor,0> > >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 6606 */
struct TMapBase<FName,TSharedPtr<FHardwareCursor,0>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,TSharedPtr<FHardwareCursor,0>,0> >
{
  TSet<TTuple<FName,TSharedPtr<FHardwareCursor,0> >,TDefaultMapHashableKeyFuncs<FName,TSharedPtr<FHardwareCursor,0>,0>,FDefaultSetAllocator> Pairs;
};

/* 6607 */
struct __cppobj TSortableMapBase<FName,TSharedPtr<FHardwareCursor,0>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,TSharedPtr<FHardwareCursor,0>,0> > : TMapBase<FName,TSharedPtr<FHardwareCursor,0>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,TSharedPtr<FHardwareCursor,0>,0> >
{
};

/* 6608 */
struct __cppobj TMap<FName,TSharedPtr<FHardwareCursor,0>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,TSharedPtr<FHardwareCursor,0>,0> > : TSortableMapBase<FName,TSharedPtr<FHardwareCursor,0>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,TSharedPtr<FHardwareCursor,0>,0> >
{
};

/* 6609 */
struct TSparseArray<TSetElement<TTuple<enum EMouseCursor::Type,TSharedPtr<FHardwareCursor,0> > >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<32,8> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 6610 */
struct __declspec(align(8)) TSet<TTuple<enum EMouseCursor::Type,TSharedPtr<FHardwareCursor,0> >,TDefaultMapHashableKeyFuncs<enum EMouseCursor::Type,TSharedPtr<FHardwareCursor,0>,0>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<TTuple<enum EMouseCursor::Type,TSharedPtr<FHardwareCursor,0> > >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 6611 */
struct TMapBase<enum EMouseCursor::Type,TSharedPtr<FHardwareCursor,0>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<enum EMouseCursor::Type,TSharedPtr<FHardwareCursor,0>,0> >
{
  TSet<TTuple<enum EMouseCursor::Type,TSharedPtr<FHardwareCursor,0> >,TDefaultMapHashableKeyFuncs<enum EMouseCursor::Type,TSharedPtr<FHardwareCursor,0>,0>,FDefaultSetAllocator> Pairs;
};

/* 6612 */
struct __cppobj TSortableMapBase<enum EMouseCursor::Type,TSharedPtr<FHardwareCursor,0>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<enum EMouseCursor::Type,TSharedPtr<FHardwareCursor,0>,0> > : TMapBase<enum EMouseCursor::Type,TSharedPtr<FHardwareCursor,0>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<enum EMouseCursor::Type,TSharedPtr<FHardwareCursor,0>,0> >
{
};

/* 6613 */
struct __cppobj TMap<enum EMouseCursor::Type,TSharedPtr<FHardwareCursor,0>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<enum EMouseCursor::Type,TSharedPtr<FHardwareCursor,0>,0> > : TSortableMapBase<enum EMouseCursor::Type,TSharedPtr<FHardwareCursor,0>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<enum EMouseCursor::Type,TSharedPtr<FHardwareCursor,0>,0> >
{
};

/* 6614 */
struct TSparseArray<TSetElement<TTuple<enum EMouseCursor::Type,TSharedRef<SWidget,0> > >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<32,8> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 6615 */
struct __declspec(align(8)) TSet<TTuple<enum EMouseCursor::Type,TSharedRef<SWidget,0> >,TDefaultMapHashableKeyFuncs<enum EMouseCursor::Type,TSharedRef<SWidget,0>,0>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<TTuple<enum EMouseCursor::Type,TSharedRef<SWidget,0> > >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 6616 */
struct TMapBase<enum EMouseCursor::Type,TSharedRef<SWidget,0>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<enum EMouseCursor::Type,TSharedRef<SWidget,0>,0> >
{
  TSet<TTuple<enum EMouseCursor::Type,TSharedRef<SWidget,0> >,TDefaultMapHashableKeyFuncs<enum EMouseCursor::Type,TSharedRef<SWidget,0>,0>,FDefaultSetAllocator> Pairs;
};

/* 6617 */
struct __cppobj TSortableMapBase<enum EMouseCursor::Type,TSharedRef<SWidget,0>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<enum EMouseCursor::Type,TSharedRef<SWidget,0>,0> > : TMapBase<enum EMouseCursor::Type,TSharedRef<SWidget,0>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<enum EMouseCursor::Type,TSharedRef<SWidget,0>,0> >
{
};

/* 6618 */
struct __cppobj TMap<enum EMouseCursor::Type,TSharedRef<SWidget,0>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<enum EMouseCursor::Type,TSharedRef<SWidget,0>,0> > : TSortableMapBase<enum EMouseCursor::Type,TSharedRef<SWidget,0>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<enum EMouseCursor::Type,TSharedRef<SWidget,0>,0> >
{
};

/* 6619 */
struct __cppobj TBaseMulticastDelegate<void,FViewport *> : FMulticastDelegateBase<FWeakObjectPtr>
{
};

/* 6620 */
struct __cppobj TMulticastDelegate<void,FViewport *> : TBaseMulticastDelegate<void,FViewport *>
{
};

/* 6621 */
struct __cppobj TBaseMulticastDelegate<void,int> : FMulticastDelegateBase<FWeakObjectPtr>
{
};

/* 6622 */
struct __cppobj TMulticastDelegate<void,int> : TBaseMulticastDelegate<void,int>
{
};

/* 6624 */
struct __cppobj TMulticastDelegate<void,float> : TBaseMulticastDelegate<void,float>
{
};

/* 6625 */
struct __cppobj TBaseMulticastDelegate<void,bool> : FMulticastDelegateBase<FWeakObjectPtr>
{
};

/* 6626 */
struct __cppobj TMulticastDelegate<void,bool> : TBaseMulticastDelegate<void,bool>
{
};

/* 6627 */
struct __cppobj TBaseDelegate<bool,unsigned int const ,TSharedPtr<SWidget,0> > : FDelegateBase
{
};

/* 5894 */
struct __cppobj UGameViewportClient : UScriptViewportClient, FExec
{
  UConsole *ViewportConsole;
  TArray<FDebugDisplayProperty,FDefaultAllocator> DebugProperties;
  TArray<FSplitscreenData,FDefaultAllocator> SplitscreenInfo;
  int MaxSplitscreenPlayers;
  unsigned __int32 bShowTitleSafeZone : 1;
  unsigned __int32 bIsPlayInEditorViewport : 1;
  unsigned __int32 bDisableWorldRendering : 1;
  TEnumAsByte<enum ESplitScreenType::Type> ActiveSplitscreenType;
  UWorld *World;
  UGameInstance *GameInstance;
  bool bSuppressTransitionMessage;
  int ViewModeIndex;
  FEngineShowFlags EngineShowFlags;
  FViewport *Viewport;
  FViewportFrame *ViewportFrame;
  TWeakPtr<SWindow,0> Window;
  TWeakPtr<SOverlay,0> ViewportOverlayWidget;
  TWeakPtr<IGameLayerManager,0> GameLayerManagerPtr;
  FName CurrentBufferVisualizationMode;
  TWeakPtr<SWindow,0> HighResScreenshotDialog;
  TMap<FName,TSharedPtr<FHardwareCursor,0>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,TSharedPtr<FHardwareCursor,0>,0> > HardwareCursorCache;
  TMap<enum EMouseCursor::Type,TSharedPtr<FHardwareCursor,0>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<enum EMouseCursor::Type,TSharedPtr<FHardwareCursor,0>,0> > HardwareCursors;
  TMap<enum EMouseCursor::Type,TSharedRef<SWidget,0>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<enum EMouseCursor::Type,TSharedRef<SWidget,0>,0> > CursorWidgets;
  bool bUseSoftwareCursorWidgets;
  TMulticastDelegate<void,FViewport *> CloseRequestedDelegate;
  TBaseDelegate<bool> WindowCloseRequestedDelegate;
  TMulticastDelegate<void,int> PlayerAddedDelegate;
  TMulticastDelegate<void,int> PlayerRemovedDelegate;
  TMulticastDelegate<void> BeginDrawDelegate;
  TMulticastDelegate<void> DrawnDelegate;
  TMulticastDelegate<void> EndDrawDelegate;
  TMulticastDelegate<void,float> TickDelegate;
  TMulticastDelegate<void,bool> ToggleFullscreenDelegate;
  TBaseDelegate<bool,unsigned int const ,TSharedPtr<SWidget,0> > CustomNavigationEvent;
  FStatUnitData *StatUnitData;
  FStatHitchesData *StatHitchesData;
  bool bDisableSplitScreenOverride;
  bool bIgnoreInput;
  _BYTE MouseCaptureMode[1];
  bool bHideCursorDuringCapture;
  _BYTE MouseLockMode[1];
  unsigned int AudioDeviceHandle;
  bool bHasAudioFocus;
  bool bIsMouseOverClient;
};

/* 69527 */
struct __cppobj UBlackPage : UAcPageBase
{
};

/* 755 */
enum EConsumeMouseWheel
{
  WhenScrollingPossible = 0x0,
  Always = 0x1,
  Never = 0x2,
};

/* 828 */
typedef EConsumeMouseWheel ETickableTickType;

/* 16940 */
struct FTickableObjectBaseVtbl
{
  void (__cdecl *Tick)(FTickableObjectBase *this, float);
  ETickableTickType (__cdecl *GetTickableTickType)(FTickableObjectBase *this);
  bool (__cdecl *IsTickable)(FTickableObjectBase *this);
  TStatId (__cdecl *GetStatId)(FTickableObjectBase *this);
};

/* 69562 */
struct __cppobj std::_Arg_types<TCPPacket const &>
{
};

/* 69566 */
union std::_Func_class<void,TCPPacket const &>::_Storage
{
  long double _Dummy1;
  char _Dummy2[56];
  std::_Func_base<void,TCPPacket const &> *_Ptrs[8];
};

/* 69567 */
struct __cppobj std::_Func_class<void,TCPPacket const &> : std::_Arg_types<TCPPacket const &>
{
  std::_Func_class<void,TCPPacket const &>::_Storage _Mystorage;
};

/* 69568 */
struct __cppobj std::function<void __cdecl(TCPPacket const &)> : std::_Func_class<void,TCPPacket const &>
{
};

/* 69569 */
struct RemoteServerSettings
{
  std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > remoteServerIp;
  std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > remoteServerIpFallback;
  unsigned __int16 remoteServerPort;
  FString gamePlatformPlayerId;
  FGuid accSessionGuid;
  __int64 ksonIdentityId;
  __int64 lastAccountUpdateTicks;
};

/* 69571 */
struct TQueue<TCPPacket,1>
{
  TQueue<TCPPacket,1>::TNode *volatile Head;
  TQueue<TCPPacket,1>::TNode *Tail;
};

/* 69572 */
struct __cppobj std::allocator<TCPPacket>
{
};

/* 69573 */
struct __cppobj std::_Vector_val<std::_Simple_types<TCPPacket> > : std::_Container_base0
{
  TCPPacket *_Myfirst;
  TCPPacket *_Mylast;
  TCPPacket *_Myend;
};

/* 69574 */
struct __cppobj std::_Compressed_pair<std::allocator<TCPPacket>,std::_Vector_val<std::_Simple_types<TCPPacket> >,1> : std::allocator<TCPPacket>
{
  std::_Vector_val<std::_Simple_types<TCPPacket> > _Myval2;
};

/* 69575 */
struct std::_Vector_alloc<std::_Vec_base_types<TCPPacket,std::allocator<TCPPacket> > >
{
  std::_Compressed_pair<std::allocator<TCPPacket>,std::_Vector_val<std::_Simple_types<TCPPacket> >,1> _Mypair;
};

/* 69576 */
struct __cppobj std::vector<TCPPacket,std::allocator<TCPPacket> > : std::_Vector_alloc<std::_Vec_base_types<TCPPacket,std::allocator<TCPPacket> > >
{
};

/* 67882 */
struct __cppobj std::_Atomic_impl<1>
{
};

/* 69577 */
struct __cppobj std::_Atomic_base<enum ETcpClientConnectionState,1> : std::_Atomic_impl<1>
{
  _BYTE _My_val[1];
};

/* 69578 */
struct __cppobj std::atomic<enum ETcpClientConnectionState> : std::_Atomic_base<enum ETcpClientConnectionState,1>
{
};

/* 69579 */
struct TcpClient
{
  std::function<void __cdecl(TCPPacket const &)> OnMessage;
  std::function<void __cdecl(void)> OnDisconnect;
  RemoteServerSettings config;
  bool rcvThreadExitSignal;
  std::thread rcvThread;
  std::unique_ptr<TCPSocket,std::default_delete<TCPSocket> > socket;
  __declspec(align(16)) TQueue<TCPPacket,1> packetsReceived;
  std::vector<TCPPacket,std::allocator<TCPPacket> > packetsToSend;
  std::atomic<enum ETcpClientConnectionState> connectionState;
  float secondsToReconnect;
  int unsuccessfulReconnects;
  FString KsonMessagesLogFolder;
  bool waitingForConnectionOK;
  bool usePrimaryServer;
};

/* 69580 */
struct TArray<UOnlineServicesSlot *,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 69581 */
struct __declspec(align(8)) UOnlineServicesSession
{
  TArray<UOnlineServicesSlot *,FDefaultAllocator> slots;
  float CurrentTimeOfDay;
  float CurrentAmbientTemp;
  float CurrentTrackTemp;
  TcpClient *tcpClient;
  FGuid accSessionGuid;
  FString trackName;
  ksRacing::StartSessionEvent resetCarInfo;
  int onlineServicesEventReferenceId;
  unsigned int onlineServicesEventHash;
  float currentTrackWetness;
};

/* 39725 */
struct __cppobj FMOD::Studio::System
{
};

/* 39733 */
struct __cppobj FMOD::System
{
};

/* 39729 */
struct __cppobj FMOD::Studio::EventInstance
{
};

/* 69600 */
struct __cppobj std::_Arg_types<ksRacing::AssistRules const &>
{
};

/* 69603 */
union std::_Func_class<void,ksRacing::AssistRules const &>::_Storage
{
  long double _Dummy1;
  char _Dummy2[56];
  std::_Func_base<void,ksRacing::AssistRules const &> *_Ptrs[8];
};

/* 69604 */
struct __cppobj std::_Func_class<void,ksRacing::AssistRules const &> : std::_Arg_types<ksRacing::AssistRules const &>
{
  std::_Func_class<void,ksRacing::AssistRules const &>::_Storage _Mystorage;
};

/* 69605 */
struct __cppobj std::function<void __cdecl(ksRacing::AssistRules const &)> : std::_Func_class<void,ksRacing::AssistRules const &>
{
};

/* 69606 */
struct std::pair<void *,std::function<void __cdecl(ksRacing::AssistRules const &)> >
{
  void *first;
  std::function<void __cdecl(ksRacing::AssistRules const &)> second;
};

/* 69613 */
struct __cppobj std::_Arg_types<ksRacing::RealismRules const &>
{
};

/* 69616 */
union std::_Func_class<void,ksRacing::RealismRules const &>::_Storage
{
  long double _Dummy1;
  char _Dummy2[56];
  std::_Func_base<void,ksRacing::RealismRules const &> *_Ptrs[8];
};

/* 69617 */
struct __cppobj std::_Func_class<void,ksRacing::RealismRules const &> : std::_Arg_types<ksRacing::RealismRules const &>
{
  std::_Func_class<void,ksRacing::RealismRules const &>::_Storage _Mystorage;
};

/* 69618 */
struct __cppobj std::function<void __cdecl(ksRacing::RealismRules const &)> : std::_Func_class<void,ksRacing::RealismRules const &>
{
};

/* 69619 */
struct std::pair<void *,std::function<void __cdecl(ksRacing::RealismRules const &)> >
{
  void *first;
  std::function<void __cdecl(ksRacing::RealismRules const &)> second;
};

/* 69633 */
struct __declspec(align(8)) DiscordClientAPIWrapper
{
  FString DiscordUsername;
  _BYTE ConnectionState[1];
};

/* 68801 */
struct __cppobj std::allocator<ksRacing::ReplayFrame<ksRacing::ReplayCarMatrix> >
{
};

/* 68805 */
struct __cppobj std::_Vector_val<std::_Simple_types<ksRacing::ReplayFrame<ksRacing::ReplayCarMatrix> > > : std::_Container_base0
{
  ksRacing::ReplayFrame<ksRacing::ReplayCarMatrix> *_Myfirst;
  ksRacing::ReplayFrame<ksRacing::ReplayCarMatrix> *_Mylast;
  ksRacing::ReplayFrame<ksRacing::ReplayCarMatrix> *_Myend;
};

/* 68806 */
struct __cppobj std::_Compressed_pair<std::allocator<ksRacing::ReplayFrame<ksRacing::ReplayCarMatrix> >,std::_Vector_val<std::_Simple_types<ksRacing::ReplayFrame<ksRacing::ReplayCarMatrix> > >,1> : std::allocator<ksRacing::ReplayFrame<ksRacing::ReplayCarMatrix> >
{
  std::_Vector_val<std::_Simple_types<ksRacing::ReplayFrame<ksRacing::ReplayCarMatrix> > > _Myval2;
};

/* 68807 */
struct std::_Vector_alloc<std::_Vec_base_types<ksRacing::ReplayFrame<ksRacing::ReplayCarMatrix>,std::allocator<ksRacing::ReplayFrame<ksRacing::ReplayCarMatrix> > > >
{
  std::_Compressed_pair<std::allocator<ksRacing::ReplayFrame<ksRacing::ReplayCarMatrix> >,std::_Vector_val<std::_Simple_types<ksRacing::ReplayFrame<ksRacing::ReplayCarMatrix> > >,1> _Mypair;
};

/* 68808 */
struct __cppobj std::vector<ksRacing::ReplayFrame<ksRacing::ReplayCarMatrix>,std::allocator<ksRacing::ReplayFrame<ksRacing::ReplayCarMatrix> > > : std::_Vector_alloc<std::_Vec_base_types<ksRacing::ReplayFrame<ksRacing::ReplayCarMatrix>,std::allocator<ksRacing::ReplayFrame<ksRacing::ReplayCarMatrix> > > >
{
};

/* 68809 */
struct ksRacing::ReplayChannel<ksRacing::ReplayCarMatrix>
{
  std::vector<ksRacing::ReplayFrame<ksRacing::ReplayCarMatrix>,std::allocator<ksRacing::ReplayFrame<ksRacing::ReplayCarMatrix> > > frames;
  unsigned int currentFrame;
  int lastFrame;
  long double minTime;
  long double lastTime;
  long double frequency;
};

/* 68810 */
struct __cppobj std::allocator<ksRacing::ReplayFrame<ksRacing::ReplayCarAdditional> >
{
};

/* 68814 */
struct __cppobj std::_Vector_val<std::_Simple_types<ksRacing::ReplayFrame<ksRacing::ReplayCarAdditional> > > : std::_Container_base0
{
  ksRacing::ReplayFrame<ksRacing::ReplayCarAdditional> *_Myfirst;
  ksRacing::ReplayFrame<ksRacing::ReplayCarAdditional> *_Mylast;
  ksRacing::ReplayFrame<ksRacing::ReplayCarAdditional> *_Myend;
};

/* 68815 */
struct __cppobj std::_Compressed_pair<std::allocator<ksRacing::ReplayFrame<ksRacing::ReplayCarAdditional> >,std::_Vector_val<std::_Simple_types<ksRacing::ReplayFrame<ksRacing::ReplayCarAdditional> > >,1> : std::allocator<ksRacing::ReplayFrame<ksRacing::ReplayCarAdditional> >
{
  std::_Vector_val<std::_Simple_types<ksRacing::ReplayFrame<ksRacing::ReplayCarAdditional> > > _Myval2;
};

/* 68816 */
struct std::_Vector_alloc<std::_Vec_base_types<ksRacing::ReplayFrame<ksRacing::ReplayCarAdditional>,std::allocator<ksRacing::ReplayFrame<ksRacing::ReplayCarAdditional> > > >
{
  std::_Compressed_pair<std::allocator<ksRacing::ReplayFrame<ksRacing::ReplayCarAdditional> >,std::_Vector_val<std::_Simple_types<ksRacing::ReplayFrame<ksRacing::ReplayCarAdditional> > >,1> _Mypair;
};

/* 68817 */
struct __cppobj std::vector<ksRacing::ReplayFrame<ksRacing::ReplayCarAdditional>,std::allocator<ksRacing::ReplayFrame<ksRacing::ReplayCarAdditional> > > : std::_Vector_alloc<std::_Vec_base_types<ksRacing::ReplayFrame<ksRacing::ReplayCarAdditional>,std::allocator<ksRacing::ReplayFrame<ksRacing::ReplayCarAdditional> > > >
{
};

/* 68818 */
struct ksRacing::ReplayChannel<ksRacing::ReplayCarAdditional>
{
  std::vector<ksRacing::ReplayFrame<ksRacing::ReplayCarAdditional>,std::allocator<ksRacing::ReplayFrame<ksRacing::ReplayCarAdditional> > > frames;
  unsigned int currentFrame;
  int lastFrame;
  long double minTime;
  long double lastTime;
  long double frequency;
};

/* 68819 */
struct __declspec(align(2)) ksRacing::KsEventBuffer<unsigned __int64>
{
  std::vector<unsigned char,std::allocator<unsigned char> > buffer;
  float lastTime;
  unsigned __int64 lastValue;
  unsigned int position;
  bool keepStatus;
  bool log;
  bool randomAccess;
};

/* 68820 */
struct __declspec(align(2)) ksRacing::KsEventBuffer<unsigned char>
{
  std::vector<unsigned char,std::allocator<unsigned char> > buffer;
  float lastTime;
  char lastValue;
  unsigned int position;
  bool keepStatus;
  bool log;
  bool randomAccess;
};

/* 68821 */
struct __declspec(align(2)) ksRacing::KsEventBuffer<int>
{
  std::vector<unsigned char,std::allocator<unsigned char> > buffer;
  float lastTime;
  int lastValue;
  unsigned int position;
  bool keepStatus;
  bool log;
  bool randomAccess;
};

/* 68795 */
struct ksRacing::ReplayLap
{
  unsigned __int16 driverIndex;
  float timeStamp;
  int lapTime;
  int splitTimes[3];
  unsigned __int16 lapStates;
  long double replayTime;
};

/* 68822 */
struct __declspec(align(2)) ksRacing::KsEventBuffer<ksRacing::ReplayLap>
{
  std::vector<unsigned char,std::allocator<unsigned char> > buffer;
  float lastTime;
  ksRacing::ReplayLap lastValue;
  unsigned int position;
  bool keepStatus;
  bool log;
  bool randomAccess;
};

/* 68823 */
struct __declspec(align(2)) ksRacing::KsEventBuffer<unsigned short>
{
  std::vector<unsigned char,std::allocator<unsigned char> > buffer;
  float lastTime;
  unsigned __int16 lastValue;
  unsigned int position;
  bool keepStatus;
  bool log;
  bool randomAccess;
};

/* 68825 */
struct __declspec(align(4)) ksRacing::HitEvent
{
  __int16 relativeSpeed;
  vec3f relPos;
  char colliderGroup;
};

/* 68826 */
struct __declspec(align(2)) ksRacing::KsEventBuffer<ksRacing::HitEvent>
{
  std::vector<unsigned char,std::allocator<unsigned char> > buffer;
  float lastTime;
  ksRacing::HitEvent lastValue;
  unsigned int position;
  bool keepStatus;
  bool log;
  bool randomAccess;
};

/* 68827 */
struct ksRacing::FReplayPhysicsConstants
{
  float tyreRadius[4];
};

/* 68796 */
struct ksRacing::ReplayCarTiming
{
  float totalDistance;
  int totalLaps;
};

/* 68830 */
struct __declspec(align(8)) ksRacing::CarReplayData
{
  unsigned __int16 Index;
  ksRacing::ReplayChannel<ksRacing::ReplayCarMatrix> carMatricesChannel;
  ksRacing::ReplayChannel<ksRacing::ReplayCarAdditional> carAdditionalChannel;
  ksRacing::KsEventBuffer<unsigned __int64> carSystem;
  ksRacing::KsEventBuffer<unsigned char> statusBytes;
  ksRacing::KsEventBuffer<unsigned char> tyreInflation;
  ksRacing::KsEventBuffer<unsigned char> engineFlags;
  ksRacing::KsEventBuffer<int> limiter;
  ksRacing::KsEventBuffer<ksRacing::ReplayLap> lapEvents;
  ksRacing::KsEventBuffer<unsigned short> officialPositionEvents;
  ksRacing::KsEventBuffer<unsigned char> animationEvents;
  ksRacing::KsEventBuffer<unsigned char> locationEvents;
  ksRacing::KsEventBuffer<ksRacing::FGeneralEvent> generalEvents;
  ksRacing::KsEventBuffer<ksRacing::HitEvent> hitEvents;
  ksRacing::FReplayPhysicsConstants physicsConstants;
  ksRacing::KsEventBuffer<unsigned short> driverChangeEvent;
  ksRacing::ReplayCarTiming carTiming;
  bool paused;
  CarPhysicsState lastState;
  ksRacing::CarGraphicsState lastGCState;
  ksRacing::FAdditionalHFState lastHFState;
  unsigned __int64 lastCarSystem;
  long double lastTime;
  long double maxTimeRange;
  float lastInputGas;
  _BYTE currentQuality[1];
  char lastPosition;
  bool spawned;
  bool fromPause;
  bool sessionOver;
};

/* 68850 */
struct std::pair<unsigned short const ,ksRacing::CarReplayData>
{
  const unsigned __int16 first;
  ksRacing::CarReplayData second;
};

/* 69296 */
struct std::_Tree_node<std::pair<unsigned short const ,ksRacing::CarReplayData>,void *>
{
  std::_Tree_node<std::pair<unsigned short const ,ksRacing::CarReplayData>,void *> *_Left;
  std::_Tree_node<std::pair<unsigned short const ,ksRacing::CarReplayData>,void *> *_Parent;
  std::_Tree_node<std::pair<unsigned short const ,ksRacing::CarReplayData>,void *> *_Right;
  char _Color;
  char _Isnil;
  std::pair<unsigned short const ,ksRacing::CarReplayData> _Myval;
};

/* 69305 */
struct ksRacing::ReplayFrame<ksRacing::ReplayWorldUpdate>
{
  ksRacing::ReplayWorldUpdate data;
  long double timeStamp;
};

/* 68853 */
struct std::pair<unsigned short const ,ksRacing::DriverInfo>
{
  const unsigned __int16 first;
  ksRacing::DriverInfo second;
};

/* 69313 */
struct std::_Tree_node<std::pair<unsigned short const ,ksRacing::DriverInfo>,void *>
{
  std::_Tree_node<std::pair<unsigned short const ,ksRacing::DriverInfo>,void *> *_Left;
  std::_Tree_node<std::pair<unsigned short const ,ksRacing::DriverInfo>,void *> *_Parent;
  std::_Tree_node<std::pair<unsigned short const ,ksRacing::DriverInfo>,void *> *_Right;
  char _Color;
  char _Isnil;
  std::pair<unsigned short const ,ksRacing::DriverInfo> _Myval;
};

/* 68028 */
struct half_float::half
{
  unsigned __int16 data_;
};

/* 68802 */
struct ksRacing::half_vect3f
{
  half_float::half x;
  half_float::half y;
  half_float::half z;
};

/* 68803 */
struct ksRacing::ReplayCarMatrix
{
  vec3f position;
  ksRacing::half_vect3f rotation;
  vec3f tyrePositions[4];
  ksRacing::half_vect3f tyreRotations[4];
  vec3f suspensionPositions[4];
  ksRacing::half_vect3f suspensionRotations[4];
  float normalizedSplinePosition;
};

/* 68811 */
struct ksRacing::ReplayBitField
{
  unsigned __int32 limiterOn : 1;
  unsigned __int32 bottoming : 4;
  unsigned __int32 gear : 4;
};

/* 68812 */
struct ksRacing::ReplayCarAdditional
{
  half_float::half engineRPM;
  half_float::half steer;
  char gas;
  char brake;
  half_float::half wheelAngularSpeed[4];
  unsigned __int16 speed;
  ksRacing::half_vect3f velocity;
  half_float::half drivetrainSpeed;
  half_float::half bodyWorkVolume;
  half_float::half ndSlip[4];
  half_float::half load[4];
  half_float::half slipRatio[4];
  half_float::half discTemps[4];
  half_float::half engineTorque;
  char fuel;
  char marblesLevels[4];
  char instantMarblesLevels[4];
  char tyreDepth[4];
  half_float::half tyreLatFlex[4];
  char tyreDirty[4];
  char turboBoost;
  ksRacing::half_vect3f accG;
  ksRacing::ReplayBitField bitField;
};

/* 68846 */
struct ksRacing::CarReplaySnapshot
{
  unsigned __int16 CarIndex;
  ksRacing::ReplayCarMatrix carMatrix;
  ksRacing::ReplayCarAdditional carAdditional;
  char statusBytes;
  char tyreInflation;
  char engineFlags;
  int limiter;
  unsigned __int64 carSystem;
  char bottoming;
  ksRacing::ReplayLap lapEvents;
  unsigned __int16 officialPositionEvents;
  char animationEvents;
  char locationEvents;
  ksRacing::HitEvent hitEvents;
  long double time;
};

/* 68847 */
struct std::pair<unsigned short const ,ksRacing::CarReplaySnapshot>
{
  const unsigned __int16 first;
  ksRacing::CarReplaySnapshot second;
};

/* 69326 */
struct std::_Tree_node<std::pair<unsigned short const ,ksRacing::CarReplaySnapshot>,void *>
{
  std::_Tree_node<std::pair<unsigned short const ,ksRacing::CarReplaySnapshot>,void *> *_Left;
  std::_Tree_node<std::pair<unsigned short const ,ksRacing::CarReplaySnapshot>,void *> *_Parent;
  std::_Tree_node<std::pair<unsigned short const ,ksRacing::CarReplaySnapshot>,void *> *_Right;
  char _Color;
  char _Isnil;
  std::pair<unsigned short const ,ksRacing::CarReplaySnapshot> _Myval;
};

/* 69342 */
struct ksRacing::FHighlightEvents
{
  ksRacing::FGeneralEvent event;
  float timeStamp;
};

/* 69347 */
struct DummyTyre
{
  PhysicsEngine *engine;
  IRayCaster *rayCaster;
  PerlinNoise perlin;
};

/* 69359 */
struct TSparseArray<TSetElement<TTuple<enum EHighLightsEventType,TArray<FHighlightEventsData *,FDefaultAllocator> > >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<32,8> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 69360 */
struct __declspec(align(8)) TSet<TTuple<enum EHighLightsEventType,TArray<FHighlightEventsData *,FDefaultAllocator> >,TDefaultMapHashableKeyFuncs<enum EHighLightsEventType,TArray<FHighlightEventsData *,FDefaultAllocator>,0>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<TTuple<enum EHighLightsEventType,TArray<FHighlightEventsData *,FDefaultAllocator> > >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 69361 */
struct TMapBase<enum EHighLightsEventType,TArray<FHighlightEventsData *,FDefaultAllocator>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<enum EHighLightsEventType,TArray<FHighlightEventsData *,FDefaultAllocator>,0> >
{
  TSet<TTuple<enum EHighLightsEventType,TArray<FHighlightEventsData *,FDefaultAllocator> >,TDefaultMapHashableKeyFuncs<enum EHighLightsEventType,TArray<FHighlightEventsData *,FDefaultAllocator>,0>,FDefaultSetAllocator> Pairs;
};

/* 69362 */
struct __cppobj TSortableMapBase<enum EHighLightsEventType,TArray<FHighlightEventsData *,FDefaultAllocator>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<enum EHighLightsEventType,TArray<FHighlightEventsData *,FDefaultAllocator>,0> > : TMapBase<enum EHighLightsEventType,TArray<FHighlightEventsData *,FDefaultAllocator>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<enum EHighLightsEventType,TArray<FHighlightEventsData *,FDefaultAllocator>,0> >
{
};

/* 69363 */
struct __cppobj TMap<enum EHighLightsEventType,TArray<FHighlightEventsData *,FDefaultAllocator>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<enum EHighLightsEventType,TArray<FHighlightEventsData *,FDefaultAllocator>,0> > : TSortableMapBase<enum EHighLightsEventType,TArray<FHighlightEventsData *,FDefaultAllocator>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<enum EHighLightsEventType,TArray<FHighlightEventsData *,FDefaultAllocator>,0> >
{
};

/* 69364 */
struct TArray<FHighlightEventsData *,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 69366 */
struct __cppobj UReplayHighlightEvents : UObject
{
  TMap<enum EHighLightsEventType,TArray<FHighlightEventsData *,FDefaultAllocator>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<enum EHighLightsEventType,TArray<FHighlightEventsData *,FDefaultAllocator>,0> > mapEvents;
  TArray<FHighlightEventsData *,FDefaultAllocator> eventsRequested;
  float currentTime;
  AAcRaceGameMode *raceGameMode;
  UReplayManager *replayManager;
};

/* 7016 */
struct __cppobj __declspec(align(16)) UWindDirectionalSourceComponent : USceneComponent
{
  float MinGustAmount;
  float MaxGustAmount;
  float Radius;
  unsigned __int32 bPointWind : 1;
  FWindSourceSceneProxy *SceneProxy;
};

/* 7050 */
struct FExpressionInput
{
  int OutputIndex;
  FName InputName;
  int Mask;
  int MaskR;
  int MaskG;
  int MaskB;
  int MaskA;
  FName ExpressionName;
};

/* 7051 */
struct __cppobj FMaterialInput<FColor> : FExpressionInput
{
  unsigned __int32 UseConstant : 1;
  FColor Constant;
};

/* 7052 */
struct __cppobj FColorMaterialInput : FMaterialInput<FColor>
{
};

/* 7053 */
struct __cppobj FMaterialInput<float> : FExpressionInput
{
  unsigned __int32 UseConstant : 1;
  float Constant;
};

/* 7054 */
struct __cppobj FScalarMaterialInput : FMaterialInput<float>
{
};

/* 7055 */
struct __cppobj FMaterialInput<FVector> : FExpressionInput
{
  unsigned __int32 UseConstant : 1;
  FVector Constant;
};

/* 7056 */
struct __cppobj FVectorMaterialInput : FMaterialInput<FVector>
{
};

/* 7057 */
struct TEnumAsByte<enum EMaterialDomain>
{
  char Value;
};

/* 7058 */
struct TEnumAsByte<enum EDecalBlendMode>
{
  char Value;
};

/* 7059 */
struct TEnumAsByte<enum EMaterialDecalResponse>
{
  char Value;
};

/* 7060 */
struct __cppobj __declspec(align(8)) FMaterialInput<FVector2D> : FExpressionInput
{
  unsigned __int32 UseConstant : 1;
  FVector2D Constant;
};

/* 7061 */
struct __cppobj FVector2MaterialInput : FMaterialInput<FVector2D>
{
};

/* 7062 */
struct __cppobj __declspec(align(8)) FMaterialAttributesInput : FExpressionInput
{
  unsigned int PropertyConnectedBitmask;
};

/* 7063 */
struct TEnumAsByte<enum ETranslucencyLightingMode>
{
  char Value;
};

/* 7064 */
struct TEnumAsByte<enum EMaterialTessellationMode>
{
  char Value;
};

/* 6565 */
struct TArray<UMaterialExpression *,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 7065 */
struct TArray<FMaterialFunctionInfo,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 7066 */
struct TArray<FMaterialParameterCollectionInfo,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 7067 */
struct TEnumAsByte<enum EBlendableLocation>
{
  char Value;
};

/* 7068 */
struct TEnumAsByte<enum ERefractionMode>
{
  char Value;
};

/* 6568 */
struct __cppobj UMaterial : UMaterialInterface
{
  UPhysicalMaterial *PhysMaterial;
  FColorMaterialInput DiffuseColor_DEPRECATED;
  FColorMaterialInput SpecularColor_DEPRECATED;
  FColorMaterialInput BaseColor;
  FScalarMaterialInput Metallic;
  FScalarMaterialInput Specular;
  FScalarMaterialInput Roughness;
  FVectorMaterialInput Normal;
  FColorMaterialInput EmissiveColor;
  FScalarMaterialInput Opacity;
  FScalarMaterialInput OpacityMask;
  TEnumAsByte<enum EMaterialDomain> MaterialDomain;
  TEnumAsByte<enum EBlendMode> BlendMode;
  TEnumAsByte<enum EDecalBlendMode> DecalBlendMode;
  TEnumAsByte<enum EMaterialDecalResponse> MaterialDecalResponse;
  TEnumAsByte<enum EMaterialShadingModel> ShadingModel;
  float OpacityMaskClipValue;
  unsigned __int32 bCastDynamicShadowAsMasked : 1;
  FVectorMaterialInput WorldPositionOffset;
  FVectorMaterialInput WorldDisplacement;
  FScalarMaterialInput TessellationMultiplier;
  FColorMaterialInput SubsurfaceColor;
  FScalarMaterialInput ClearCoat;
  FScalarMaterialInput ClearCoatRoughness;
  FScalarMaterialInput AmbientOcclusion;
  FScalarMaterialInput Refraction;
  FVector2MaterialInput CustomizedUVs[8];
  FMaterialAttributesInput MaterialAttributes;
  FScalarMaterialInput PixelDepthOffset;
  unsigned __int32 bEnableSeparateTranslucency : 1;
  unsigned __int32 bEnableMobileSeparateTranslucency : 1;
  unsigned __int32 bEnableResponsiveAA : 1;
  unsigned __int32 bScreenSpaceReflections : 1;
  unsigned __int32 bContactShadows : 1;
  unsigned __int32 TwoSided : 1;
  unsigned __int32 DitheredLODTransition : 1;
  unsigned __int32 DitherOpacityMask : 1;
  unsigned __int32 bAllowNegativeEmissiveColor : 1;
  int NumCustomizedUVs;
  TEnumAsByte<enum ETranslucencyLightingMode> TranslucencyLightingMode;
  float TranslucencyDirectionalLightingIntensity;
  unsigned __int32 AllowTranslucentCustomDepthWrites : 1;
  float TranslucentShadowDensityScale;
  float TranslucentSelfShadowDensityScale;
  float TranslucentSelfShadowSecondDensityScale;
  float TranslucentSelfShadowSecondOpacity;
  float TranslucentBackscatteringExponent;
  FLinearColor TranslucentMultipleScatteringExtinction;
  float TranslucentShadowStartOffset;
  unsigned __int32 bDisableDepthTest : 1;
  unsigned __int32 bWriteOnlyAlpha : 1;
  unsigned __int32 bGenerateSphericalParticleNormals : 1;
  unsigned __int32 bTangentSpaceNormal : 1;
  unsigned __int32 bUseEmissiveForDynamicAreaLighting : 1;
  unsigned __int32 bBlockGI : 1;
  unsigned __int32 bUsedAsSpecialEngineMaterial : 1;
  unsigned __int32 bUsedWithSkeletalMesh : 1;
  unsigned __int32 bUsedWithEditorCompositing : 1;
  unsigned __int32 bUsedWithParticleSprites : 1;
  unsigned __int32 bUsedWithBeamTrails : 1;
  unsigned __int32 bUsedWithMeshParticles : 1;
  unsigned __int32 bUsedWithNiagaraSprites : 1;
  unsigned __int32 bUsedWithNiagaraRibbons : 1;
  unsigned __int32 bUsedWithNiagaraMeshParticles : 1;
  unsigned __int32 bUsedWithGeometryCache : 1;
  unsigned __int32 bUsedWithStaticLighting : 1;
  unsigned __int32 bUsedWithMorphTargets : 1;
  unsigned __int32 bUsedWithSplineMeshes : 1;
  unsigned __int32 bUsedWithInstancedStaticMeshes : 1;
  unsigned __int32 bUsesDistortion : 1;
  unsigned __int32 bUsedWithClothing : 1;
  unsigned __int32 bUsedWithUI_DEPRECATED : 1;
  unsigned __int32 bAutomaticallySetUsageInEditor : 1;
  unsigned __int32 bFullyRough : 1;
  unsigned __int32 bUseFullPrecision : 1;
  unsigned __int32 bUseLightmapDirectionality : 1;
  unsigned __int32 bUseHQForwardReflections : 1;
  unsigned __int32 bUsePlanarForwardReflections : 1;
  unsigned __int32 bNormalCurvatureToRoughness : 1;
  TEnumAsByte<enum EMaterialTessellationMode> D3D11TessellationMode;
  unsigned __int32 bEnableCrackFreeDisplacement : 1;
  unsigned __int32 bEnableAdaptiveTessellation : 1;
  float MaxDisplacement;
  unsigned __int32 Wireframe : 1;
  unsigned __int32 bOutputVelocityOnBasePass : 1;
  int EditorX;
  int EditorY;
  int EditorPitch;
  int EditorYaw;
  TArray<UMaterialExpression *,FDefaultAllocator> Expressions;
  TArray<FMaterialFunctionInfo,FDefaultAllocator> MaterialFunctionInfos;
  TArray<FMaterialParameterCollectionInfo,FDefaultAllocator> MaterialParameterCollectionInfos;
  unsigned __int32 bCanMaskedBeAssumedOpaque : 1;
  unsigned __int32 bIsMasked_DEPRECATED : 1;
  unsigned __int32 bIsPreviewMaterial : 1;
  unsigned __int32 bIsFunctionPreviewMaterial : 1;
  unsigned __int32 bUseMaterialAttributes : 1;
  unsigned __int32 bUseTranslucencyVertexFog : 1;
  unsigned __int32 bComputeFogPerPixel : 1;
  unsigned __int32 bAllowDevelopmentShaderCompile : 1;
  unsigned __int32 bIsMaterialEditorStatsMaterial : 1;
  unsigned int UsageFlagWarnings;
  TEnumAsByte<enum EBlendableLocation> BlendableLocation;
  int BlendablePriority;
  bool BlendableOutputAlpha;
  TEnumAsByte<enum ERefractionMode> RefractionMode;
  float RefractionDepthBias;
  FGuid StateId;
  FDefaultMaterialInstance *DefaultMaterialInstances[3];
  TArray<bool,FDefaultAllocator> CachedQualityLevelsUsed;
  TArray<FMaterialResource,FDefaultAllocator> LoadedMaterialResources;
  FMaterialResource *MaterialResources[3][4];
  FRenderCommandFence ReleaseFence;
  TArray<UTexture *,FDefaultAllocator> ExpressionTextureReferences;
};

/* 7073 */
struct __cppobj __declspec(align(8)) UMaterialExpression : UObject
{
  UMaterial *Material;
  UMaterialFunction *Function;
  unsigned __int32 bIsParameterExpression : 1;
};

/* 69370 */
struct __cppobj UMaterialExpressionConstant3Vector : UMaterialExpression
{
  FLinearColor Constant;
};

/* 5075 */
struct TSparseArray<TSetElement<TTuple<FString,FTexturePlatformData *> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<32,8> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 5076 */
struct __declspec(align(8)) TSet<TTuple<FString,FTexturePlatformData *>,TDefaultMapHashableKeyFuncs<FString,FTexturePlatformData *,0>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<TTuple<FString,FTexturePlatformData *> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 5077 */
struct TMapBase<FString,FTexturePlatformData *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FString,FTexturePlatformData *,0> >
{
  TSet<TTuple<FString,FTexturePlatformData *>,TDefaultMapHashableKeyFuncs<FString,FTexturePlatformData *,0>,FDefaultSetAllocator> Pairs;
};

/* 5078 */
struct __cppobj TSortableMapBase<FString,FTexturePlatformData *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FString,FTexturePlatformData *,0> > : TMapBase<FString,FTexturePlatformData *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FString,FTexturePlatformData *,0> >
{
};

/* 5079 */
struct __cppobj TMap<FString,FTexturePlatformData *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FString,FTexturePlatformData *,0> > : TSortableMapBase<FString,FTexturePlatformData *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FString,FTexturePlatformData *,0> >
{
};

/* 5080 */
struct __cppobj UTextureCube : UTexture
{
  FTexturePlatformData *PlatformData;
  TMap<FString,FTexturePlatformData *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FString,FTexturePlatformData *,0> > CookedPlatformData;
};

/* 5095 */
struct __cppobj __declspec(align(8)) UCameraModifier : UObject
{
  unsigned __int32 bDebug : 1;
  unsigned __int32 bExclusive : 1;
  unsigned __int32 bDisabled : 1;
  unsigned __int32 bPendingDisable : 1;
  char Priority;
  APlayerCameraManager *CameraOwner;
  float AlphaInTime;
  float AlphaOutTime;
  float Alpha;
};

/* 5096 */
struct TArray<UCameraShake *,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 5097 */
struct __cppobj __declspec(align(8)) UCameraModifier_CameraShake : UCameraModifier
{
  TArray<UCameraShake *,FDefaultAllocator> ActiveShakes;
  float SplitScreenShakeScale;
};

/* 5385 */
struct TEnumAsByte<enum ECameraAnimPlaySpace::Type>
{
  char Value;
};

/* 5386 */
struct __cppobj __declspec(align(16)) UCameraAnimInst : UObject
{
  UCameraAnim *CamAnim;
  UInterpGroupInst *InterpGroupInst;
  float CurTime;
  unsigned __int32 bFinished : 1;
  unsigned __int32 bStopAutomatically : 1;
  unsigned __int32 bLooping : 1;
  unsigned __int32 bBlendingIn : 1;
  unsigned __int32 bBlendingOut : 1;
  unsigned __int32 bHasFOVTrack : 1;
  float BlendInTime;
  float BlendOutTime;
  float CurBlendInTime;
  float CurBlendOutTime;
  float PlayRate;
  float BasePlayScale;
  float TransientScaleModifier;
  float CurrentBlendWeight;
  float RemainingTime;
  UInterpTrackMove *MoveTrack;
  UInterpTrackInstMove *MoveInst;
  TEnumAsByte<enum ECameraAnimPlaySpace::Type> PlaySpace;
  __declspec(align(8)) FMatrix UserPlaySpaceMatrix;
  FVector LastCameraLoc;
  FTransform InitialCamToWorld;
  float InitialFOV;
};

/* 5390 */
struct __cppobj TWeakObjectPtr<UCameraAnim,FWeakObjectPtr> : FWeakObjectPtr
{
};

/* 5391 */
struct __cppobj ACameraActor : AActor
{
  TEnumAsByte<enum EAutoReceiveInput::Type> AutoActivateForPlayer;
  UCameraComponent *CameraComponent;
  USceneComponent *SceneComponent;
  TWeakObjectPtr<UCameraAnim,FWeakObjectPtr> PreviewedCameraAnim;
  unsigned __int32 bConstrainAspectRatio_DEPRECATED : 1;
  float AspectRatio_DEPRECATED;
  float FOVAngle_DEPRECATED;
  float PostProcessBlendWeight_DEPRECATED;
  FPostProcessSettings PostProcessSettings_DEPRECATED;
};

/* 68964 */
struct __cppobj AAcFreeCameraActor : ACameraActor
{
  AACPlayerCameraManager *cameraManager;
  FTransform FreeCameraRelativeTransform;
};

/* 4268 */
struct FRichCurveEditInfoTemplate<FRichCurve *>
{
  FName CurveName;
  FRichCurve *CurveToEdit;
};

/* 4271 */
struct FCurveOwnerInterfaceVtbl
{
  void *(__cdecl *__vecDelDtor)(FCurveOwnerInterface *this, unsigned int);
  __declspec(align(16)) TArray<FRichCurveEditInfoTemplate<FRichCurve const *>,FDefaultAllocator> *(__cdecl *GetCurves)(FCurveOwnerInterface *this, TArray<FRichCurveEditInfoTemplate<FRichCurve const *>,FDefaultAllocator> *result);
  void (__cdecl *ModifyOwner)(FCurveOwnerInterface *this);
  void (__cdecl *ModifyOwnerChange)(FCurveOwnerInterface *this);
  TArray<UObject const *,FDefaultAllocator> *(__cdecl *GetOwners)(FCurveOwnerInterface *this, TArray<UObject const *,FDefaultAllocator> *result);
  void (__cdecl *MakeTransactional)(FCurveOwnerInterface *this);
  void (__cdecl *OnCurveChanged)(FCurveOwnerInterface *this, TArray<FRichCurveEditInfoTemplate<FRichCurve *>,FDefaultAllocator> *);
  bool (__cdecl *IsLinearColorCurve)(FCurveOwnerInterface *this);
  FLinearColor *(__cdecl *GetLinearColorValue)(FCurveOwnerInterface *this, FLinearColor *result, float);
  bool (__cdecl *HasAnyAlphaKeys)(FCurveOwnerInterface *this);
  bool (__cdecl *IsValidCurve)(FCurveOwnerInterface *this, FRichCurveEditInfoTemplate<FRichCurve *>);
  FLinearColor *(__cdecl *GetCurveColor)(FCurveOwnerInterface *this, FLinearColor *result, FRichCurveEditInfoTemplate<FRichCurve *>);
  bool (__cdecl *RepointCurveOwner)(FCurveOwnerInterface *this, FPackageReloadedEvent *, FCurveOwnerInterface **);
};

/* 4252 */
struct FKeyHandle
{
  unsigned int Index;
};

/* 4253 */
struct FIndexedCurveVtbl
{
  void *(__cdecl *__vecDelDtor)(FIndexedCurve *this, unsigned int);
  int (__cdecl *GetNumKeys)(FIndexedCurve *this);
  bool (__cdecl *IsKeyHandleValid)(FIndexedCurve *this, FKeyHandle);
};

/* 7047 */
struct IBlendableInterfaceVtbl
{
  void *(__cdecl *__vecDelDtor)(IBlendableInterface *this, unsigned int);
  UObject *(__cdecl *_getUObject)(IBlendableInterface *this);
  void (__cdecl *OverrideBlendableSettings)(IBlendableInterface *this, FSceneView *, float);
};

/* 5018 */
struct FSubsurfaceProfileStruct
{
  float ScatterRadius;
  FLinearColor SubsurfaceColor;
  FLinearColor FalloffColor;
  FLinearColor BoundaryColorBleed;
  float ExtinctionScale;
  float NormalScale;
  float ScatteringDistribution;
  float IOR;
  float Roughness0;
  float Roughness1;
  float LobeMix;
};

/* 5019 */
const struct __cppobj USubsurfaceProfile : UObject
{
  FSubsurfaceProfileStruct Settings;
};

/* 6016 */
struct TArray<FMaterialInstanceResource::TNamedParameter<FLinearColor>,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 6017 */
struct TArray<FMaterialInstanceResource::TNamedParameter<float>,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 6018 */
struct TArray<FMaterialInstanceResource::TNamedParameter<UTexture const *>,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 6019 */
struct __cppobj FMaterialInstanceResource : FMaterialRenderProxy
{
  UMaterialInterface *Parent;
  UMaterialInstance *Owner;
  UMaterialInterface *GameThreadParent;
  TArray<FMaterialInstanceResource::TNamedParameter<FLinearColor>,FDefaultAllocator> VectorParameterArray;
  TArray<FMaterialInstanceResource::TNamedParameter<float>,FDefaultAllocator> ScalarParameterArray;
  TArray<FMaterialInstanceResource::TNamedParameter<UTexture const *>,FDefaultAllocator> TextureParameterArray;
};

/* 6567 */
struct TRefCountPtr<FMaterialShaderMap>
{
  FMaterialShaderMap *Reference;
};

/* 6140 */
struct __cppobj FHeapAllocator::ForElementType<int> : FHeapAllocator::ForAnyElementType
{
};

/* 6141 */
struct TInlineAllocator<1,FDefaultAllocator>::ForElementType<int>
{
  TTypeCompatibleBytes<int> InlineData[1];
  FHeapAllocator::ForElementType<int> SecondaryData;
};

/* 6142 */
struct TArray<int,TInlineAllocator<1,FDefaultAllocator> >
{
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<int> AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 74 */
enum ETextCommit::Type
{
  Default = 0x0,
  OnEnter = 0x1,
  OnUserMovedFocus = 0x2,
  OnCleared = 0x3,
};

/* 429 */
typedef ETextCommit::Type EMaterialShaderMapUsage::Type;

/* 4997 */
struct TArray<FShaderTypeDependency,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 4998 */
struct TArray<FShaderPipelineTypeDependency,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 4999 */
struct TArray<FVertexFactoryTypeDependency,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 5000 */
struct FSHAHash
{
  char Hash[20];
};

/* 5001 */
struct FMaterialShaderMapId
{
  FGuid BaseMaterialId;
  EMaterialQualityLevel::Type QualityLevel;
  ERHIFeatureLevel::Type FeatureLevel;
  EMaterialShaderMapUsage::Type Usage;
  FStaticParameterSet ParameterSet;
  FString ParameterSetLayerParametersKey;
  TArray<FGuid,FDefaultAllocator> ReferencedFunctions;
  TArray<FGuid,FDefaultAllocator> ReferencedParameterCollections;
  TArray<FGuid,FDefaultAllocator> ReferencedSharedInputCollections;
  TArray<FShaderTypeDependency,FDefaultAllocator> ShaderTypeDependencies;
  TArray<FShaderPipelineTypeDependency,FDefaultAllocator> ShaderPipelineTypeDependencies;
  TArray<FVertexFactoryTypeDependency,FDefaultAllocator> VertexFactoryTypeDependencies;
  FSHAHash TextureReferencesHash;
  FSHAHash BasePropertyOverridesHash;
};

/* 6022 */
struct FMaterial
{
  FMaterialVtbl *vfptr;
  TArray<FString,FDefaultAllocator> CompileErrors;
  TArray<UMaterialExpression *,FDefaultAllocator> ErrorExpressions;
  TRefCountPtr<FMaterialShaderMap> GameThreadShaderMap;
  FMaterialShaderMap *RenderingThreadShaderMap;
  FGuid Id_DEPRECATED;
  TArray<int,TInlineAllocator<1,FDefaultAllocator> > OutstandingCompileShaderMapIds;
  EMaterialQualityLevel::Type QualityLevel;
  bool bHasQualityLevelUsage;
  ERHIFeatureLevel::Type FeatureLevel;
  unsigned __int32 bContainsInlineShaders : 1;
  unsigned __int32 bLoadedCookedShaderMapId : 1;
  FMaterialShaderMapId CookedShaderMapId;
};

/* 6569 */
struct __cppobj FMaterialResource : FMaterial
{
  UMaterial *Material;
  UMaterialInstance *MaterialInstance;
};

/* 69397 */
struct SurfacesManagerVtbl
{
  void *(__cdecl *__vecDelDtor)(SurfacesManager *this, unsigned int);
};

/* 69400 */
struct std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > const ,SurfaceDef>
{
  std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > first;
  SurfaceDef second;
};

/* 69399 */
struct std::_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > const ,SurfaceDef>,void *>
{
  std::_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > const ,SurfaceDef>,void *> *_Left;
  std::_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > const ,SurfaceDef>,void *> *_Parent;
  std::_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > const ,SurfaceDef>,void *> *_Right;
  char _Color;
  char _Isnil;
  std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > const ,SurfaceDef> _Myval;
};

/* 69408 */
struct __cppobj ATriggerBase : AActor
{
  UShapeComponent *CollisionComponent;
};

/* 69409 */
struct __cppobj ATriggerBox : ATriggerBase
{
};

/* 69410 */
struct __cppobj ATriggerVolume : AVolume
{
};

/* 5394 */
struct __cppobj UDrawFrustumComponent : UPrimitiveComponent
{
  FColor FrustumColor;
  float FrustumAngle;
  float FrustumAspectRatio;
  float FrustumStartDist;
  float FrustumEndDist;
  UTexture *Texture;
};

/* 6123 */
struct __cppobj UTextureLightProfile : UTexture2D
{
  float Brightness;
  float TextureMultiplier;
};

/* 6099 */
const struct FLightSceneProxy
{
  FLightSceneProxyVtbl *vfptr;
  __declspec(align(16)) ULightComponent *LightComponent;
  FSceneInterface *SceneInterface;
  FLightSceneInfo *LightSceneInfo;
  __declspec(align(16)) FMatrix WorldToLight;
  FMatrix LightToWorld;
  FVector4 Position;
  FLinearColor Color;
  float IndirectLightingScale;
  float VolumetricScatteringIntensity;
  float ShadowResolutionScale;
  float ShadowBias;
  float ShadowSharpen;
  float ContactShadowLength;
  __int8 bContactShadowLengthInWS : 1;
  float SpecularScale;
  FGuid LightGuid;
  int ShadowMapChannel;
  int PreviewShadowMapChannel;
  FStaticShadowDepthMap *StaticShadowDepthMap;
  FVector LightFunctionScale;
  float LightFunctionFadeDistance;
  float LightFunctionDisabledBrightness;
  FMaterialRenderProxy *LightFunctionMaterial;
  UTextureLightProfile *IESTexture;
  unsigned __int32 bMovable : 1;
  unsigned __int32 bStaticLighting : 1;
  unsigned __int32 bStaticShadowing : 1;
  unsigned __int32 bCastDynamicShadow : 1;
  unsigned __int32 bCastStaticShadow : 1;
  unsigned __int32 bCastTranslucentShadows : 1;
  unsigned __int32 bTransmission : 1;
  unsigned __int32 bCastVolumetricShadow : 1;
  unsigned __int32 bCastShadowsFromCinematicObjectsOnly : 1;
  unsigned __int32 bForceCachedShadowsForMovablePrimitives : 1;
  unsigned __int32 bAffectTranslucentLighting : 1;
  unsigned __int32 bUsedAsAtmosphereSunLight : 1;
  unsigned __int32 bAffectDynamicIndirectLighting : 1;
  unsigned __int32 bHasReflectiveShadowMap : 1;
  unsigned __int32 bUseRayTracedDistanceFieldShadows : 1;
  unsigned __int32 bCastModulatedShadows : 1;
  unsigned __int32 bUseWholeSceneCSMForMovableObjects : 1;
  float RayStartOffsetDepthScale;
  const char LightType;
  char LightingChannelMask;
  FName ComponentName;
  FName LevelName;
  TStatId StatId;
  float FarShadowDistance;
  unsigned int FarShadowCascadeCount;
  FLinearColor ModulatedShadowColor;
};

/* 6124 */
struct TArray<FFloat16,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 6125 */
const struct __declspec(align(16)) FStaticShadowDepthMapData
{
  FMatrix WorldToLight;
  int ShadowMapSizeX;
  int ShadowMapSizeY;
  TArray<FFloat16,FDefaultAllocator> DepthSamples;
};

/* 4063 */
struct TArray<FKSphereElem,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 4064 */
struct TArray<FKBoxElem,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 4065 */
struct TArray<FKSphylElem,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 4067 */
struct TArray<FKTaperedCapsuleElem,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 4125 */
struct FKAggregateGeom
{
  TArray<FKSphereElem,FDefaultAllocator> SphereElems;
  TArray<FKBoxElem,FDefaultAllocator> BoxElems;
  TArray<FKSphylElem,FDefaultAllocator> SphylElems;
  TArray<FKConvexElem,FDefaultAllocator> ConvexElems;
  TArray<FKTaperedCapsuleElem,FDefaultAllocator> TaperedCapsuleElems;
  FKConvexGeomRenderInfo *RenderInfo;
};

/* 4126 */
struct TEnumAsByte<enum EPhysicsType>
{
  char Value;
};

/* 4127 */
struct TEnumAsByte<enum EBodyCollisionResponse::Type>
{
  char Value;
};

/* 4128 */
struct TEnumAsByte<enum ECollisionTraceFlag>
{
  char Value;
};

/* 4142 */
struct TArray<TTuple<FName,FByteBulkData *>,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 4143 */
struct TSortedMap<FName,FByteBulkData *,FDefaultAllocator,TLess<FName> >
{
  TArray<TTuple<FName,FByteBulkData *>,FDefaultAllocator> Pairs;
};

/* 4144 */
struct __declspec(align(8)) FFormatContainer
{
  TSortedMap<FName,FByteBulkData *,FDefaultAllocator,TLess<FName> > Formats;
  unsigned int Alignment;
};

/* 4145 */
struct TArray<physx::PxTriangleMesh *,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 4147 */
struct TArray<TArray<FVector2D,FDefaultAllocator>,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 4148 */
struct FBodySetupUVInfo
{
  TArray<int,FDefaultAllocator> IndexBuffer;
  TArray<FVector,FDefaultAllocator> VertPositions;
  TArray<TArray<FVector2D,FDefaultAllocator>,FDefaultAllocator> VertUVs;
};

/* 4195 */
struct __cppobj __declspec(align(8)) UBodySetup : UObject
{
  FKAggregateGeom AggGeom;
  FName BoneName;
  TEnumAsByte<enum EPhysicsType> PhysicsType;
  __int8 bAlwaysFullAnimWeight_DEPRECATED : 1;
  __int8 bConsiderForBounds : 1;
  __int8 bMeshCollideAll : 1;
  __int8 bDoubleSidedGeometry : 1;
  __int8 bGenerateNonMirroredCollision : 1;
  __int8 bSharedCookedData : 1;
  __int8 bGenerateMirroredCollision : 1;
  __int8 bCreatedPhysicsMeshes : 1;
  __int8 bFailedToCreatePhysicsMeshes : 1;
  __int8 bHasCookedCollisionData : 1;
  __int8 bNeverNeedsCookedCollisionData : 1;
  TEnumAsByte<enum EBodyCollisionResponse::Type> CollisionReponse;
  TEnumAsByte<enum ECollisionTraceFlag> CollisionTraceFlag;
  UPhysicalMaterial *PhysMaterial;
  FWalkableSlopeOverride WalkableSlopeOverride;
  FFormatContainer CookedFormatData;
  FGuid BodySetupGuid;
  TArray<physx::PxTriangleMesh *,FDefaultAllocator> TriMeshes;
  FBodySetupUVInfo UVInfo;
  FBodyInstance DefaultInstance;
  FFormatContainer *CookedFormatDataOverride;
  FVector BuildScale3D;
};

/* 5463 */
struct __cppobj TDefaultDelete<FStaticMeshRenderData>
{
};

/* 5469 */
struct __cppobj TUniquePtr<FStaticMeshRenderData,TDefaultDelete<FStaticMeshRenderData> > : TDefaultDelete<FStaticMeshRenderData>
{
  FStaticMeshRenderData *Ptr;
};

/* 5470 */
struct __cppobj TDefaultDelete<FStaticMeshOccluderData>
{
};

/* 5474 */
struct __cppobj TUniquePtr<FStaticMeshOccluderData,TDefaultDelete<FStaticMeshOccluderData> > : TDefaultDelete<FStaticMeshOccluderData>
{
  FStaticMeshOccluderData *Ptr;
};

/* 4603 */
struct __cppobj TPerPlatformProperty<FPerPlatformInt,int,2>
{
};

/* 4604 */
struct __cppobj FPerPlatformInt : TPerPlatformProperty<FPerPlatformInt,int,2>
{
  int Default;
};

/* 5475 */
struct TArray<FStaticMaterial,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 5476 */
struct TArray<UStaticMeshSocket *,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 5481 */
struct TSharedPtr<FSpeedTreeWind,0>
{
  FSpeedTreeWind *Object;
  SharedPointerInternals::FSharedReferencer<0> SharedReferenceCount;
};

/* 5486 */
struct __cppobj UStaticMesh : UObject, IInterface_CollisionDataProvider, IInterface_AssetUserData
{
  TUniquePtr<FStaticMeshRenderData,TDefaultDelete<FStaticMeshRenderData> > RenderData;
  TUniquePtr<FStaticMeshOccluderData,TDefaultDelete<FStaticMeshOccluderData> > OccluderData;
  FPerPlatformInt MinLOD;
  TArray<UMaterialInterface *,FDefaultAllocator> Materials_DEPRECATED;
  TArray<FStaticMaterial,FDefaultAllocator> StaticMaterials;
  float LightmapUVDensity;
  int LightMapResolution;
  int LightMapCoordinateIndex;
  float DistanceFieldSelfShadowBias;
  unsigned __int32 bGenerateMeshDistanceField : 1;
  UBodySetup *BodySetup;
  int LODForCollision;
  unsigned __int32 bStripComplexCollisionForConsole_DEPRECATED : 1;
  unsigned __int32 bHasNavigationData : 1;
  unsigned __int32 bSupportUniformlyDistributedSampling : 1;
  float LpvBiasMultiplier;
  bool bAllowCPUAccess;
  FRenderCommandFence ReleaseResourcesFence;
  FString HighResSourceMeshName;
  unsigned int HighResSourceMeshCRC;
  FGuid LightingGuid;
  TArray<UStaticMeshSocket *,FDefaultAllocator> Sockets;
  TSharedPtr<FSpeedTreeWind,0> SpeedTreeWind;
  FVector PositiveBoundsExtension;
  FVector NegativeBoundsExtension;
  FBoxSphereBounds ExtendedBounds;
  int ElementToIgnoreForTexFactor;
  TArray<UAssetUserData *,FDefaultAllocator> AssetUserData;
  bool bRenderingResourcesInitialized;
  UObject *EditableMesh;
  UNavCollisionBase *NavCollision;
};

/* 5361 */
struct TArray<TRefCountPtr<HHitProxy>,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 55948 */
struct TSharedPtr<FStaticMeshInstanceData,1>
{
  FStaticMeshInstanceData *Object;
  SharedPointerInternals::FSharedReferencer<1> SharedReferenceCount;
};

/* 55949 */
struct __cppobj FStaticMeshInstanceBuffer::FInstanceOriginBuffer : FVertexBuffer
{
};

/* 55950 */
struct __cppobj FStaticMeshInstanceBuffer::FInstanceTransformBuffer : FVertexBuffer
{
};

/* 55951 */
struct __cppobj FStaticMeshInstanceBuffer::FInstanceLightmapBuffer : FVertexBuffer
{
};

/* 55952 */
struct __cppobj FStaticMeshInstanceBuffer : FRenderResource
{
  TSharedPtr<FStaticMeshInstanceData,1> InstanceData;
  bool RequireCPUAccess;
  FStaticMeshInstanceBuffer::FInstanceOriginBuffer InstanceOriginBuffer;
  TRefCountPtr<FRHIShaderResourceView> InstanceOriginSRV;
  FStaticMeshInstanceBuffer::FInstanceTransformBuffer InstanceTransformBuffer;
  TRefCountPtr<FRHIShaderResourceView> InstanceTransformSRV;
  FStaticMeshInstanceBuffer::FInstanceLightmapBuffer InstanceLightmapBuffer;
  TRefCountPtr<FRHIShaderResourceView> InstanceLightmapSRV;
};

/* 55953 */
struct FPerInstanceRenderData
{
  TArray<TRefCountPtr<HHitProxy>,FDefaultAllocator> HitProxies;
  unsigned __int64 ResourceSize;
  FStaticMeshInstanceBuffer InstanceBuffer;
  TSharedPtr<FStaticMeshInstanceData,1> InstanceBuffer_GameThread;
};

/* 21461 */
struct __declspec(align(4)) FStaticMeshInstanceData
{
  FStaticMeshVertexDataInterface *InstanceOriginData;
  char *InstanceOriginDataPtr;
  FStaticMeshVertexDataInterface *InstanceTransformData;
  char *InstanceTransformDataPtr;
  FStaticMeshVertexDataInterface *InstanceLightmapData;
  char *InstanceLightmapDataPtr;
  int NumInstances;
  bool bUseHalfFloat;
};

/* 40681 */
struct FMovieSceneTimeControllerVtbl
{
  void *(__cdecl *__vecDelDtor)(FMovieSceneTimeController *this, unsigned int);
  void (__cdecl *OnTick)(FMovieSceneTimeController *this, float, float);
  void (__cdecl *OnStartPlaying)(FMovieSceneTimeController *this, FQualifiedFrameTime *);
  void (__cdecl *OnStopPlaying)(FMovieSceneTimeController *this, FQualifiedFrameTime *);
  FFrameTime *(__cdecl *OnRequestCurrentTime)(FMovieSceneTimeController *this, FFrameTime *result, FQualifiedFrameTime *, float);
};

/* 40564 */
struct __declspec(align(8)) TArrayView<TWeakObjectPtr<UObject,FWeakObjectPtr> >
{
  TWeakObjectPtr<UObject,FWeakObjectPtr> *DataPtr;
  int ArrayNum;
};

/* 40565 */
struct IMovieScenePlayerVtbl
{
  void *(__cdecl *__vecDelDtor)(IMovieScenePlayer *this, unsigned int);
  _BYTE gap8[16];
  void (__cdecl *UpdateCameraCut)(IMovieScenePlayer *this, UObject *, UObject *, bool);
  void (__cdecl *SetViewportSettings)(IMovieScenePlayer *this, TMap<FViewportClient *,EMovieSceneViewportParams,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FViewportClient *,EMovieSceneViewportParams,0> > *);
  void (__cdecl *GetViewportSettings)(IMovieScenePlayer *this, TMap<FViewportClient *,EMovieSceneViewportParams,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FViewportClient *,EMovieSceneViewportParams,0> > *);
  EMovieScenePlayerStatus::Type (__cdecl *GetPlaybackStatus)(IMovieScenePlayer *this);
  void (__cdecl *SetPlaybackStatus)(IMovieScenePlayer *this, EMovieScenePlayerStatus::Type);
  void (__cdecl *ResolveBoundObjects)(IMovieScenePlayer *this, FGuid *, FMovieSceneSequenceID, UMovieSceneSequence *, UObject *, TArray<UObject *,TInlineAllocator<1,FDefaultAllocator> > *);
  IMovieSceneBindingOverridesInterface *(__cdecl *GetBindingOverrides)(IMovieScenePlayer *this);
  FMovieSceneSpawnRegister *(__cdecl *GetSpawnRegister)(IMovieScenePlayer *this);
  void (__cdecl *OnObjectSpawned)(IMovieScenePlayer *this, UObject *, FMovieSceneEvaluationOperand *);
  void (__cdecl *NotifyBindingUpdate)(IMovieScenePlayer *this, FGuid *, FMovieSceneSequenceID *, TArrayView<TWeakObjectPtr<UObject,FWeakObjectPtr> >);
  void (__cdecl *NotifyBindingsChanged)(IMovieScenePlayer *this);
  UObject *(__cdecl *GetPlaybackContext)(IMovieScenePlayer *this);
  UObject *(__cdecl *GetInstanceData)(IMovieScenePlayer *this);
  TArray<UObject *,FDefaultAllocator> *(__cdecl *GetEventContexts)(IMovieScenePlayer *this, TArray<UObject *,FDefaultAllocator> *result);
  bool (__cdecl *IsPreview)(IMovieScenePlayer *this);
};

/* 40558 */
struct FMovieSceneSpawnRegisterVtbl
{
  void *(__cdecl *__vecDelDtor)(FMovieSceneSpawnRegister *this, unsigned int);
  UObject *(__cdecl *SpawnObject)(FMovieSceneSpawnRegister *this, FMovieSceneSpawnable *, FMovieSceneSequenceID *, IMovieScenePlayer *);
  void (__cdecl *DestroySpawnedObject)(FMovieSceneSpawnRegister *this, UObject *);
  void (__cdecl *PreDestroyObject)(FMovieSceneSpawnRegister *this, UObject *, FGuid *, FMovieSceneSequenceID *);
};

/* 40485 */
struct __cppobj UMovieSceneSignedObject::FOnSignatureChanged : TBaseMulticastDelegate<void>
{
};

/* 40486 */
struct __cppobj UMovieSceneSignedObject : UObject
{
  FGuid Signature;
  UMovieSceneSignedObject::FOnSignatureChanged OnSignatureChangedEvent;
};

/* 17063 */
struct TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<264,8> >,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 40434 */
struct TSparseArray<TSetElement<TTuple<FMovieSceneTrackIdentifier,FMovieSceneEvaluationTrack> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<264,8> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 40435 */
struct __declspec(align(8)) TSet<TTuple<FMovieSceneTrackIdentifier,FMovieSceneEvaluationTrack>,TDefaultMapHashableKeyFuncs<FMovieSceneTrackIdentifier,FMovieSceneEvaluationTrack,0>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<TTuple<FMovieSceneTrackIdentifier,FMovieSceneEvaluationTrack> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 40436 */
struct TMapBase<FMovieSceneTrackIdentifier,FMovieSceneEvaluationTrack,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FMovieSceneTrackIdentifier,FMovieSceneEvaluationTrack,0> >
{
  TSet<TTuple<FMovieSceneTrackIdentifier,FMovieSceneEvaluationTrack>,TDefaultMapHashableKeyFuncs<FMovieSceneTrackIdentifier,FMovieSceneEvaluationTrack,0>,FDefaultSetAllocator> Pairs;
};

/* 40437 */
struct __cppobj TSortableMapBase<FMovieSceneTrackIdentifier,FMovieSceneEvaluationTrack,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FMovieSceneTrackIdentifier,FMovieSceneEvaluationTrack,0> > : TMapBase<FMovieSceneTrackIdentifier,FMovieSceneEvaluationTrack,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FMovieSceneTrackIdentifier,FMovieSceneEvaluationTrack,0> >
{
};

/* 40438 */
struct __cppobj TMap<FMovieSceneTrackIdentifier,FMovieSceneEvaluationTrack,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FMovieSceneTrackIdentifier,FMovieSceneEvaluationTrack,0> > : TSortableMapBase<FMovieSceneTrackIdentifier,FMovieSceneEvaluationTrack,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FMovieSceneTrackIdentifier,FMovieSceneEvaluationTrack,0> >
{
};

/* 40439 */
struct TArray<FMovieSceneFrameRange,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 40440 */
struct TArray<FMovieSceneEvaluationGroup,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 40441 */
struct TArray<FMovieSceneEvaluationMetaData,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 40442 */
struct FMovieSceneEvaluationField
{
  TArray<FMovieSceneFrameRange,FDefaultAllocator> Ranges;
  TArray<FMovieSceneEvaluationGroup,FDefaultAllocator> Groups;
  TArray<FMovieSceneEvaluationMetaData,FDefaultAllocator> MetaData;
};

/* 40443 */
struct TSparseArray<TSetElement<TTuple<FMovieSceneSequenceID,FMovieSceneSubSequenceData> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<184,8> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 40444 */
struct __declspec(align(8)) TSet<TTuple<FMovieSceneSequenceID,FMovieSceneSubSequenceData>,TDefaultMapHashableKeyFuncs<FMovieSceneSequenceID,FMovieSceneSubSequenceData,0>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<TTuple<FMovieSceneSequenceID,FMovieSceneSubSequenceData> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 40445 */
struct TMapBase<FMovieSceneSequenceID,FMovieSceneSubSequenceData,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FMovieSceneSequenceID,FMovieSceneSubSequenceData,0> >
{
  TSet<TTuple<FMovieSceneSequenceID,FMovieSceneSubSequenceData>,TDefaultMapHashableKeyFuncs<FMovieSceneSequenceID,FMovieSceneSubSequenceData,0>,FDefaultSetAllocator> Pairs;
};

/* 40446 */
struct __cppobj TSortableMapBase<FMovieSceneSequenceID,FMovieSceneSubSequenceData,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FMovieSceneSequenceID,FMovieSceneSubSequenceData,0> > : TMapBase<FMovieSceneSequenceID,FMovieSceneSubSequenceData,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FMovieSceneSequenceID,FMovieSceneSubSequenceData,0> >
{
};

/* 40447 */
struct __cppobj TMap<FMovieSceneSequenceID,FMovieSceneSubSequenceData,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FMovieSceneSequenceID,FMovieSceneSubSequenceData,0> > : TSortableMapBase<FMovieSceneSequenceID,FMovieSceneSubSequenceData,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FMovieSceneSequenceID,FMovieSceneSubSequenceData,0> >
{
};

/* 40448 */
struct TSparseArray<TSetElement<TTuple<FMovieSceneSequenceID,FMovieSceneSequenceHierarchyNode> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<40,8> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 40449 */
struct __declspec(align(8)) TSet<TTuple<FMovieSceneSequenceID,FMovieSceneSequenceHierarchyNode>,TDefaultMapHashableKeyFuncs<FMovieSceneSequenceID,FMovieSceneSequenceHierarchyNode,0>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<TTuple<FMovieSceneSequenceID,FMovieSceneSequenceHierarchyNode> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 40450 */
struct TMapBase<FMovieSceneSequenceID,FMovieSceneSequenceHierarchyNode,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FMovieSceneSequenceID,FMovieSceneSequenceHierarchyNode,0> >
{
  TSet<TTuple<FMovieSceneSequenceID,FMovieSceneSequenceHierarchyNode>,TDefaultMapHashableKeyFuncs<FMovieSceneSequenceID,FMovieSceneSequenceHierarchyNode,0>,FDefaultSetAllocator> Pairs;
};

/* 40451 */
struct __cppobj TSortableMapBase<FMovieSceneSequenceID,FMovieSceneSequenceHierarchyNode,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FMovieSceneSequenceID,FMovieSceneSequenceHierarchyNode,0> > : TMapBase<FMovieSceneSequenceID,FMovieSceneSequenceHierarchyNode,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FMovieSceneSequenceID,FMovieSceneSequenceHierarchyNode,0> >
{
};

/* 40452 */
struct __cppobj TMap<FMovieSceneSequenceID,FMovieSceneSequenceHierarchyNode,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FMovieSceneSequenceID,FMovieSceneSequenceHierarchyNode,0> > : TSortableMapBase<FMovieSceneSequenceID,FMovieSceneSequenceHierarchyNode,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FMovieSceneSequenceID,FMovieSceneSequenceHierarchyNode,0> >
{
};

/* 40453 */
struct FMovieSceneSequenceHierarchy
{
  TMap<FMovieSceneSequenceID,FMovieSceneSubSequenceData,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FMovieSceneSequenceID,FMovieSceneSubSequenceData,0> > SubSequences;
  TMap<FMovieSceneSequenceID,FMovieSceneSequenceHierarchyNode,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FMovieSceneSequenceID,FMovieSceneSequenceHierarchyNode,0> > Hierarchy;
};

/* 40454 */
struct FMovieSceneEvaluationTemplateSerialNumber
{
  unsigned int Value;
};

/* 40456 */
struct TSparseArray<TSetElement<TTuple<FGuid,FMovieSceneTrackIdentifier> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<28,4> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 40457 */
struct __declspec(align(8)) TSet<TTuple<FGuid,FMovieSceneTrackIdentifier>,TDefaultMapHashableKeyFuncs<FGuid,FMovieSceneTrackIdentifier,0>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<TTuple<FGuid,FMovieSceneTrackIdentifier> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 40458 */
struct TMapBase<FGuid,FMovieSceneTrackIdentifier,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FGuid,FMovieSceneTrackIdentifier,0> >
{
  TSet<TTuple<FGuid,FMovieSceneTrackIdentifier>,TDefaultMapHashableKeyFuncs<FGuid,FMovieSceneTrackIdentifier,0>,FDefaultSetAllocator> Pairs;
};

/* 40459 */
struct __cppobj TSortableMapBase<FGuid,FMovieSceneTrackIdentifier,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FGuid,FMovieSceneTrackIdentifier,0> > : TMapBase<FGuid,FMovieSceneTrackIdentifier,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FGuid,FMovieSceneTrackIdentifier,0> >
{
};

/* 40460 */
struct __cppobj TMap<FGuid,FMovieSceneTrackIdentifier,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FGuid,FMovieSceneTrackIdentifier,0> > : TSortableMapBase<FGuid,FMovieSceneTrackIdentifier,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FGuid,FMovieSceneTrackIdentifier,0> >
{
};

/* 21550 */
struct TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<40,4> >,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 40461 */
struct TSparseArray<TSetElement<TTuple<FGuid,FMovieSceneFrameRange> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<40,4> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 40462 */
struct __declspec(align(8)) TSet<TTuple<FGuid,FMovieSceneFrameRange>,TDefaultMapHashableKeyFuncs<FGuid,FMovieSceneFrameRange,0>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<TTuple<FGuid,FMovieSceneFrameRange> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 40463 */
struct TMapBase<FGuid,FMovieSceneFrameRange,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FGuid,FMovieSceneFrameRange,0> >
{
  TSet<TTuple<FGuid,FMovieSceneFrameRange>,TDefaultMapHashableKeyFuncs<FGuid,FMovieSceneFrameRange,0>,FDefaultSetAllocator> Pairs;
};

/* 40464 */
struct __cppobj TSortableMapBase<FGuid,FMovieSceneFrameRange,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FGuid,FMovieSceneFrameRange,0> > : TMapBase<FGuid,FMovieSceneFrameRange,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FGuid,FMovieSceneFrameRange,0> >
{
};

/* 40465 */
struct __cppobj TMap<FGuid,FMovieSceneFrameRange,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FGuid,FMovieSceneFrameRange,0> > : TSortableMapBase<FGuid,FMovieSceneFrameRange,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FGuid,FMovieSceneFrameRange,0> >
{
};

/* 40466 */
struct FMovieSceneTemplateGenerationLedger
{
  FMovieSceneTrackIdentifier LastTrackIdentifier;
  TMap<FGuid,FMovieSceneTrackIdentifier,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FGuid,FMovieSceneTrackIdentifier,0> > TrackSignatureToTrackIdentifier;
  TMap<FGuid,FMovieSceneFrameRange,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FGuid,FMovieSceneFrameRange,0> > SubSectionRanges;
};

/* 12726 */
struct TRangeBound<FFrameNumber>
{
  TEnumAsByte<enum ERangeBoundTypes::Type> Type;
  FFrameNumber Value;
};

/* 12727 */
struct TRange<FFrameNumber>
{
  TRangeBound<FFrameNumber> LowerBound;
  TRangeBound<FFrameNumber> UpperBound;
};

/* 40467 */
struct FEvaluationTreeEntryHandle
{
  int EntryIndex;
};

/* 40468 */
struct FMovieSceneEvaluationTreeNodeHandle
{
  FEvaluationTreeEntryHandle ChildrenHandle;
  int Index;
};

/* 40469 */
struct FMovieSceneEvaluationTreeNode
{
  TRange<FFrameNumber> Range;
  FMovieSceneEvaluationTreeNodeHandle Parent;
  FEvaluationTreeEntryHandle ChildrenID;
  FEvaluationTreeEntryHandle DataID;
};

/* 40470 */
struct TArray<TEvaluationTreeEntryContainer<FMovieSceneEvaluationTreeNode>::FEntry,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 40471 */
struct TArray<FMovieSceneEvaluationTreeNode,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 40472 */
struct TEvaluationTreeEntryContainer<FMovieSceneEvaluationTreeNode>
{
  TArray<TEvaluationTreeEntryContainer<FMovieSceneEvaluationTreeNode>::FEntry,FDefaultAllocator> Entries;
  TArray<FMovieSceneEvaluationTreeNode,FDefaultAllocator> Items;
};

/* 40473 */
struct FMovieSceneEvaluationTree
{
  FMovieSceneEvaluationTreeNode RootNode;
  TEvaluationTreeEntryContainer<FMovieSceneEvaluationTreeNode> ChildNodes;
};

/* 40474 */
struct TArray<TEvaluationTreeEntryContainer<FMovieSceneTrackIdentifier>::FEntry,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 40475 */
struct TArray<FMovieSceneTrackIdentifier,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 40476 */
struct TEvaluationTreeEntryContainer<FMovieSceneTrackIdentifier>
{
  TArray<TEvaluationTreeEntryContainer<FMovieSceneTrackIdentifier>::FEntry,FDefaultAllocator> Entries;
  TArray<FMovieSceneTrackIdentifier,FDefaultAllocator> Items;
};

/* 40477 */
struct __cppobj TMovieSceneEvaluationTree<FMovieSceneTrackIdentifier> : FMovieSceneEvaluationTree
{
  TEvaluationTreeEntryContainer<FMovieSceneTrackIdentifier> Data;
};

/* 40478 */
struct FMovieSceneTrackFieldData
{
  TMovieSceneEvaluationTree<FMovieSceneTrackIdentifier> Field;
};

/* 40479 */
struct TArray<TEvaluationTreeEntryContainer<FMovieSceneSubSectionData>::FEntry,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 40480 */
struct TArray<FMovieSceneSubSectionData,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 40481 */
struct TEvaluationTreeEntryContainer<FMovieSceneSubSectionData>
{
  TArray<TEvaluationTreeEntryContainer<FMovieSceneSubSectionData>::FEntry,FDefaultAllocator> Entries;
  TArray<FMovieSceneSubSectionData,FDefaultAllocator> Items;
};

/* 40482 */
struct __cppobj TMovieSceneEvaluationTree<FMovieSceneSubSectionData> : FMovieSceneEvaluationTree
{
  TEvaluationTreeEntryContainer<FMovieSceneSubSectionData> Data;
};

/* 40483 */
struct FMovieSceneSubSectionFieldData
{
  TMovieSceneEvaluationTree<FMovieSceneSubSectionData> Field;
};

/* 40484 */
struct FMovieSceneEvaluationTemplate
{
  TMap<FMovieSceneTrackIdentifier,FMovieSceneEvaluationTrack,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FMovieSceneTrackIdentifier,FMovieSceneEvaluationTrack,0> > Tracks;
  TMap<FMovieSceneTrackIdentifier,FMovieSceneEvaluationTrack,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FMovieSceneTrackIdentifier,FMovieSceneEvaluationTrack,0> > StaleTracks;
  FMovieSceneEvaluationField EvaluationField;
  FMovieSceneSequenceHierarchy Hierarchy;
  FGuid SequenceSignature;
  FMovieSceneEvaluationTemplateSerialNumber TemplateSerialNumber;
  FMovieSceneTemplateGenerationLedger TemplateLedger;
  FMovieSceneTrackFieldData TrackFieldData;
  FMovieSceneSubSectionFieldData SubSectionFieldData;
};

/* 40487 */
struct __cppobj __declspec(align(8)) UMovieSceneSequence : UMovieSceneSignedObject
{
  FMovieSceneEvaluationTemplate PrecompiledEvaluationTemplate;
  _BYTE DefaultCompletionMode[1];
  bool bParentContextsAreSignificant;
};

/* 40489 */
struct FMovieSceneFrameRange
{
  TRange<FFrameNumber> Value;
};

/* 40490 */
struct __declspec(align(8)) TInlineValue<FMovieSceneSequenceInstanceData,16,8>
{
  TAlignedBytes<16,8> Data;
  __int8 bIsValid : 1;
  __int8 bInline : 1;
};

/* 40491 */
struct __cppobj FMovieSceneSequenceInstanceDataPtr : TInlineValue<FMovieSceneSequenceInstanceData,16,8>
{
};

/* 40492 */
const struct __declspec(align(8)) FMovieSceneSubSequenceData
{
  FSoftObjectPath Sequence;
  FMovieSceneSequenceTransform RootToSequenceTransform;
  FFrameRate TickResolution;
  FMovieSceneSequenceID DeterministicSequenceID;
  FMovieSceneFrameRange PlayRange;
  FMovieSceneFrameRange PreRollRange;
  FMovieSceneFrameRange PostRollRange;
  int HierarchicalBias;
  FMovieSceneSequenceInstanceDataPtr InstanceData;
  TWeakObjectPtr<UMovieSceneSequence,FWeakObjectPtr> CachedSequence;
  FGuid SubSectionSignature;
  FMovieSceneSequenceTransform OuterToInnerTransform;
};

/* 40508 */
struct IMovieSceneSequenceTemplateStore
{
  IMovieSceneSequenceTemplateStoreVtbl *vfptr;
};

/* 69048 */
struct __cppobj ULevelSequenceBurnInInitSettings : UObject
{
};

/* 40553 */
struct IMovieSceneBindingOverridesInterfaceVtbl
{
  void *(__cdecl *__vecDelDtor)(IMovieSceneBindingOverridesInterface *this, unsigned int);
  UObject *(__cdecl *_getUObject)(IMovieSceneBindingOverridesInterface *this);
  bool (__cdecl *LocateBoundObjects)(IMovieSceneBindingOverridesInterface *this, FGuid *, FMovieSceneSequenceID, TArray<UObject *,TInlineAllocator<1,FDefaultAllocator> > *);
};

/* 36379 */
struct ISlate3DRendererVtbl
{
  void *(__cdecl *__vecDelDtor)(ISlate3DRenderer *this, unsigned int);
  void (__cdecl *SetUseGammaCorrection)(ISlate3DRenderer *this, bool);
  FSlateDrawBuffer *(__cdecl *GetDrawBuffer)(ISlate3DRenderer *this);
  void (__cdecl *DrawWindow_GameThread)(ISlate3DRenderer *this, FSlateDrawBuffer *);
  void (__cdecl *DrawWindowToTarget_RenderThread)(ISlate3DRenderer *this, FRHICommandListImmediate *, FTextureRenderTarget2DResource *, FSlateDrawBuffer *, bool);
};

/* 30629 */
struct TArray<UPanelSlot *,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 30630 */
struct __cppobj __declspec(align(8)) UPanelWidget : UWidget
{
  TArray<UPanelSlot *,FDefaultAllocator> Slots;
  bool bCanHaveMultipleChildren;
};

/* 21180 */
struct HDC__
{
  int unused;
};

/* 5167 */
union $DDEB052CABCFE30D881FE2B773A1D04E
{
  void (__cdecl *~FChildren)(FChildren *this);
  void *(__cdecl *__vecDelDtor)(FChildren *this, unsigned int);
};

/* 5168 */
struct FChildrenVtbl
{
  int (__cdecl *Num)(FChildren *this);
  TSharedRef<SWidget const ,0> *(__cdecl *GetChildAt)(FChildren *this, TSharedRef<SWidget const ,0> *result, int);
  TSharedRef<SWidget,0> *(__cdecl *GetChildAt)(FChildren *this, TSharedRef<SWidget,0> *result, int);
  FSlotBase *(__cdecl *GetSlotAt)(FChildren *this, int);
  $DDEB052CABCFE30D881FE2B773A1D04E ___u4;
};

/* 5166 */
struct FSlotBaseVtbl
{
  void *(__cdecl *__vecDelDtor)(FSlotBase *this, unsigned int);
};

/* 3942 */
struct FGCObjectVtbl
{
  void *(__cdecl *__vecDelDtor)(FGCObject *this, unsigned int);
  void (__cdecl *AddReferencedObjects)(FGCObject *this, FReferenceCollector *);
  FString *(__cdecl *GetReferencerName)(FGCObject *this, FString *result);
};

/* 5104 */
struct __cppobj TBaseDelegate<FText> : FDelegateBase
{
};

/* 5105 */
struct TAttribute<FText>
{
  FText Value;
  bool bIsSet;
  TBaseDelegate<FText> Getter;
};

/* 8661 */
struct __cppobj TDefaultDelete<FSlateTextBlockLayout>
{
};

/* 8703 */
struct __cppobj TUniquePtr<FSlateTextBlockLayout,TDefaultDelete<FSlateTextBlockLayout> > : TDefaultDelete<FSlateTextBlockLayout>
{
  FSlateTextBlockLayout *Ptr;
};

/* 5308 */
struct FSlateWidgetStyle
{
  FSlateWidgetStyleVtbl *vfptr;
};

/* 5314 */
struct TEnumAsByte<enum ESlateBrushDrawType::Type>
{
  char Value;
};

/* 5315 */
struct TEnumAsByte<enum ESlateBrushTileType::Type>
{
  char Value;
};

/* 5316 */
struct TEnumAsByte<enum ESlateBrushMirrorType::Type>
{
  char Value;
};

/* 5317 */
struct TEnumAsByte<enum ESlateBrushImageType::Type>
{
  char Value;
};

/* 5318 */
struct TSharedPtr<FSlateSharedHandleData,0>
{
  FSlateSharedHandleData *Object;
  SharedPointerInternals::FSharedReferencer<0> SharedReferenceCount;
};

/* 5321 */
struct FSlateResourceHandle
{
  TSharedPtr<FSlateSharedHandleData,0> Data;
};

/* 5311 */
struct __declspec(align(8)) FSlateBrush
{
  FSlateBrushVtbl *vfptr;
  FVector2D ImageSize;
  FMargin Margin;
  FSlateColor TintColor;
  UObject *ResourceObject;
  FName ResourceName;
  FBox2D UVRegion;
  TEnumAsByte<enum ESlateBrushDrawType::Type> DrawAs;
  TEnumAsByte<enum ESlateBrushTileType::Type> Tiling;
  TEnumAsByte<enum ESlateBrushMirrorType::Type> Mirroring;
  TEnumAsByte<enum ESlateBrushImageType::Type> ImageType;
  FSlateResourceHandle ResourceHandle;
  __int8 bIsDynamicallyLoaded : 1;
  __int8 bHasUObject_DEPRECATED : 1;
};

/* 5327 */
struct __cppobj FTextBlockStyle : FSlateWidgetStyle
{
  FSlateFontInfo Font;
  FSlateColor ColorAndOpacity;
  FVector2D ShadowOffset;
  FLinearColor ShadowColorAndOpacity;
  FSlateColor SelectedBackgroundColor;
  FLinearColor HighlightColor;
  FSlateBrush HighlightShape;
  FSlateBrush UnderlineBrush;
};

/* 8704 */
struct __cppobj TBaseDelegate<FSlateFontInfo> : FDelegateBase
{
};

/* 8705 */
struct TAttribute<FSlateFontInfo>
{
  FSlateFontInfo Value;
  bool bIsSet;
  TBaseDelegate<FSlateFontInfo> Getter;
};

/* 7797 */
struct __cppobj TBaseDelegate<FSlateBrush const *> : FDelegateBase
{
};

/* 7798 */
struct TAttribute<FSlateBrush const *>
{
  FSlateBrush *Value;
  bool bIsSet;
  TBaseDelegate<FSlateBrush const *> Getter;
};

/* 5303 */
struct __cppobj TBaseDelegate<float> : FDelegateBase
{
};

/* 5304 */
struct TAttribute<float>
{
  float Value;
  bool bIsSet;
  TBaseDelegate<float> Getter;
};

/* 8706 */
struct __cppobj TBaseDelegate<enum ETextWrappingPolicy> : FDelegateBase
{
};

/* 8707 */
struct TAttribute<enum ETextWrappingPolicy>
{
  _BYTE Value[1];
  bool bIsSet;
  TBaseDelegate<enum ETextWrappingPolicy> Getter;
};

/* 366 */
typedef EWindowTitleAlignment::Type ETextJustify::Type;

/* 8708 */
struct __cppobj TBaseDelegate<enum ETextJustify::Type> : FDelegateBase
{
};

/* 8709 */
struct TAttribute<enum ETextJustify::Type>
{
  ETextJustify::Type Value;
  bool bIsSet;
  TBaseDelegate<enum ETextJustify::Type> Getter;
};

/* 7800 */
struct __cppobj TBaseDelegate<FReply> : FDelegateBase
{
};

/* 8710 */
struct __cppobj STextBlock : SLeafWidget
{
  TAttribute<FText> BoundText;
  TUniquePtr<FSlateTextBlockLayout,TDefaultDelete<FSlateTextBlockLayout> > TextLayoutCache;
  FTextBlockStyle TextStyle;
  TAttribute<FSlateFontInfo> Font;
  TAttribute<FSlateColor> ColorAndOpacity;
  TAttribute<FVector2D> ShadowOffset;
  TAttribute<FLinearColor> ShadowColorAndOpacity;
  TAttribute<FLinearColor> HighlightColor;
  TAttribute<FSlateBrush const *> HighlightShape;
  TAttribute<FText> HighlightText;
  TAttribute<float> WrapTextAt;
  TAttribute<bool> AutoWrapText;
  TAttribute<enum ETextWrappingPolicy> WrappingPolicy;
  TAttribute<FMargin> Margin;
  TAttribute<enum ETextJustify::Type> Justification;
  TAttribute<float> LineHeightPercentage;
  TAttribute<float> MinDesiredWidth;
  TBaseDelegate<FReply> OnDoubleClicked;
};

/* 32710 */
struct __cppobj FScrollBoxStyle : FSlateWidgetStyle
{
  FSlateBrush TopShadowBrush;
  FSlateBrush BottomShadowBrush;
  FSlateBrush LeftShadowBrush;
  FSlateBrush RightShadowBrush;
};

/* 16693 */
const struct __cppobj FScrollBarStyle : FSlateWidgetStyle
{
  FSlateBrush HorizontalBackgroundImage;
  FSlateBrush VerticalBackgroundImage;
  FSlateBrush VerticalTopSlotImage;
  FSlateBrush HorizontalTopSlotImage;
  FSlateBrush VerticalBottomSlotImage;
  FSlateBrush HorizontalBottomSlotImage;
  FSlateBrush NormalThumbImage;
  FSlateBrush HoveredThumbImage;
  FSlateBrush DraggedThumbImage;
};

/* 69025 */
struct TEnumAsByte<enum EOrientation>
{
  char Value;
};

/* 69026 */
struct __cppobj TBaseDynamicMulticastDelegate<FWeakObjectPtr,void,float> : TMulticastScriptDelegate<FWeakObjectPtr>
{
};

/* 69027 */
struct __cppobj FOnUserScrolledEvent : TBaseDynamicMulticastDelegate<FWeakObjectPtr,void,float>
{
};

/* 69035 */
struct TSharedPtr<SScrollBox,0>
{
  SScrollBox *Object;
  SharedPointerInternals::FSharedReferencer<0> SharedReferenceCount;
};

/* 69036 */
struct __cppobj UScrollBox : UPanelWidget
{
  FScrollBoxStyle WidgetStyle;
  FScrollBarStyle WidgetBarStyle;
  USlateWidgetStyleAsset *Style_DEPRECATED;
  USlateWidgetStyleAsset *BarStyle_DEPRECATED;
  TEnumAsByte<enum EOrientation> Orientation;
  _BYTE ScrollBarVisibility[1];
  _BYTE ConsumeMouseWheel[1];
  FVector2D ScrollbarThickness;
  bool AlwaysShowScrollbar;
  bool AllowOverscroll;
  _BYTE NavigationDestination[1];
  float NavigationScrollPadding;
  bool bAllowRightClickDragScrolling;
  FOnUserScrolledEvent OnUserScrolled;
  float DesiredScrollOffset;
  TSharedPtr<SScrollBox,0> MyScrollBox;
};

/* 30550 */
struct TSharedPtr<SVerticalBox,0>
{
  SVerticalBox *Object;
  SharedPointerInternals::FSharedReferencer<0> SharedReferenceCount;
};

/* 69037 */
struct __cppobj UVerticalBox : UPanelWidget
{
  TSharedPtr<SVerticalBox,0> MyVerticalBox;
};

/* 69109 */
struct __cppobj UAcRaceEventGenerator : UObject
{
  UAcGameInstance *GameInstance;
  AAcMenuGameMode *MenuGameMode;
  UAcMenuState *MenuState;
};

/* 5140 */
union $242ACA996E83CFB9C9199F2D95E91076
{
  void (__cdecl *~IToolTip)(IToolTip *this);
  void *(__cdecl *__vecDelDtor)(IToolTip *this, unsigned int);
};

/* 5141 */
struct IToolTipVtbl
{
  TSharedRef<SWidget,0> *(__cdecl *AsWidget)(IToolTip *this, TSharedRef<SWidget,0> *result);
  TSharedRef<SWidget,0> *(__cdecl *GetContentWidget)(IToolTip *this, TSharedRef<SWidget,0> *result);
  void (__cdecl *SetContentWidget)(IToolTip *this, TSharedRef<SWidget,0> *);
  bool (__cdecl *IsEmpty)(IToolTip *this);
  bool (__cdecl *IsInteractive)(IToolTip *this);
  void (__cdecl *OnOpening)(IToolTip *this);
  void (__cdecl *OnClosed)(IToolTip *this);
  $242ACA996E83CFB9C9199F2D95E91076 ___u7;
};

/* 5149 */
struct ILayoutCacheVtbl
{
  void *(__cdecl *__vecDelDtor)(ILayoutCache *this, unsigned int);
  void (__cdecl *InvalidateWidget)(ILayoutCache *this, SWidget *);
  FCachedWidgetNode *(__cdecl *CreateCacheNode)(ILayoutCache *this);
};

/* 21209 */
struct __declspec(align(4)) FLightmassLightSettings
{
  float IndirectLightingSaturation;
  float ShadowExponent;
  bool bUseAreaShadowsForStationaryLight;
};

/* 21210 */
struct __cppobj FLightmassPointLightSettings : FLightmassLightSettings
{
};

/* 60719 */
struct __cppobj ULocalLightComponent : ULightComponent
{
  float AttenuationRadius;
  FLightmassPointLightSettings LightmassSettings;
};

/* 60720 */
struct __cppobj __declspec(align(16)) UPointLightComponent : ULocalLightComponent
{
  unsigned __int32 bUseInverseSquaredFalloff : 1;
  float LightFalloffExponent;
  float SourceRadius;
  float SoftSourceRadius;
  float SourceLength;
};

/* 60736 */
struct __cppobj __declspec(align(16)) USpotLightComponent : UPointLightComponent
{
  float LightShaftConeAngle;
};

/* 39799 */
struct __cppobj FOnEventStopped : TBaseDynamicMulticastDelegate<FWeakObjectPtr,void>
{
};

/* 39801 */
struct __cppobj TBaseDynamicMulticastDelegate<FWeakObjectPtr,void,FString,int> : TMulticastScriptDelegate<FWeakObjectPtr>
{
};

/* 39802 */
struct __cppobj FOnTimelineMarker : TBaseDynamicMulticastDelegate<FWeakObjectPtr,void,FString,int>
{
};

/* 39805 */
struct __cppobj TBaseDynamicMulticastDelegate<FWeakObjectPtr,void,int,int,int,float,int,int> : TMulticastScriptDelegate<FWeakObjectPtr>
{
};

/* 39806 */
struct __cppobj FOnTimelineBeat : TBaseDynamicMulticastDelegate<FWeakObjectPtr,void,int,int,int,float,int,int>
{
};

/* 39797 */
struct FFMODAttenuationDetails
{
  unsigned __int32 bOverrideAttenuation : 1;
  float MinimumDistance;
  float MaximumDistance;
};

/* 39798 */
struct __declspec(align(4)) FFMODOcclusionDetails
{
  bool bEnableOcclusion;
  TEnumAsByte<enum ECollisionChannel> OcclusionTraceChannel;
  float OcclusionLowPassFilterFrequency;
  float OcclusionVolumeAttenuation;
  float OcclusionInterpolationTime;
  bool bUseComplexCollisionForOcclusion;
};

/* 9887 */
struct FDynamicParameter
{
  float CurrValue;
  float StartValue;
  float DeltaValue;
  float CurrTimeSec;
  float DurationSec;
  float LastTime;
  float TargetValue;
};

/* 39796 */
struct __cppobj FFMODDynamicParameter : FDynamicParameter
{
};

/* 39809 */
struct TArray<FTimelineMarkerProperties,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 39810 */
struct TArray<FTimelineBeatProperties,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 39811 */
struct __cppobj __declspec(align(16)) UFMODAudioComponent : USceneComponent
{
  _BYTE Event[32];
  TMap<FName,float,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,float,0> > ParameterCache;
  bool bDefaultParameterValuesCached;
  FString ProgrammerSoundName;
  unsigned __int32 bEnableTimelineCallbacks : 1;
  float StoredProperties[5];
  unsigned __int32 bAutoDestroy : 1;
  unsigned __int32 bStopWhenOwnerDestroyed : 1;
  unsigned __int32 bApplyAmbientVolumes : 1;
  unsigned __int32 bApplyOcclusionDirect : 1;
  unsigned __int32 bApplyOcclusionParameter : 1;
  unsigned __int32 bHasCheckedOcclusion : 1;
  FOnEventStopped OnEventStopped;
  FOnTimelineMarker OnTimelineMarker;
  FOnTimelineBeat OnTimelineBeat;
  FFMODAttenuationDetails AttenuationDetails;
  FFMODOcclusionDetails OcclusionDetails;
  FMOD::Studio::EventInstance *StudioInstance;
  long double InteriorLastUpdateTime;
  float SourceInteriorVolume;
  float SourceInteriorLPF;
  float CurrentInteriorVolume;
  float CurrentInteriorLPF;
  float AmbientVolumeMultiplier;
  float AmbientLPF;
  float LastLPF;
  float LastVolume;
  FFMODDynamicParameter CurrentOcclusionFilterFrequency;
  FFMODDynamicParameter CurrentOcclusionVolumeAttenuation;
  FWindowsCriticalSection CallbackLock;
  TArray<FTimelineMarkerProperties,FDefaultAllocator> CallbackMarkerQueue;
  TArray<FTimelineBeatProperties,FDefaultAllocator> CallbackBeatQueue;
  FMOD::Sound *ProgrammerSound;
  FMOD::DSP *LowPass;
  int LowPassParam;
  int EventLength;
  IFMODStudioModule *Module;
};

/* 69663 */
struct __cppobj __declspec(align(8)) UKSAudioComponent : UFMODAudioComponent
{
  _BYTE attributesToSet[40];
  bool overriden;
};

/* 69675 */
struct TArray<USkeletalMeshSocket const *,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 69676 */
struct TSparseArray<TSetElement<TTuple<enum ECarModelType,FPitstopOffsets> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<96,8> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 69677 */
struct __declspec(align(8)) TSet<TTuple<enum ECarModelType,FPitstopOffsets>,TDefaultMapHashableKeyFuncs<enum ECarModelType,FPitstopOffsets,0>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<TTuple<enum ECarModelType,FPitstopOffsets> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 69678 */
struct TMapBase<enum ECarModelType,FPitstopOffsets,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<enum ECarModelType,FPitstopOffsets,0> >
{
  TSet<TTuple<enum ECarModelType,FPitstopOffsets>,TDefaultMapHashableKeyFuncs<enum ECarModelType,FPitstopOffsets,0>,FDefaultSetAllocator> Pairs;
};

/* 69679 */
struct __cppobj TSortableMapBase<enum ECarModelType,FPitstopOffsets,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<enum ECarModelType,FPitstopOffsets,0> > : TMapBase<enum ECarModelType,FPitstopOffsets,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<enum ECarModelType,FPitstopOffsets,0> >
{
};

/* 69680 */
struct __cppobj TMap<enum ECarModelType,FPitstopOffsets,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<enum ECarModelType,FPitstopOffsets,0> > : TSortableMapBase<enum ECarModelType,FPitstopOffsets,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<enum ECarModelType,FPitstopOffsets,0> >
{
};

/* 69681 */
struct FPitstopOffsets
{
  TArray<float,FDefaultAllocator> HubPosition_LF_RF_LR_RR;
  FVector2D CrewManOnLeft_Start;
  TArray<FVector2D,FDefaultAllocator> CrewManOnLeft_A_B_C_D;
  FVector2D CrewManOnLeft_End;
  FVector2D CrewManOnRight_Start;
  TArray<FVector2D,FDefaultAllocator> CrewManOnRight_A_B_C_D;
  FVector2D CrewManOnRight_End;
};

/* 69682 */
struct __cppobj TBaseMulticastDelegate<void,enum EPitstopAudioEvent const ,unsigned char const > : FMulticastDelegateBase<FWeakObjectPtr>
{
};

/* 69683 */
struct __cppobj AAcPitstopProcedure::FPistopAudioEvent : TBaseMulticastDelegate<void,enum EPitstopAudioEvent const ,unsigned char const >
{
};

/* 69684 */
struct __cppobj __declspec(align(16)) AAcPitstopProcedure : AActor
{
  float TyreMan_A2B_time;
  float TyreMan_B2C_time;
  float TyreMan_C2D_time;
  float TyreMan_D2End_time;
  float AirgunMan_A2B_time;
  float AirgunMan_B2C_time;
  float AirgunMan_C2D_time;
  float AirgunMan_D2End_time;
  USceneComponent *SceneComponent;
  USkeletalMeshComponent *TyreManComponent;
  USkeletalMeshComponent *AirgunManComponent;
  USkeletalMeshComponent *ReceiverManComponent;
  USkeletalMeshComponent *TyreA_Component;
  USkeletalMeshComponent *TyreBC_Component;
  USkeletalMeshComponent *TyreD_Component;
  TArray<UStaticMeshComponent *,FDefaultAllocator> PitTyreComponents;
  TArray<UStaticMeshComponent *,FDefaultAllocator> CarTyreComponents;
  TArray<UStaticMeshComponent *,FDefaultAllocator> PitRimComponents;
  TArray<UStaticMeshComponent *,FDefaultAllocator> CarRimComponents;
  TArray<UStaticMesh *,FDefaultAllocator> RimMeshes;
  UArrowComponent *CarCenterComponent;
  TArray<USkeletalMeshSocket const *,FDefaultAllocator> PitWheelSockets;
  TArray<USkeletalMeshSocket const *,FDefaultAllocator> CarWheelSockets;
  TArray<USkeletalMeshComponent *,FDefaultAllocator> WheelComponents;
  TMap<enum ECarModelType,FPitstopOffsets,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<enum ECarModelType,FPitstopOffsets,0> > PitstopOffsets;
  AAcRaceGameMode *RaceGameMode;
  ACarAvatar *CarAvatar;
  _BYTE phase[1];
  FPitstopOffsets offsets;
  FTransform pitcrewStartingPosition;
  FTransform carLastGroundPosition;
  FVector crewManOffsetStep;
  char newTyresetCompoundIndex;
  bool bIsOnLeft;
  bool canDropCar;
  float blendMovement;
  AAcPitstopProcedure::FPistopAudioEvent audioEvent;
  char tyreIndexInverted[4];
};

/* 69685 */
struct __cppobj APlayerStart : ANavigationObjectBase
{
  FName PlayerStartTag;
};

/* 69686 */
struct __cppobj AAcPlayerStart : APlayerStart
{
  _BYTE StartType[1];
  char StartIndex;
  _BYTE CarLocation[1];
  bool IsBetween_SC_Lines;
  bool IsSharedZone;
  bool IsSecondaryZone;
  char SharedWithPosition;
  UBoxComponent *BoxComponent;
  USceneComponent *SceneComponent;
  UStaticMeshComponent *MaterialMeshComponent;
};

/* 56028 */
struct __cppobj UCurveVector : UCurveBase
{
  FRichCurve FloatCurves[3];
};

/* 4930 */
struct TIndirectArray<FTexture2DMipMap,FDefaultAllocator>
{
  TArray<void *,FDefaultAllocator> Array;
};

/* 4931 */
struct FTexturePlatformData
{
  int SizeX;
  int SizeY;
  int NumSlices;
  EPixelFormat PixelFormat;
  TIndirectArray<FTexture2DMipMap,FDefaultAllocator> Mips;
};

/* 4932 */
struct FResourceBulkDataInterface
{
  FResourceBulkDataInterfaceVtbl *vfptr;
};

/* 4934 */
struct __cppobj FTexture2DResourceMem : FResourceBulkDataInterface
{
};

/* 4433 */
const struct TRefCountPtr<FRHITexture2D>
{
  FRHITexture2D *Reference;
};

/* 4937 */
struct __cppobj TDefaultDelete<FAsyncTask<FTexture2DUpdate::FMipUpdateTask> >
{
};

/* 4941 */
struct __cppobj TUniquePtr<FAsyncTask<FTexture2DUpdate::FMipUpdateTask>,TDefaultDelete<FAsyncTask<FTexture2DUpdate::FMipUpdateTask> > > : TDefaultDelete<FAsyncTask<FTexture2DUpdate::FMipUpdateTask> >
{
  FAsyncTask<FTexture2DUpdate::FMipUpdateTask> *Ptr;
};

/* 3346 */
enum FTexture2DUpdate::ETaskState
{
  TS_None = 0x0,
  TS_Pending = 0x1,
  TS_Scheduled = 0x2,
  TS_Locked = 0x3,
};

/* 54 */
enum ETransitionType
{
  TT_None = 0x0,
  TT_Paused = 0x1,
  TT_Loading = 0x2,
  TT_Saving = 0x3,
  TT_Connecting = 0x4,
  TT_Precaching = 0x5,
  TT_WaitingToConnect = 0x6,
  TT_MAX = 0x7,
};

/* 3345 */
typedef ETransitionType FTexture2DUpdate::EThreadType;

/* 4944 */
struct UE4Function_Private::TFunctionRefBase<TFunction<void __cdecl(FTexture2DUpdate::FContext const &)>,void __cdecl(FTexture2DUpdate::FContext const &)>
{
  void (__cdecl *Callable)(void *, FTexture2DUpdate::FContext *);
};

/* 4945 */
struct __cppobj TFunction<void __cdecl(FTexture2DUpdate::FContext const &)> : UE4Function_Private::TFunctionRefBase<TFunction<void __cdecl(FTexture2DUpdate::FContext const &)>,void __cdecl(FTexture2DUpdate::FContext const &)>
{
  UE4Function_Private::FFunctionStorage Storage;
};

/* 4935 */
struct FTexture2DUpdate
{
  FTexture2DUpdateVtbl *vfptr;
  __declspec(align(16)) TRefCountPtr<FRHITexture2D> IntermediateTextureRHI;
  int PendingFirstMip;
  int RequestedMips;
  FThreadSafeCounter TaskSynchronization;
  volatile int ScheduledTaskCount;
  TUniquePtr<FAsyncTask<FTexture2DUpdate::FMipUpdateTask>,TDefaultDelete<FAsyncTask<FTexture2DUpdate::FMipUpdateTask> > > AsyncMipUpdateTask;
  bool bIsCancelled;
  volatile int TaskState;
  FTexture2DUpdate::ETaskState PendingTaskState;
  FTexture2DUpdate::EThreadType TaskThread;
  TFunction<void __cdecl(FTexture2DUpdate::FContext const &)> TaskCallback;
  FTexture2DUpdate::EThreadType CancelationThread;
  TFunction<void __cdecl(FTexture2DUpdate::FContext const &)> CancelationCallback;
};

/* 4617 */
struct TArray<FMatrix,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 4628 */
struct FSkelMeshRefPoseOverride
{
  TArray<FMatrix,FDefaultAllocator> RefBasesInvMatrix;
  TArray<FTransform,FDefaultAllocator> RefBonePoses;
};

/* 4605 */
struct TArray<USkeletalBodySetup *,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 4606 */
struct TArray<UPhysicsConstraintTemplate *,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 4559 */
struct TSparseArray<TSetElement<TTuple<FName,int> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<24,8> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 4560 */
struct __declspec(align(8)) TSet<TTuple<FName,int>,TDefaultMapHashableKeyFuncs<FName,int,0>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<TTuple<FName,int> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 4561 */
struct TMapBase<FName,int,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,int,0> >
{
  TSet<TTuple<FName,int>,TDefaultMapHashableKeyFuncs<FName,int,0>,FDefaultSetAllocator> Pairs;
};

/* 4562 */
struct __cppobj TSortableMapBase<FName,int,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,int,0> > : TMapBase<FName,int,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,int,0> >
{
};

/* 4563 */
struct __cppobj TMap<FName,int,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,int,0> > : TSortableMapBase<FName,int,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,int,0> >
{
};

/* 4607 */
struct TSparseArray<TSetElement<TTuple<FRigidBodyIndexPair,bool> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<20,4> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 4608 */
struct __declspec(align(8)) TSet<TTuple<FRigidBodyIndexPair,bool>,TDefaultMapHashableKeyFuncs<FRigidBodyIndexPair,bool,0>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<TTuple<FRigidBodyIndexPair,bool> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 4609 */
struct TMapBase<FRigidBodyIndexPair,bool,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FRigidBodyIndexPair,bool,0> >
{
  TSet<TTuple<FRigidBodyIndexPair,bool>,TDefaultMapHashableKeyFuncs<FRigidBodyIndexPair,bool,0>,FDefaultSetAllocator> Pairs;
};

/* 4610 */
struct __cppobj TSortableMapBase<FRigidBodyIndexPair,bool,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FRigidBodyIndexPair,bool,0> > : TMapBase<FRigidBodyIndexPair,bool,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FRigidBodyIndexPair,bool,0> >
{
};

/* 4611 */
struct __cppobj TMap<FRigidBodyIndexPair,bool,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FRigidBodyIndexPair,bool,0> > : TSortableMapBase<FRigidBodyIndexPair,bool,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FRigidBodyIndexPair,bool,0> >
{
};

/* 4614 */
struct __cppobj UPhysicsAsset : UObject, IInterface_PreviewMeshProvider
{
  TArray<int,FDefaultAllocator> BoundsBodies;
  TArray<USkeletalBodySetup *,FDefaultAllocator> SkeletalBodySetups;
  TArray<UPhysicsConstraintTemplate *,FDefaultAllocator> ConstraintSetup;
  __int8 bUseAsyncScene : 1;
  __int8 bNotForDedicatedServer : 1;
  TMap<FName,int,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,int,0> > BodySetupIndexMap;
  TMap<FRigidBodyIndexPair,bool,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FRigidBodyIndexPair,bool,0> > CollisionDisableTable;
  UThumbnailInfo *ThumbnailInfo;
  TArray<UBodySetup *,FDefaultAllocator> BodySetup_DEPRECATED;
};

/* 4635 */
struct TArray<FSkeletalMeshObject::FSkelMeshObjectLODInfo,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 4636 */
struct TArray<FCapsuleShape,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 4602 */
struct TArray<FSkeletalMeshLODInfo,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 4646 */
struct __cppobj __declspec(align(8)) FSkeletalMeshObject : FDeferredCleanupInterface
{
  TArray<FSkeletalMeshObject::FSkelMeshObjectLODInfo,FDefaultAllocator> LODInfo;
  TArray<FCapsuleShape,FDefaultAllocator> ShadowCapsuleShapes;
  int MinDesiredLODLevel;
  float MaxDistanceFactor;
  int WorkingMinDesiredLODLevel;
  float WorkingMaxDistanceFactor;
  bool bHasBeenUpdatedAtLeastOnce;
  FSkeletalMeshRenderData *SkeletalMeshRenderData;
  TArray<FSkeletalMeshLODInfo,FDefaultAllocator> SkeletalMeshLODInfo;
  FGPUSkinCacheEntry *SkinCacheEntry;
  unsigned int LastFrameNumber;
  bool bUsePerBoneMotionBlur;
  TStatId StatId;
  ERHIFeatureLevel::Type FeatureLevel;
};

/* 4667 */
struct FAnimUpdateRateParameters
{
  _BYTE OptimizeMode[1];
  _BYTE ShiftBucket[1];
  __int8 bInterpolateSkippedFrames : 1;
  __int8 bShouldUseLodMap : 1;
  __int8 bShouldUseMinLod : 1;
  __int8 bSkipUpdate : 1;
  __int8 bSkipEvaluation : 1;
  int UpdateRate;
  int EvaluationRate;
  float TickedPoseOffestTime;
  float AdditionalTime;
  float ThisTickDelta;
  int BaseNonRenderedUpdateRate;
  int MaxEvalRateForInterpolation;
  TArray<float,FDefaultAllocator> BaseVisibleDistanceFactorThesholds;
  TMap<int,int,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<int,int,0> > LODToFrameSkipMap;
  int SkippedUpdateFrames;
  int SkippedEvalFrames;
};

/* 4545 */
struct IInterface_CollisionDataProviderVtbl
{
  void *(__cdecl *__vecDelDtor)(IInterface_CollisionDataProvider *this, unsigned int);
  UObject *(__cdecl *_getUObject)(IInterface_CollisionDataProvider *this);
  bool (__cdecl *GetPhysicsTriMeshData)(IInterface_CollisionDataProvider *this, FTriMeshCollisionData *, bool);
  bool (__cdecl *ContainsPhysicsTriMeshData)(IInterface_CollisionDataProvider *this, bool);
  bool (__cdecl *WantsNegXTriMesh)(IInterface_CollisionDataProvider *this);
  void (__cdecl *GetMeshId)(IInterface_CollisionDataProvider *this, FString *);
};

/* 4669 */
struct TArray<UDynamicBlueprintBinding *,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 4670 */
struct TArray<UTimelineTemplate *,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 4694 */
struct TSparseArray<TSetElement<TTuple<FName,FBlueprintCookedComponentInstancingData> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<96,8> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 4695 */
struct __declspec(align(8)) TSet<TTuple<FName,FBlueprintCookedComponentInstancingData>,TDefaultMapHashableKeyFuncs<FName,FBlueprintCookedComponentInstancingData,0>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<TTuple<FName,FBlueprintCookedComponentInstancingData> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 4696 */
struct TMapBase<FName,FBlueprintCookedComponentInstancingData,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,FBlueprintCookedComponentInstancingData,0> >
{
  TSet<TTuple<FName,FBlueprintCookedComponentInstancingData>,TDefaultMapHashableKeyFuncs<FName,FBlueprintCookedComponentInstancingData,0>,FDefaultSetAllocator> Pairs;
};

/* 4697 */
struct __cppobj TSortableMapBase<FName,FBlueprintCookedComponentInstancingData,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,FBlueprintCookedComponentInstancingData,0> > : TMapBase<FName,FBlueprintCookedComponentInstancingData,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,FBlueprintCookedComponentInstancingData,0> >
{
};

/* 4698 */
struct __cppobj TMap<FName,FBlueprintCookedComponentInstancingData,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,FBlueprintCookedComponentInstancingData,0> > : TSortableMapBase<FName,FBlueprintCookedComponentInstancingData,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,FBlueprintCookedComponentInstancingData,0> >
{
};

/* 4673 */
struct TIndirectArray<FCustomPropertyListNode,FDefaultAllocator>
{
  TArray<void *,FDefaultAllocator> Array;
};

/* 4699 */
struct __cppobj UBlueprintGeneratedClass : UClass
{
  int NumReplicatedProperties;
  __int8 bHasNativizedParent : 1;
  __int8 bCustomPropertyListForPostConstructionInitialized : 1;
  TArray<UDynamicBlueprintBinding *,FDefaultAllocator> DynamicBindingObjects;
  TArray<UActorComponent *,FDefaultAllocator> ComponentTemplates;
  TArray<UTimelineTemplate *,FDefaultAllocator> Timelines;
  USimpleConstructionScript *SimpleConstructionScript;
  UInheritableComponentHandler *InheritableComponentHandler;
  UStructProperty *UberGraphFramePointerProperty;
  UFunction *UberGraphFunction;
  TMap<FName,FBlueprintCookedComponentInstancingData,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,FBlueprintCookedComponentInstancingData,0> > CookedComponentInstancingData;
  TIndirectArray<FCustomPropertyListNode,FDefaultAllocator> CustomPropertyListForPostConstruction;
  FWindowsCriticalSection SerializeAndPostLoadCritical;
};

/* 4700 */
struct IAnimClassInterface
{
  IAnimClassInterfaceVtbl *vfptr;
};

/* 4701 */
const struct TArray<FBakedAnimationStateMachine,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 4703 */
const struct TArray<UStructProperty *,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 4705 */
struct __cppobj UAnimBlueprintGeneratedClass : UBlueprintGeneratedClass, IAnimClassInterface
{
  TArray<FBakedAnimationStateMachine,FDefaultAllocator> BakedStateMachines;
  USkeleton *TargetSkeleton;
  TArray<FAnimNotifyEvent,FDefaultAllocator> AnimNotifies;
  int RootAnimNodeIndex;
  TArray<int,FDefaultAllocator> OrderedSavedPoseIndices;
  UStructProperty *RootAnimNodeProperty;
  TArray<UStructProperty *,FDefaultAllocator> AnimNodeProperties;
  TArray<FName,FDefaultAllocator> SyncGroupNames;
};

/* 4706 */
struct TEnumAsByte<enum ERootMotionMode::Type>
{
  char Value;
};

/* 4707 */
struct __cppobj TBaseDynamicMulticastDelegate<FWeakObjectPtr,void,UAnimMontage *,bool> : TMulticastScriptDelegate<FWeakObjectPtr>
{
};

/* 4708 */
struct __cppobj FOnMontageBlendingOutStartedMCDelegate : TBaseDynamicMulticastDelegate<FWeakObjectPtr,void,UAnimMontage *,bool>
{
};

/* 4709 */
struct __cppobj TBaseDynamicMulticastDelegate<FWeakObjectPtr,void,UAnimMontage *> : TMulticastScriptDelegate<FWeakObjectPtr>
{
};

/* 4710 */
struct __cppobj FOnMontageStartedMCDelegate : TBaseDynamicMulticastDelegate<FWeakObjectPtr,void,UAnimMontage *>
{
};

/* 4711 */
struct __cppobj FOnMontageEndedMCDelegate : TBaseDynamicMulticastDelegate<FWeakObjectPtr,void,UAnimMontage *,bool>
{
};

/* 4713 */
struct __cppobj FOnAllMontageInstancesEndedMCDelegate : TBaseDynamicMulticastDelegate<FWeakObjectPtr,void>
{
};

/* 4714 */
struct TArray<FAnimMontageInstance *,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 4715 */
struct TSparseArray<TSetElement<TTuple<UAnimMontage *,FAnimMontageInstance *> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<24,8> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 4716 */
struct __declspec(align(8)) TSet<TTuple<UAnimMontage *,FAnimMontageInstance *>,TDefaultMapHashableKeyFuncs<UAnimMontage *,FAnimMontageInstance *,0>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<TTuple<UAnimMontage *,FAnimMontageInstance *> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 4717 */
struct TMapBase<UAnimMontage *,FAnimMontageInstance *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<UAnimMontage *,FAnimMontageInstance *,0> >
{
  TSet<TTuple<UAnimMontage *,FAnimMontageInstance *>,TDefaultMapHashableKeyFuncs<UAnimMontage *,FAnimMontageInstance *,0>,FDefaultSetAllocator> Pairs;
};

/* 4718 */
struct __cppobj TSortableMapBase<UAnimMontage *,FAnimMontageInstance *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<UAnimMontage *,FAnimMontageInstance *,0> > : TMapBase<UAnimMontage *,FAnimMontageInstance *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<UAnimMontage *,FAnimMontageInstance *,0> >
{
};

/* 4719 */
struct __cppobj TMap<UAnimMontage *,FAnimMontageInstance *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<UAnimMontage *,FAnimMontageInstance *,0> > : TSortableMapBase<UAnimMontage *,FAnimMontageInstance *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<UAnimMontage *,FAnimMontageInstance *,0> >
{
};

/* 4720 */
struct TArray<FQueuedMontageBlendingOutEvent,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 4721 */
struct TArray<FQueuedMontageEndedEvent,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 4722 */
struct FRandomStream
{
  int InitialSeed;
  int Seed;
};

/* 4723 */
struct TArray<FAnimNotifyEventReference,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 4724 */
struct TSparseArray<TSetElement<TTuple<FName,FAnimNotifyArray> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<32,8> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 4725 */
struct __declspec(align(8)) TSet<TTuple<FName,FAnimNotifyArray>,TDefaultMapHashableKeyFuncs<FName,FAnimNotifyArray,0>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<TTuple<FName,FAnimNotifyArray> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 4726 */
struct TMapBase<FName,FAnimNotifyArray,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,FAnimNotifyArray,0> >
{
  TSet<TTuple<FName,FAnimNotifyArray>,TDefaultMapHashableKeyFuncs<FName,FAnimNotifyArray,0>,FDefaultSetAllocator> Pairs;
};

/* 4727 */
struct __cppobj TSortableMapBase<FName,FAnimNotifyArray,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,FAnimNotifyArray,0> > : TMapBase<FName,FAnimNotifyArray,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,FAnimNotifyArray,0> >
{
};

/* 4728 */
struct __cppobj TMap<FName,FAnimNotifyArray,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,FAnimNotifyArray,0> > : TSortableMapBase<FName,FAnimNotifyArray,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,FAnimNotifyArray,0> >
{
};

/* 4729 */
struct FAnimNotifyQueue
{
  int PredictedLODLevel;
  FRandomStream RandomStream;
  TArray<FAnimNotifyEventReference,FDefaultAllocator> AnimNotifies;
  TMap<FName,FAnimNotifyArray,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,FAnimNotifyArray,0> > UnfilteredMontageAnimNotifies;
};

/* 4735 */
struct __declspec(align(8)) FGraphTraversalCounter
{
  unsigned __int64 LastSyncronizedFrame;
  __int16 Counter;
  __int16 SkipFrames;
};

/* 4736 */
struct TSparseArray<TSetElement<TTuple<FName,FMontageActiveSlotTracker> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<32,8> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 4737 */
struct __declspec(align(8)) TSet<TTuple<FName,FMontageActiveSlotTracker>,TDefaultMapHashableKeyFuncs<FName,FMontageActiveSlotTracker,0>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<TTuple<FName,FMontageActiveSlotTracker> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 4738 */
struct TMapBase<FName,FMontageActiveSlotTracker,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,FMontageActiveSlotTracker,0> >
{
  TSet<TTuple<FName,FMontageActiveSlotTracker>,TDefaultMapHashableKeyFuncs<FName,FMontageActiveSlotTracker,0>,FDefaultSetAllocator> Pairs;
};

/* 4739 */
struct __cppobj TSortableMapBase<FName,FMontageActiveSlotTracker,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,FMontageActiveSlotTracker,0> > : TMapBase<FName,FMontageActiveSlotTracker,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,FMontageActiveSlotTracker,0> >
{
};

/* 4740 */
struct __cppobj TMap<FName,FMontageActiveSlotTracker,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,FMontageActiveSlotTracker,0> > : TSortableMapBase<FName,FMontageActiveSlotTracker,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,FMontageActiveSlotTracker,0> >
{
};

/* 4769 */
struct TArray<UAnimInstance::FQueuedRootMotionBlend,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 4835 */
struct __cppobj TBaseDynamicMulticastDelegate<FWeakObjectPtr,void,FName,FBranchingPointNotifyPayload const &> : TMulticastScriptDelegate<FWeakObjectPtr>
{
};

/* 4836 */
struct __cppobj FPlayMontageAnimNotifyDelegate : TBaseDynamicMulticastDelegate<FWeakObjectPtr,void,FName,FBranchingPointNotifyPayload const &>
{
};

/* 4772 */
struct __cppobj __declspec(align(16)) UAnimInstance : UObject
{
  USkeleton *CurrentSkeleton;
  TEnumAsByte<enum ERootMotionMode::Type> RootMotionMode;
  __int8 bUseMultiThreadedAnimationUpdate : 1;
  __int8 bUsingCopyPoseFromMesh : 1;
  __int8 bNeedsUpdate : 1;
  __int8 bQueueMontageEvents : 1;
  FOnMontageBlendingOutStartedMCDelegate OnMontageBlendingOut;
  FOnMontageStartedMCDelegate OnMontageStarted;
  FOnMontageEndedMCDelegate OnMontageEnded;
  FOnAllMontageInstancesEndedMCDelegate OnAllMontageInstancesEnded;
  TArray<FAnimMontageInstance *,FDefaultAllocator> MontageInstances;
  TMap<UAnimMontage *,FAnimMontageInstance *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<UAnimMontage *,FAnimMontageInstance *,0> > ActiveMontagesMap;
  TArray<FQueuedMontageBlendingOutEvent,FDefaultAllocator> QueuedMontageBlendingOutEvents;
  TArray<FQueuedMontageEndedEvent,FDefaultAllocator> QueuedMontageEndedEvents;
  FAnimNotifyQueue NotifyQueue;
  TArray<FAnimNotifyEvent,FDefaultAllocator> ActiveAnimNotifyState;
  TMap<FName,float,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,float,0> > AnimationCurves[3];
  TArray<FName,FDefaultAllocator> MaterialParamatersToClear;
  FGraphTraversalCounter DebugDataCounter;
  TMap<FName,FMontageActiveSlotTracker,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,FMontageActiveSlotTracker,0> > SlotWeightTracker;
  FAnimMontageInstance *RootMotionMontageInstance;
  TArray<UAnimInstance::FQueuedRootMotionBlend,FDefaultAllocator> RootMotionBlendQueue;
  FRootMotionMovementParams ExtractedRootMotion;
  FAnimInstanceProxy *AnimInstanceProxy;
  FPlayMontageAnimNotifyDelegate OnPlayMontageNotifyBegin;
  FPlayMontageAnimNotifyDelegate OnPlayMontageNotifyEnd;
};

/* 4850 */
struct IClothingSimulation
{
  IClothingSimulationVtbl *vfptr;
};

/* 4852 */
struct IClothingSimulationContext
{
  IClothingSimulationContextVtbl *vfptr;
};

/* 4859 */
struct __cppobj __declspec(align(8)) UClothingSimulationInteractor : UObject
{
  bool bDirty;
};

/* 4546 */
struct INodeMappingProviderInterface
{
  INodeMappingProviderInterfaceVtbl *vfptr;
};

/* 4549 */
struct __cppobj TDefaultDelete<FSkeletalMeshRenderData>
{
};

/* 4552 */
struct __cppobj TUniquePtr<FSkeletalMeshRenderData,TDefaultDelete<FSkeletalMeshRenderData> > : TDefaultDelete<FSkeletalMeshRenderData>
{
  FSkeletalMeshRenderData *Ptr;
};

/* 4599 */
struct TArray<FSkeletalMaterial,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 4600 */
struct TArray<FBoneMirrorInfo,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 4601 */
struct TEnumAsByte<enum EAxis::Type>
{
  char Value;
};

/* 4615 */
struct TArray<UNodeMappingContainer *,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 4616 */
struct TArray<UMorphTarget *,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 4558 */
struct TArray<FMeshBoneInfo,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 4564 */
struct TArray<FVirtualBoneRefData,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 4565 */
struct __declspec(align(8)) FReferenceSkeleton
{
  TArray<FMeshBoneInfo,FDefaultAllocator> RawRefBoneInfo;
  TArray<FTransform,FDefaultAllocator> RawRefBonePose;
  TArray<FMeshBoneInfo,FDefaultAllocator> FinalRefBoneInfo;
  TArray<FTransform,FDefaultAllocator> FinalRefBonePose;
  TMap<FName,int,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,int,0> > RawNameToIndexMap;
  TMap<FName,int,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,int,0> > FinalNameToIndexMap;
  TArray<unsigned short,FDefaultAllocator> RequiredVirtualBones;
  TArray<FVirtualBoneRefData,FDefaultAllocator> UsedVirtualBoneData;
  bool bOnlyOneRootAllowed;
};

/* 4618 */
struct TArray<FClothingAssetData_Legacy,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 4620 */
struct TArray<UClothingAssetBase *,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 4621 */
struct TArray<FSkeletalMeshSamplingRegion,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 4622 */
struct TArray<FSkeletalMeshSamplingLODBuiltData,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 4623 */
struct TArray<FSkeletalMeshSamplingRegionBuiltData,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 4624 */
struct FSkeletalMeshSamplingBuiltData
{
  TArray<FSkeletalMeshSamplingLODBuiltData,FDefaultAllocator> WholeMeshBuiltData;
  TArray<FSkeletalMeshSamplingRegionBuiltData,FDefaultAllocator> RegionBuiltData;
};

/* 4625 */
struct FSkeletalMeshSamplingInfo
{
  TArray<FSkeletalMeshSamplingRegion,FDefaultAllocator> Regions;
  FSkeletalMeshSamplingBuiltData BuiltData;
};

/* 4567 */
struct TArray<USkeletalMeshSocket *,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 4554 */
struct __cppobj USkeletalMesh : UObject, IInterface_CollisionDataProvider, IInterface_AssetUserData, INodeMappingProviderInterface
{
  TUniquePtr<FSkeletalMeshRenderData,TDefaultDelete<FSkeletalMeshRenderData> > SkeletalMeshRenderData;
  USkeleton *Skeleton;
  FBoxSphereBounds ImportedBounds;
  FBoxSphereBounds ExtendedBounds;
  FVector PositiveBoundsExtension;
  FVector NegativeBoundsExtension;
  TArray<FSkeletalMaterial,FDefaultAllocator> Materials;
  TArray<FBoneMirrorInfo,FDefaultAllocator> SkelMirrorTable;
  TEnumAsByte<enum EAxis::Type> SkelMirrorAxis;
  TEnumAsByte<enum EAxis::Type> SkelMirrorFlipAxis;
  TArray<FSkeletalMeshLODInfo,FDefaultAllocator> LODInfo;
  FPerPlatformInt MinLod;
  unsigned __int32 bUseFullPrecisionUVs : 1;
  unsigned __int32 bUseHighPrecisionTangentBasis : 1;
  unsigned __int32 bHasBeenSimplified : 1;
  unsigned __int32 bHasVertexColors : 1;
  unsigned __int32 bHasActiveClothingAssets : 1;
  unsigned __int32 bEnablePerPolyCollision : 1;
  UBodySetup *BodySetup;
  UPhysicsAsset *PhysicsAsset;
  UPhysicsAsset *ShadowPhysicsAsset;
  TArray<UNodeMappingContainer *,FDefaultAllocator> NodeMappingData;
  TArray<UMorphTarget *,FDefaultAllocator> MorphTargets;
  FRenderCommandFence ReleaseResourcesFence;
  FReferenceSkeleton RefSkeleton;
  TMap<FName,int,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,int,0> > MorphTargetIndexMap;
  TArray<FMatrix,FDefaultAllocator> RefBasesInvMatrix;
  TArray<FClothingAssetData_Legacy,FDefaultAllocator> ClothingAssets_DEPRECATED;
  TSubclassOf<UAnimInstance> PostProcessAnimBlueprint;
  TArray<UClothingAssetBase *,FDefaultAllocator> MeshClothingAssets;
  FSkeletalMeshSamplingInfo SamplingInfo;
  TArray<UAssetUserData *,FDefaultAllocator> AssetUserData;
  TArray<USkeletalMeshSocket *,FDefaultAllocator> Sockets;
  TArray<FMatrix,FDefaultAllocator> CachedComposedRefPoseMatrices;
};

/* 4083 */
struct __cppobj FRHIShaderResourceView : FRHIResource
{
};

/* 69441 */
struct std::_Func_base<void,FCornerSectionCarResult const &>
{
  std::_Func_base<void,FCornerSectionCarResult const &>Vtbl *vfptr;
};

/* 69489 */
struct __cppobj std::_Arg_types<int const &>
{
};

/* 69492 */
union std::_Func_class<void,int const &>::_Storage
{
  long double _Dummy1;
  char _Dummy2[56];
  std::_Func_base<void,int const &> *_Ptrs[8];
};

/* 69493 */
struct __cppobj std::_Func_class<void,int const &> : std::_Arg_types<int const &>
{
  std::_Func_class<void,int const &>::_Storage _Mystorage;
};

/* 69494 */
struct __cppobj std::function<void __cdecl(int const &)> : std::_Func_class<void,int const &>
{
};

/* 69495 */
struct std::pair<void *,std::function<void __cdecl(int const &)> >
{
  void *first;
  std::function<void __cdecl(int const &)> second;
};

/* 3925 */
struct FLinkerVtbl
{
  void *(__cdecl *__vecDelDtor)(FLinker *this, unsigned int);
};

/* 4036 */
struct FSHA1
{
  unsigned int m_state[5];
  unsigned int m_count[2];
  unsigned int __reserved1[1];
  char m_buffer[64];
  char m_digest[20];
  unsigned int __reserved2[3];
  char m_workspace[64];
  SHA1_WORKSPACE_BLOCK *m_block;
};

/* 4038 */
struct FUntypedBulkDataVtbl
{
  void *(__cdecl *__vecDelDtor)(FUntypedBulkData *this, unsigned int);
  int (__cdecl *GetElementSize)(FUntypedBulkData *this);
  void (__cdecl *SerializeElements)(FUntypedBulkData *this, FArchive *, void *);
  void (__cdecl *SerializeElement)(FUntypedBulkData *this, FArchive *, void *, int);
  bool (__cdecl *RequiresSingleElementSerialization)(FUntypedBulkData *this, FArchive *);
};

/* 4047 */
struct __declspec(align(8)) FFutureState
{
  TFunction<void __cdecl(void)> CompletionCallback;
  FEvent *CompletionEvent;
  bool Complete;
};

/* 4048 */
struct __cppobj __declspec(align(16)) TFutureState<bool> : FFutureState
{
  bool Result;
};

/* 3985 */
struct TSparseArray<TSetElement<int>,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<12,4> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 3986 */
struct __declspec(align(8)) TSet<int,DefaultKeyFuncs<int,0>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<int>,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 4062 */
const struct FTargetDeviceId
{
  FString PlatformName;
  FString DeviceName;
};

/* 4321 */
struct TEnumAsByte<enum EDecompressionType>
{
  char Value;
};

/* 4322 */
struct TEnumAsByte<enum ESoundGroup>
{
  char Value;
};

/* 4323 */
struct TArray<FSubtitleCue,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 4324 */
struct TArray<FLocalizedSubtitle,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 4336 */
struct __cppobj FByteBulkData : FUntypedBulkData
{
};

/* 4340 */
struct TArray<TTuple<FString,FStreamedAudioPlatformData *>,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 4341 */
struct TSortedMap<FString,FStreamedAudioPlatformData *,FDefaultAllocator,TLess<FString> >
{
  TArray<TTuple<FString,FStreamedAudioPlatformData *>,FDefaultAllocator> Pairs;
};

/* 4294 */
const struct __cppobj USoundWave : USoundBase
{
  int CompressionQuality;
  int StreamingPriority;
  _BYTE SampleRateQuality[1];
  TEnumAsByte<enum EDecompressionType> DecompressionType;
  TEnumAsByte<enum ESoundGroup> SoundGroup;
  __int8 bLooping : 1;
  __int8 bStreaming : 1;
  __int8 bProcedural : 1;
  __int8 bIsBeginDestroy : 1;
  __int8 bIsBus : 1;
  __int8 bCanProcessAsync : 1;
  __int8 bDynamicResource : 1;
  __int8 bMature : 1;
  __int8 bManualWordWrap : 1;
  __int8 bSingleLine : 1;
  __int8 bVirtualizeWhenSilent : 1;
  __int8 bIsAmbisonics : 1;
  __int8 bDecompressedFromOgg : 1;
  __int8 bCachedSampleRateFromPlatformSettings : 1;
  __int8 bSampleRateManuallyReset : 1;
  _BYTE ResourceState[1];
  FThreadSafeCounter PrecacheState;
  FThreadSafeCounter NumSoundsActive;
  float CachedSampleRateOverride;
  FString SpokenText;
  float SubtitlePriority;
  float Volume;
  float Pitch;
  int NumChannels;
  int RawPCMDataSize;
  int SampleRate;
  TArray<FSubtitleCue,FDefaultAllocator> Subtitles;
  TArray<FLocalizedSubtitle,FDefaultAllocator> LocalizedSubtitles;
  UCurveTable *Curves;
  UCurveTable *InternalCurves;
  FAsyncTask<FAsyncAudioDecompressWorker> *AudioDecompressor;
  char *CachedRealtimeFirstBuffer;
  char *RawPCMData;
  char *ResourceData;
  FByteBulkData RawData;
  FGuid CompressedDataGuid;
  FFormatContainer CompressedFormatData;
  int ResourceID;
  int ResourceSize;
  int TrackedMemoryUsage;
  FStreamedAudioPlatformData *RunningPlatformData;
  TSortedMap<FString,FStreamedAudioPlatformData *,FDefaultAllocator,TLess<FString> > CookedPlatformData;
};

/* 4342 */
struct TSparseArray<TSetElement<TTuple<enum ESoundwaveSampleRateSettings,float> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<16,4> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 4343 */
struct __declspec(align(8)) TSet<TTuple<enum ESoundwaveSampleRateSettings,float>,TDefaultMapHashableKeyFuncs<enum ESoundwaveSampleRateSettings,float,0>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<TTuple<enum ESoundwaveSampleRateSettings,float> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 4344 */
struct TMapBase<enum ESoundwaveSampleRateSettings,float,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<enum ESoundwaveSampleRateSettings,float,0> >
{
  TSet<TTuple<enum ESoundwaveSampleRateSettings,float>,TDefaultMapHashableKeyFuncs<enum ESoundwaveSampleRateSettings,float,0>,FDefaultSetAllocator> Pairs;
};

/* 4345 */
struct __cppobj TSortableMapBase<enum ESoundwaveSampleRateSettings,float,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<enum ESoundwaveSampleRateSettings,float,0> > : TMapBase<enum ESoundwaveSampleRateSettings,float,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<enum ESoundwaveSampleRateSettings,float,0> >
{
};

/* 4346 */
struct __cppobj TMap<enum ESoundwaveSampleRateSettings,float,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<enum ESoundwaveSampleRateSettings,float,0> > : TSortableMapBase<enum ESoundwaveSampleRateSettings,float,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<enum ESoundwaveSampleRateSettings,float,0> >
{
};

/* 4347 */
const struct __declspec(align(8)) FPlatformAudioCookOverrides
{
  bool bResampleForDevice;
  TMap<enum ESoundwaveSampleRateSettings,float,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<enum ESoundwaveSampleRateSettings,float,0> > PlatformSampleRates;
  float CompressionQualityModifier;
};

/* 4348 */
struct TArray<FTextureLODGroup,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 4349 */
const struct __cppobj UTextureLODSettings : UObject
{
  TArray<FTextureLODGroup,FDefaultAllocator> TextureLODGroups;
};

/* 4350 */
struct TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<384,8> >,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 4351 */
struct TSparseArray<TSetElement<TTuple<FName,FStaticMeshLODGroup> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<384,8> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 4352 */
struct __declspec(align(8)) TSet<TTuple<FName,FStaticMeshLODGroup>,TDefaultMapHashableKeyFuncs<FName,FStaticMeshLODGroup,0>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<TTuple<FName,FStaticMeshLODGroup> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 4353 */
struct TMapBase<FName,FStaticMeshLODGroup,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,FStaticMeshLODGroup,0> >
{
  TSet<TTuple<FName,FStaticMeshLODGroup>,TDefaultMapHashableKeyFuncs<FName,FStaticMeshLODGroup,0>,FDefaultSetAllocator> Pairs;
};

/* 4354 */
struct __cppobj TSortableMapBase<FName,FStaticMeshLODGroup,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,FStaticMeshLODGroup,0> > : TMapBase<FName,FStaticMeshLODGroup,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,FStaticMeshLODGroup,0> >
{
};

/* 4355 */
struct __cppobj TMap<FName,FStaticMeshLODGroup,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,FStaticMeshLODGroup,0> > : TSortableMapBase<FName,FStaticMeshLODGroup,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,FStaticMeshLODGroup,0> >
{
};

/* 4356 */
const struct FStaticMeshLODSettings
{
  TMap<FName,FStaticMeshLODGroup,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,FStaticMeshLODGroup,0> > Groups;
};

/* 4358 */
struct __cppobj TBaseMulticastDelegate<void,TSharedRef<ITargetDevice,1> > : FMulticastDelegateBase<FWeakObjectPtr>
{
};

/* 4359 */
struct __cppobj ITargetPlatform::FOnTargetDeviceDiscovered : TBaseMulticastDelegate<void,TSharedRef<ITargetDevice,1> >
{
};

/* 4360 */
struct __cppobj ITargetPlatform::FOnTargetDeviceLost : TBaseMulticastDelegate<void,TSharedRef<ITargetDevice,1> >
{
};

/* 67431 */
const struct __declspec(align(8)) UDPMessage
{
  void *data;
  int size;
  sockaddr_in srcAddress;
};

/* 67041 */
struct std::_Func_base<void,TimeLineEvent const &>Vtbl
{
  std::_Func_base<void,TimeLineEvent const &> *(__cdecl *_Copy)(std::_Func_base<void,TimeLineEvent const &> *this, void *);
  std::_Func_base<void,TimeLineEvent const &> *(__cdecl *_Move)(std::_Func_base<void,TimeLineEvent const &> *this, void *);
  void (__cdecl *_Do_call)(std::_Func_base<void,TimeLineEvent const &> *this, TimeLineEvent *);
  type_info *(__cdecl *_Target_type)(std::_Func_base<void,TimeLineEvent const &> *this);
  void (__cdecl *_Delete_this)(std::_Func_base<void,TimeLineEvent const &> *this, bool);
  const void *(__cdecl *_Get)(std::_Func_base<void,TimeLineEvent const &> *this);
};

/* 67056 */
struct std::_Func_base<void,OnStepCompleteEvent const &>Vtbl
{
  std::_Func_base<void,OnStepCompleteEvent const &> *(__cdecl *_Copy)(std::_Func_base<void,OnStepCompleteEvent const &> *this, void *);
  std::_Func_base<void,OnStepCompleteEvent const &> *(__cdecl *_Move)(std::_Func_base<void,OnStepCompleteEvent const &> *this, void *);
  void (__cdecl *_Do_call)(std::_Func_base<void,OnStepCompleteEvent const &> *this, OnStepCompleteEvent *);
  type_info *(__cdecl *_Target_type)(std::_Func_base<void,OnStepCompleteEvent const &> *this);
  void (__cdecl *_Delete_this)(std::_Func_base<void,OnStepCompleteEvent const &> *this, bool);
  const void *(__cdecl *_Get)(std::_Func_base<void,OnStepCompleteEvent const &> *this);
};

/* 67075 */
struct std::_Func_base<void,OnControlsProviderChanged const &>Vtbl
{
  std::_Func_base<void,OnControlsProviderChanged const &> *(__cdecl *_Copy)(std::_Func_base<void,OnControlsProviderChanged const &> *this, void *);
  std::_Func_base<void,OnControlsProviderChanged const &> *(__cdecl *_Move)(std::_Func_base<void,OnControlsProviderChanged const &> *this, void *);
  void (__cdecl *_Do_call)(std::_Func_base<void,OnControlsProviderChanged const &> *this, OnControlsProviderChanged *);
  type_info *(__cdecl *_Target_type)(std::_Func_base<void,OnControlsProviderChanged const &> *this);
  void (__cdecl *_Delete_this)(std::_Func_base<void,OnControlsProviderChanged const &> *this, bool);
  const void *(__cdecl *_Get)(std::_Func_base<void,OnControlsProviderChanged const &> *this);
};

/* 67089 */
struct std::_Func_base<void,OnLapCompletedEvent const &>Vtbl
{
  std::_Func_base<void,OnLapCompletedEvent const &> *(__cdecl *_Copy)(std::_Func_base<void,OnLapCompletedEvent const &> *this, void *);
  std::_Func_base<void,OnLapCompletedEvent const &> *(__cdecl *_Move)(std::_Func_base<void,OnLapCompletedEvent const &> *this, void *);
  void (__cdecl *_Do_call)(std::_Func_base<void,OnLapCompletedEvent const &> *this, OnLapCompletedEvent *);
  type_info *(__cdecl *_Target_type)(std::_Func_base<void,OnLapCompletedEvent const &> *this);
  void (__cdecl *_Delete_this)(std::_Func_base<void,OnLapCompletedEvent const &> *this, bool);
  const void *(__cdecl *_Get)(std::_Func_base<void,OnLapCompletedEvent const &> *this);
};

/* 67103 */
struct std::_Func_base<void,OnSectorSplitEvent const &>Vtbl
{
  std::_Func_base<void,OnSectorSplitEvent const &> *(__cdecl *_Copy)(std::_Func_base<void,OnSectorSplitEvent const &> *this, void *);
  std::_Func_base<void,OnSectorSplitEvent const &> *(__cdecl *_Move)(std::_Func_base<void,OnSectorSplitEvent const &> *this, void *);
  void (__cdecl *_Do_call)(std::_Func_base<void,OnSectorSplitEvent const &> *this, OnSectorSplitEvent *);
  type_info *(__cdecl *_Target_type)(std::_Func_base<void,OnSectorSplitEvent const &> *this);
  void (__cdecl *_Delete_this)(std::_Func_base<void,OnSectorSplitEvent const &> *this, bool);
  const void *(__cdecl *_Get)(std::_Func_base<void,OnSectorSplitEvent const &> *this);
};

/* 67116 */
struct std::_Func_base<void,vec3d const &>Vtbl
{
  std::_Func_base<void,vec3d const &> *(__cdecl *_Copy)(std::_Func_base<void,vec3d const &> *this, void *);
  std::_Func_base<void,vec3d const &> *(__cdecl *_Move)(std::_Func_base<void,vec3d const &> *this, void *);
  void (__cdecl *_Do_call)(std::_Func_base<void,vec3d const &> *this, vec3d *);
  type_info *(__cdecl *_Target_type)(std::_Func_base<void,vec3d const &> *this);
  void (__cdecl *_Delete_this)(std::_Func_base<void,vec3d const &> *this, bool);
  const void *(__cdecl *_Get)(std::_Func_base<void,vec3d const &> *this);
};

/* 67130 */
struct std::_Func_base<void,std::pair<int,int> const &>Vtbl
{
  std::_Func_base<void,std::pair<int,int> const &> *(__cdecl *_Copy)(std::_Func_base<void,std::pair<int,int> const &> *this, void *);
  std::_Func_base<void,std::pair<int,int> const &> *(__cdecl *_Move)(std::_Func_base<void,std::pair<int,int> const &> *this, void *);
  void (__cdecl *_Do_call)(std::_Func_base<void,std::pair<int,int> const &> *this, std::pair<int,int> *);
  type_info *(__cdecl *_Target_type)(std::_Func_base<void,std::pair<int,int> const &> *this);
  void (__cdecl *_Delete_this)(std::_Func_base<void,std::pair<int,int> const &> *this, bool);
  const void *(__cdecl *_Get)(std::_Func_base<void,std::pair<int,int> const &> *this);
};

/* 67147 */
struct std::_Func_base<void,OnCollisionEvent const &>Vtbl
{
  std::_Func_base<void,OnCollisionEvent const &> *(__cdecl *_Copy)(std::_Func_base<void,OnCollisionEvent const &> *this, void *);
  std::_Func_base<void,OnCollisionEvent const &> *(__cdecl *_Move)(std::_Func_base<void,OnCollisionEvent const &> *this, void *);
  void (__cdecl *_Do_call)(std::_Func_base<void,OnCollisionEvent const &> *this, OnCollisionEvent *);
  type_info *(__cdecl *_Target_type)(std::_Func_base<void,OnCollisionEvent const &> *this);
  void (__cdecl *_Delete_this)(std::_Func_base<void,OnCollisionEvent const &> *this, bool);
  const void *(__cdecl *_Get)(std::_Func_base<void,OnCollisionEvent const &> *this);
};

/* 67704 */
struct std::_Func_base<void,OnGearRequestEvent const &>Vtbl
{
  std::_Func_base<void,OnGearRequestEvent const &> *(__cdecl *_Copy)(std::_Func_base<void,OnGearRequestEvent const &> *this, void *);
  std::_Func_base<void,OnGearRequestEvent const &> *(__cdecl *_Move)(std::_Func_base<void,OnGearRequestEvent const &> *this, void *);
  void (__cdecl *_Do_call)(std::_Func_base<void,OnGearRequestEvent const &> *this, OnGearRequestEvent *);
  type_info *(__cdecl *_Target_type)(std::_Func_base<void,OnGearRequestEvent const &> *this);
  void (__cdecl *_Delete_this)(std::_Func_base<void,OnGearRequestEvent const &> *this, bool);
  const void *(__cdecl *_Get)(std::_Func_base<void,OnGearRequestEvent const &> *this);
};

/* 67480 */
struct RayCastHit
{
  vec3d pos;
  vec3d normal;
  ICollisionObject *collisionObject;
  bool hasContact;
  int triangleIndex;
  kContactGeom contact;
  bool hasContactWithSpecialCategory;
  long double depth;
};

/* 67072 */
const struct VibrationDef
{
  float curbs;
  float gforce;
  float engine;
  float abs;
};

/* 67585 */
struct GridElement
{
  std::vector<unsigned int,std::allocator<unsigned int> > closestIndices;
};

/* 67523 */
struct __cppobj IDirectInputEffectDriver : IUnknown
{
};

/* 8282 */
struct HICON__
{
  int unused;
};

/* 4384 */
struct __cppobj UPackageMap : UObject
{
  bool bSuppressLogs;
  bool bShouldTrackUnmappedGuids;
  TSet<FNetworkGUID,DefaultKeyFuncs<FNetworkGUID,0>,FDefaultSetAllocator> TrackedUnmappedNetGuids;
  TSet<FNetworkGUID,DefaultKeyFuncs<FNetworkGUID,0>,FDefaultSetAllocator> TrackedMappedDynamicNetGuids;
  FString DebugContextString;
};

/* 5619 */
struct __cppobj UReplicationConnectionDriver : UObject
{
};

/* 4074 */
struct __cppobj FRHIVertexBuffer : FRHIResource
{
  unsigned int Size;
  unsigned int Usage;
};

/* 4079 */
struct FStaticMeshVertexDataInterface
{
  FStaticMeshVertexDataInterfaceVtbl *vfptr;
};

/* 4080 */
struct FResourceArrayInterface
{
  FResourceArrayInterfaceVtbl *vfptr;
};

/* 4086 */
struct TAlignedHeapAllocator<0>::ForAnyElementType
{
  FScriptContainerElement *Data;
};

/* 4087 */
struct TArray<FPositionVertex,TAlignedHeapAllocator<0> >
{
  TAlignedHeapAllocator<0>::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 4088 */
struct __cppobj __declspec(align(8)) TResourceArray<FPositionVertex,0> : FResourceArrayInterface, TArray<FPositionVertex,TAlignedHeapAllocator<0> >
{
  bool bNeedsCPUAccess;
};

/* 4089 */
struct __cppobj TStaticMeshVertexData<FPositionVertex> : FStaticMeshVertexDataInterface
{
  TResourceArray<FPositionVertex,0> Data;
};

/* 4090 */
struct __cppobj FPositionVertexData : TStaticMeshVertexData<FPositionVertex>
{
};

/* 4092 */
struct TArray<FColor,TAlignedHeapAllocator<0> >
{
  TAlignedHeapAllocator<0>::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 4093 */
struct __cppobj __declspec(align(8)) TResourceArray<FColor,0> : FResourceArrayInterface, TArray<FColor,TAlignedHeapAllocator<0> >
{
  bool bNeedsCPUAccess;
};

/* 4094 */
struct __cppobj TStaticMeshVertexData<FColor> : FStaticMeshVertexDataInterface
{
  TResourceArray<FColor,0> Data;
};

/* 4095 */
struct __cppobj FColorVertexData : TStaticMeshVertexData<FColor>
{
};

/* 5663 */
struct __cppobj UBillboardComponent : UPrimitiveComponent
{
  UTexture2D *Sprite;
  unsigned __int32 bIsScreenSizeScaled : 1;
  float ScreenSize;
  float U;
  float UL;
  float V;
  float VL;
};

/* 5667 */
struct TArray<TVolumeLightingSample<3>,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 5668 */
struct __declspec(align(8)) TOctree<TVolumeLightingSample<3>,FLightVolumeOctreeSemantics>::FNode
{
  TArray<TVolumeLightingSample<3>,FDefaultAllocator> Elements;
  TOctree<TVolumeLightingSample<3>,FLightVolumeOctreeSemantics>::FNode *Parent;
  TOctree<TVolumeLightingSample<3>,FLightVolumeOctreeSemantics>::FNode *Children[8];
  unsigned __int32 InclusiveNumElements : 31;
  unsigned __int32 bIsLeaf : 1;
};

/* 5669 */
struct FBoxCenterAndExtent
{
  FVector4 Center;
  FVector4 Extent;
};

/* 5670 */
struct FOctreeNodeContext
{
  FBoxCenterAndExtent Bounds;
  float ChildExtent;
  float ChildCenterOffset;
  unsigned int InCullBits;
  unsigned int OutCullBits;
};

/* 5671 */
struct TOctree<TVolumeLightingSample<3>,FLightVolumeOctreeSemantics>
{
  TOctree<TVolumeLightingSample<3>,FLightVolumeOctreeSemantics>::FNode RootNode;
  FOctreeNodeContext RootNodeContext;
  float MinLeafExtent;
  unsigned __int64 TotalSizeBytes;
};

/* 5672 */
const struct FPrecomputedLightVolumeData
{
  bool bInitialized;
  FBox Bounds;
  TOctree<TVolumeLightingSample<3>,FLightVolumeOctreeSemantics> HighQualityLightmapOctree;
  TOctree<TVolumeLightingSample<3>,FLightVolumeOctreeSemantics> LowQualityLightmapOctree;
};

/* 5675 */
struct TRefCountPtr<FRHITexture3D>
{
  FRHITexture3D *Reference;
};

/* 5676 */
struct __cppobj FVolumetricLightmapDataLayer : FResourceBulkDataInterface
{
  TArray<unsigned char,FDefaultAllocator> Data;
  int DataSize;
  EPixelFormat Format;
  TRefCountPtr<FRHITexture3D> Texture;
};

/* 5677 */
struct FVolumetricLightmapBrickData
{
  FVolumetricLightmapDataLayer AmbientVector;
  FVolumetricLightmapDataLayer SHCoefficients[6];
  FVolumetricLightmapDataLayer SkyBentNormal;
  FVolumetricLightmapDataLayer DirectionalLightShadowing;
  FVolumetricLightmapDataLayer LQLightColor;
  FVolumetricLightmapDataLayer LQLightDirection;
};

/* 5678 */
struct __cppobj FPrecomputedVolumetricLightmapData : FRenderResource
{
  FBox Bounds;
  FIntVector IndirectionTextureDimensions;
  FVolumetricLightmapDataLayer IndirectionTexture;
  int BrickSize;
  FIntVector BrickDataDimensions;
  FVolumetricLightmapBrickData BrickData;
};

/* 5718 */
struct __cppobj UNavigationSystemConfig : UObject
{
  FSoftClassPath NavigationSystemClass;
};

/* 5728 */
struct __cppobj UReverbEffect : UObject
{
  float Density;
  float Diffusion;
  float Gain;
  float GainHF;
  float DecayTime;
  float DecayHFRatio;
  float ReflectionsGain;
  float ReflectionsDelay;
  float LateGain;
  float LateDelay;
  float AirAbsorptionGainHF;
  float RoomRolloffFactor;
};

/* 5729 */
struct TArray<FSoundEffectBase *,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 5730 */
struct __cppobj __declspec(align(8)) USoundEffectPreset : UObject
{
  TArray<FSoundEffectBase *,FDefaultAllocator> Instances;
  bool bInitialized;
};

/* 5731 */
struct __cppobj USoundEffectSubmixPreset : USoundEffectPreset
{
};

/* 5734 */
struct FAudioEQEffect
{
  long double RootTime;
  float FrequencyCenter0;
  float Gain0;
  float Bandwidth0;
  float FrequencyCenter1;
  float Gain1;
  float Bandwidth1;
  float FrequencyCenter2;
  float Gain2;
  float Bandwidth2;
  float FrequencyCenter3;
  float Gain3;
  float Bandwidth3;
};

/* 5735 */
struct TArray<FSoundClassAdjuster,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 5736 */
struct __cppobj USoundMix : UObject
{
  unsigned __int32 bApplyEQ : 1;
  float EQPriority;
  FAudioEQEffect EQSettings;
  TArray<FSoundClassAdjuster,FDefaultAllocator> SoundClassEffects;
  float InitialDelay;
  float FadeInTime;
  float Duration;
  float FadeOutTime;
};

/* 5737 */
struct __cppobj UBookMark : UObject
{
  FVector Location;
  FRotator Rotation;
  TArray<FString,FDefaultAllocator> HiddenLevels;
};

/* 5497 */
struct PacketHandlerVtbl
{
  void *(__cdecl *__vecDelDtor)(PacketHandler *this, unsigned int);
};

/* 5508 */
struct __cppobj FEncryptionComponent : HandlerComponent
{
};

/* 5511 */
struct TQueue<BufferedPacket *,1>::TNode
{
  TQueue<BufferedPacket *,1>::TNode *volatile NextNode;
  BufferedPacket *Item;
};

/* 5514 */
struct __cppobj ReliabilityHandlerComponent : HandlerComponent
{
  TArray<BufferedPacket *,FDefaultAllocator> BufferedPackets;
  unsigned int LocalPacketID;
  unsigned int LocalPacketIDACKED;
  unsigned int RemotePacketID;
  unsigned int RemotePacketIDACKED;
  float ResendResolutionTime;
  float LastResendTime;
};

/* 5507 */
struct HandlerComponentVtbl
{
  void *(__cdecl *__vecDelDtor)(HandlerComponent *this, unsigned int);
  __declspec(align(16)) bool (__cdecl *IsValid)(HandlerComponent *this);
  void (__cdecl *Incoming)(HandlerComponent *this, FBitReader *);
  void (__cdecl *Outgoing)(HandlerComponent *this, FBitWriter *);
  void (__cdecl *IncomingConnectionless)(HandlerComponent *this, FString, FBitReader *);
  void (__cdecl *OutgoingConnectionless)(HandlerComponent *this, FString, FBitWriter *);
  bool (__cdecl *CanReadUnaligned)(HandlerComponent *this);
  void (__cdecl *Initialize)(HandlerComponent *this);
  void (__cdecl *NotifyHandshakeBegin)(HandlerComponent *this);
  void (__cdecl *Tick)(HandlerComponent *this, float);
  void (__cdecl *SetActive)(HandlerComponent *this, bool);
  int (__cdecl *GetReservedPacketBits)(HandlerComponent *this);
  void (__cdecl *SetAnalyticsProvider)(HandlerComponent *this, TSharedPtr<IAnalyticsProvider,0>);
};

/* 5504 */
union $1356628F99A863AD9AF8316EBD535F5A
{
  void (__cdecl *~IAnalyticsProvider)(IAnalyticsProvider *this);
  void *(__cdecl *__vecDelDtor)(IAnalyticsProvider *this, unsigned int);
};

/* 5505 */
struct IAnalyticsProviderVtbl
{
  bool (__cdecl *StartSession)(IAnalyticsProvider *this, TArray<FAnalyticsEventAttribute,FDefaultAllocator> *);
  _BYTE gap8[24];
  void (__cdecl *FlushEvents)(IAnalyticsProvider *this);
  void (__cdecl *SetUserID)(IAnalyticsProvider *this, FString *);
  FString *(__cdecl *GetUserID)(IAnalyticsProvider *this, FString *result);
  void (__cdecl *SetBuildInfo)(IAnalyticsProvider *this, FString *);
  void (__cdecl *SetGender)(IAnalyticsProvider *this, FString *);
  void (__cdecl *SetLocation)(IAnalyticsProvider *this, FString *);
  void (__cdecl *SetAge)(IAnalyticsProvider *this, const int);
  void (__cdecl *RecordEvent)(IAnalyticsProvider *this, FString *, TArray<FAnalyticsEventAttribute,FDefaultAllocator> *);
  void (__cdecl *RecordItemPurchase)(IAnalyticsProvider *this, FString *, int, TArray<FAnalyticsEventAttribute,FDefaultAllocator> *);
  void (__cdecl *RecordItemPurchase)(IAnalyticsProvider *this, FString *, FString *, int, int);
  void (__cdecl *RecordCurrencyPurchase)(IAnalyticsProvider *this, FString *, int);
  void (__cdecl *RecordCurrencyPurchase)(IAnalyticsProvider *this, FString *, int, TArray<FAnalyticsEventAttribute,FDefaultAllocator> *);
  void (__cdecl *RecordCurrencyPurchase)(IAnalyticsProvider *this, FString *, int, FString *, float, FString *);
  void (__cdecl *RecordCurrencyGiven)(IAnalyticsProvider *this, FString *, int, TArray<FAnalyticsEventAttribute,FDefaultAllocator> *);
  void (__cdecl *RecordCurrencyGiven)(IAnalyticsProvider *this, FString *, int);
  void (__cdecl *RecordError)(IAnalyticsProvider *this, FString *);
  void (__cdecl *RecordError)(IAnalyticsProvider *this, FString *, TArray<FAnalyticsEventAttribute,FDefaultAllocator> *);
  void (__cdecl *RecordProgress)(IAnalyticsProvider *this, FString *, FString *, TArray<FAnalyticsEventAttribute,FDefaultAllocator> *);
  void (__cdecl *RecordProgress)(IAnalyticsProvider *this, FString *, FString *);
  void (__cdecl *RecordProgress)(IAnalyticsProvider *this, FString *, TArray<FString,FDefaultAllocator> *, TArray<FAnalyticsEventAttribute,FDefaultAllocator> *);
  $1356628F99A863AD9AF8316EBD535F5A ___u21;
};

/* 3934 */
struct __cppobj TTypeCompatibleBytes<FStructuredArchive::FRecord> : TAlignedBytes<8,8>
{
};

/* 3935 */
struct __declspec(align(8)) TOptional<FStructuredArchive::FRecord>
{
  TTypeCompatibleBytes<FStructuredArchive::FRecord> Value;
  bool bIsSet;
};

/* 3936 */
struct TSparseArray<TSetElement<TTuple<FName,FPackageIndex> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<24,8> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 3937 */
struct __declspec(align(8)) TSet<TTuple<FName,FPackageIndex>,TDefaultMapHashableKeyFuncs<FName,FPackageIndex,0>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<TTuple<FName,FPackageIndex> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 3938 */
struct TMapBase<FName,FPackageIndex,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,FPackageIndex,0> >
{
  TSet<TTuple<FName,FPackageIndex>,TDefaultMapHashableKeyFuncs<FName,FPackageIndex,0>,FDefaultSetAllocator> Pairs;
};

/* 3939 */
struct __cppobj TSortableMapBase<FName,FPackageIndex,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,FPackageIndex,0> > : TMapBase<FName,FPackageIndex,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,FPackageIndex,0> >
{
};

/* 3940 */
struct __cppobj TMap<FName,FPackageIndex,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,FPackageIndex,0> > : TSortableMapBase<FName,FPackageIndex,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,FPackageIndex,0> >
{
};

/* 4014 */
struct TArray<FPackageIndex,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 4015 */
struct TArray<TFunction<bool __cdecl(double)>,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 4016 */
struct TArray<FLinkerPlaceholderBase *,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 4017 */
struct TSparseArray<TSetElement<TTuple<FName,FLinkerPlaceholderBase *> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<24,8> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 4018 */
struct __declspec(align(8)) TSet<TTuple<FName,FLinkerPlaceholderBase *>,TDefaultMapHashableKeyFuncs<FName,FLinkerPlaceholderBase *,0>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<TTuple<FName,FLinkerPlaceholderBase *> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 4019 */
struct TMapBase<FName,FLinkerPlaceholderBase *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,FLinkerPlaceholderBase *,0> >
{
  TSet<TTuple<FName,FLinkerPlaceholderBase *>,TDefaultMapHashableKeyFuncs<FName,FLinkerPlaceholderBase *,0>,FDefaultSetAllocator> Pairs;
};

/* 4020 */
struct __cppobj TSortableMapBase<FName,FLinkerPlaceholderBase *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,FLinkerPlaceholderBase *,0> > : TMapBase<FName,FLinkerPlaceholderBase *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,FLinkerPlaceholderBase *,0> >
{
};

/* 4021 */
struct __cppobj TMap<FName,FLinkerPlaceholderBase *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,FLinkerPlaceholderBase *,0> > : TSortableMapBase<FName,FLinkerPlaceholderBase *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,FLinkerPlaceholderBase *,0> >
{
};

/* 3950 */
struct __cppobj FLinkerLoad : FLinker, FArchiveUObject
{
  unsigned int LoadFlags;
  bool bHaveImportsBeenVerified;
  bool bDynamicClassLinker;
  UObject *TemplateForGetArchetypeFromLoader;
  bool bForceSimpleIndexToObject;
  bool bLockoutLegacyOperations;
  bool bLoaderIsFArchiveAsync2;
  FStructuredArchive *StructuredArchive;
  FBinaryArchiveFormatter *StructuredArchiveFormatter;
  TOptional<FStructuredArchive::FRecord> StructuredArchiveRootRecord;
  TMap<FName,FPackageIndex,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,FPackageIndex,0> > ObjectNameToPackageIndex;
  FArchive *Loader;
  FAsyncPackage *AsyncRoot;
  int ExportHash[256];
  TArray<FPackageIndex,FDefaultAllocator> PreloadDependencies;
  TArray<TFunction<bool __cdecl(double)>,FDefaultAllocator> ExternalReadDependencies;
  int NameMapIndex;
  int GatherableTextDataMapIndex;
  int ImportMapIndex;
  int ExportMapIndex;
  int DependsMapIndex;
  int ExportHashIndex;
  bool bHasSerializedPackageFileSummary;
  bool bHasSerializedPreloadDependencies;
  bool bHasFixedUpImportMap;
  bool bHasFoundExistingExports;
  bool bHasFinishedInitialization;
  bool bIsGatheringDependencies;
  bool bTimeLimitExceeded;
  bool bUseTimeLimit;
  bool bUseFullTimeLimit;
  int IsTimeLimitExceededCallCount;
  float TimeLimit;
  long double TickStartTime;
  bool bFixupExportMapDone;
  int OwnerThread;
  bool bForceBlueprintFinalization;
  int DeferredCDOIndex;
  TArray<FLinkerPlaceholderBase *,FDefaultAllocator> ResolvingPlaceholderStack;
  TMap<FName,FLinkerPlaceholderBase *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,FLinkerPlaceholderBase *,0> > ImportPlaceholders;
};

/* 4026 */
struct __declspec(align(8)) FWorldTileLayer
{
  FString Name;
  int Reserved0;
  FIntPoint Reserved1;
  int StreamingDistance;
  bool DistanceStreamingEnabled;
};

/* 4027 */
struct TArray<FWorldTileLODInfo,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 4028 */
struct __declspec(align(8)) FWorldTileInfo
{
  FIntVector Position;
  FIntVector AbsolutePosition;
  FBox Bounds;
  FWorldTileLayer Layer;
  bool bHideInTileView;
  FString ParentTilePackageName;
  TArray<FWorldTileLODInfo,FDefaultAllocator> LODList;
  int ZOrder;
};

/* 4158 */
struct __cppobj physx::PxJoint : physx::PxBase
{
  void *userData;
};

/* 4159 */
struct __cppobj physx::PxD6Joint : physx::PxJoint
{
};

/* 4130 */
struct __cppobj UDEPRECATED_PhysicalMaterialPropertyBase : UObject
{
};

/* 4137 */
struct __cppobj physx::PxMaterial : physx::PxBase
{
  void *userData;
};

/* 4134 */
union $07B715D2D8BBA3C01A44EED6DB0046B6
{
  void (__cdecl *~PxBase)(physx::PxBase *this);
  void *(__cdecl *__vecDelDtor)(physx::PxBase *this, unsigned int);
};

/* 4135 */
struct physx::PxBaseVtbl
{
  void (__cdecl *release)(physx::PxBase *this);
  const char *(__cdecl *getConcreteTypeName)(physx::PxBase *this);
  bool (__cdecl *isReleasable)(physx::PxBase *this);
  $07B715D2D8BBA3C01A44EED6DB0046B6 ___u3;
  bool (__cdecl *isKindOf)(physx::PxBase *this, const char *);
};

/* 6510 */
struct FPrimitiveSceneProxyVtbl
{
  void *(__cdecl *__vecDelDtor)(FPrimitiveSceneProxy *this, unsigned int);
  _BYTE gap8[40];
  void (__cdecl *GetShadowShapes)(FPrimitiveSceneProxy *this, TArray<FCapsuleShape,FDefaultAllocator> *);
  bool (__cdecl *CollectOccluderElements)(FPrimitiveSceneProxy *this, FOccluderElementsCollector *);
  void (__cdecl *GetDynamicMeshElements)(FPrimitiveSceneProxy *this, TArray<FSceneView const *,FDefaultAllocator> *, FSceneViewFamily *, unsigned int, FMeshElementCollector *);
  TArray<FBoxSphereBounds,FDefaultAllocator> *(__cdecl *GetOcclusionQueries)(FPrimitiveSceneProxy *this, FSceneView *);
  void (__cdecl *AcceptOcclusionResults)(FPrimitiveSceneProxy *this, FSceneView *, TArray<bool,FDefaultAllocator> *, int, int);
  FPrimitiveViewRelevance *(__cdecl *GetViewRelevance)(FPrimitiveSceneProxy *this, FPrimitiveViewRelevance *result, FSceneView *);
  void (__cdecl *GatherSimpleLights)(FPrimitiveSceneProxy *this, FSceneViewFamily *, FSimpleLightArray *);
  void (__cdecl *GetLightRelevance)(FPrimitiveSceneProxy *this, FLightSceneProxy *, bool *, bool *, bool *, bool *);
  void (__cdecl *GetDistancefieldAtlasData)(FPrimitiveSceneProxy *this, FBox *, FVector2D *, FIntVector *, FIntVector *, bool *, bool *, float *, TArray<FMatrix,FDefaultAllocator> *);
  void (__cdecl *GetDistanceFieldInstanceInfo)(FPrimitiveSceneProxy *this, int *, float *);
  bool (__cdecl *HeightfieldHasPendingStreaming)(FPrimitiveSceneProxy *this);
  void (__cdecl *GetHeightfieldRepresentation)(FPrimitiveSceneProxy *this, UTexture2D **, UTexture2D **, FHeightfieldComponentDescription *);
  void (__cdecl *CreateRenderThreadResources)(FPrimitiveSceneProxy *this);
  void (__cdecl *OnDetachLight)(FPrimitiveSceneProxy *this, FLightSceneInfo *);
  void (__cdecl *OnTransformChanged)(FPrimitiveSceneProxy *this);
  void (__cdecl *OnLevelAddedToWorld)(FPrimitiveSceneProxy *this);
  bool (__cdecl *CanBeOccluded)(FPrimitiveSceneProxy *this);
  bool (__cdecl *HasSubprimitiveOcclusionQueries)(FPrimitiveSceneProxy *this);
  bool (__cdecl *ShowInBSPSplitViewmode)(FPrimitiveSceneProxy *this);
  char (__cdecl *GetStaticDepthPriorityGroup)(FPrimitiveSceneProxy *this);
  unsigned int (__cdecl *GetMemoryFootprint)(FPrimitiveSceneProxy *this);
  bool (__cdecl *IsDetailMesh)(FPrimitiveSceneProxy *this);
  bool (__cdecl *HasCustomOcclusionBounds)(FPrimitiveSceneProxy *this);
  FBoxSphereBounds *(__cdecl *GetCustomOcclusionBounds)(FPrimitiveSceneProxy *this, FBoxSphereBounds *result);
  bool (__cdecl *HasDistanceFieldRepresentation)(FPrimitiveSceneProxy *this);
  bool (__cdecl *HasDynamicIndirectShadowCasterRepresentation)(FPrimitiveSceneProxy *this);
  void (__cdecl *ApplyWorldOffset)(FPrimitiveSceneProxy *this, FVector);
  void (__cdecl *ApplyLateUpdateTransform)(FPrimitiveSceneProxy *this, FMatrix *);
  void (__cdecl *GetLCIs)(FPrimitiveSceneProxy *this, TArray<FLightCacheInterface *,TInlineAllocator<8,FDefaultAllocator> > *);
  int (__cdecl *GetLightMapResolution)(FPrimitiveSceneProxy *this);
  void *(__cdecl *InitViewCustomData)(FPrimitiveSceneProxy *this, FSceneView *, float, FMemStackBase *, bool, FLODMask *, float);
  void (__cdecl *PostInitViewCustomData)(FPrimitiveSceneProxy *this, FSceneView *, void *);
  bool (__cdecl *IsUsingCustomLODRules)(FPrimitiveSceneProxy *this);
  FLODMask *(__cdecl *GetCustomLOD)(FPrimitiveSceneProxy *this, FLODMask *result, FSceneView *, float, int, float *);
  bool (__cdecl *IsUsingCustomWholeSceneShadowLODRules)(FPrimitiveSceneProxy *this);
  FLODMask *(__cdecl *GetCustomWholeSceneShadowLOD)(FPrimitiveSceneProxy *this, FLODMask *result, FSceneView *, float, int, FLODMask *, float, float, char, bool);
};

/* 6130 */
struct TIndirectArray<FStaticMesh,FDefaultAllocator>
{
  TArray<void *,FDefaultAllocator> Array;
};

/* 6131 */
struct __declspec(align(8)) FOctreeElementId
{
  const void *Node;
  int ElementIndex;
};

/* 4961 */
struct FHitProxyId
{
  int Index;
};

/* 6490 */
struct __cppobj __declspec(align(8)) FPrimitiveSceneInfo : FDeferredCleanupInterface
{
  FPrimitiveSceneProxy *Proxy;
  FPrimitiveComponentId PrimitiveComponentId;
  float *ComponentLastRenderTime;
  float *ComponentLastRenderTimeOnScreen;
  FPrimitiveComponentId LightingAttachmentRoot;
  FPrimitiveComponentId LODParentComponentId;
  TIndirectArray<FStaticMesh,FDefaultAllocator> StaticMeshes;
  FOctreeElementId OctreeId;
  FIndirectLightingCacheAllocation *IndirectLightingCacheAllocation;
  TRefCountPtr<FRHIUniformBuffer> IndirectLightingCacheUniformBuffer;
  FPlanarReflectionSceneProxy *CachedPlanarReflectionProxy;
  FReflectionCaptureProxy *CachedReflectionCaptureProxy;
  TArray<int,TInlineAllocator<1,FDefaultAllocator> > DistanceFieldInstanceIndices;
  unsigned __int32 bNeedsCachedReflectionCaptureUpdate : 1;
  FReflectionCaptureProxy *CachedReflectionCaptureProxies[3];
  TArray<TRefCountPtr<HHitProxy>,FDefaultAllocator> HitProxies;
  HHitProxy *DefaultDynamicHitProxy;
  FHitProxyId DefaultDynamicHitProxyId;
  FLightPrimitiveInteraction *LightList;
  float LastRenderTime;
  float LastVisibilityChangeTime;
  FScene *Scene;
  int NumMobileMovablePointLights;
  __int8 bIsUsingCustomLODRules : 1;
  __int8 bIsUsingCustomWholeSceneShadowLODRules : 1;
  int PackedIndex;
  UPrimitiveComponent *ComponentForDebuggingOnly;
  bool bNeedsStaticMeshUpdate;
  bool bNeedsUniformBufferUpdate;
  bool bPrecomputedLightingBufferDirty;
  bool bPrecomputedLightingBufferAssignedToProxyLCIs;
};

/* 4234 */
struct TEnumAsByte<enum EAudioOutputTarget::Type>
{
  char Value;
};

/* 4235 */
struct FSoundClassProperties
{
  float Volume;
  float Pitch;
  float StereoBleed;
  float LFEBleed;
  float VoiceCenterChannelVolume;
  float RadioFilterVolume;
  float RadioFilterVolumeThreshold;
  unsigned __int32 bApplyEffects : 1;
  unsigned __int32 bAlwaysPlay : 1;
  unsigned __int32 bIsUISound : 1;
  unsigned __int32 bIsMusic : 1;
  unsigned __int32 bReverb : 1;
  float Default2DReverbSendAmount;
  unsigned __int32 bCenterChannelOnly : 1;
  unsigned __int32 bApplyAmbientVolumes : 1;
  TEnumAsByte<enum EAudioOutputTarget::Type> OutputTarget;
};

/* 4236 */
struct TArray<USoundClass *,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 4237 */
struct TArray<FPassiveSoundMixModifier,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 4238 */
struct __cppobj USoundClass : UObject
{
  FSoundClassProperties Properties;
  TArray<USoundClass *,FDefaultAllocator> ChildClasses;
  TArray<FPassiveSoundMixModifier,FDefaultAllocator> PassiveSoundMixModifiers;
  USoundClass *ParentClass;
};

/* 4241 */
struct __cppobj USoundConcurrency : UObject
{
  FSoundConcurrencySettings Concurrency;
};

/* 4250 */
struct TEnumAsByte<enum EAttenuationShape::Type>
{
  char Value;
};

/* 4274 */
struct FRuntimeFloatCurve
{
  FRichCurve EditorCurveData;
  UCurveFloat *ExternalCurve;
};

/* 4242 */
struct FBaseAttenuationSettings
{
  FBaseAttenuationSettingsVtbl *vfptr;
  _BYTE DistanceAlgorithm[1];
  TEnumAsByte<enum EAttenuationShape::Type> AttenuationShape;
  float dBAttenuationAtMax;
  FVector AttenuationShapeExtents;
  float ConeOffset;
  float FalloffDistance;
  FRuntimeFloatCurve CustomAttenuationCurve;
};

/* 4275 */
struct TEnumAsByte<enum ESoundSpatializationAlgorithm>
{
  char Value;
};

/* 4276 */
struct TArray<USpatializationPluginSourceSettingsBase *,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 4277 */
struct TArray<UOcclusionPluginSourceSettingsBase *,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 4278 */
struct TArray<UReverbPluginSourceSettingsBase *,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 4279 */
struct FSoundAttenuationPluginSettings
{
  TArray<USpatializationPluginSourceSettingsBase *,FDefaultAllocator> SpatializationPluginSettingsArray;
  TArray<UOcclusionPluginSourceSettingsBase *,FDefaultAllocator> OcclusionPluginSettingsArray;
  TArray<UReverbPluginSourceSettingsBase *,FDefaultAllocator> ReverbPluginSettingsArray;
};

/* 4280 */
struct __cppobj FSoundAttenuationSettings : FBaseAttenuationSettings
{
  __int8 bAttenuate : 1;
  __int8 bSpatialize : 1;
  __int8 bAttenuateWithLPF : 1;
  __int8 bEnableListenerFocus : 1;
  __int8 bEnableFocusInterpolation : 1;
  __int8 bEnableOcclusion : 1;
  __int8 bUseComplexCollisionForOcclusion : 1;
  __int8 bEnableReverbSend : 1;
  __int8 bApplyNormalizationToStereoSounds : 1;
  __int8 bEnableLogFrequencyScaling : 1;
  TEnumAsByte<enum ESoundSpatializationAlgorithm> SpatializationAlgorithm;
  _BYTE AbsorptionMethod[1];
  TEnumAsByte<enum ECollisionChannel> OcclusionTraceChannel;
  _BYTE ReverbSendMethod[1];
  float OmniRadius;
  float StereoSpread;
  float LPFRadiusMin;
  float LPFRadiusMax;
  FRuntimeFloatCurve CustomLowpassAirAbsorptionCurve;
  FRuntimeFloatCurve CustomHighpassAirAbsorptionCurve;
  float LPFFrequencyAtMin;
  float LPFFrequencyAtMax;
  float HPFFrequencyAtMin;
  float HPFFrequencyAtMax;
  float FocusAzimuth;
  float NonFocusAzimuth;
  float FocusDistanceScale;
  float NonFocusDistanceScale;
  float FocusPriorityScale;
  float NonFocusPriorityScale;
  float FocusVolumeAttenuation;
  float NonFocusVolumeAttenuation;
  float FocusAttackInterpSpeed;
  float FocusReleaseInterpSpeed;
  float OcclusionLowPassFilterFrequency;
  float OcclusionVolumeAttenuation;
  float OcclusionInterpolationTime;
  float ReverbWetLevelMin;
  float ReverbWetLevelMax;
  float ReverbDistanceMin;
  float ReverbDistanceMax;
  float ManualReverbSendLevel;
  FRuntimeFloatCurve CustomReverbSendCurve;
  FSoundAttenuationPluginSettings PluginSettings;
};

/* 4281 */
struct __cppobj USoundAttenuation : UObject
{
  FSoundAttenuationSettings Attenuation;
};

/* 4282 */
struct TArray<USoundSubmix *,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 4284 */
struct TArray<USoundEffectSubmixPreset *,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 4288 */
struct __cppobj TBaseDynamicMulticastDelegate<FWeakObjectPtr,void,USoundWave const *> : TMulticastScriptDelegate<FWeakObjectPtr>
{
};

/* 4289 */
struct __cppobj FOnSubmixRecordedFileDone : TBaseDynamicMulticastDelegate<FWeakObjectPtr,void,USoundWave const *>
{
};

/* 4290 */
struct __cppobj TDefaultDelete<Audio::FAudioRecordingData>
{
};

/* 4315 */
struct __cppobj TUniquePtr<Audio::FAudioRecordingData,TDefaultDelete<Audio::FAudioRecordingData> > : TDefaultDelete<Audio::FAudioRecordingData>
{
  Audio::FAudioRecordingData *Ptr;
};

/* 4283 */
struct __cppobj USoundSubmix : UObject
{
  TArray<USoundSubmix *,FDefaultAllocator> ChildSubmixes;
  USoundSubmix *ParentSubmix;
  _BYTE ChannelFormat[1];
  TArray<USoundEffectSubmixPreset *,FDefaultAllocator> SubmixEffectChain;
  UAmbisonicsSubmixSettingsBase *AmbisonicsPluginSettings;
  FOnSubmixRecordedFileDone OnSubmixRecordedFileDone;
  TUniquePtr<Audio::FAudioRecordingData,TDefaultDelete<Audio::FAudioRecordingData> > RecordingData;
};

/* 4317 */
struct TArray<FSourceEffectChainEntry,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 4318 */
struct __cppobj __declspec(align(8)) USoundEffectSourcePresetChain : UObject
{
  TArray<FSourceEffectChainEntry,FDefaultAllocator> Chain;
  unsigned __int32 bPlayEffectChainTails : 1;
};

/* 903 */
typedef _PaddingMode ENetworkReplayError::Type;

/* 123 */
enum EBrowseReturnVal::Type
{
  Success = 0x0,
  Failure = 0x1,
  Pending = 0x2,
};

/* 940 */
typedef EBrowseReturnVal::Type EStreamingOperationResult;

/* 5789 */
struct INetworkReplayStreamerVtbl
{
  void *(__cdecl *__vecDelDtor)(INetworkReplayStreamer *this, unsigned int);
  _BYTE gap8[56];
  void (__cdecl *FlushCheckpoint)(INetworkReplayStreamer *this, const unsigned int);
  void (__cdecl *GotoCheckpointIndex)(INetworkReplayStreamer *this, const int, TBaseDelegate<void,FGotoResult const &> *);
  void (__cdecl *GotoCheckpointIndex)(INetworkReplayStreamer *this, const int, TBaseDelegate<void,bool const ,__int64 const > *);
  void (__cdecl *GotoTimeInMS)(INetworkReplayStreamer *this, const unsigned int, TBaseDelegate<void,FGotoResult const &> *);
  void (__cdecl *GotoTimeInMS)(INetworkReplayStreamer *this, const unsigned int, TBaseDelegate<void,bool const ,__int64 const > *);
  void (__cdecl *UpdateTotalDemoTime)(INetworkReplayStreamer *this, unsigned int);
  unsigned int (__cdecl *GetTotalDemoTime)(INetworkReplayStreamer *this);
  bool (__cdecl *IsDataAvailable)(INetworkReplayStreamer *this);
  void (__cdecl *SetHighPriorityTimeRange)(INetworkReplayStreamer *this, const unsigned int, const unsigned int);
  bool (__cdecl *IsDataAvailableForTimeRange)(INetworkReplayStreamer *this, const unsigned int, const unsigned int);
  bool (__cdecl *IsLoadingCheckpoint)(INetworkReplayStreamer *this);
  void (__cdecl *AddEvent)(INetworkReplayStreamer *this, const unsigned int, FString *, FString *, TArray<unsigned char,FDefaultAllocator> *);
  void (__cdecl *AddOrUpdateEvent)(INetworkReplayStreamer *this, FString *, const unsigned int, FString *, FString *, TArray<unsigned char,FDefaultAllocator> *);
  void (__cdecl *EnumerateEvents)(INetworkReplayStreamer *this, FString *, FString *, const int, TBaseDelegate<void,FEnumerateEventsResult const &> *);
  void (__cdecl *EnumerateEvents)(INetworkReplayStreamer *this, FString *, FString *, TBaseDelegate<void,FEnumerateEventsResult const &> *);
  void (__cdecl *EnumerateEvents)(INetworkReplayStreamer *this, FString *, FString *, TBaseDelegate<void,FReplayEventList const &,bool> *);
  void (__cdecl *EnumerateEvents)(INetworkReplayStreamer *this, FString *, TBaseDelegate<void,FEnumerateEventsResult const &> *);
  void (__cdecl *EnumerateEvents)(INetworkReplayStreamer *this, FString *, TBaseDelegate<void,FReplayEventList const &,bool> *);
  void (__cdecl *RequestEventData)(INetworkReplayStreamer *this, FString *, FString *, const int, TBaseDelegate<void,FRequestEventDataResult const &> *);
  void (__cdecl *RequestEventData)(INetworkReplayStreamer *this, FString *, FString *, TBaseDelegate<void,FRequestEventDataResult const &> *);
  void (__cdecl *RequestEventData)(INetworkReplayStreamer *this, FString *, TBaseDelegate<void,FRequestEventDataResult const &> *);
  void (__cdecl *RequestEventData)(INetworkReplayStreamer *this, FString *, TBaseDelegate<void,TArray<unsigned char,FDefaultAllocator> const &,bool> *);
  void (__cdecl *SearchEvents)(INetworkReplayStreamer *this, FString *, TBaseDelegate<void,FSearchEventsResult const &> *);
  void (__cdecl *SearchEvents)(INetworkReplayStreamer *this, FString *, TBaseDelegate<void,TArray<FNetworkReplayStreamInfo,FDefaultAllocator> const &> *);
  void (__cdecl *RefreshHeader)(INetworkReplayStreamer *this);
  void (__cdecl *DownloadHeader)(INetworkReplayStreamer *this, TBaseDelegate<void,FDownloadHeaderResult const &> *);
  void (__cdecl *DownloadHeader)(INetworkReplayStreamer *this, TBaseDelegate<void,bool const > *);
  void (__cdecl *DownloadHeader)(INetworkReplayStreamer *this);
  void (__cdecl *KeepReplay)(INetworkReplayStreamer *this, FString *, const bool, const int, TBaseDelegate<void,FKeepReplayResult const &> *);
  void (__cdecl *KeepReplay)(INetworkReplayStreamer *this, FString *, const bool, TBaseDelegate<void,FKeepReplayResult const &> *);
  void (__cdecl *KeepReplay)(INetworkReplayStreamer *this, FString *, const bool);
  void (__cdecl *RenameReplayFriendlyName)(INetworkReplayStreamer *this, FString *, FString *, const int, TBaseDelegate<void,FRenameReplayResult const &> *);
  void (__cdecl *RenameReplayFriendlyName)(INetworkReplayStreamer *this, FString *, FString *, TBaseDelegate<void,FRenameReplayResult const &> *);
  void (__cdecl *RenameReplay)(INetworkReplayStreamer *this, FString *, FString *, const int, TBaseDelegate<void,FRenameReplayResult const &> *);
  void (__cdecl *RenameReplay)(INetworkReplayStreamer *this, FString *, FString *, TBaseDelegate<void,FRenameReplayResult const &> *);
  bool (__cdecl *IsLive)(INetworkReplayStreamer *this);
  FString *(__cdecl *GetReplayID)(INetworkReplayStreamer *this, FString *result);
  void (__cdecl *DeleteFinishedStream)(INetworkReplayStreamer *this, FString *, const int, TBaseDelegate<void,FDeleteFinishedStreamResult const &> *);
  void (__cdecl *DeleteFinishedStream)(INetworkReplayStreamer *this, FString *, TBaseDelegate<void,FDeleteFinishedStreamResult const &> *);
  void (__cdecl *DeleteFinishedStream)(INetworkReplayStreamer *this, FString *, TBaseDelegate<void,bool const > *);
  void (__cdecl *EnumerateStreams)(INetworkReplayStreamer *this, FNetworkReplayVersion *, const int, FString *, TArray<FString,FDefaultAllocator> *, TBaseDelegate<void,FEnumerateStreamsResult const &> *);
  void (__cdecl *EnumerateStreams)(INetworkReplayStreamer *this, FNetworkReplayVersion *, FString *, FString *, TArray<FString,FDefaultAllocator> *, TBaseDelegate<void,FEnumerateStreamsResult const &> *);
  void (__cdecl *EnumerateStreams)(INetworkReplayStreamer *this, FNetworkReplayVersion *, FString *, FString *, TArray<FString,FDefaultAllocator> *, TBaseDelegate<void,TArray<FNetworkReplayStreamInfo,FDefaultAllocator> const &> *);
  void (__cdecl *EnumerateStreams)(INetworkReplayStreamer *this, FNetworkReplayVersion *, FString *, FString *, TBaseDelegate<void,FEnumerateStreamsResult const &> *);
  void (__cdecl *EnumerateStreams)(INetworkReplayStreamer *this, FNetworkReplayVersion *, FString *, FString *, TBaseDelegate<void,TArray<FNetworkReplayStreamInfo,FDefaultAllocator> const &> *);
  void (__cdecl *EnumerateRecentStreams)(INetworkReplayStreamer *this, FNetworkReplayVersion *, const int, TBaseDelegate<void,FEnumerateStreamsResult const &> *);
  void (__cdecl *EnumerateRecentStreams)(INetworkReplayStreamer *this, FNetworkReplayVersion *, FString *, TBaseDelegate<void,FEnumerateStreamsResult const &> *);
  void (__cdecl *EnumerateRecentStreams)(INetworkReplayStreamer *this, FNetworkReplayVersion *, FString *, TBaseDelegate<void,TArray<FNetworkReplayStreamInfo,FDefaultAllocator> const &> *);
  ENetworkReplayError::Type (__cdecl *GetLastError)(INetworkReplayStreamer *this);
  void (__cdecl *AddUserToReplay)(INetworkReplayStreamer *this, FString *);
  void (__cdecl *SetTimeBufferHintSeconds)(INetworkReplayStreamer *this, const float);
  unsigned int (__cdecl *GetMaxFriendlyNameSize)(INetworkReplayStreamer *this);
  EStreamingOperationResult (__cdecl *SetDemoPath)(INetworkReplayStreamer *this, FString *);
  EStreamingOperationResult (__cdecl *GetDemoPath)(INetworkReplayStreamer *this, FString *);
};

/* 5827 */
struct FQueuedReplayTaskVtbl
{
  void *(__cdecl *__vecDelDtor)(FQueuedReplayTask *this, unsigned int);
  void (__cdecl *StartTask)(FQueuedReplayTask *this);
  bool (__cdecl *Tick)(FQueuedReplayTask *this);
  FName *(__cdecl *GetName)(FQueuedReplayTask *this, FName *result);
};

/* 5882 */
struct INavEdgeProviderInterfaceVtbl
{
  void *(__cdecl *__vecDelDtor)(INavEdgeProviderInterface *this, unsigned int);
  UObject *(__cdecl *_getUObject)(INavEdgeProviderInterface *this);
  bool (__cdecl *GetEdges)(INavEdgeProviderInterface *this, FVector *, float, TArray<FNavEdgeSegment,FDefaultAllocator> *);
};

/* 4960 */
struct FRefCountedObjectVtbl
{
  void *(__cdecl *__vecDelDtor)(FRefCountedObject *this, unsigned int);
};

/* 4974 */
struct FLocalUniformBufferWorkArea
{
  void *Contents;
  FRHIUniformBufferLayout *Layout;
  FComputedUniformBuffer *ComputedUniformBuffer;
};

/* 4978 */
struct TArray<FShader *,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 4979 */
struct TArray<TShaderMap<FMaterialShaderType>::FSerializedShaderPipeline *,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 327 */
enum EShaderPlatform
{
  SP_PCD3D_SM5 = 0x0,
  SP_OPENGL_SM4 = 0x1,
  SP_PS4 = 0x2,
  SP_OPENGL_PCES2 = 0x3,
  SP_XBOXONE_D3D12 = 0x4,
  SP_PCD3D_SM4 = 0x5,
  SP_OPENGL_SM5 = 0x6,
  SP_PCD3D_ES2 = 0x7,
  SP_OPENGL_ES2_ANDROID = 0x8,
  SP_OPENGL_ES2_WEBGL = 0x9,
  SP_OPENGL_ES2_IOS = 0xA,
  SP_METAL = 0xB,
  SP_METAL_MRT = 0xC,
  SP_OPENGL_ES31_EXT = 0xD,
  SP_PCD3D_ES3_1 = 0xE,
  SP_OPENGL_PCES3_1 = 0xF,
  SP_METAL_SM5 = 0x10,
  SP_VULKAN_PCES3_1 = 0x11,
  SP_METAL_SM5_NOTESS = 0x12,
  SP_VULKAN_SM4 = 0x13,
  SP_VULKAN_SM5 = 0x14,
  SP_VULKAN_ES3_1_ANDROID = 0x15,
  SP_METAL_MACES3_1 = 0x16,
  SP_METAL_MACES2 = 0x17,
  SP_OPENGL_ES3_1_ANDROID = 0x18,
  SP_SWITCH = 0x19,
  SP_SWITCH_FORWARD = 0x1A,
  SP_METAL_MRT_MAC = 0x1B,
  SP_VULKAN_SM5_LUMIN = 0x1C,
  SP_VULKAN_ES3_1_LUMIN = 0x1D,
  SP_NumPlatforms = 0x1E,
  SP_NumBits = 0x5,
};

/* 4980 */
struct TSparseArray<TSetElement<TTuple<TShaderTypePermutation<FShaderType>,TRefCountPtr<FShader> > >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<32,8> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 4981 */
struct __declspec(align(8)) TSet<TTuple<TShaderTypePermutation<FShaderType>,TRefCountPtr<FShader> >,TDefaultMapHashableKeyFuncs<TShaderTypePermutation<FShaderType>,TRefCountPtr<FShader>,0>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<TTuple<TShaderTypePermutation<FShaderType>,TRefCountPtr<FShader> > >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 4982 */
struct TMapBase<TShaderTypePermutation<FShaderType>,TRefCountPtr<FShader>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<TShaderTypePermutation<FShaderType>,TRefCountPtr<FShader>,0> >
{
  TSet<TTuple<TShaderTypePermutation<FShaderType>,TRefCountPtr<FShader> >,TDefaultMapHashableKeyFuncs<TShaderTypePermutation<FShaderType>,TRefCountPtr<FShader>,0>,FDefaultSetAllocator> Pairs;
};

/* 4983 */
struct __cppobj TSortableMapBase<TShaderTypePermutation<FShaderType>,TRefCountPtr<FShader>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<TShaderTypePermutation<FShaderType>,TRefCountPtr<FShader>,0> > : TMapBase<TShaderTypePermutation<FShaderType>,TRefCountPtr<FShader>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<TShaderTypePermutation<FShaderType>,TRefCountPtr<FShader>,0> >
{
};

/* 4984 */
struct __cppobj TMap<TShaderTypePermutation<FShaderType>,TRefCountPtr<FShader>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<TShaderTypePermutation<FShaderType>,TRefCountPtr<FShader>,0> > : TSortableMapBase<TShaderTypePermutation<FShaderType>,TRefCountPtr<FShader>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<TShaderTypePermutation<FShaderType>,TRefCountPtr<FShader>,0> >
{
};

/* 4985 */
struct TSparseArray<TSetElement<TTuple<FShaderPipelineType const *,FShaderPipeline *> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<24,8> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 4986 */
struct __declspec(align(8)) TSet<TTuple<FShaderPipelineType const *,FShaderPipeline *>,TDefaultMapHashableKeyFuncs<FShaderPipelineType const *,FShaderPipeline *,0>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<TTuple<FShaderPipelineType const *,FShaderPipeline *> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 4987 */
struct TMapBase<FShaderPipelineType const *,FShaderPipeline *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FShaderPipelineType const *,FShaderPipeline *,0> >
{
  TSet<TTuple<FShaderPipelineType const *,FShaderPipeline *>,TDefaultMapHashableKeyFuncs<FShaderPipelineType const *,FShaderPipeline *,0>,FDefaultSetAllocator> Pairs;
};

/* 4988 */
struct __cppobj TSortableMapBase<FShaderPipelineType const *,FShaderPipeline *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FShaderPipelineType const *,FShaderPipeline *,0> > : TMapBase<FShaderPipelineType const *,FShaderPipeline *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FShaderPipelineType const *,FShaderPipeline *,0> >
{
};

/* 4989 */
struct __cppobj TMap<FShaderPipelineType const *,FShaderPipeline *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FShaderPipelineType const *,FShaderPipeline *,0> > : TSortableMapBase<FShaderPipelineType const *,FShaderPipeline *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FShaderPipelineType const *,FShaderPipeline *,0> >
{
};

/* 4976 */
struct TShaderMap<FMaterialShaderType>
{
  TShaderMap<FMaterialShaderType>Vtbl *vfptr;
  TArray<FShader *,FDefaultAllocator> SerializedShaders;
  TArray<TShaderMap<FMaterialShaderType>::FSerializedShaderPipeline *,FDefaultAllocator> SerializedShaderPipelines;
  EShaderPlatform Platform;
  bool bHasBeenRegistered;
  TMap<TShaderTypePermutation<FShaderType>,TRefCountPtr<FShader>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<TShaderTypePermutation<FShaderType>,TRefCountPtr<FShader>,0> > Shaders;
  TMap<FShaderPipelineType const *,FShaderPipeline *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FShaderPipelineType const *,FShaderPipeline *,0> > ShaderPipelines;
};

/* 4990 */
struct TIndirectArray<FMeshMaterialShaderMap,FDefaultAllocator>
{
  TArray<void *,FDefaultAllocator> Array;
};

/* 4991 */
struct TArray<FMeshMaterialShaderMap *,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 5002 */
struct TSparseArray<TSetElement<TTuple<FVertexFactoryType *,FMeshMaterialShaderMap *> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<24,8> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 5003 */
struct __declspec(align(8)) TSet<TTuple<FVertexFactoryType *,FMeshMaterialShaderMap *>,TDefaultMapHashableKeyFuncs<FVertexFactoryType *,FMeshMaterialShaderMap *,0>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<TTuple<FVertexFactoryType *,FMeshMaterialShaderMap *> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 5004 */
struct TMapBase<FVertexFactoryType *,FMeshMaterialShaderMap *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FVertexFactoryType *,FMeshMaterialShaderMap *,0> >
{
  TSet<TTuple<FVertexFactoryType *,FMeshMaterialShaderMap *>,TDefaultMapHashableKeyFuncs<FVertexFactoryType *,FMeshMaterialShaderMap *,0>,FDefaultSetAllocator> Pairs;
};

/* 5005 */
struct __cppobj TSortableMapBase<FVertexFactoryType *,FMeshMaterialShaderMap *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FVertexFactoryType *,FMeshMaterialShaderMap *,0> > : TMapBase<FVertexFactoryType *,FMeshMaterialShaderMap *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FVertexFactoryType *,FMeshMaterialShaderMap *,0> >
{
};

/* 5006 */
struct __cppobj TMap<FVertexFactoryType *,FMeshMaterialShaderMap *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FVertexFactoryType *,FMeshMaterialShaderMap *,0> > : TSortableMapBase<FVertexFactoryType *,FMeshMaterialShaderMap *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FVertexFactoryType *,FMeshMaterialShaderMap *,0> >
{
};

/* 5007 */
struct TArray<TRefCountPtr<FMaterialUniformExpression>,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 5008 */
struct TArray<TRefCountPtr<FMaterialUniformExpressionTexture>,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 5009 */
struct TArray<TRefCountPtr<FMaterialUniformExpressionExternalTexture>,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 5010 */
struct TAlignedBytes<136,8>::TPadding
{
  char Pad[136];
};

/* 5011 */
struct TAlignedBytes<136,8>
{
  TAlignedBytes<136,8>::TPadding Padding;
};

/* 5012 */
struct __cppobj TTypeCompatibleBytes<FUniformBufferStruct> : TAlignedBytes<136,8>
{
};

/* 5013 */
struct __declspec(align(8)) TOptional<FUniformBufferStruct>
{
  TTypeCompatibleBytes<FUniformBufferStruct> Value;
  bool bIsSet;
};

/* 5014 */
struct __cppobj FUniformExpressionSet : FRefCountedObject
{
  TArray<TRefCountPtr<FMaterialUniformExpression>,FDefaultAllocator> UniformVectorExpressions;
  TArray<TRefCountPtr<FMaterialUniformExpression>,FDefaultAllocator> UniformScalarExpressions;
  TArray<TRefCountPtr<FMaterialUniformExpressionTexture>,FDefaultAllocator> Uniform2DTextureExpressions;
  TArray<TRefCountPtr<FMaterialUniformExpressionTexture>,FDefaultAllocator> UniformCubeTextureExpressions;
  TArray<TRefCountPtr<FMaterialUniformExpressionTexture>,FDefaultAllocator> UniformVolumeTextureExpressions;
  TArray<TRefCountPtr<FMaterialUniformExpressionExternalTexture>,FDefaultAllocator> UniformExternalTextureExpressions;
  TArray<FGuid,FDefaultAllocator> ParameterCollections;
  TOptional<FUniformBufferStruct> UniformBufferStruct;
};

/* 5015 */
struct __declspec(align(2)) FMaterialCompilationOutput
{
  FUniformExpressionSet UniformExpressionSet;
  char NumUsedUVScalars;
  char NumUsedCustomInterpolatorScalars;
  unsigned __int16 EstimatedNumTextureSamplesVS;
  unsigned __int16 EstimatedNumTextureSamplesPS;
  bool bRequiresSceneColorCopy;
  bool bNeedsSceneTextures;
  bool bUsesEyeAdaptation;
  bool bModifiesMeshPosition;
  bool bUsesWorldPositionOffset;
  bool bNeedsGBuffer;
  bool bUsesGlobalDistanceField;
  bool bUsesPixelDepthOffset;
  bool bUsesSceneDepthLookup;
};

/* 5016 */
const struct __cppobj FMaterialShaderMap : TShaderMap<FMaterialShaderType>, FDeferredCleanupInterface
{
  TIndirectArray<FMeshMaterialShaderMap,FDefaultAllocator> MeshShaderMaps;
  TArray<FMeshMaterialShaderMap *,FDefaultAllocator> OrderedMeshShaderMaps;
  FMaterialShaderMapId ShaderMapId;
  TMap<FVertexFactoryType *,FMeshMaterialShaderMap *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FVertexFactoryType *,FMeshMaterialShaderMap *,0> > VertexFactoryMap;
  FMaterialCompilationOutput MaterialCompilationOutput;
  unsigned int CompilingId;
  int NumRefs;
  bool bDeletedThroughDeferredCleanup;
  unsigned __int32 bRegistered : 1;
  unsigned __int32 bCompilationFinalized : 1;
  unsigned __int32 bCompiledSuccessfully : 1;
  unsigned __int32 bIsPersistent : 1;
};

/* 5047 */
struct IFontProviderInterfaceVtbl
{
  void *(__cdecl *__vecDelDtor)(IFontProviderInterface *this, unsigned int);
  UObject *(__cdecl *_getUObject)(IFontProviderInterface *this);
  FCompositeFont *(__cdecl *GetCompositeFont)(IFontProviderInterface *this);
};

/* 4954 */
struct TSharedPtr<IBreakIterator,0>
{
  IBreakIterator *Object;
  SharedPointerInternals::FSharedReferencer<0> SharedReferenceCount;
};

/* 4955 */
struct FCanvasWordWrapper
{
  TSharedPtr<IBreakIterator,0> GraphemeBreakIterator;
  TSharedPtr<IBreakIterator,0> LineBreakIterator;
};

/* 4431 */
const struct FRenderTarget
{
  FRenderTargetVtbl *vfptr;
  TRefCountPtr<FRHITexture2D> RenderTargetTextureRHI;
};

/* 4963 */
struct FHitProxyConsumer
{
  FHitProxyConsumerVtbl *vfptr;
};

/* 176 */
enum EHitProxyPriority
{
  HPP_World = 0x0,
  HPP_Wireframe = 0x1,
  HPP_Foreground = 0x2,
  HPP_UI = 0x3,
};

/* 4962 */
struct __cppobj __declspec(align(8)) HHitProxy : FRefCountedObject
{
  EHitProxyPriority Priority;
  EHitProxyPriority OrthoPriority;
  FHitProxyId Id;
};

/* 4430 */
struct TArray<FSceneView const *,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 186 */
enum EViewModeIndex
{
  VMI_BrushWireframe = 0x0,
  VMI_Wireframe = 0x1,
  VMI_Unlit = 0x2,
  VMI_Lit = 0x3,
  VMI_Lit_DetailLighting = 0x4,
  VMI_LightingOnly = 0x5,
  VMI_LightComplexity = 0x6,
  VMI_ShaderComplexity = 0x8,
  VMI_LightmapDensity = 0x9,
  VMI_LitLightmapDensity = 0xA,
  VMI_ReflectionOverride = 0xB,
  VMI_VisualizeBuffer = 0xC,
  VMI_StationaryLightOverlap = 0xE,
  VMI_CollisionPawn = 0xF,
  VMI_CollisionVisibility = 0x10,
  VMI_LODColoration = 0x12,
  VMI_QuadOverdraw = 0x13,
  VMI_PrimitiveDistanceAccuracy = 0x14,
  VMI_MeshUVDensityAccuracy = 0x15,
  VMI_ShaderComplexityWithQuadOverdraw = 0x16,
  VMI_HLODColoration = 0x17,
  VMI_GroupLODColoration = 0x18,
  VMI_MaterialTextureScaleAccuracy = 0x19,
  VMI_RequiredTextureResolution = 0x1A,
  VMI_Max = 0x1B,
  VMI_Unknown = 0xFF,
};

/* 56 */
enum EMonoscopicFarFieldMode
{
  Off = 0x0,
  On = 0x1,
  StereoOnly = 0x2,
  StereoNoClipping = 0x3,
  MonoOnly = 0x4,
};

/* 7021 */
struct __declspec(align(4)) FMonoscopicFarFieldParameters
{
  float CullingDistance;
  float StereoDepthClip;
  float MonoDepthClip;
  float LateralOffset;
  float OverlapDistance;
  EMonoscopicFarFieldMode Mode;
  bool bEnabled;
};

/* 151 */
enum ESceneCaptureSource
{
  SCS_SceneColorHDR = 0x0,
  SCS_SceneColorHDRNoAlpha = 0x1,
  SCS_FinalColorLDR = 0x2,
  SCS_SceneColorSceneDepth = 0x3,
  SCS_SceneDepth = 0x4,
  SCS_DeviceDepth = 0x5,
  SCS_Normal = 0x6,
  SCS_BaseColor = 0x7,
};

/* 152 */
enum ESceneCaptureCompositeMode
{
  SCCM_Overwrite = 0x0,
  SCCM_Additive = 0x1,
  SCCM_Composite = 0x2,
};

/* 7022 */
struct __declspec(align(4)) FExposureSettings
{
  float FixedEV100;
  bool bFixed;
};

/* 7023 */
struct TArray<TSharedRef<ISceneViewExtension,1>,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 7024 */
struct FDisplayInternalsData
{
  int DisplayInternalsCVarValue;
  float MatineeTime;
  unsigned int NumPendingStreamingRequests;
};

/* 695 */
enum ESecondaryScreenPercentageMethod
{
  NearestSpatialUpscale = 0x0,
  LowerPixelDensitySimulation = 0x1,
};

/* 6102 */
const struct FSceneViewFamily
{
  TArray<FSceneView const *,FDefaultAllocator> Views;
  EViewModeIndex ViewMode;
  FRenderTarget *RenderTarget;
  FSceneInterface *Scene;
  FEngineShowFlags EngineShowFlags;
  FMonoscopicFarFieldParameters MonoParameters;
  float CurrentWorldTime;
  float DeltaWorldTime;
  float CurrentRealTime;
  unsigned int FrameNumber;
  bool bRealtimeUpdate;
  bool bDeferClear;
  bool bResolveScene;
  ESceneCaptureSource SceneCaptureSource;
  ESceneCaptureCompositeMode SceneCaptureCompositeMode;
  bool bWorldIsPaused;
  float GammaCorrection;
  FExposureSettings ExposureSettings;
  TArray<TSharedRef<ISceneViewExtension,1>,FDefaultAllocator> ViewExtensions;
  FDisplayInternalsData DisplayInternalsData;
  float SecondaryViewFraction;
  ESecondaryScreenPercentageMethod SecondaryScreenPercentageMethod;
  ISceneViewFamilyScreenPercentage *ScreenPercentageInterface;
};

/* 5898 */
struct __declspec(align(8)) FSceneViewStateInterface
{
  FSceneViewStateInterfaceVtbl *vfptr;
  FSceneViewStateInterface *ViewParent;
  int NumChildren;
};

/* 7031 */
struct FViewElementDrawer
{
  FViewElementDrawerVtbl *vfptr;
};

/* 5975 */
struct TStaticArray<FMatrix,4,16>::TArrayStorageElementAligned
{
  FMatrix Element;
};

/* 5976 */
struct TStaticArray<FMatrix,4,16>::TArrayStorage
{
  TStaticArray<FMatrix,4,16>::TArrayStorageElementAligned Elements[4];
};

/* 5977 */
struct TStaticArray<FMatrix,4,16>
{
  TStaticArray<FMatrix,4,16>::TArrayStorage Storage;
};

/* 5978 */
struct TStaticArray<FVector4,4,16>::TArrayStorageElementAligned
{
  FVector4 Element;
};

/* 5979 */
struct TStaticArray<FVector4,4,16>::TArrayStorage
{
  TStaticArray<FVector4,4,16>::TArrayStorageElementAligned Elements[4];
};

/* 5980 */
struct TStaticArray<FVector4,4,16>
{
  TStaticArray<FVector4,4,16>::TArrayStorage Storage;
};

/* 5981 */
union $E77594F4FBF1D67A943DE188A61EBDA7
{
  FRHITexture *Member;
  unsigned __int64 _MinSizeDummy;
};

/* 5982 */
struct TFixedSizePointerWrapper<FRHITexture *>
{
  $E77594F4FBF1D67A943DE188A61EBDA7 ___u0;
};

/* 5983 */
union $A1F5A1A08E6397E7A045F25C30F4292D
{
  FRHISamplerState *Member;
  unsigned __int64 _MinSizeDummy;
};

/* 5984 */
struct TFixedSizePointerWrapper<FRHISamplerState *>
{
  $A1F5A1A08E6397E7A045F25C30F4292D ___u0;
};

/* 5985 */
union $CFC36AC8059BD3ADC74A30D217D344ED
{
  FRHIShaderResourceView *Member;
  unsigned __int64 _MinSizeDummy;
};

/* 5986 */
struct TFixedSizePointerWrapper<FRHIShaderResourceView *>
{
  $CFC36AC8059BD3ADC74A30D217D344ED ___u0;
};

/* 5987 */
struct FForwardLightData
{
  unsigned int NumLocalLights;
  unsigned int NumReflectionCaptures;
  unsigned int HasDirectionalLight;
  unsigned int NumGridCells;
  FIntVector CulledGridSize;
  unsigned int MaxCulledLightsPerCell;
  unsigned int LightGridPixelSizeShift;
  __declspec(align(16)) FVector LightGridZParams;
  __declspec(align(8)) FVector DirectionalLightDirection;
  __declspec(align(8)) FVector DirectionalLightColor;
  float DirectionalLightVolumetricScatteringIntensity;
  unsigned int DirectionalLightShadowMapChannelMask;
  __declspec(align(8)) FVector2D DirectionalLightDistanceFadeMAD;
  unsigned int NumDirectionalLightCascades;
  __declspec(align(16)) FVector4 CascadeEndDepths;
  TStaticArray<FMatrix,4,16> DirectionalLightWorldToShadowMatrix;
  TStaticArray<FVector4,4,16> DirectionalLightShadowmapMinMax;
  FVector4 DirectionalLightShadowmapAtlasBufferSize;
  float DirectionalLightDepthBias;
  unsigned int DirectionalLightUseStaticShadowing;
  __declspec(align(16)) FVector4 DirectionalLightStaticShadowBufferSize;
  FMatrix DirectionalLightWorldToStaticShadow;
  TFixedSizePointerWrapper<FRHITexture *> DirectionalLightShadowmapAtlas;
  TFixedSizePointerWrapper<FRHISamplerState *> ShadowmapSampler;
  TFixedSizePointerWrapper<FRHITexture *> DirectionalLightStaticShadowmap;
  TFixedSizePointerWrapper<FRHISamplerState *> StaticShadowmapSampler;
  TFixedSizePointerWrapper<FRHIShaderResourceView *> ForwardLocalLightBuffer;
  TFixedSizePointerWrapper<FRHIShaderResourceView *> NumCulledLightsGrid;
  TFixedSizePointerWrapper<FRHIShaderResourceView *> CulledLightDataGrid;
};

/* 5988 */
struct __cppobj TUniformBufferRef<FForwardLightData> : TRefCountPtr<FRHIUniformBuffer>
{
};

/* 5989 */
struct __declspec(align(8)) FReadBuffer
{
  TRefCountPtr<FRHIVertexBuffer> Buffer;
  TRefCountPtr<FRHIShaderResourceView> SRV;
  unsigned int NumBytes;
};

/* 5990 */
struct __cppobj FDynamicReadBuffer : FReadBuffer
{
  FDynamicReadBufferVtbl *vfptr;
  char *MappedBuffer;
};

/* 4435 */
struct TRefCountPtr<FRHIUnorderedAccessView>
{
  FRHIUnorderedAccessView *Reference;
};

/* 4637 */
struct __declspec(align(8)) FRWBuffer
{
  TRefCountPtr<FRHIVertexBuffer> Buffer;
  TRefCountPtr<FRHIUnorderedAccessView> UAV;
  TRefCountPtr<FRHIShaderResourceView> SRV;
  unsigned int NumBytes;
};

/* 5992 */
struct FForwardLightingViewResources
{
  FForwardLightData ForwardLightData;
  TUniformBufferRef<FForwardLightData> ForwardLightDataUniformBuffer;
  FDynamicReadBuffer ForwardLocalLightBuffer;
  FRWBuffer NumCulledLightsGrid;
  FRWBuffer CulledLightDataGrid;
};

/* 6358 */
struct TSHVector<3>
{
  float V[12];
};

/* 6359 */
struct TSHVectorRGB<3>
{
  TSHVector<3> R;
  TSHVector<3> G;
  TSHVector<3> B;
};

/* 144 */
enum EOcclusionCombineMode
{
  OCM_Minimum = 0x0,
  OCM_Multiply = 0x1,
  OCM_MAX = 0x2,
};

/* 6360 */
struct FSkyLightSceneProxy
{
  USkyLightComponent *LightComponent;
  FTexture *ProcessedTexture;
  float BlendFraction;
  FTexture *BlendDestinationProcessedTexture;
  float SkyDistanceThreshold;
  bool bCastShadows;
  bool bWantsStaticShadowing;
  bool bHasStaticLighting;
  bool bCastVolumetricShadow;
  FLinearColor LightColor;
  __declspec(align(16)) TSHVectorRGB<3> IrradianceEnvironmentMap;
  float AverageBrightness;
  float IndirectLightingIntensity;
  float VolumetricScatteringIntensity;
  float OcclusionMaxDistance;
  float Contrast;
  float OcclusionExponent;
  float MinOcclusion;
  FLinearColor OcclusionTint;
  EOcclusionCombineMode OcclusionCombineMode;
};

/* 6871 */
struct __cppobj UDecalComponent : USceneComponent
{
  int SortOrder;
  float FadeScreenSize;
  float FadeStartDelay;
  float FadeDuration;
  __int8 bDestroyOwnerAfterFade : 1;
  FVector DecalSize;
  FDeferredDecalProxy *SceneProxy;
  FTimerHandle TimerHandle_DestroyDecalComponent;
};

/* 6138 */
const struct __cppobj __declspec(align(16)) UReflectionCaptureComponent : USceneComponent
{
  _BYTE ReflectionSourceType[1];
  UTextureCube *Cubemap;
  float SourceCubemapAngle;
  float Brightness;
  FVector CaptureOffset;
  FGuid MapBuildDataId;
  FReflectionCaptureProxy *SceneProxy;
  bool bNeedsRecaptureOrUpload;
  FReflectionTextureCubeResource *EncodedHDRCubemapTexture;
  TArray<unsigned char,FDefaultAllocator> TemporaryEncodedHDRCapturedData;
  FRenderCommandFence ReleaseResourcesFence;
};

/* 6873 */
struct __declspec(align(8)) FReflectionCaptureData
{
  int CubemapSize;
  float AverageBrightness;
  float Brightness;
  TArray<unsigned char,FDefaultAllocator> FullHDRCapturedData;
  TArray<unsigned char,FDefaultAllocator> EncodedHDRCapturedData;
  bool bUploadedFinal;
};

/* 6874 */
const struct TArray<UReflectionCaptureComponent *,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 6354 */
struct TEnumAsByte<enum ESkyLightSourceType>
{
  char Value;
};

/* 6355 */
struct TEnumAsByte<enum EOcclusionCombineMode>
{
  char Value;
};

/* 6357 */
struct TRefCountPtr<FSkyTextureCubeResource>
{
  FSkyTextureCubeResource *Reference;
};

/* 6361 */
const struct __cppobj USkyLightComponent : ULightComponentBase
{
  TEnumAsByte<enum ESkyLightSourceType> SourceType;
  UTextureCube *Cubemap;
  float SourceCubemapAngle;
  int CubemapResolution;
  float SkyDistanceThreshold;
  bool bCaptureEmissiveOnly;
  bool bLowerHemisphereIsBlack;
  FLinearColor LowerHemisphereColor;
  float OcclusionMaxDistance;
  float Contrast;
  float OcclusionExponent;
  float MinOcclusion;
  FColor OcclusionTint;
  TEnumAsByte<enum EOcclusionCombineMode> OcclusionCombineMode;
  bool bSavedConstructionScriptValuesValid;
  bool bHasEverCaptured;
  TRefCountPtr<FSkyTextureCubeResource> ProcessedSkyTexture;
  TSHVectorRGB<3> IrradianceEnvironmentMap;
  float AverageBrightness;
  float BlendFraction;
  UTextureCube *BlendDestinationCubemap;
  TRefCountPtr<FSkyTextureCubeResource> BlendDestinationProcessedSkyTexture;
  __declspec(align(16)) TSHVectorRGB<3> BlendDestinationIrradianceEnvironmentMap;
  float BlendDestinationAverageBrightness;
  FRenderCommandFence IrradianceMapFence;
  FRenderCommandFence ReleaseResourcesFence;
  FSkyLightSceneProxy *SceneProxy;
};

/* 6875 */
struct TArray<FFloat16Color,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 6880 */
struct __cppobj __declspec(align(16)) UPlanarReflectionComponent : USceneCaptureComponent
{
  UBoxComponent *PreviewBox;
  float NormalDistortionStrength;
  float PrefilterRoughness;
  float PrefilterRoughnessDistance;
  int ScreenPercentage;
  float ExtraFOV;
  float DistanceFromPlaneFadeStart_DEPRECATED;
  float DistanceFromPlaneFadeEnd_DEPRECATED;
  float DistanceFromPlaneFadeoutStart;
  float DistanceFromPlaneFadeoutEnd;
  float AngleFromPlaneFadeStart;
  float AngleFromPlaneFadeEnd;
  bool bRenderSceneTwoSided;
  FRenderCommandFence ReleaseResourcesFence;
  FPlanarReflectionSceneProxy *SceneProxy;
  FPlanarReflectionRenderTarget *RenderTarget;
  FMatrix ProjectionWithExtraFOV[2];
  int PlanarReflectionId;
};

/* 6886 */
struct __cppobj __declspec(align(16)) USceneCaptureComponentCube : USceneCaptureComponent
{
  UTextureRenderTargetCube *TextureTarget;
  UTextureRenderTargetCube *TextureTargetLeft;
  UTextureRenderTargetCube *TextureTargetRight;
  UTextureRenderTarget2D *TextureTargetODS;
  float IPD;
};

/* 6892 */
struct TArray<FViewInfo,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 6240 */
struct TIndirectArray<TChunkedArray<FMeshBatch,16384>::FChunk,FDefaultAllocator>
{
  TArray<void *,FDefaultAllocator> Array;
};

/* 6241 */
struct __declspec(align(8)) TChunkedArray<FMeshBatch,16384>
{
  TIndirectArray<TChunkedArray<FMeshBatch,16384>::FChunk,FDefaultAllocator> Chunks;
  int NumElements;
};

/* 6242 */
struct __cppobj TTypeCompatibleBytes<TArray<FMeshBatchAndRelevance,TMemStackAllocator<0> > *> : TAlignedBytes<8,8>
{
};

/* 6243 */
struct __cppobj FHeapAllocator::ForElementType<TArray<FMeshBatchAndRelevance,TMemStackAllocator<0> > *> : FHeapAllocator::ForAnyElementType
{
};

/* 6244 */
struct TInlineAllocator<2,FDefaultAllocator>::ForElementType<TArray<FMeshBatchAndRelevance,TMemStackAllocator<0> > *>
{
  TTypeCompatibleBytes<TArray<FMeshBatchAndRelevance,TMemStackAllocator<0> > *> InlineData[2];
  FHeapAllocator::ForElementType<TArray<FMeshBatchAndRelevance,TMemStackAllocator<0> > *> SecondaryData;
};

/* 6245 */
struct TArray<TArray<FMeshBatchAndRelevance,TMemStackAllocator<0> > *,TInlineAllocator<2,FDefaultAllocator> >
{
  TInlineAllocator<2,FDefaultAllocator>::ForElementType<TArray<FMeshBatchAndRelevance,TMemStackAllocator<0> > *> AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 6246 */
struct __cppobj TTypeCompatibleBytes<FSimpleElementCollector *> : TAlignedBytes<8,8>
{
};

/* 6247 */
struct __cppobj FHeapAllocator::ForElementType<FSimpleElementCollector *> : FHeapAllocator::ForAnyElementType
{
};

/* 6248 */
struct TInlineAllocator<2,FDefaultAllocator>::ForElementType<FSimpleElementCollector *>
{
  TTypeCompatibleBytes<FSimpleElementCollector *> InlineData[2];
  FHeapAllocator::ForElementType<FSimpleElementCollector *> SecondaryData;
};

/* 6249 */
struct TArray<FSimpleElementCollector *,TInlineAllocator<2,FDefaultAllocator> >
{
  TInlineAllocator<2,FDefaultAllocator>::ForElementType<FSimpleElementCollector *> AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 6250 */
struct __cppobj TTypeCompatibleBytes<FSceneView *> : TAlignedBytes<8,8>
{
};

/* 6251 */
struct __cppobj FHeapAllocator::ForElementType<FSceneView *> : FHeapAllocator::ForAnyElementType
{
};

/* 6252 */
struct TInlineAllocator<2,FDefaultAllocator>::ForElementType<FSceneView *>
{
  TTypeCompatibleBytes<FSceneView *> InlineData[2];
  FHeapAllocator::ForElementType<FSceneView *> SecondaryData;
};

/* 6253 */
struct TArray<FSceneView *,TInlineAllocator<2,FDefaultAllocator> >
{
  TInlineAllocator<2,FDefaultAllocator>::ForElementType<FSceneView *> AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 6254 */
struct TMemStackAllocator<0>::ForElementType<FMaterialRenderProxy *>
{
  FMaterialRenderProxy **Data;
};

/* 6255 */
struct TArray<FMaterialRenderProxy *,TMemStackAllocator<0> >
{
  TMemStackAllocator<0>::ForElementType<FMaterialRenderProxy *> AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 6258 */
struct TMemStackAllocator<0>::ForElementType<FOneFrameResource *>
{
  FOneFrameResource **Data;
};

/* 6259 */
struct TArray<FOneFrameResource *,TMemStackAllocator<0> >
{
  TMemStackAllocator<0>::ForElementType<FOneFrameResource *> AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 6260 */
struct TMemStackAllocator<0>::ForElementType<TFunction<void __cdecl(void)> *>
{
  TFunction<void __cdecl(void)> **Data;
};

/* 6261 */
struct TArray<TFunction<void __cdecl(void)> *,TMemStackAllocator<0> >
{
  TMemStackAllocator<0>::ForElementType<TFunction<void __cdecl(void)> *> AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 6262 */
struct FMeshElementCollector
{
  TChunkedArray<FMeshBatch,16384> MeshBatchStorage;
  TArray<TArray<FMeshBatchAndRelevance,TMemStackAllocator<0> > *,TInlineAllocator<2,FDefaultAllocator> > MeshBatches;
  TArray<FSimpleElementCollector *,TInlineAllocator<2,FDefaultAllocator> > SimpleElementCollectors;
  TArray<FSceneView *,TInlineAllocator<2,FDefaultAllocator> > Views;
  TArray<FMaterialRenderProxy *,TMemStackAllocator<0> > TemporaryProxies;
  TArray<FOneFrameResource *,TMemStackAllocator<0> > OneFrameResources;
  FPrimitiveSceneProxy *PrimitiveSceneProxy;
  ERHIFeatureLevel::Type FeatureLevel;
  const bool bUseAsyncTasks;
  TArray<TFunction<void __cdecl(void)> *,TMemStackAllocator<0> > ParallelTasks;
};

/* 6997 */
struct TMemStackAllocator<0>::ForElementType<FVisibleLightInfo>
{
  FVisibleLightInfo *Data;
};

/* 6998 */
struct TArray<FVisibleLightInfo,TMemStackAllocator<0> >
{
  TMemStackAllocator<0>::ForElementType<FVisibleLightInfo> AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 7003 */
struct TMemStackAllocator<0>::ForElementType<FSortedShadowMapAtlas>
{
  FSortedShadowMapAtlas *Data;
};

/* 7004 */
struct TArray<FSortedShadowMapAtlas,TMemStackAllocator<0> >
{
  TMemStackAllocator<0>::ForElementType<FSortedShadowMapAtlas> AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 6999 */
struct TMemStackAllocator<0>::ForElementType<TRefCountPtr<IPooledRenderTarget> >
{
  TRefCountPtr<IPooledRenderTarget> *Data;
};

/* 7000 */
struct TArray<TRefCountPtr<IPooledRenderTarget>,TMemStackAllocator<0> >
{
  TMemStackAllocator<0>::ForElementType<TRefCountPtr<IPooledRenderTarget> > AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 5920 */
struct TRefCountPtr<IPooledRenderTarget>
{
  IPooledRenderTarget *Reference;
};

/* 7001 */
struct FShadowMapRenderTargetsRefCounted
{
  TArray<TRefCountPtr<IPooledRenderTarget>,TMemStackAllocator<0> > ColorTargets;
  TRefCountPtr<IPooledRenderTarget> DepthTarget;
};

/* 6991 */
struct TMemStackAllocator<0>::ForElementType<FProjectedShadowInfo *>
{
  FProjectedShadowInfo **Data;
};

/* 6992 */
struct TArray<FProjectedShadowInfo *,TMemStackAllocator<0> >
{
  TMemStackAllocator<0>::ForElementType<FProjectedShadowInfo *> AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 7002 */
struct FSortedShadowMapAtlas
{
  FShadowMapRenderTargetsRefCounted RenderTargets;
  TArray<FProjectedShadowInfo *,TMemStackAllocator<0> > Shadows;
};

/* 7005 */
struct FSortedShadowMaps
{
  TArray<FSortedShadowMapAtlas,TMemStackAllocator<0> > ShadowMapAtlases;
  TArray<FSortedShadowMapAtlas,TMemStackAllocator<0> > RSMAtlases;
  TArray<FSortedShadowMapAtlas,TMemStackAllocator<0> > ShadowMapCubemaps;
  FSortedShadowMapAtlas PreshadowCache;
  TArray<FSortedShadowMapAtlas,TMemStackAllocator<0> > TranslucencyShadowMapAtlases;
};

/* 7006 */
struct TMemStackAllocator<0>::ForElementType<FName>
{
  FName *Data;
};

/* 7007 */
struct TArray<FName,TMemStackAllocator<0> >
{
  TMemStackAllocator<0>::ForElementType<FName> AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 6890 */
struct FSceneRenderer
{
  FSceneRendererVtbl *vfptr;
  FScene *Scene;
  FSceneViewFamily ViewFamily;
  TArray<FViewInfo,FDefaultAllocator> Views;
  FMeshElementCollector MeshCollector;
  TArray<FVisibleLightInfo,TMemStackAllocator<0> > VisibleLightInfos;
  FSortedShadowMaps SortedShadowsForShadowDepthPass;
  bool bHasRequestedToggleFreeze;
  bool bUsedPrecomputedVisibility;
  TArray<FName,TMemStackAllocator<0> > UsedWholeScenePointLightNames;
  ERHIFeatureLevel::Type FeatureLevel;
  unsigned int InstancedStereoWidth;
  FMemMark *RootMark;
  FIntPoint FamilySize;
};

/* 7008 */
struct TSparseArray<TSetElement<TTuple<FMaterial *,FMaterialShaderMap *> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<24,8> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 7009 */
struct __declspec(align(8)) TSet<TTuple<FMaterial *,FMaterialShaderMap *>,TDefaultMapHashableKeyFuncs<FMaterial *,FMaterialShaderMap *,0>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<TTuple<FMaterial *,FMaterialShaderMap *> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 7010 */
struct TMapBase<FMaterial *,FMaterialShaderMap *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FMaterial *,FMaterialShaderMap *,0> >
{
  TSet<TTuple<FMaterial *,FMaterialShaderMap *>,TDefaultMapHashableKeyFuncs<FMaterial *,FMaterialShaderMap *,0>,FDefaultSetAllocator> Pairs;
};

/* 7011 */
struct __cppobj TSortableMapBase<FMaterial *,FMaterialShaderMap *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FMaterial *,FMaterialShaderMap *,0> > : TMapBase<FMaterial *,FMaterialShaderMap *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FMaterial *,FMaterialShaderMap *,0> >
{
};

/* 7012 */
const struct __cppobj TMap<FMaterial *,FMaterialShaderMap *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FMaterial *,FMaterialShaderMap *,0> > : TSortableMapBase<FMaterial *,FMaterialShaderMap *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FMaterial *,FMaterialShaderMap *,0> >
{
};

/* 7013 */
const struct TArray<FMaterial const *,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 7014 */
struct __cppobj __declspec(align(16)) UExponentialHeightFogComponent : USceneComponent
{
  _BYTE FogInscatteringColor[12];
  UTextureCube *InscatteringColorCubemap;
  float InscatteringColorCubemapAngle;
  FLinearColor InscatteringTextureTint;
  float FullyDirectionalInscatteringColorDistance;
  float NonDirectionalInscatteringColorDistance;
  float DirectionalInscatteringExponent;
  float DirectionalInscatteringStartDistance;
  FLinearColor DirectionalInscatteringColor;
  float FogHeightFalloff;
  float FogMaxOpacity;
  float StartDistance;
  float FogCutoffDistance;
  bool bEnableVolumetricFog;
  float VolumetricFogScatteringDistribution;
  FColor VolumetricFogAlbedo;
  FLinearColor VolumetricFogEmissive;
  float VolumetricFogExtinctionScale;
  float VolumetricFogDistance;
  float VolumetricFogStaticLightingScatteringIntensity;
  bool bOverrideLightColorsWithFogInscatteringColors;
};

/* 6436 */
struct FAtmospherePrecomputeParameters
{
  float DensityHeight;
  float DecayHeight_DEPRECATED;
  int MaxScatteringOrder;
  int TransmittanceTexWidth;
  int TransmittanceTexHeight;
  int IrradianceTexWidth;
  int IrradianceTexHeight;
  int InscatterAltitudeSampleNum;
  int InscatterMuNum;
  int InscatterMuSNum;
  int InscatterNuNum;
};

/* 6438 */
const struct __cppobj __declspec(align(16)) UAtmosphericFogComponent : USceneComponent
{
  float DensityMultiplier;
  float DensityOffset;
  float DistanceScale;
  float AltitudeScale;
  float DistanceOffset;
  float GroundOffset;
  float StartDistance;
  float SunDiscScale;
  float DefaultBrightness;
  FColor DefaultLightColor;
  unsigned __int32 bDisableSunDisk : 1;
  unsigned __int32 bDisableGroundScattering : 1;
  FAtmospherePrecomputeParameters PrecomputeParams;
  UTexture2D *TransmittanceTexture_DEPRECATED;
  UTexture2D *IrradianceTexture_DEPRECATED;
  unsigned int PrecomputeCounter;
  FThreadSafeCounter GameThreadServiceRequest;
  FAtmosphereTextureResource *TransmittanceResource;
  FAtmosphereTextureResource *IrradianceResource;
  FAtmosphereTextureResource *InscatterResource;
  FByteBulkData TransmittanceData;
  FByteBulkData IrradianceData;
  FByteBulkData InscatterData;
};

/* 6439 */
struct __cppobj FAtmosphericFogSceneInfo : FRenderResource
{
  UAtmosphericFogComponent *Component;
  float SunMultiplier;
  float FogMultiplier;
  float InvDensityMultiplier;
  float DensityOffset;
  float GroundOffset;
  float DistanceScale;
  float AltitudeScale;
  float RHeight;
  float StartDistance;
  float DistanceOffset;
  float SunDiscScale;
  FLinearColor DefaultSunColor;
  FVector DefaultSunDirection;
  unsigned int RenderFlag;
  unsigned int InscatterAltitudeSampleNum;
  FAtmosphereTextureResource *TransmittanceResource;
  FAtmosphereTextureResource *IrradianceResource;
  FAtmosphereTextureResource *InscatterResource;
};

/* 6440 */
struct TArray<FWindSourceSceneProxy *,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 4104 */
struct __cppobj TTypeCompatibleBytes<FVertexFactory::FVertexStream> : TAlignedBytes<24,8>
{
};

/* 4105 */
struct TFixedAllocator<16>::ForElementType<FVertexFactory::FVertexStream>
{
  TTypeCompatibleBytes<FVertexFactory::FVertexStream> InlineData[16];
};

/* 4106 */
struct TArray<FVertexFactory::FVertexStream,TFixedAllocator<16> >
{
  TFixedAllocator<16>::ForElementType<FVertexFactory::FVertexStream> AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 4108 */
struct TRefCountPtr<FRHIVertexDeclaration>
{
  FRHIVertexDeclaration *Reference;
};

/* 4109 */
struct __cppobj FVertexFactory : FRenderResource
{
  TArray<FVertexFactory::FVertexStream,TFixedAllocator<16> > Streams;
  bool bNeedsDeclaration;
  bool bSupportsManualVertexFetch;
  __declspec(align(8)) TArray<FVertexFactory::FVertexStream,TFixedAllocator<16> > PositionStream;
  TRefCountPtr<FRHIVertexDeclaration> Declaration;
  TRefCountPtr<FRHIVertexDeclaration> PositionDeclaration;
};

/* 7017 */
struct TArray<ULightComponent const *,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 6305 */
struct __cppobj FStaticMeshDrawListBase
{
};

/* 6306 */
struct TArray<FSetElementId,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 6307 */
struct TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<200,8> >,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 6308 */
struct TSparseArray<TSetElement<TStaticMeshDrawList<FPositionOnlyDepthDrawingPolicy>::FDrawingPolicyLink>,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<200,8> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 6309 */
struct __declspec(align(8)) TSet<TStaticMeshDrawList<FPositionOnlyDepthDrawingPolicy>::FDrawingPolicyLink,TStaticMeshDrawList<FPositionOnlyDepthDrawingPolicy>::FDrawingPolicyKeyFuncs,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<TStaticMeshDrawList<FPositionOnlyDepthDrawingPolicy>::FDrawingPolicyLink>,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 6310 */
struct __cppobj TStaticMeshDrawList<FPositionOnlyDepthDrawingPolicy> : FRenderResource, FStaticMeshDrawListBase
{
  TArray<FSetElementId,FDefaultAllocator> OrderedDrawingPolicies;
  TSet<TStaticMeshDrawList<FPositionOnlyDepthDrawingPolicy>::FDrawingPolicyLink,TStaticMeshDrawList<FPositionOnlyDepthDrawingPolicy>::FDrawingPolicyKeyFuncs,FDefaultSetAllocator> DrawingPolicySet;
  unsigned int FrameNumberForVisibleCount;
  unsigned int ViewStateUniqueId;
};

/* 6311 */
struct TSparseArray<TSetElement<TStaticMeshDrawList<FDepthDrawingPolicy>::FDrawingPolicyLink>,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<240,8> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 6312 */
struct __declspec(align(8)) TSet<TStaticMeshDrawList<FDepthDrawingPolicy>::FDrawingPolicyLink,TStaticMeshDrawList<FDepthDrawingPolicy>::FDrawingPolicyKeyFuncs,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<TStaticMeshDrawList<FDepthDrawingPolicy>::FDrawingPolicyLink>,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 6313 */
struct __cppobj TStaticMeshDrawList<FDepthDrawingPolicy> : FRenderResource, FStaticMeshDrawListBase
{
  TArray<FSetElementId,FDefaultAllocator> OrderedDrawingPolicies;
  TSet<TStaticMeshDrawList<FDepthDrawingPolicy>::FDrawingPolicyLink,TStaticMeshDrawList<FDepthDrawingPolicy>::FDrawingPolicyKeyFuncs,FDefaultSetAllocator> DrawingPolicySet;
  unsigned int FrameNumberForVisibleCount;
  unsigned int ViewStateUniqueId;
};

/* 6314 */
struct TSparseArray<TSetElement<TStaticMeshDrawList<TBasePassDrawingPolicy<FUniformLightMapPolicy> >::FDrawingPolicyLink>,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<240,8> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 6315 */
struct __declspec(align(8)) TSet<TStaticMeshDrawList<TBasePassDrawingPolicy<FUniformLightMapPolicy> >::FDrawingPolicyLink,TStaticMeshDrawList<TBasePassDrawingPolicy<FUniformLightMapPolicy> >::FDrawingPolicyKeyFuncs,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<TStaticMeshDrawList<TBasePassDrawingPolicy<FUniformLightMapPolicy> >::FDrawingPolicyLink>,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 6316 */
struct __cppobj TStaticMeshDrawList<TBasePassDrawingPolicy<FUniformLightMapPolicy> > : FRenderResource, FStaticMeshDrawListBase
{
  TArray<FSetElementId,FDefaultAllocator> OrderedDrawingPolicies;
  TSet<TStaticMeshDrawList<TBasePassDrawingPolicy<FUniformLightMapPolicy> >::FDrawingPolicyLink,TStaticMeshDrawList<TBasePassDrawingPolicy<FUniformLightMapPolicy> >::FDrawingPolicyKeyFuncs,FDefaultSetAllocator> DrawingPolicySet;
  unsigned int FrameNumberForVisibleCount;
  unsigned int ViewStateUniqueId;
};

/* 6317 */
struct TSparseArray<TSetElement<TStaticMeshDrawList<TBasePassDrawingPolicy<FSelfShadowedTranslucencyPolicy> >::FDrawingPolicyLink>,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<240,8> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 6318 */
struct __declspec(align(8)) TSet<TStaticMeshDrawList<TBasePassDrawingPolicy<FSelfShadowedTranslucencyPolicy> >::FDrawingPolicyLink,TStaticMeshDrawList<TBasePassDrawingPolicy<FSelfShadowedTranslucencyPolicy> >::FDrawingPolicyKeyFuncs,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<TStaticMeshDrawList<TBasePassDrawingPolicy<FSelfShadowedTranslucencyPolicy> >::FDrawingPolicyLink>,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 6319 */
struct __cppobj TStaticMeshDrawList<TBasePassDrawingPolicy<FSelfShadowedTranslucencyPolicy> > : FRenderResource, FStaticMeshDrawListBase
{
  TArray<FSetElementId,FDefaultAllocator> OrderedDrawingPolicies;
  TSet<TStaticMeshDrawList<TBasePassDrawingPolicy<FSelfShadowedTranslucencyPolicy> >::FDrawingPolicyLink,TStaticMeshDrawList<TBasePassDrawingPolicy<FSelfShadowedTranslucencyPolicy> >::FDrawingPolicyKeyFuncs,FDefaultSetAllocator> DrawingPolicySet;
  unsigned int FrameNumberForVisibleCount;
  unsigned int ViewStateUniqueId;
};

/* 6320 */
struct TSparseArray<TSetElement<TStaticMeshDrawList<TBasePassDrawingPolicy<FSelfShadowedCachedPointIndirectLightingPolicy> >::FDrawingPolicyLink>,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<240,8> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 6321 */
struct __declspec(align(8)) TSet<TStaticMeshDrawList<TBasePassDrawingPolicy<FSelfShadowedCachedPointIndirectLightingPolicy> >::FDrawingPolicyLink,TStaticMeshDrawList<TBasePassDrawingPolicy<FSelfShadowedCachedPointIndirectLightingPolicy> >::FDrawingPolicyKeyFuncs,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<TStaticMeshDrawList<TBasePassDrawingPolicy<FSelfShadowedCachedPointIndirectLightingPolicy> >::FDrawingPolicyLink>,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 6322 */
struct __cppobj TStaticMeshDrawList<TBasePassDrawingPolicy<FSelfShadowedCachedPointIndirectLightingPolicy> > : FRenderResource, FStaticMeshDrawListBase
{
  TArray<FSetElementId,FDefaultAllocator> OrderedDrawingPolicies;
  TSet<TStaticMeshDrawList<TBasePassDrawingPolicy<FSelfShadowedCachedPointIndirectLightingPolicy> >::FDrawingPolicyLink,TStaticMeshDrawList<TBasePassDrawingPolicy<FSelfShadowedCachedPointIndirectLightingPolicy> >::FDrawingPolicyKeyFuncs,FDefaultSetAllocator> DrawingPolicySet;
  unsigned int FrameNumberForVisibleCount;
  unsigned int ViewStateUniqueId;
};

/* 6323 */
struct TSparseArray<TSetElement<TStaticMeshDrawList<TBasePassDrawingPolicy<FSelfShadowedVolumetricLightmapPolicy> >::FDrawingPolicyLink>,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<240,8> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 6324 */
struct __declspec(align(8)) TSet<TStaticMeshDrawList<TBasePassDrawingPolicy<FSelfShadowedVolumetricLightmapPolicy> >::FDrawingPolicyLink,TStaticMeshDrawList<TBasePassDrawingPolicy<FSelfShadowedVolumetricLightmapPolicy> >::FDrawingPolicyKeyFuncs,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<TStaticMeshDrawList<TBasePassDrawingPolicy<FSelfShadowedVolumetricLightmapPolicy> >::FDrawingPolicyLink>,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 6325 */
struct __cppobj TStaticMeshDrawList<TBasePassDrawingPolicy<FSelfShadowedVolumetricLightmapPolicy> > : FRenderResource, FStaticMeshDrawListBase
{
  TArray<FSetElementId,FDefaultAllocator> OrderedDrawingPolicies;
  TSet<TStaticMeshDrawList<TBasePassDrawingPolicy<FSelfShadowedVolumetricLightmapPolicy> >::FDrawingPolicyLink,TStaticMeshDrawList<TBasePassDrawingPolicy<FSelfShadowedVolumetricLightmapPolicy> >::FDrawingPolicyKeyFuncs,FDefaultSetAllocator> DrawingPolicySet;
  unsigned int FrameNumberForVisibleCount;
  unsigned int ViewStateUniqueId;
};

/* 6326 */
struct TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<216,8> >,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 6327 */
struct TSparseArray<TSetElement<TStaticMeshDrawList<FHitProxyDrawingPolicy>::FDrawingPolicyLink>,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<216,8> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 6328 */
struct __declspec(align(8)) TSet<TStaticMeshDrawList<FHitProxyDrawingPolicy>::FDrawingPolicyLink,TStaticMeshDrawList<FHitProxyDrawingPolicy>::FDrawingPolicyKeyFuncs,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<TStaticMeshDrawList<FHitProxyDrawingPolicy>::FDrawingPolicyLink>,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 6329 */
struct __cppobj TStaticMeshDrawList<FHitProxyDrawingPolicy> : FRenderResource, FStaticMeshDrawListBase
{
  TArray<FSetElementId,FDefaultAllocator> OrderedDrawingPolicies;
  TSet<TStaticMeshDrawList<FHitProxyDrawingPolicy>::FDrawingPolicyLink,TStaticMeshDrawList<FHitProxyDrawingPolicy>::FDrawingPolicyKeyFuncs,FDefaultSetAllocator> DrawingPolicySet;
  unsigned int FrameNumberForVisibleCount;
  unsigned int ViewStateUniqueId;
};

/* 6331 */
struct TSparseArray<TSetElement<TStaticMeshDrawList<FVelocityDrawingPolicy>::FDrawingPolicyLink>,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<224,8> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 6332 */
struct __declspec(align(8)) TSet<TStaticMeshDrawList<FVelocityDrawingPolicy>::FDrawingPolicyLink,TStaticMeshDrawList<FVelocityDrawingPolicy>::FDrawingPolicyKeyFuncs,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<TStaticMeshDrawList<FVelocityDrawingPolicy>::FDrawingPolicyLink>,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 6333 */
struct __cppobj TStaticMeshDrawList<FVelocityDrawingPolicy> : FRenderResource, FStaticMeshDrawListBase
{
  TArray<FSetElementId,FDefaultAllocator> OrderedDrawingPolicies;
  TSet<TStaticMeshDrawList<FVelocityDrawingPolicy>::FDrawingPolicyLink,TStaticMeshDrawList<FVelocityDrawingPolicy>::FDrawingPolicyKeyFuncs,FDefaultSetAllocator> DrawingPolicySet;
  unsigned int FrameNumberForVisibleCount;
  unsigned int ViewStateUniqueId;
};

/* 6334 */
struct TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<232,8> >,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 6335 */
struct TSparseArray<TSetElement<TStaticMeshDrawList<FShadowDepthDrawingPolicy<0> >::FDrawingPolicyLink>,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<232,8> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 6336 */
struct __declspec(align(8)) TSet<TStaticMeshDrawList<FShadowDepthDrawingPolicy<0> >::FDrawingPolicyLink,TStaticMeshDrawList<FShadowDepthDrawingPolicy<0> >::FDrawingPolicyKeyFuncs,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<TStaticMeshDrawList<FShadowDepthDrawingPolicy<0> >::FDrawingPolicyLink>,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 6337 */
struct __cppobj TStaticMeshDrawList<FShadowDepthDrawingPolicy<0> > : FRenderResource, FStaticMeshDrawListBase
{
  TArray<FSetElementId,FDefaultAllocator> OrderedDrawingPolicies;
  TSet<TStaticMeshDrawList<FShadowDepthDrawingPolicy<0> >::FDrawingPolicyLink,TStaticMeshDrawList<FShadowDepthDrawingPolicy<0> >::FDrawingPolicyKeyFuncs,FDefaultSetAllocator> DrawingPolicySet;
  unsigned int FrameNumberForVisibleCount;
  unsigned int ViewStateUniqueId;
};

/* 6338 */
struct TSparseArray<TSetElement<TStaticMeshDrawList<FShadowDepthDrawingPolicy<1> >::FDrawingPolicyLink>,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<232,8> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 6339 */
struct __declspec(align(8)) TSet<TStaticMeshDrawList<FShadowDepthDrawingPolicy<1> >::FDrawingPolicyLink,TStaticMeshDrawList<FShadowDepthDrawingPolicy<1> >::FDrawingPolicyKeyFuncs,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<TStaticMeshDrawList<FShadowDepthDrawingPolicy<1> >::FDrawingPolicyLink>,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 6340 */
struct __cppobj TStaticMeshDrawList<FShadowDepthDrawingPolicy<1> > : FRenderResource, FStaticMeshDrawListBase
{
  TArray<FSetElementId,FDefaultAllocator> OrderedDrawingPolicies;
  TSet<TStaticMeshDrawList<FShadowDepthDrawingPolicy<1> >::FDrawingPolicyLink,TStaticMeshDrawList<FShadowDepthDrawingPolicy<1> >::FDrawingPolicyKeyFuncs,FDefaultSetAllocator> DrawingPolicySet;
  unsigned int FrameNumberForVisibleCount;
  unsigned int ViewStateUniqueId;
};

/* 6341 */
struct TSparseArray<TSetElement<TStaticMeshDrawList<TMobileBasePassDrawingPolicy<FUniformLightMapPolicy> >::FDrawingPolicyLink>,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<224,8> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 6342 */
struct __declspec(align(8)) TSet<TStaticMeshDrawList<TMobileBasePassDrawingPolicy<FUniformLightMapPolicy> >::FDrawingPolicyLink,TStaticMeshDrawList<TMobileBasePassDrawingPolicy<FUniformLightMapPolicy> >::FDrawingPolicyKeyFuncs,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<TStaticMeshDrawList<TMobileBasePassDrawingPolicy<FUniformLightMapPolicy> >::FDrawingPolicyLink>,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 6343 */
struct __cppobj TStaticMeshDrawList<TMobileBasePassDrawingPolicy<FUniformLightMapPolicy> > : FRenderResource, FStaticMeshDrawListBase
{
  TArray<FSetElementId,FDefaultAllocator> OrderedDrawingPolicies;
  TSet<TStaticMeshDrawList<TMobileBasePassDrawingPolicy<FUniformLightMapPolicy> >::FDrawingPolicyLink,TStaticMeshDrawList<TMobileBasePassDrawingPolicy<FUniformLightMapPolicy> >::FDrawingPolicyKeyFuncs,FDefaultSetAllocator> DrawingPolicySet;
  unsigned int FrameNumberForVisibleCount;
  unsigned int ViewStateUniqueId;
};

/* 6344 */
struct TArray<FPrimitiveSceneInfo *,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 6345 */
struct TArray<FPrimitiveSceneProxy *,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 6346 */
struct TArray<FPrimitiveBounds,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 6347 */
struct TArray<FPrimitiveFlagsCompact,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 6348 */
struct TArray<FPrimitiveVisibilityId,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 6349 */
struct TArray<FBoxSphereBounds,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 6350 */
struct TArray<FPrimitiveComponentId,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 6351 */
struct TArray<FScene::FTypeOffsetTableEntry,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 6352 */
struct TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<48,16> >,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 6353 */
struct TSparseArray<FLightSceneInfoCompact,FDefaultSparseArrayAllocator>
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<48,16> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 6362 */
struct TArray<FSkyLightSceneProxy *,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 6363 */
struct TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<8,8> >,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 6364 */
struct TSparseArray<FDeferredDecalProxy *,FDefaultSparseArrayAllocator>
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<8,8> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 6365 */
struct TArray<FPlanarReflectionSceneProxy *,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 6366 */
struct TArray<UPlanarReflectionComponent *,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 6367 */
struct TArray<FReflectionCaptureProxy *,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 6368 */
struct __cppobj FReflectionEnvironmentCubemapArray : FRenderResource
{
  unsigned int MaxCubemaps;
  int CubemapSize;
  TRefCountPtr<IPooledRenderTarget> ReflectionEnvs;
};

/* 6369 */
struct TSparseArray<TSetElement<TTuple<UReflectionCaptureComponent const *,FCaptureComponentSceneState> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<24,8> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 6370 */
struct __declspec(align(8)) TSet<TTuple<UReflectionCaptureComponent const *,FCaptureComponentSceneState>,TDefaultMapHashableKeyFuncs<UReflectionCaptureComponent const *,FCaptureComponentSceneState,0>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<TTuple<UReflectionCaptureComponent const *,FCaptureComponentSceneState> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 6371 */
struct TMapBase<UReflectionCaptureComponent const *,FCaptureComponentSceneState,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<UReflectionCaptureComponent const *,FCaptureComponentSceneState,0> >
{
  TSet<TTuple<UReflectionCaptureComponent const *,FCaptureComponentSceneState>,TDefaultMapHashableKeyFuncs<UReflectionCaptureComponent const *,FCaptureComponentSceneState,0>,FDefaultSetAllocator> Pairs;
};

/* 6372 */
struct __cppobj TSortableMapBase<UReflectionCaptureComponent const *,FCaptureComponentSceneState,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<UReflectionCaptureComponent const *,FCaptureComponentSceneState,0> > : TMapBase<UReflectionCaptureComponent const *,FCaptureComponentSceneState,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<UReflectionCaptureComponent const *,FCaptureComponentSceneState,0> >
{
};

/* 6373 */
struct __cppobj TMap<UReflectionCaptureComponent const *,FCaptureComponentSceneState,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<UReflectionCaptureComponent const *,FCaptureComponentSceneState,0> > : TSortableMapBase<UReflectionCaptureComponent const *,FCaptureComponentSceneState,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<UReflectionCaptureComponent const *,FCaptureComponentSceneState,0> >
{
};

/* 6374 */
struct TSparseArray<UReflectionCaptureComponent *,FDefaultSparseArrayAllocator>
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<8,8> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 6375 */
struct __declspec(align(8)) FReflectionEnvironmentSceneData
{
  bool bRegisteredReflectionCapturesHasChanged;
  TArray<FReflectionCaptureProxy *,FDefaultAllocator> RegisteredReflectionCaptures;
  TArray<FVector,FDefaultAllocator> RegisteredReflectionCapturePositions;
  FReflectionEnvironmentCubemapArray CubemapArray;
  TMap<UReflectionCaptureComponent const *,FCaptureComponentSceneState,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<UReflectionCaptureComponent const *,FCaptureComponentSceneState,0> > AllocatedReflectionCaptureState;
  TBitArray<FDefaultBitArrayAllocator> CubemapArraySlotsUsed;
  TSparseArray<UReflectionCaptureComponent *,FDefaultSparseArrayAllocator> AllocatedReflectionCapturesGameThread;
  int MaxAllocatedReflectionCubemapsGameThread;
};

/* 6376 */
struct TArray<FPrecomputedLightVolume const *,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 6377 */
struct TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<64,4> >,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 6378 */
struct TSparseArray<TSetElement<TTuple<FIntVector,FIndirectLightingCacheBlock> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<64,4> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 6379 */
struct __declspec(align(8)) TSet<TTuple<FIntVector,FIndirectLightingCacheBlock>,TDefaultMapHashableKeyFuncs<FIntVector,FIndirectLightingCacheBlock,0>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<TTuple<FIntVector,FIndirectLightingCacheBlock> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 6380 */
struct TMapBase<FIntVector,FIndirectLightingCacheBlock,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FIntVector,FIndirectLightingCacheBlock,0> >
{
  TSet<TTuple<FIntVector,FIndirectLightingCacheBlock>,TDefaultMapHashableKeyFuncs<FIntVector,FIndirectLightingCacheBlock,0>,FDefaultSetAllocator> Pairs;
};

/* 6381 */
struct __cppobj TSortableMapBase<FIntVector,FIndirectLightingCacheBlock,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FIntVector,FIndirectLightingCacheBlock,0> > : TMapBase<FIntVector,FIndirectLightingCacheBlock,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FIntVector,FIndirectLightingCacheBlock,0> >
{
};

/* 6382 */
struct __cppobj TMap<FIntVector,FIndirectLightingCacheBlock,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FIntVector,FIndirectLightingCacheBlock,0> > : TSortableMapBase<FIntVector,FIndirectLightingCacheBlock,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FIntVector,FIndirectLightingCacheBlock,0> >
{
};

/* 6383 */
struct __cppobj TTypeCompatibleBytes<FTextureLayout3d::FTextureLayoutNode3d> : TAlignedBytes<24,4>
{
};

/* 6384 */
struct __cppobj FHeapAllocator::ForElementType<FTextureLayout3d::FTextureLayoutNode3d> : FHeapAllocator::ForAnyElementType
{
};

/* 6385 */
struct TInlineAllocator<5,FDefaultAllocator>::ForElementType<FTextureLayout3d::FTextureLayoutNode3d>
{
  TTypeCompatibleBytes<FTextureLayout3d::FTextureLayoutNode3d> InlineData[5];
  FHeapAllocator::ForElementType<FTextureLayout3d::FTextureLayoutNode3d> SecondaryData;
};

/* 6386 */
struct TArray<FTextureLayout3d::FTextureLayoutNode3d,TInlineAllocator<5,FDefaultAllocator> >
{
  TInlineAllocator<5,FDefaultAllocator>::ForElementType<FTextureLayout3d::FTextureLayoutNode3d> AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 6387 */
struct FTextureLayout3d
{
  unsigned int SizeX;
  unsigned int SizeY;
  unsigned int SizeZ;
  bool bPowerOfTwoSize;
  bool bAlignByFour;
  TArray<FTextureLayout3d::FTextureLayoutNode3d,TInlineAllocator<5,FDefaultAllocator> > Nodes;
};

/* 6388 */
struct TSparseArray<TSetElement<TTuple<FPrimitiveComponentId,FIndirectLightingCacheAllocation *> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<24,8> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 6389 */
struct __declspec(align(8)) TSet<TTuple<FPrimitiveComponentId,FIndirectLightingCacheAllocation *>,TDefaultMapHashableKeyFuncs<FPrimitiveComponentId,FIndirectLightingCacheAllocation *,0>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<TTuple<FPrimitiveComponentId,FIndirectLightingCacheAllocation *> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 6390 */
struct TMapBase<FPrimitiveComponentId,FIndirectLightingCacheAllocation *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FPrimitiveComponentId,FIndirectLightingCacheAllocation *,0> >
{
  TSet<TTuple<FPrimitiveComponentId,FIndirectLightingCacheAllocation *>,TDefaultMapHashableKeyFuncs<FPrimitiveComponentId,FIndirectLightingCacheAllocation *,0>,FDefaultSetAllocator> Pairs;
};

/* 6391 */
struct __cppobj TSortableMapBase<FPrimitiveComponentId,FIndirectLightingCacheAllocation *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FPrimitiveComponentId,FIndirectLightingCacheAllocation *,0> > : TMapBase<FPrimitiveComponentId,FIndirectLightingCacheAllocation *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FPrimitiveComponentId,FIndirectLightingCacheAllocation *,0> >
{
};

/* 6392 */
struct __cppobj TMap<FPrimitiveComponentId,FIndirectLightingCacheAllocation *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FPrimitiveComponentId,FIndirectLightingCacheAllocation *,0> > : TSortableMapBase<FPrimitiveComponentId,FIndirectLightingCacheAllocation *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FPrimitiveComponentId,FIndirectLightingCacheAllocation *,0> >
{
};

/* 6393 */
struct __cppobj FIndirectLightingCache : FRenderResource
{
  bool bUpdateAllCacheEntries;
  int CacheSize;
  TRefCountPtr<IPooledRenderTarget> Texture0;
  TRefCountPtr<IPooledRenderTarget> Texture1;
  TRefCountPtr<IPooledRenderTarget> Texture2;
  TMap<FIntVector,FIndirectLightingCacheBlock,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FIntVector,FIndirectLightingCacheBlock,0> > VolumeBlocks;
  FTextureLayout3d BlockAllocator;
  int NextPointId;
  TMap<FPrimitiveComponentId,FIndirectLightingCacheAllocation *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FPrimitiveComponentId,FIndirectLightingCacheAllocation *,0> > PrimitiveAllocations;
};

/* 6394 */
struct TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<192,16> >,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 6395 */
struct TSparseArray<TSetElement<TTuple<FVector,FVolumetricLightmapInterpolation> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<192,16> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 6396 */
struct __declspec(align(8)) TSet<TTuple<FVector,FVolumetricLightmapInterpolation>,TDefaultMapHashableKeyFuncs<FVector,FVolumetricLightmapInterpolation,0>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<TTuple<FVector,FVolumetricLightmapInterpolation> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 6397 */
struct TMapBase<FVector,FVolumetricLightmapInterpolation,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FVector,FVolumetricLightmapInterpolation,0> >
{
  TSet<TTuple<FVector,FVolumetricLightmapInterpolation>,TDefaultMapHashableKeyFuncs<FVector,FVolumetricLightmapInterpolation,0>,FDefaultSetAllocator> Pairs;
};

/* 6398 */
struct __cppobj TSortableMapBase<FVector,FVolumetricLightmapInterpolation,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FVector,FVolumetricLightmapInterpolation,0> > : TMapBase<FVector,FVolumetricLightmapInterpolation,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FVector,FVolumetricLightmapInterpolation,0> >
{
};

/* 6399 */
struct __cppobj TMap<FVector,FVolumetricLightmapInterpolation,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FVector,FVolumetricLightmapInterpolation,0> > : TSortableMapBase<FVector,FVolumetricLightmapInterpolation,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FVector,FVolumetricLightmapInterpolation,0> >
{
};

/* 6400 */
struct TArray<FPrecomputedVolumetricLightmap const *,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 6401 */
struct FVolumetricLightmapSceneData
{
  TMap<FVector,FVolumetricLightmapInterpolation,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FVector,FVolumetricLightmapInterpolation,0> > CPUInterpolationCache;
  TArray<FPrecomputedVolumetricLightmap const *,FDefaultAllocator> LevelVolumetricLightmaps;
};

/* 6403 */
struct TArray<FPrimitiveAndInstance,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 6404 */
struct TArray<FPrimitiveSceneInfo const *,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 6406 */
struct TSparseArray<TSetElement<TTuple<FPrimitiveSceneInfo const *,FPrimitiveSurfelAllocation> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<32,8> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 6407 */
struct __declspec(align(8)) TSet<TTuple<FPrimitiveSceneInfo const *,FPrimitiveSurfelAllocation>,TDefaultMapHashableKeyFuncs<FPrimitiveSceneInfo const *,FPrimitiveSurfelAllocation,0>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<TTuple<FPrimitiveSceneInfo const *,FPrimitiveSurfelAllocation> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 6408 */
struct TMapBase<FPrimitiveSceneInfo const *,FPrimitiveSurfelAllocation,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FPrimitiveSceneInfo const *,FPrimitiveSurfelAllocation,0> >
{
  TSet<TTuple<FPrimitiveSceneInfo const *,FPrimitiveSurfelAllocation>,TDefaultMapHashableKeyFuncs<FPrimitiveSceneInfo const *,FPrimitiveSurfelAllocation,0>,FDefaultSetAllocator> Pairs;
};

/* 6409 */
struct __cppobj TSortableMapBase<FPrimitiveSceneInfo const *,FPrimitiveSurfelAllocation,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FPrimitiveSceneInfo const *,FPrimitiveSurfelAllocation,0> > : TMapBase<FPrimitiveSceneInfo const *,FPrimitiveSurfelAllocation,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FPrimitiveSceneInfo const *,FPrimitiveSurfelAllocation,0> >
{
};

/* 6410 */
struct __cppobj TMap<FPrimitiveSceneInfo const *,FPrimitiveSurfelAllocation,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FPrimitiveSceneInfo const *,FPrimitiveSurfelAllocation,0> > : TSortableMapBase<FPrimitiveSceneInfo const *,FPrimitiveSurfelAllocation,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FPrimitiveSceneInfo const *,FPrimitiveSurfelAllocation,0> >
{
};

/* 6411 */
struct TArray<FPrimitiveSurfelFreeEntry,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 6412 */
struct FSurfelBufferAllocator
{
  int NumSurfelsInBuffer;
  TMap<FPrimitiveSceneInfo const *,FPrimitiveSurfelAllocation,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FPrimitiveSceneInfo const *,FPrimitiveSurfelAllocation,0> > Allocations;
  TArray<FPrimitiveSurfelFreeEntry,FDefaultAllocator> FreeList;
};

/* 6414 */
struct TSparseArray<TSetElement<FPrimitiveSceneInfo *>,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<16,8> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 6415 */
struct __declspec(align(8)) TSet<FPrimitiveSceneInfo *,DefaultKeyFuncs<FPrimitiveSceneInfo *,0>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<FPrimitiveSceneInfo *>,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 6416 */
struct TArray<FPrimitiveRemoveInfo,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 5997 */
struct TArray<FVector4,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 6417 */
struct __declspec(align(4)) FDistanceFieldSceneData
{
  int NumObjectsInBuffer;
  FDistanceFieldObjectBuffers *ObjectBuffers;
  TArray<FPrimitiveAndInstance,FDefaultAllocator> PrimitiveInstanceMapping;
  TArray<FPrimitiveSceneInfo const *,FDefaultAllocator> HeightfieldPrimitives;
  FSurfelBuffers *SurfelBuffers;
  FSurfelBufferAllocator SurfelAllocations;
  FInstancedSurfelBuffers *InstancedSurfelBuffers;
  FSurfelBufferAllocator InstancedSurfelAllocations;
  TArray<FPrimitiveSceneInfo *,FDefaultAllocator> PendingAddOperations;
  TSet<FPrimitiveSceneInfo *,DefaultKeyFuncs<FPrimitiveSceneInfo *,0>,FDefaultSetAllocator> PendingUpdateOperations;
  TArray<FPrimitiveRemoveInfo,FDefaultAllocator> PendingRemoveOperations;
  TArray<FVector4,FDefaultAllocator> PrimitiveModifiedBounds[2];
  int AtlasGeneration;
  bool bTrackAllPrimitives;
  bool bCanUse16BitObjectIndices;
};

/* 6418 */
struct TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<624,16> >,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 6419 */
struct TSparseArray<TSetElement<TTuple<int,FCachedShadowMapData> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<624,16> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 6420 */
struct __declspec(align(8)) TSet<TTuple<int,FCachedShadowMapData>,TDefaultMapHashableKeyFuncs<int,FCachedShadowMapData,0>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<TTuple<int,FCachedShadowMapData> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 6421 */
struct TMapBase<int,FCachedShadowMapData,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<int,FCachedShadowMapData,0> >
{
  TSet<TTuple<int,FCachedShadowMapData>,TDefaultMapHashableKeyFuncs<int,FCachedShadowMapData,0>,FDefaultSetAllocator> Pairs;
};

/* 6422 */
struct __cppobj TSortableMapBase<int,FCachedShadowMapData,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<int,FCachedShadowMapData,0> > : TMapBase<int,FCachedShadowMapData,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<int,FCachedShadowMapData,0> >
{
};

/* 6423 */
struct __cppobj TMap<int,FCachedShadowMapData,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<int,FCachedShadowMapData,0> > : TSortableMapBase<int,FCachedShadowMapData,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<int,FCachedShadowMapData,0> >
{
};

/* 6424 */
struct TArray<TRefCountPtr<FProjectedShadowInfo>,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 6425 */
struct TAlignedBytes<20,4>::TPadding
{
  char Pad[20];
};

/* 6426 */
struct TAlignedBytes<20,4>
{
  TAlignedBytes<20,4>::TPadding Padding;
};

/* 6427 */
struct __cppobj TTypeCompatibleBytes<FTextureLayout::FTextureLayoutNode> : TAlignedBytes<20,4>
{
};

/* 6428 */
struct __cppobj FHeapAllocator::ForElementType<FTextureLayout::FTextureLayoutNode> : FHeapAllocator::ForAnyElementType
{
};

/* 6429 */
struct TInlineAllocator<5,FDefaultAllocator>::ForElementType<FTextureLayout::FTextureLayoutNode>
{
  TTypeCompatibleBytes<FTextureLayout::FTextureLayoutNode> InlineData[5];
  FHeapAllocator::ForElementType<FTextureLayout::FTextureLayoutNode> SecondaryData;
};

/* 6430 */
struct TArray<FTextureLayout::FTextureLayoutNode,TInlineAllocator<5,FDefaultAllocator> >
{
  TInlineAllocator<5,FDefaultAllocator>::ForElementType<FTextureLayout::FTextureLayoutNode> AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 6431 */
struct FTextureLayout
{
  unsigned int SizeX;
  unsigned int SizeY;
  bool bPowerOfTwoSize;
  bool bForce2To1Aspect;
  bool bAlignByFour;
  TArray<FTextureLayout::FTextureLayoutNode,TInlineAllocator<5,FDefaultAllocator> > Nodes;
};

/* 6432 */
struct TSparseArray<FStaticMesh *,FDefaultSparseArrayAllocator>
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<8,8> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 6433 */
struct TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<1,1> >,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 6434 */
struct TSparseArray<bool,FDefaultSparseArrayAllocator>
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<1,1> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 6435 */
struct TArray<FExponentialHeightFogSceneInfo,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 6441 */
struct TArray<UWindDirectionalSourceComponent *,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 6442 */
struct TSparseArray<TSetElement<TTuple<UStaticMesh const *,FSpeedTreeWindComputation *> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<24,8> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 6443 */
struct __declspec(align(8)) TSet<TTuple<UStaticMesh const *,FSpeedTreeWindComputation *>,TDefaultMapHashableKeyFuncs<UStaticMesh const *,FSpeedTreeWindComputation *,0>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<TTuple<UStaticMesh const *,FSpeedTreeWindComputation *> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 6444 */
struct TMapBase<UStaticMesh const *,FSpeedTreeWindComputation *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<UStaticMesh const *,FSpeedTreeWindComputation *,0> >
{
  TSet<TTuple<UStaticMesh const *,FSpeedTreeWindComputation *>,TDefaultMapHashableKeyFuncs<UStaticMesh const *,FSpeedTreeWindComputation *,0>,FDefaultSetAllocator> Pairs;
};

/* 6445 */
struct __cppobj TSortableMapBase<UStaticMesh const *,FSpeedTreeWindComputation *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<UStaticMesh const *,FSpeedTreeWindComputation *,0> > : TMapBase<UStaticMesh const *,FSpeedTreeWindComputation *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<UStaticMesh const *,FSpeedTreeWindComputation *,0> >
{
};

/* 6446 */
struct __cppobj TMap<UStaticMesh const *,FSpeedTreeWindComputation *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<UStaticMesh const *,FSpeedTreeWindComputation *,0> > : TSortableMapBase<UStaticMesh const *,FSpeedTreeWindComputation *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<UStaticMesh const *,FSpeedTreeWindComputation *,0> >
{
};

/* 6447 */
struct TSparseArray<TSetElement<TTuple<FVertexFactory *,UStaticMesh const *> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<24,8> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 6448 */
struct __declspec(align(8)) TSet<TTuple<FVertexFactory *,UStaticMesh const *>,TDefaultMapHashableKeyFuncs<FVertexFactory *,UStaticMesh const *,0>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<TTuple<FVertexFactory *,UStaticMesh const *> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 6449 */
struct TMapBase<FVertexFactory *,UStaticMesh const *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FVertexFactory *,UStaticMesh const *,0> >
{
  TSet<TTuple<FVertexFactory *,UStaticMesh const *>,TDefaultMapHashableKeyFuncs<FVertexFactory *,UStaticMesh const *,0>,FDefaultSetAllocator> Pairs;
};

/* 6450 */
struct __cppobj TSortableMapBase<FVertexFactory *,UStaticMesh const *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FVertexFactory *,UStaticMesh const *,0> > : TMapBase<FVertexFactory *,UStaticMesh const *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FVertexFactory *,UStaticMesh const *,0> >
{
};

/* 6451 */
struct __cppobj TMap<FVertexFactory *,UStaticMesh const *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FVertexFactory *,UStaticMesh const *,0> > : TSortableMapBase<FVertexFactory *,UStaticMesh const *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FVertexFactory *,UStaticMesh const *,0> >
{
};

/* 6452 */
struct TSparseArray<TSetElement<TTuple<FPrimitiveComponentId,FAttachmentGroupSceneInfo> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<40,8> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 6453 */
struct __declspec(align(8)) TSet<TTuple<FPrimitiveComponentId,FAttachmentGroupSceneInfo>,TDefaultMapHashableKeyFuncs<FPrimitiveComponentId,FAttachmentGroupSceneInfo,0>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<TTuple<FPrimitiveComponentId,FAttachmentGroupSceneInfo> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 6454 */
struct TMapBase<FPrimitiveComponentId,FAttachmentGroupSceneInfo,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FPrimitiveComponentId,FAttachmentGroupSceneInfo,0> >
{
  TSet<TTuple<FPrimitiveComponentId,FAttachmentGroupSceneInfo>,TDefaultMapHashableKeyFuncs<FPrimitiveComponentId,FAttachmentGroupSceneInfo,0>,FDefaultSetAllocator> Pairs;
};

/* 6455 */
struct __cppobj TSortableMapBase<FPrimitiveComponentId,FAttachmentGroupSceneInfo,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FPrimitiveComponentId,FAttachmentGroupSceneInfo,0> > : TMapBase<FPrimitiveComponentId,FAttachmentGroupSceneInfo,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FPrimitiveComponentId,FAttachmentGroupSceneInfo,0> >
{
};

/* 6456 */
struct __cppobj TMap<FPrimitiveComponentId,FAttachmentGroupSceneInfo,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FPrimitiveComponentId,FAttachmentGroupSceneInfo,0> > : TSortableMapBase<FPrimitiveComponentId,FAttachmentGroupSceneInfo,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FPrimitiveComponentId,FAttachmentGroupSceneInfo,0> >
{
};

/* 6457 */
struct __cppobj TTypeCompatibleBytes<FLightSceneInfoCompact> : TAlignedBytes<48,16>
{
};

/* 6458 */
struct __cppobj FHeapAllocator::ForElementType<FLightSceneInfoCompact> : FHeapAllocator::ForAnyElementType
{
};

/* 6459 */
struct __declspec(align(16)) TInlineAllocator<16,FDefaultAllocator>::ForElementType<FLightSceneInfoCompact>
{
  TTypeCompatibleBytes<FLightSceneInfoCompact> InlineData[16];
  FHeapAllocator::ForElementType<FLightSceneInfoCompact> SecondaryData;
};

/* 6460 */
struct __declspec(align(16)) TArray<FLightSceneInfoCompact,TInlineAllocator<16,FDefaultAllocator> >
{
  TInlineAllocator<16,FDefaultAllocator>::ForElementType<FLightSceneInfoCompact> AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 6461 */
struct __declspec(align(8)) TOctree<FLightSceneInfoCompact,FLightOctreeSemantics>::FNode
{
  TArray<FLightSceneInfoCompact,TInlineAllocator<16,FDefaultAllocator> > Elements;
  TOctree<FLightSceneInfoCompact,FLightOctreeSemantics>::FNode *Parent;
  TOctree<FLightSceneInfoCompact,FLightOctreeSemantics>::FNode *Children[8];
  unsigned __int32 InclusiveNumElements : 31;
  unsigned __int32 bIsLeaf : 1;
};

/* 6462 */
struct TOctree<FLightSceneInfoCompact,FLightOctreeSemantics>
{
  TOctree<FLightSceneInfoCompact,FLightOctreeSemantics>::FNode RootNode;
  FOctreeNodeContext RootNodeContext;
  float MinLeafExtent;
  unsigned __int64 TotalSizeBytes;
};

/* 6463 */
struct TAlignedBytes<64,8>::TPadding
{
  char Pad[64];
};

/* 6464 */
struct TAlignedBytes<64,8>
{
  TAlignedBytes<64,8>::TPadding Padding;
};

/* 6465 */
struct __cppobj TTypeCompatibleBytes<FPrimitiveSceneInfoCompact> : TAlignedBytes<64,8>
{
};

/* 6466 */
struct __cppobj FHeapAllocator::ForElementType<FPrimitiveSceneInfoCompact> : FHeapAllocator::ForAnyElementType
{
};

/* 6467 */
struct TInlineAllocator<256,FDefaultAllocator>::ForElementType<FPrimitiveSceneInfoCompact>
{
  TTypeCompatibleBytes<FPrimitiveSceneInfoCompact> InlineData[256];
  FHeapAllocator::ForElementType<FPrimitiveSceneInfoCompact> SecondaryData;
};

/* 6468 */
struct TArray<FPrimitiveSceneInfoCompact,TInlineAllocator<256,FDefaultAllocator> >
{
  TInlineAllocator<256,FDefaultAllocator>::ForElementType<FPrimitiveSceneInfoCompact> AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 6469 */
struct __declspec(align(8)) TOctree<FPrimitiveSceneInfoCompact,FPrimitiveOctreeSemantics>::FNode
{
  TArray<FPrimitiveSceneInfoCompact,TInlineAllocator<256,FDefaultAllocator> > Elements;
  TOctree<FPrimitiveSceneInfoCompact,FPrimitiveOctreeSemantics>::FNode *Parent;
  TOctree<FPrimitiveSceneInfoCompact,FPrimitiveOctreeSemantics>::FNode *Children[8];
  unsigned __int32 InclusiveNumElements : 31;
  unsigned __int32 bIsLeaf : 1;
};

/* 6470 */
struct TOctree<FPrimitiveSceneInfoCompact,FPrimitiveOctreeSemantics>
{
  TOctree<FPrimitiveSceneInfoCompact,FPrimitiveOctreeSemantics>::FNode RootNode;
  FOctreeNodeContext RootNodeContext;
  float MinLeafExtent;
  unsigned __int64 TotalSizeBytes;
};

/* 6471 */
struct TSparseArray<TSetElement<TTuple<FPrimitiveComponentId,FMotionBlurInfo> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<192,16> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 6472 */
struct __declspec(align(8)) TSet<TTuple<FPrimitiveComponentId,FMotionBlurInfo>,TDefaultMapHashableKeyFuncs<FPrimitiveComponentId,FMotionBlurInfo,0>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<TTuple<FPrimitiveComponentId,FMotionBlurInfo> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 6473 */
struct TMapBase<FPrimitiveComponentId,FMotionBlurInfo,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FPrimitiveComponentId,FMotionBlurInfo,0> >
{
  TSet<TTuple<FPrimitiveComponentId,FMotionBlurInfo>,TDefaultMapHashableKeyFuncs<FPrimitiveComponentId,FMotionBlurInfo,0>,FDefaultSetAllocator> Pairs;
};

/* 6474 */
struct __cppobj TSortableMapBase<FPrimitiveComponentId,FMotionBlurInfo,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FPrimitiveComponentId,FMotionBlurInfo,0> > : TMapBase<FPrimitiveComponentId,FMotionBlurInfo,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FPrimitiveComponentId,FMotionBlurInfo,0> >
{
};

/* 6475 */
struct __cppobj TMap<FPrimitiveComponentId,FMotionBlurInfo,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FPrimitiveComponentId,FMotionBlurInfo,0> > : TSortableMapBase<FPrimitiveComponentId,FMotionBlurInfo,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FPrimitiveComponentId,FMotionBlurInfo,0> >
{
};

/* 6476 */
struct __declspec(align(8)) FMotionBlurInfoData
{
  TMap<FPrimitiveComponentId,FMotionBlurInfo,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FPrimitiveComponentId,FMotionBlurInfo,0> > MotionBlurInfos;
  bool bShouldClearMotionBlurInfo;
  bool bWorldIsPaused;
};

/* 6477 */
struct TSparseArray<TSetElement<TTuple<FGuid,TRefCountPtr<FRHIUniformBuffer> > >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<32,8> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 6478 */
struct __declspec(align(8)) TSet<TTuple<FGuid,TRefCountPtr<FRHIUniformBuffer> >,TDefaultMapHashableKeyFuncs<FGuid,TRefCountPtr<FRHIUniformBuffer>,0>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<TTuple<FGuid,TRefCountPtr<FRHIUniformBuffer> > >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 6479 */
struct TMapBase<FGuid,TRefCountPtr<FRHIUniformBuffer>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FGuid,TRefCountPtr<FRHIUniformBuffer>,0> >
{
  TSet<TTuple<FGuid,TRefCountPtr<FRHIUniformBuffer> >,TDefaultMapHashableKeyFuncs<FGuid,TRefCountPtr<FRHIUniformBuffer>,0>,FDefaultSetAllocator> Pairs;
};

/* 6480 */
struct __cppobj TSortableMapBase<FGuid,TRefCountPtr<FRHIUniformBuffer>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FGuid,TRefCountPtr<FRHIUniformBuffer>,0> > : TMapBase<FGuid,TRefCountPtr<FRHIUniformBuffer>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FGuid,TRefCountPtr<FRHIUniformBuffer>,0> >
{
};

/* 6481 */
struct __cppobj TMap<FGuid,TRefCountPtr<FRHIUniformBuffer>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FGuid,TRefCountPtr<FRHIUniformBuffer>,0> > : TSortableMapBase<FGuid,TRefCountPtr<FRHIUniformBuffer>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FGuid,TRefCountPtr<FRHIUniformBuffer>,0> >
{
};

/* 6483 */
struct TSparseArray<TSetElement<TTuple<FPrimitiveComponentId,FLODSceneTree::FLODSceneNode> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<40,8> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 6484 */
struct __declspec(align(8)) TSet<TTuple<FPrimitiveComponentId,FLODSceneTree::FLODSceneNode>,TDefaultMapHashableKeyFuncs<FPrimitiveComponentId,FLODSceneTree::FLODSceneNode,0>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<TTuple<FPrimitiveComponentId,FLODSceneTree::FLODSceneNode> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 6485 */
struct TMapBase<FPrimitiveComponentId,FLODSceneTree::FLODSceneNode,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FPrimitiveComponentId,FLODSceneTree::FLODSceneNode,0> >
{
  TSet<TTuple<FPrimitiveComponentId,FLODSceneTree::FLODSceneNode>,TDefaultMapHashableKeyFuncs<FPrimitiveComponentId,FLODSceneTree::FLODSceneNode,0>,FDefaultSetAllocator> Pairs;
};

/* 6486 */
struct __cppobj TSortableMapBase<FPrimitiveComponentId,FLODSceneTree::FLODSceneNode,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FPrimitiveComponentId,FLODSceneTree::FLODSceneNode,0> > : TMapBase<FPrimitiveComponentId,FLODSceneTree::FLODSceneNode,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FPrimitiveComponentId,FLODSceneTree::FLODSceneNode,0> >
{
};

/* 6487 */
struct __cppobj TMap<FPrimitiveComponentId,FLODSceneTree::FLODSceneNode,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FPrimitiveComponentId,FLODSceneTree::FLODSceneNode,0> > : TSortableMapBase<FPrimitiveComponentId,FLODSceneTree::FLODSceneNode,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FPrimitiveComponentId,FLODSceneTree::FLODSceneNode,0> >
{
};

/* 6488 */
struct FLODSceneTree
{
  FScene *Scene;
  TMap<FPrimitiveComponentId,FLODSceneTree::FLODSceneNode,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FPrimitiveComponentId,FLODSceneTree::FLODSceneNode,0> > SceneNodes;
};

/* 6482 */
struct __cppobj FScene : FSceneInterface
{
  UWorld *World;
  FFXSystemInterface *FXSystem;
  TStaticMeshDrawList<FPositionOnlyDepthDrawingPolicy> PositionOnlyDepthDrawList;
  TStaticMeshDrawList<FDepthDrawingPolicy> DepthDrawList;
  TStaticMeshDrawList<FDepthDrawingPolicy> MaskedDepthDrawList;
  TStaticMeshDrawList<TBasePassDrawingPolicy<FUniformLightMapPolicy> > BasePassUniformLightMapPolicyDrawList[2];
  TStaticMeshDrawList<TBasePassDrawingPolicy<FSelfShadowedTranslucencyPolicy> > BasePassSelfShadowedTranslucencyDrawList[2];
  TStaticMeshDrawList<TBasePassDrawingPolicy<FSelfShadowedCachedPointIndirectLightingPolicy> > BasePassSelfShadowedCachedPointIndirectTranslucencyDrawList[2];
  TStaticMeshDrawList<TBasePassDrawingPolicy<FSelfShadowedVolumetricLightmapPolicy> > BasePassSelfShadowedVolumetricLightmapTranslucencyDrawList[2];
  TStaticMeshDrawList<FHitProxyDrawingPolicy> HitProxyDrawList;
  TStaticMeshDrawList<FHitProxyDrawingPolicy> HitProxyDrawList_OpaqueOnly;
  TStaticMeshDrawList<FVelocityDrawingPolicy> VelocityDrawList;
  TStaticMeshDrawList<FShadowDepthDrawingPolicy<0> > WholeSceneShadowDepthDrawList;
  TStaticMeshDrawList<FShadowDepthDrawingPolicy<1> > WholeSceneReflectiveShadowMapDrawList;
  TStaticMeshDrawList<TMobileBasePassDrawingPolicy<FUniformLightMapPolicy> > MobileBasePassUniformLightMapPolicyDrawList[2];
  TStaticMeshDrawList<TMobileBasePassDrawingPolicy<FUniformLightMapPolicy> > MobileBasePassUniformLightMapPolicyDrawListWithCSM[2];
  TArray<FPrimitiveSceneInfo *,FDefaultAllocator> Primitives;
  TArray<FPrimitiveSceneProxy *,FDefaultAllocator> PrimitiveSceneProxies;
  TArray<FPrimitiveBounds,FDefaultAllocator> PrimitiveBounds;
  TArray<FPrimitiveFlagsCompact,FDefaultAllocator> PrimitiveFlagsCompact;
  TArray<FPrimitiveVisibilityId,FDefaultAllocator> PrimitiveVisibilityIds;
  TArray<unsigned char,FDefaultAllocator> PrimitiveOcclusionFlags;
  TArray<FBoxSphereBounds,FDefaultAllocator> PrimitiveOcclusionBounds;
  TArray<FPrimitiveComponentId,FDefaultAllocator> PrimitiveComponentIds;
  TArray<FScene::FTypeOffsetTableEntry,FDefaultAllocator> TypeOffsetTable;
  TSparseArray<FLightSceneInfoCompact,FDefaultSparseArrayAllocator> Lights;
  TSparseArray<FLightSceneInfoCompact,FDefaultSparseArrayAllocator> InvisibleLights;
  TArray<FName,FDefaultAllocator> OverflowingDynamicShadowedLights;
  bool bStaticDrawListsMobileHDR;
  bool bStaticDrawListsMobileHDR32bpp;
  int StaticDrawListsEarlyZPassMode;
  int StaticDrawShaderPipelines;
  bool bScenesPrimitivesNeedStaticMeshElementUpdate;
  FSkyLightSceneProxy *SkyLight;
  TArray<FSkyLightSceneProxy *,FDefaultAllocator> SkyLightStack;
  FLightSceneInfo *SimpleDirectionalLight;
  FLightSceneInfo *MobileDirectionalLights[3];
  FLightSceneInfo *SunLight;
  TSparseArray<FDeferredDecalProxy *,FDefaultSparseArrayAllocator> Decals;
  TArray<FPrimitiveSceneInfo *,FDefaultAllocator> DynamicIndirectCasterPrimitives;
  TArray<FPlanarReflectionSceneProxy *,FDefaultAllocator> PlanarReflections;
  TArray<UPlanarReflectionComponent *,FDefaultAllocator> PlanarReflections_GameThread;
  FReflectionEnvironmentSceneData ReflectionSceneData;
  TArray<FPrecomputedLightVolume const *,FDefaultAllocator> PrecomputedLightVolumes;
  FIndirectLightingCache IndirectLightingCache;
  FVolumetricLightmapSceneData VolumetricLightmapSceneData;
  FDistanceFieldSceneData DistanceFieldSceneData;
  TMap<int,FCachedShadowMapData,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<int,FCachedShadowMapData,0> > CachedShadowMaps;
  TRefCountPtr<IPooledRenderTarget> PreShadowCacheDepthZ;
  TArray<TRefCountPtr<FProjectedShadowInfo>,FDefaultAllocator> CachedPreshadows;
  FTextureLayout PreshadowCacheLayout;
  TSparseArray<FStaticMesh *,FDefaultSparseArrayAllocator> StaticMeshes;
  TSparseArray<bool,FDefaultSparseArrayAllocator> StaticMeshBatchVisibility;
  TArray<FExponentialHeightFogSceneInfo,FDefaultAllocator> ExponentialFogs;
  FAtmosphericFogSceneInfo *AtmosphericFog;
  TArray<FWindSourceSceneProxy *,FDefaultAllocator> WindSources;
  TArray<UWindDirectionalSourceComponent *,FDefaultAllocator> WindComponents_GameThread;
  TMap<UStaticMesh const *,FSpeedTreeWindComputation *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<UStaticMesh const *,FSpeedTreeWindComputation *,0> > SpeedTreeWindComputationMap;
  TMap<FVertexFactory *,UStaticMesh const *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FVertexFactory *,UStaticMesh const *,0> > SpeedTreeVertexFactoryMap;
  TMap<FPrimitiveComponentId,FAttachmentGroupSceneInfo,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FPrimitiveComponentId,FAttachmentGroupSceneInfo,0> > AttachmentGroups;
  FPrecomputedVisibilityHandler *PrecomputedVisibilityHandler;
  __declspec(align(16)) TOctree<FLightSceneInfoCompact,FLightOctreeSemantics> LightOctree;
  TOctree<FPrimitiveSceneInfoCompact,FPrimitiveOctreeSemantics> PrimitiveOctree;
  bool bRequiresHitProxies;
  bool bIsEditorScene;
  volatile int NumUncachedStaticLightingInteractions;
  volatile int NumUnbuiltReflectionCaptures;
  int NumMobileStaticAndCSMLights_RenderThread;
  int NumMobileMovableDirectionalLights_RenderThread;
  FMotionBlurInfoData MotionBlurInfoData;
  FGPUSkinCache *GPUSkinCache;
  TMap<FGuid,TRefCountPtr<FRHIUniformBuffer>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FGuid,TRefCountPtr<FRHIUniformBuffer>,0> > ParameterCollections;
  FLODSceneTree SceneLODHierarchy;
  float DefaultMaxDistanceFieldOcclusionDistance;
  float GlobalDistanceFieldViewDistance;
  float DynamicIndirectShadowsSelfShadowingIntensity;
  FReadOnlyCVARCache *ReadOnlyCVARCache;
  int NumVisibleLights_GameThread;
  int NumEnabledSkylights_GameThread;
  unsigned int SceneFrameNumber;
  bool CurrentFrameUpdatedMotionBlurCache;
};

/* 4639 */
struct TArray<FRHIUnorderedAccessView *,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 4640 */
struct TArray<FGPUSkinCache::FRWBuffersAllocation *,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 4641 */
struct TArray<FGPUSkinCacheEntry *,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 4642 */
struct TArray<FRWBuffer,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 4643 */
struct __declspec(align(8)) FGPUSkinCache
{
  TArray<FRHIUnorderedAccessView *,FDefaultAllocator> BuffersToTransition;
  TArray<FGPUSkinCache::FRWBuffersAllocation *,FDefaultAllocator> Allocations;
  TArray<FGPUSkinCacheEntry *,FDefaultAllocator> Entries;
  unsigned __int64 UsedMemoryInBytes;
  unsigned __int64 ExtraRequiredMemory;
  int FlushCounter;
  bool bRequiresMemoryLimit;
  TArray<FRWBuffer,FDefaultAllocator> StagingBuffers;
  int CurrentStagingBufferIndex;
};

/* 7018 */
const struct TArray<FMaterialParameterCollectionInstanceResource *,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 6670 */
struct FPhysicsReplicationVtbl
{
  void *(__cdecl *__vecDelDtor)(FPhysicsReplication *this, unsigned int);
  void (__cdecl *OnTick)(FPhysicsReplication *this, float, TMap<TWeakObjectPtr<UPrimitiveComponent,FWeakObjectPtr>,FReplicatedPhysicsTarget,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<TWeakObjectPtr<UPrimitiveComponent,FWeakObjectPtr>,FReplicatedPhysicsTarget,0> > *);
};

/* 6700 */
union $CDF01F2C6D6E4FC6DF19BD2CD35C3827
{
  void (__cdecl *~PxCpuDispatcher)(physx::PxCpuDispatcher *this);
  void *(__cdecl *__vecDelDtor)(physx::PxCpuDispatcher *this, unsigned int);
};

/* 6701 */
struct physx::PxCpuDispatcherVtbl
{
  void (__cdecl *submitTask)(physx::PxCpuDispatcher *this, physx::PxBaseTask *);
  unsigned int (__cdecl *getWorkerCount)(physx::PxCpuDispatcher *this);
  $CDF01F2C6D6E4FC6DF19BD2CD35C3827 ___u2;
};

/* 6717 */
union $375FC83977D3DA155E7EBA5BF6E56722
{
  void (__cdecl *~PxSimulationEventCallback)(physx::PxSimulationEventCallback *this);
  void *(__cdecl *__vecDelDtor)(physx::PxSimulationEventCallback *this, unsigned int);
};

/* 6718 */
struct physx::PxSimulationEventCallbackVtbl
{
  void (__cdecl *onConstraintBreak)(physx::PxSimulationEventCallback *this, physx::PxConstraintInfo *, unsigned int);
  void (__cdecl *onWake)(physx::PxSimulationEventCallback *this, physx::PxActor **, unsigned int);
  void (__cdecl *onSleep)(physx::PxSimulationEventCallback *this, physx::PxActor **, unsigned int);
  void (__cdecl *onContact)(physx::PxSimulationEventCallback *this, physx::PxContactPairHeader *, physx::PxContactPair *, unsigned int);
  void (__cdecl *onTrigger)(physx::PxSimulationEventCallback *this, physx::PxTriggerPair *, unsigned int);
  void (__cdecl *onAdvance)(physx::PxSimulationEventCallback *this, physx::PxRigidBody *const *, physx::PxTransform *, const unsigned int);
  $375FC83977D3DA155E7EBA5BF6E56722 ___u6;
};

/* 6725 */
union $E2F74C8ACFB62D76C2075855628EA0B2
{
  void (__cdecl *~PxContactModifyCallback)(physx::PxContactModifyCallback *this);
  void *(__cdecl *__vecDelDtor)(physx::PxContactModifyCallback *this, unsigned int);
};

/* 6726 */
struct physx::PxContactModifyCallbackVtbl
{
  void (__cdecl *onContactModify)(physx::PxContactModifyCallback *this, physx::PxContactModifyPair *const , unsigned int);
  $E2F74C8ACFB62D76C2075855628EA0B2 ___u1;
};

/* 6729 */
struct physx::PxBroadPhaseCallbackVtbl
{
  void *(__cdecl *__vecDelDtor)(physx::PxBroadPhaseCallback *this, unsigned int);
  void (__cdecl *onObjectOutOfBounds)(physx::PxBroadPhaseCallback *this, physx::PxAggregate *);
  void (__cdecl *onObjectOutOfBounds)(physx::PxBroadPhaseCallback *this, physx::PxShape *, physx::PxActor *);
};

/* 6675 */
struct physx::PxBaseTask
{
  physx::PxBaseTaskVtbl *vfptr;
  unsigned __int64 mContextID;
  physx::PxTaskManager *mTm;
};

/* 6697 */
struct __cppobj __declspec(align(8)) physx::PxLightCpuTask : physx::PxBaseTask
{
  physx::PxBaseTask *mCont;
  volatile int mRefCount;
};

/* 6741 */
struct __cppobj PhysXCompletionTask : physx::PxLightCpuTask
{
  TRefCountPtr<FGraphEvent> EventToFire;
  unsigned int Scene;
  FSimulationScratchBuffer *ScratchBuffer;
};

/* 6742 */
struct nvidia::apex::RenderDataProvider
{
  nvidia::apex::RenderDataProviderVtbl *vfptr;
};

/* 6744 */
struct __cppobj nvidia::apex::Renderable : nvidia::apex::RenderDataProvider
{
};

/* 6745 */
struct nvidia::apex::Context
{
  nvidia::apex::ContextVtbl *vfptr;
};

/* 6746 */
struct nvidia::apex::RWLockable
{
  nvidia::apex::RWLockableVtbl *vfptr;
};

/* 6748 */
struct __cppobj nvidia::apex::ApexInterface : nvidia::apex::RWLockable
{
  void *userData;
};

/* 6752 */
struct __cppobj nvidia::apex::Scene : nvidia::apex::Renderable, nvidia::apex::Context, nvidia::apex::ApexInterface
{
};

/* 6148 */
struct __cppobj __declspec(align(16)) UVectorFieldComponent : UPrimitiveComponent
{
  UVectorField *VectorField;
  float Intensity;
  float Tightness;
  unsigned __int32 bPreviewVectorField : 1;
  FFXSystemInterface *FXSystem;
  FVectorFieldInstance *VectorFieldInstance;
};

/* 6153 */
struct TEnumAsByte<enum EParticleAxisLock>
{
  char Value;
};

/* 6279 */
struct TArray<FLODBurstFired,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 6280 */
struct TArray<UPointLightComponent *,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 6149 */
struct FParticleEmitterInstance
{
  FParticleEmitterInstanceVtbl *vfptr;
  __declspec(align(16)) UParticleEmitter *SpriteTemplate;
  UParticleSystemComponent *Component;
  int CurrentLODLevelIndex;
  UParticleLODLevel *CurrentLODLevel;
  int TypeDataOffset;
  int TypeDataInstanceOffset;
  int SubUVDataOffset;
  int DynamicParameterDataOffset;
  int LightDataOffset;
  float LightVolumetricScatteringIntensity;
  int OrbitModuleOffset;
  int CameraPayloadOffset;
  FVector Location;
  __declspec(align(8)) FMatrix EmitterToSimulation;
  FMatrix SimulationToWorld;
  unsigned __int32 bEnabled : 1;
  unsigned __int32 bKillOnDeactivate : 1;
  unsigned __int32 bKillOnCompleted : 1;
  unsigned __int32 bRequiresSorting : 1;
  unsigned __int32 bHaltSpawning : 1;
  unsigned __int32 bHaltSpawningExternal : 1;
  unsigned __int32 bRequiresLoopNotification : 1;
  unsigned __int32 bIgnoreComponentScale : 1;
  unsigned __int32 bIsBeam : 1;
  unsigned __int32 bAxisLockEnabled : 1;
  unsigned __int32 bFakeBurstsWhenSpawningSupressed : 1;
  TEnumAsByte<enum EParticleAxisLock> LockAxisFlags;
  int SortMode;
  char *ParticleData;
  unsigned __int16 *ParticleIndices;
  char *InstanceData;
  int InstancePayloadSize;
  int PayloadOffset;
  int ParticleSize;
  int ParticleStride;
  int ActiveParticles;
  unsigned int ParticleCounter;
  int MaxActiveParticles;
  float SpawnFraction;
  float SecondsSinceCreation;
  float EmitterTime;
  float LastDeltaTime;
  FVector OldLocation;
  FBox ParticleBoundingBox;
  TArray<FLODBurstFired,FDefaultAllocator> BurstFired;
  int LoopCount;
  int IsRenderDataDirty;
  float EmitterDuration;
  TArray<float,FDefaultAllocator> EmitterDurations;
  float CurrentDelay;
  bool bEmitterIsDone;
  int TrianglesToRender;
  int MaxVertexIndex;
  UMaterialInterface *CurrentMaterial;
  FVector PositionOffsetThisTick;
  FVector2D PivotOffset;
  TArray<UPointLightComponent *,FDefaultAllocator> HighQualityLights;
};

/* 6159 */
struct TArray<UParticleModule *,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 6282 */
struct FGPUSpriteLocalVectorFieldInfo
{
  UVectorField *Field;
  FTransform Transform;
  FRotator MinInitialRotation;
  FRotator MaxInitialRotation;
  FRotator RotationRate;
  float Intensity;
  float Tightness;
  unsigned __int32 bIgnoreComponentTransform : 1;
  unsigned __int32 bTileX : 1;
  unsigned __int32 bTileY : 1;
  unsigned __int32 bTileZ : 1;
  unsigned __int32 bUseFixDT : 1;
};

/* 6202 */
struct __declspec(align(8)) FDistributionLookupTable
{
  char Op;
  char EntryCount;
  char EntryStride;
  char SubEntryStride;
  float TimeScale;
  float TimeBias;
  TArray<float,FDefaultAllocator> Values;
  char LockFlag;
};

/* 6283 */
struct FFloatDistribution
{
  FDistributionLookupTable LookupTable;
};

/* 6200 */
struct TEnumAsByte<enum EParticleScreenAlignment>
{
  char Value;
};

/* 6284 */
struct TEnumAsByte<enum EParticleCollisionMode::Type>
{
  char Value;
};

/* 6203 */
struct FRawDistribution
{
  FDistributionLookupTable LookupTable;
};

/* 6286 */
struct __cppobj FRawDistributionVector : FRawDistribution
{
  float MinValue;
  float MaxValue;
  FVector MinValueVec;
  FVector MaxValueVec;
  UDistributionVector *Distribution;
};

/* 6206 */
struct __cppobj FRawDistributionFloat : FRawDistribution
{
  float MinValue;
  float MaxValue;
  UDistributionFloat *Distribution;
};

/* 6294 */
struct __declspec(align(16)) FGPUSpriteEmitterInfo
{
  UParticleModuleRequired *RequiredModule;
  UParticleModuleSpawn *SpawnModule;
  UParticleModuleSpawnPerUnit *SpawnPerUnitModule;
  TArray<UParticleModule *,FDefaultAllocator> SpawnModules;
  FGPUSpriteLocalVectorFieldInfo LocalVectorField;
  FFloatDistribution VectorFieldScale;
  FFloatDistribution DragCoefficient;
  FFloatDistribution PointAttractorStrength;
  FFloatDistribution Resilience;
  FVector ConstantAcceleration;
  FVector PointAttractorPosition;
  float PointAttractorRadiusSq;
  FVector OrbitOffsetBase;
  FVector OrbitOffsetRange;
  FVector2D InvMaxSize;
  float InvRotationRateScale;
  float MaxLifetime;
  int MaxParticleCount;
  TEnumAsByte<enum EParticleScreenAlignment> ScreenAlignment;
  TEnumAsByte<enum EParticleAxisLock> LockAxisFlag;
  unsigned __int32 bEnableCollision : 1;
  TEnumAsByte<enum EParticleCollisionMode::Type> CollisionMode;
  unsigned __int32 bRemoveHMDRoll : 1;
  float MinFacingCameraBlendDistance;
  float MaxFacingCameraBlendDistance;
  FRawDistributionVector DynamicColor;
  FRawDistributionFloat DynamicAlpha;
  FRawDistributionVector DynamicColorScale;
  FRawDistributionFloat DynamicAlphaScale;
  FGPUSpriteResources *Resources;
};

/* 5238 */
struct FMemStackBase
{
  char *Top;
  char *End;
  FMemStackBase::FTaggedMemory *TopChunk;
  FMemMark *TopMark;
  int NumMarks;
  int MinMarksToAlloc;
};

/* 6078 */
struct FRHIGPUMask
{
  unsigned int GPUMask;
};

/* 6079 */
struct __declspec(align(8)) FRHIRenderTargetView
{
  FRHITexture *Texture;
  unsigned int MipIndex;
  unsigned int ArraySliceIndex;
  _BYTE LoadAction[1];
  _BYTE StoreAction[1];
};

/* 6080 */
struct TStaticArray<FRHIRenderTargetView,8,8>::TArrayStorageElementAligned
{
  FRHIRenderTargetView Element;
};

/* 6081 */
struct TStaticArray<FRHIRenderTargetView,8,8>::TArrayStorage
{
  TStaticArray<FRHIRenderTargetView,8,8>::TArrayStorageElementAligned Elements[8];
};

/* 6082 */
struct TStaticArray<FRHIRenderTargetView,8,8>
{
  TStaticArray<FRHIRenderTargetView,8,8>::TArrayStorage Storage;
};

/* 540 */
enum FExclusiveDepthStencil::Type
{
  DepthNop = 0x0,
  DepthRead = 0x1,
  DepthWrite = 0x2,
  DepthMask = 0xF,
  StencilNop = 0x0,
  StencilRead = 0x10,
  StencilWrite = 0x20,
  StencilMask = 0xF0,
  DepthNop_StencilNop = 0x0,
  DepthRead_StencilNop = 0x1,
  DepthWrite_StencilNop = 0x2,
  DepthNop_StencilRead = 0x10,
  DepthRead_StencilRead = 0x11,
  DepthWrite_StencilRead = 0x12,
  DepthNop_StencilWrite = 0x20,
  DepthRead_StencilWrite = 0x21,
  DepthWrite_StencilWrite = 0x22,
};

/* 6072 */
struct FExclusiveDepthStencil
{
  FExclusiveDepthStencil::Type Value;
};

/* 6083 */
struct FRHIDepthRenderTargetView
{
  FRHITexture *Texture;
  _BYTE DepthLoadAction[1];
  _BYTE DepthStoreAction[1];
  _BYTE StencilLoadAction[1];
  _BYTE StencilStoreAction[1];
  FExclusiveDepthStencil DepthStencilAccess;
};

/* 6084 */
struct FRHICommandListBase::FPSOContext
{
  unsigned int CachedNumSimultanousRenderTargets;
  TStaticArray<FRHIRenderTargetView,8,8> CachedRenderTargets;
  FRHIDepthRenderTargetView CachedDepthStencilTarget;
};

/* 6085 */
struct FRHICommandListBase::FDrawUpData
{
  unsigned int PrimitiveType;
  unsigned int NumPrimitives;
  unsigned int NumVertices;
  unsigned int VertexDataStride;
  void *OutVertexData;
  unsigned int MinVertexIndex;
  unsigned int NumIndices;
  unsigned int IndexDataStride;
  void *OutIndexData;
};

/* 580 */
enum UEnum::ECppForm
{
  Regular = 0x0,
  Namespaced = 0x1,
  EnumClass = 0x2,
};

/* 775 */
typedef UEnum::ECppForm FRHICommandListBase::FCommonData::ECmdListType;

/* 6086 */
struct __declspec(align(4)) FRHICommandListBase::FCommonData
{
  FRHICommandListBase *Parent;
  FRHICommandListBase::FCommonData::ECmdListType Type;
  bool bInsideRenderPass;
  bool bInsideComputePass;
};

/* 6057 */
struct __cppobj FRHICommandListBase : FNoncopyable
{
  FRHICommandBase *Root;
  FRHICommandBase **CommandLink;
  bool bExecuting;
  unsigned int NumCommands;
  unsigned int UID;
  IRHICommandContext *Context;
  IRHIComputeContext *ComputeContext;
  FMemStackBase MemManager;
  TArray<TRefCountPtr<FGraphEvent>,TInlineAllocator<4,FDefaultAllocator> > RTTasks;
  FRHIGPUMask GPUMask;
  TStatId ExecuteStat;
  void *RenderThreadContexts[1];
  FRHICommandListBase::FPSOContext PSOContext;
  FRHICommandListBase::FDrawUpData DrawUPData;
  FRHICommandListBase::FCommonData Data;
};

/* 6087 */
struct __cppobj FRHICommandList : FRHICommandListBase
{
};

/* 6295 */
struct __cppobj FRHICommandListImmediate : FRHICommandList
{
};

/* 6296 */
const struct __declspec(align(16)) FGlobalDistanceFieldParameterData
{
  FVector4 CenterAndExtent[4];
  FVector4 WorldToUVAddAndMul[4];
  FRHITexture *Textures[4];
  float GlobalDFResolution;
  float MaxDistance;
};

/* 4868 */
struct IRVOAvoidanceInterfaceVtbl
{
  void *(__cdecl *__vecDelDtor)(IRVOAvoidanceInterface *this, unsigned int);
  __declspec(align(16)) void (__cdecl *SetRVOAvoidanceUID)(IRVOAvoidanceInterface *this, int);
  int (__cdecl *GetRVOAvoidanceUID)(IRVOAvoidanceInterface *this);
  void (__cdecl *SetRVOAvoidanceWeight)(IRVOAvoidanceInterface *this, float);
  float (__cdecl *GetRVOAvoidanceWeight)(IRVOAvoidanceInterface *this);
  FVector *(__cdecl *GetRVOAvoidanceOrigin)(IRVOAvoidanceInterface *this, FVector *result);
  float (__cdecl *GetRVOAvoidanceRadius)(IRVOAvoidanceInterface *this);
  float (__cdecl *GetRVOAvoidanceHeight)(IRVOAvoidanceInterface *this);
  float (__cdecl *GetRVOAvoidanceConsiderationRadius)(IRVOAvoidanceInterface *this);
  FVector *(__cdecl *GetVelocityForRVOConsideration)(IRVOAvoidanceInterface *this, FVector *result);
  int (__cdecl *GetAvoidanceGroupMask)(IRVOAvoidanceInterface *this);
  int (__cdecl *GetGroupsToAvoidMask)(IRVOAvoidanceInterface *this);
  int (__cdecl *GetGroupsToIgnoreMask)(IRVOAvoidanceInterface *this);
};

/* 4874 */
struct INetworkPredictionInterfaceVtbl
{
  void *(__cdecl *__vecDelDtor)(INetworkPredictionInterface *this, unsigned int);
  _BYTE gap8[8];
  void (__cdecl *SendClientAdjustment)(INetworkPredictionInterface *this);
  void (__cdecl *ForcePositionUpdate)(INetworkPredictionInterface *this, float);
  void (__cdecl *SmoothCorrection)(INetworkPredictionInterface *this, FVector *, FQuat *, FVector *, FQuat *);
  FNetworkPredictionData_Client *(__cdecl *GetPredictionData_Client)(INetworkPredictionInterface *this);
  FNetworkPredictionData_Server *(__cdecl *GetPredictionData_Server)(INetworkPredictionInterface *this);
  bool (__cdecl *HasPredictionData_Client)(INetworkPredictionInterface *this);
  bool (__cdecl *HasPredictionData_Server)(INetworkPredictionInterface *this);
  void (__cdecl *ResetPredictionData_Client)(INetworkPredictionInterface *this);
  void (__cdecl *ResetPredictionData_Server)(INetworkPredictionInterface *this);
};

/* 4870 */
struct FNetworkPredictionData_Client
{
  FNetworkPredictionData_ClientVtbl *vfptr;
};

/* 4884 */
struct TArray<TSharedPtr<FSavedMove_Character,0>,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 4887 */
struct TSharedPtr<FSavedMove_Character,0>
{
  FSavedMove_Character *Object;
  SharedPointerInternals::FSharedReferencer<0> SharedReferenceCount;
};

/* 4901 */
struct TArray<FCharacterReplaySample,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 4886 */
struct __cppobj __declspec(align(16)) FNetworkPredictionData_Client_Character : FNetworkPredictionData_Client, FNoncopyable
{
  float ClientUpdateTime;
  float CurrentTimeStamp;
  TArray<TSharedPtr<FSavedMove_Character,0>,FDefaultAllocator> SavedMoves;
  TArray<TSharedPtr<FSavedMove_Character,0>,FDefaultAllocator> FreeMoves;
  TSharedPtr<FSavedMove_Character,0> PendingMove;
  TSharedPtr<FSavedMove_Character,0> LastAckedMove;
  int MaxFreeMoveCount;
  int MaxSavedMoveCount;
  FRootMotionMovementParams RootMotionMovement;
  unsigned __int32 bUpdatePosition : 1;
  unsigned __int32 bSmoothNetUpdates : 1;
  FVector OriginalMeshTranslationOffset;
  FVector MeshTranslationOffset;
  __declspec(align(8)) FQuat OriginalMeshRotationOffset;
  FQuat MeshRotationOffset;
  FQuat MeshRotationTarget;
  float LastCorrectionDelta;
  float LastCorrectionTime;
  long double SmoothingServerTimeStamp;
  long double SmoothingClientTimeStamp;
  float CurrentSmoothTime;
  bool bUseLinearSmoothing;
  float MaxSmoothNetUpdateDist;
  float NoSmoothNetUpdateDist;
  float SmoothNetUpdateTime;
  float SmoothNetUpdateRotationTime;
  float MaxResponseTime;
  float MaxMoveDeltaTime;
  FVector LastSmoothLocation;
  FVector LastServerLocation;
  float SimulatedDebugDrawTime;
  TArray<FCharacterReplaySample,FDefaultAllocator> ReplaySamples;
};

/* 4872 */
struct __declspec(align(8)) FNetworkPredictionData_Server
{
  FNetworkPredictionData_ServerVtbl *vfptr;
  float ServerTimeStamp;
};

/* 4902 */
struct __declspec(align(8)) FClientAdjustment
{
  float TimeStamp;
  float DeltaTime;
  FVector NewLoc;
  FVector NewVel;
  FRotator NewRot;
  UPrimitiveComponent *NewBase;
  FName NewBaseBoneName;
  bool bAckGoodMove;
  bool bBaseRelativePosition;
  char MovementMode;
};

/* 4903 */
struct __cppobj FNetworkPredictionData_Server_Character : FNetworkPredictionData_Server, FNoncopyable
{
  FClientAdjustment PendingAdjustment;
  float CurrentClientTimeStamp;
  float LastUpdateTime;
  float ServerTimeStampLastServerMove;
  float MaxResponseTime;
  float MaxMoveDeltaTime;
  unsigned __int32 bForceClientUpdate : 1;
  float LifetimeRawTimeDiscrepancy;
  float TimeDiscrepancy;
  bool bResolvingTimeDiscrepancy;
  float TimeDiscrepancyResolutionMoveDeltaOverride;
  float TimeDiscrepancyAccumulatedClientDeltasSinceLastServerTick;
  float WorldCreationTime;
};

/* 4555 */
struct IInterface_PreviewMeshProviderVtbl
{
  void *(__cdecl *__vecDelDtor)(IInterface_PreviewMeshProvider *this, unsigned int);
  UObject *(__cdecl *_getUObject)(IInterface_PreviewMeshProvider *this);
  void (__cdecl *SetPreviewMesh)(IInterface_PreviewMeshProvider *this, USkeletalMesh *, bool);
  USkeletalMesh *(__cdecl *GetPreviewMesh)(IInterface_PreviewMeshProvider *this, bool);
  USkeletalMesh *(__cdecl *GetPreviewMesh)(IInterface_PreviewMeshProvider *this);
};

/* 4556 */
struct TArray<FBoneNode,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 4566 */
struct TArray<FVirtualBone,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 4569 */
struct TSparseArray<TSetElement<TTuple<FName,FReferencePose> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<40,8> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 4570 */
struct __declspec(align(8)) TSet<TTuple<FName,FReferencePose>,TDefaultMapHashableKeyFuncs<FName,FReferencePose,0>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<TTuple<FName,FReferencePose> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 4571 */
struct TMapBase<FName,FReferencePose,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,FReferencePose,0> >
{
  TSet<TTuple<FName,FReferencePose>,TDefaultMapHashableKeyFuncs<FName,FReferencePose,0>,FDefaultSetAllocator> Pairs;
};

/* 4572 */
struct __cppobj TSortableMapBase<FName,FReferencePose,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,FReferencePose,0> > : TMapBase<FName,FReferencePose,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,FReferencePose,0> >
{
};

/* 4573 */
struct __cppobj TMap<FName,FReferencePose,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,FReferencePose,0> > : TSortableMapBase<FName,FReferencePose,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,FReferencePose,0> >
{
};

/* 4574 */
struct TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<112,8> >,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 4575 */
struct TSparseArray<TSetElement<TTuple<FName,FSmartNameMapping> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<112,8> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 4576 */
struct __declspec(align(8)) TSet<TTuple<FName,FSmartNameMapping>,TDefaultMapHashableKeyFuncs<FName,FSmartNameMapping,0>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<TTuple<FName,FSmartNameMapping> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 4577 */
struct TMapBase<FName,FSmartNameMapping,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,FSmartNameMapping,0> >
{
  TSet<TTuple<FName,FSmartNameMapping>,TDefaultMapHashableKeyFuncs<FName,FSmartNameMapping,0>,FDefaultSetAllocator> Pairs;
};

/* 4578 */
struct __cppobj TSortableMapBase<FName,FSmartNameMapping,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,FSmartNameMapping,0> > : TMapBase<FName,FSmartNameMapping,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,FSmartNameMapping,0> >
{
};

/* 4579 */
struct __cppobj TMap<FName,FSmartNameMapping,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,FSmartNameMapping,0> > : TSortableMapBase<FName,FSmartNameMapping,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,FSmartNameMapping,0> >
{
};

/* 4580 */
struct FSmartNameContainer
{
  TMap<FName,FSmartNameMapping,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,FSmartNameMapping,0> > NameMappings;
};

/* 4581 */
struct TArray<UBlendProfile *,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 4582 */
struct TArray<FAnimSlotGroup,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 4590 */
struct TArray<FSkeletonToMeshLinkup,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 4592 */
struct TSparseArray<TSetElement<TTuple<TWeakObjectPtr<USkeletalMesh,FWeakObjectPtr>,int> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<20,4> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 4593 */
struct __declspec(align(8)) TSet<TTuple<TWeakObjectPtr<USkeletalMesh,FWeakObjectPtr>,int>,TDefaultMapHashableKeyFuncs<TWeakObjectPtr<USkeletalMesh,FWeakObjectPtr>,int,0>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<TTuple<TWeakObjectPtr<USkeletalMesh,FWeakObjectPtr>,int> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 4594 */
struct TMapBase<TWeakObjectPtr<USkeletalMesh,FWeakObjectPtr>,int,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<TWeakObjectPtr<USkeletalMesh,FWeakObjectPtr>,int,0> >
{
  TSet<TTuple<TWeakObjectPtr<USkeletalMesh,FWeakObjectPtr>,int>,TDefaultMapHashableKeyFuncs<TWeakObjectPtr<USkeletalMesh,FWeakObjectPtr>,int,0>,FDefaultSetAllocator> Pairs;
};

/* 4595 */
struct __cppobj TSortableMapBase<TWeakObjectPtr<USkeletalMesh,FWeakObjectPtr>,int,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<TWeakObjectPtr<USkeletalMesh,FWeakObjectPtr>,int,0> > : TMapBase<TWeakObjectPtr<USkeletalMesh,FWeakObjectPtr>,int,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<TWeakObjectPtr<USkeletalMesh,FWeakObjectPtr>,int,0> >
{
};

/* 4596 */
struct __cppobj TMap<TWeakObjectPtr<USkeletalMesh,FWeakObjectPtr>,int,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<TWeakObjectPtr<USkeletalMesh,FWeakObjectPtr>,int,0> > : TSortableMapBase<TWeakObjectPtr<USkeletalMesh,FWeakObjectPtr>,int,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<TWeakObjectPtr<USkeletalMesh,FWeakObjectPtr>,int,0> >
{
};

/* 4597 */
struct __cppobj USkeleton : UObject, IInterface_AssetUserData, IInterface_PreviewMeshProvider
{
  TArray<FBoneNode,FDefaultAllocator> BoneTree;
  TArray<FTransform,FDefaultAllocator> RefLocalPoses_DEPRECATED;
  FReferenceSkeleton ReferenceSkeleton;
  FGuid Guid;
  FGuid VirtualBoneGuid;
  TArray<FVirtualBone,FDefaultAllocator> VirtualBones;
  TArray<USkeletalMeshSocket *,FDefaultAllocator> Sockets;
  TMap<FName,FReferencePose,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,FReferencePose,0> > AnimRetargetSources;
  FSmartNameContainer SmartNames;
  TArray<unsigned short,FDefaultAllocator> DefaultCurveUIDList;
  unsigned __int16 AnimCurveUidVersion;
  TArray<UBlendProfile *,FDefaultAllocator> BlendProfiles;
  TArray<FAnimSlotGroup,FDefaultAllocator> SlotGroups;
  TMap<FName,FName,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,FName,0> > SlotToGroupNameMap;
  TMulticastDelegate<void> OnRetargetSourceChanged;
  TArray<FSkeletonToMeshLinkup,FDefaultAllocator> LinkupCache;
  TMap<TWeakObjectPtr<USkeletalMesh,FWeakObjectPtr>,int,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<TWeakObjectPtr<USkeletalMesh,FWeakObjectPtr>,int,0> > SkelMesh2LinkupCache;
  TArray<UAssetUserData *,FDefaultAllocator> AssetUserData;
};

/* 1790 */
typedef EVertexColorViewMode::Type ksRacing::TrackFlagLights;

/* 68414 */
struct std::_Func_base<void,enum ksRacing::TrackFlagLights const &>Vtbl
{
  std::_Func_base<void,enum ksRacing::TrackFlagLights const &> *(__cdecl *_Copy)(std::_Func_base<void,enum ksRacing::TrackFlagLights const &> *this, void *);
  std::_Func_base<void,enum ksRacing::TrackFlagLights const &> *(__cdecl *_Move)(std::_Func_base<void,enum ksRacing::TrackFlagLights const &> *this, void *);
  void (__cdecl *_Do_call)(std::_Func_base<void,enum ksRacing::TrackFlagLights const &> *this, ksRacing::TrackFlagLights *);
  type_info *(__cdecl *_Target_type)(std::_Func_base<void,enum ksRacing::TrackFlagLights const &> *this);
  void (__cdecl *_Delete_this)(std::_Func_base<void,enum ksRacing::TrackFlagLights const &> *this, bool);
  const void *(__cdecl *_Get)(std::_Func_base<void,enum ksRacing::TrackFlagLights const &> *this);
};

/* 68428 */
struct std::_Func_base<void,ksRacing::RaceStateEvent const &>Vtbl
{
  std::_Func_base<void,ksRacing::RaceStateEvent const &> *(__cdecl *_Copy)(std::_Func_base<void,ksRacing::RaceStateEvent const &> *this, void *);
  std::_Func_base<void,ksRacing::RaceStateEvent const &> *(__cdecl *_Move)(std::_Func_base<void,ksRacing::RaceStateEvent const &> *this, void *);
  void (__cdecl *_Do_call)(std::_Func_base<void,ksRacing::RaceStateEvent const &> *this, ksRacing::RaceStateEvent *);
  type_info *(__cdecl *_Target_type)(std::_Func_base<void,ksRacing::RaceStateEvent const &> *this);
  void (__cdecl *_Delete_this)(std::_Func_base<void,ksRacing::RaceStateEvent const &> *this, bool);
  const void *(__cdecl *_Get)(std::_Func_base<void,ksRacing::RaceStateEvent const &> *this);
};

/* 68442 */
struct std::_Func_base<void,ksRacing::RaceStartTimeEvent const &>Vtbl
{
  std::_Func_base<void,ksRacing::RaceStartTimeEvent const &> *(__cdecl *_Copy)(std::_Func_base<void,ksRacing::RaceStartTimeEvent const &> *this, void *);
  std::_Func_base<void,ksRacing::RaceStartTimeEvent const &> *(__cdecl *_Move)(std::_Func_base<void,ksRacing::RaceStartTimeEvent const &> *this, void *);
  void (__cdecl *_Do_call)(std::_Func_base<void,ksRacing::RaceStartTimeEvent const &> *this, ksRacing::RaceStartTimeEvent *);
  type_info *(__cdecl *_Target_type)(std::_Func_base<void,ksRacing::RaceStartTimeEvent const &> *this);
  void (__cdecl *_Delete_this)(std::_Func_base<void,ksRacing::RaceStartTimeEvent const &> *this, bool);
  const void *(__cdecl *_Get)(std::_Func_base<void,ksRacing::RaceStartTimeEvent const &> *this);
};

/* 68456 */
struct std::_Func_base<void,ksRacing::StartSessionEvent const &>Vtbl
{
  std::_Func_base<void,ksRacing::StartSessionEvent const &> *(__cdecl *_Copy)(std::_Func_base<void,ksRacing::StartSessionEvent const &> *this, void *);
  std::_Func_base<void,ksRacing::StartSessionEvent const &> *(__cdecl *_Move)(std::_Func_base<void,ksRacing::StartSessionEvent const &> *this, void *);
  void (__cdecl *_Do_call)(std::_Func_base<void,ksRacing::StartSessionEvent const &> *this, ksRacing::StartSessionEvent *);
  type_info *(__cdecl *_Target_type)(std::_Func_base<void,ksRacing::StartSessionEvent const &> *this);
  void (__cdecl *_Delete_this)(std::_Func_base<void,ksRacing::StartSessionEvent const &> *this, bool);
  const void *(__cdecl *_Get)(std::_Func_base<void,ksRacing::StartSessionEvent const &> *this);
};

/* 68470 */
struct std::_Func_base<void,ksRacing::SwapDriverEvent const &>Vtbl
{
  std::_Func_base<void,ksRacing::SwapDriverEvent const &> *(__cdecl *_Copy)(std::_Func_base<void,ksRacing::SwapDriverEvent const &> *this, void *);
  std::_Func_base<void,ksRacing::SwapDriverEvent const &> *(__cdecl *_Move)(std::_Func_base<void,ksRacing::SwapDriverEvent const &> *this, void *);
  void (__cdecl *_Do_call)(std::_Func_base<void,ksRacing::SwapDriverEvent const &> *this, ksRacing::SwapDriverEvent *);
  type_info *(__cdecl *_Target_type)(std::_Func_base<void,ksRacing::SwapDriverEvent const &> *this);
  void (__cdecl *_Delete_this)(std::_Func_base<void,ksRacing::SwapDriverEvent const &> *this, bool);
  const void *(__cdecl *_Get)(std::_Func_base<void,ksRacing::SwapDriverEvent const &> *this);
};

/* 68483 */
struct std::_Func_base<void,bool const &>Vtbl
{
  std::_Func_base<void,bool const &> *(__cdecl *_Copy)(std::_Func_base<void,bool const &> *this, void *);
  std::_Func_base<void,bool const &> *(__cdecl *_Move)(std::_Func_base<void,bool const &> *this, void *);
  void (__cdecl *_Do_call)(std::_Func_base<void,bool const &> *this, const bool *);
  type_info *(__cdecl *_Target_type)(std::_Func_base<void,bool const &> *this);
  void (__cdecl *_Delete_this)(std::_Func_base<void,bool const &> *this, bool);
  const void *(__cdecl *_Get)(std::_Func_base<void,bool const &> *this);
};

/* 68497 */
struct std::_Func_base<void,ksRacing::AddOnlineEvent const &>Vtbl
{
  std::_Func_base<void,ksRacing::AddOnlineEvent const &> *(__cdecl *_Copy)(std::_Func_base<void,ksRacing::AddOnlineEvent const &> *this, void *);
  std::_Func_base<void,ksRacing::AddOnlineEvent const &> *(__cdecl *_Move)(std::_Func_base<void,ksRacing::AddOnlineEvent const &> *this, void *);
  void (__cdecl *_Do_call)(std::_Func_base<void,ksRacing::AddOnlineEvent const &> *this, ksRacing::AddOnlineEvent *);
  type_info *(__cdecl *_Target_type)(std::_Func_base<void,ksRacing::AddOnlineEvent const &> *this);
  void (__cdecl *_Delete_this)(std::_Func_base<void,ksRacing::AddOnlineEvent const &> *this, bool);
  const void *(__cdecl *_Get)(std::_Func_base<void,ksRacing::AddOnlineEvent const &> *this);
};

/* 68383 */
struct std::_Func_base<void,ksRacing::EntryListUpdatedEvent const &>
{
  std::_Func_base<void,ksRacing::EntryListUpdatedEvent const &>Vtbl *vfptr;
};

/* 68515 */
struct std::_Func_base<void,ksRacing::UpdateOfficialPositionEvent const &>
{
  std::_Func_base<void,ksRacing::UpdateOfficialPositionEvent const &>Vtbl *vfptr;
};

/* 68529 */
struct std::_Func_base<void,ksRacing::UpdateCarSystems const &>
{
  std::_Func_base<void,ksRacing::UpdateCarSystems const &>Vtbl *vfptr;
};

/* 68543 */
struct std::_Func_base<void,unsigned short const &>
{
  std::_Func_base<void,unsigned short const &>Vtbl *vfptr;
};

/* 68639 */
struct std::_Func_base<void,ksRacing::Lap const &>
{
  std::_Func_base<void,ksRacing::Lap const &>Vtbl *vfptr;
};

/* 68652 */
struct std::_Func_base<void,ksRacing::BestLap const &>
{
  std::_Func_base<void,ksRacing::BestLap const &>Vtbl *vfptr;
};

/* 68671 */
struct std::_Func_base<void,ksRacing::InvestigationStart const &>
{
  std::_Func_base<void,ksRacing::InvestigationStart const &>Vtbl *vfptr;
};

/* 68685 */
struct std::_Func_base<void,ksRacing::InvestigationEnd const &>
{
  std::_Func_base<void,ksRacing::InvestigationEnd const &>Vtbl *vfptr;
};

/* 4378 */
struct FTextHistoryVtbl
{
  void *(__cdecl *__vecDelDtor)(FTextHistory *this, unsigned int);
  _BYTE gap8[8];
  FString *(__cdecl *BuildLocalizedDisplayString)(FTextHistory *this, FString *result);
  FString *(__cdecl *BuildInvariantDisplayString)(FTextHistory *this, FString *result);
  void (__cdecl *Serialize)(FTextHistory *this, FArchive *);
  void (__cdecl *SerializeForDisplayString)(FTextHistory *this, FArchive *, TSharedPtr<FString,1> *);
  bool (__cdecl *IsOutOfDate)(FTextHistory *this);
  FString *(__cdecl *GetSourceString)(FTextHistory *this);
  void (__cdecl *GetHistoricFormatData)(FTextHistory *this, FText *, TArray<FHistoricTextFormatData,FDefaultAllocator> *);
  bool (__cdecl *GetHistoricNumericData)(FTextHistory *this, FText *, FHistoricTextNumericData *);
  bool (__cdecl *CanRebuildLocalizedDisplayString)(FTextHistory *this);
};

/* 16 */
enum EPropertyFlags
{
  CPF_None = 0x0,
  CPF_Edit = 0x1,
  CPF_ConstParm = 0x2,
  CPF_BlueprintVisible = 0x4,
  CPF_ExportObject = 0x8,
  CPF_BlueprintReadOnly = 0x10,
  CPF_Net = 0x20,
  CPF_EditFixedSize = 0x40,
  CPF_Parm = 0x80,
  CPF_OutParm = 0x100,
  CPF_ZeroConstructor = 0x200,
  CPF_ReturnParm = 0x400,
  CPF_DisableEditOnTemplate = 0x800,
  CPF_Transient = 0x2000,
  CPF_Config = 0x4000,
  CPF_DisableEditOnInstance = 0x10000,
  CPF_EditConst = 0x20000,
  CPF_GlobalConfig = 0x40000,
  CPF_InstancedReference = 0x80000,
  CPF_DuplicateTransient = 0x200000,
  CPF_SubobjectReference = 0x400000,
  CPF_SaveGame = 0x1000000,
  CPF_NoClear = 0x2000000,
  CPF_ReferenceParm = 0x8000000,
  CPF_BlueprintAssignable = 0x10000000,
  CPF_Deprecated = 0x20000000,
  CPF_IsPlainOldData = 0x40000000,
  CPF_RepSkip = 0x80000000,
  CPF_RepNotify = 0x0,
  CPF_Interp = 0x0,
  CPF_NonTransactional = 0x0,
  CPF_EditorOnly = 0x0,
  CPF_NoDestructor = 0x0,
  CPF_AutoWeak = 0x0,
  CPF_ContainsInstancedReference = 0x0,
  CPF_AssetRegistrySearchable = 0x0,
  CPF_SimpleDisplay = 0x0,
  CPF_AdvancedDisplay = 0x0,
  CPF_Protected = 0x0,
  CPF_BlueprintCallable = 0x0,
  CPF_BlueprintAuthorityOnly = 0x0,
  CPF_TextExportTransient = 0x0,
  CPF_NonPIEDuplicateTransient = 0x0,
  CPF_ExposeOnSpawn = 0x0,
  CPF_PersistentInstance = 0x0,
  CPF_UObjectWrapper = 0x0,
  CPF_HasGetValueTypeHash = 0x0,
  CPF_NativeAccessSpecifierPublic = 0x0,
  CPF_NativeAccessSpecifierProtected = 0x0,
  CPF_NativeAccessSpecifierPrivate = 0x0,
  CPF_SkipSerialization = 0x0,
};

/* 4415 */
struct UScriptStruct::ICppStructOpsVtbl
{
  void *(__cdecl *__vecDelDtor)(UScriptStruct::ICppStructOps *this, unsigned int);
  _BYTE gap8[32];
  void (__cdecl *Destruct)(UScriptStruct::ICppStructOps *this, void *);
  bool (__cdecl *HasSerializer)(UScriptStruct::ICppStructOps *this);
  bool (__cdecl *Serialize)(UScriptStruct::ICppStructOps *this, FArchive *, void *);
  bool (__cdecl *HasPostSerialize)(UScriptStruct::ICppStructOps *this);
  void (__cdecl *PostSerialize)(UScriptStruct::ICppStructOps *this, FArchive *, void *);
  bool (__cdecl *HasNetSerializer)(UScriptStruct::ICppStructOps *this);
  bool (__cdecl *HasNetSharedSerialization)(UScriptStruct::ICppStructOps *this);
  bool (__cdecl *NetSerialize)(UScriptStruct::ICppStructOps *this, FArchive *, UPackageMap *, bool *, void *);
  bool (__cdecl *HasNetDeltaSerializer)(UScriptStruct::ICppStructOps *this);
  bool (__cdecl *NetDeltaSerialize)(UScriptStruct::ICppStructOps *this, FNetDeltaSerializeInfo *, void *);
  bool (__cdecl *HasPostScriptConstruct)(UScriptStruct::ICppStructOps *this);
  void (__cdecl *PostScriptConstruct)(UScriptStruct::ICppStructOps *this, void *);
  bool (__cdecl *IsPlainOldData)(UScriptStruct::ICppStructOps *this);
  bool (__cdecl *HasCopy)(UScriptStruct::ICppStructOps *this);
  bool (__cdecl *Copy)(UScriptStruct::ICppStructOps *this, void *, const void *, int);
  bool (__cdecl *HasIdentical)(UScriptStruct::ICppStructOps *this);
  bool (__cdecl *Identical)(UScriptStruct::ICppStructOps *this, const void *, const void *, unsigned int, bool *);
  bool (__cdecl *HasExportTextItem)(UScriptStruct::ICppStructOps *this);
  bool (__cdecl *ExportTextItem)(UScriptStruct::ICppStructOps *this, FString *, const void *, const void *, UObject *, int, UObject *);
  bool (__cdecl *HasImportTextItem)(UScriptStruct::ICppStructOps *this);
  bool (__cdecl *ImportTextItem)(UScriptStruct::ICppStructOps *this, const wchar_t **, void *, int, UObject *, FOutputDevice *);
  bool (__cdecl *HasAddStructReferencedObjects)(UScriptStruct::ICppStructOps *this);
  void (__cdecl *(__cdecl *AddStructReferencedObjects)(UScriptStruct::ICppStructOps *this))(const void *, FReferenceCollector *);
  bool (__cdecl *HasSerializeFromMismatchedTag)(UScriptStruct::ICppStructOps *this);
  bool (__cdecl *SerializeFromMismatchedTag)(UScriptStruct::ICppStructOps *this, FPropertyTag *, FArchive *, void *);
  bool (__cdecl *HasGetTypeHash)(UScriptStruct::ICppStructOps *this);
  unsigned int (__cdecl *GetTypeHash)(UScriptStruct::ICppStructOps *this, const void *);
  EPropertyFlags (__cdecl *GetComputedPropertyFlags)(UScriptStruct::ICppStructOps *this);
  bool (__cdecl *IsAbstract)(UScriptStruct::ICppStructOps *this);
};

/* 8835 */
struct INavigationDataInterfaceVtbl
{
  void *(__cdecl *__vecDelDtor)(INavigationDataInterface *this, unsigned int);
  UObject *(__cdecl *_getUObject)(INavigationDataInterface *this);
  bool (__cdecl *ProjectPoint)(INavigationDataInterface *this, FVector *, FNavLocation *, FVector *, TSharedPtr<FNavigationQueryFilter const ,1>, UObject *);
};

/* 443 */
typedef EVertexColorViewMode::Type ENavigationQueryResult::Type;

/* 8838 */
struct __declspec(align(8)) FPathFindingResult
{
  TSharedPtr<FNavigationPath,1> Path;
  ENavigationQueryResult::Type Result;
};

/* 8841 */
struct __cppobj TWeakObjectPtr<ANavigationData const ,FWeakObjectPtr> : FWeakObjectPtr
{
};

/* 8842 */
const struct __cppobj FPathFindingQuery : FPathFindingQueryData
{
  TWeakObjectPtr<ANavigationData const ,FWeakObjectPtr> NavData;
  TSharedPtr<FNavigationPath,1> PathInstanceToFill;
  FNavAgentProperties NavAgentProperties;
};

/* 7811 */
struct TWeakPtr<FNavigationQueryFilter,1>
{
  FNavigationQueryFilter *Object;
  SharedPointerInternals::FWeakReferencer<1> WeakReferenceCount;
};

/* 7806 */
struct TSharedFromThis<FNavigationQueryFilter,1>
{
  TWeakPtr<FNavigationQueryFilter,1> WeakThis;
};

/* 7809 */
struct TSharedPtr<INavigationQueryFilterInterface,1>
{
  INavigationQueryFilterInterface *Object;
  SharedPointerInternals::FSharedReferencer<1> SharedReferenceCount;
};

/* 7810 */
struct __cppobj __declspec(align(8)) FNavigationQueryFilter : TSharedFromThis<FNavigationQueryFilter,1>
{
  TSharedPtr<INavigationQueryFilterInterface,1> QueryFilterImpl;
  unsigned int MaxSearchNodes;
};

/* 8845 */
struct TWeakPtr<FNavDataGenerator,1>
{
  FNavDataGenerator *Object;
  SharedPointerInternals::FWeakReferencer<1> WeakReferenceCount;
};

/* 8846 */
struct TSharedFromThis<FNavDataGenerator,1>
{
  TWeakPtr<FNavDataGenerator,1> WeakThis;
};

/* 8844 */
struct __cppobj FNavDataGenerator : TSharedFromThis<FNavDataGenerator,1>
{
  FNavDataGeneratorVtbl *vfptr;
};

/* 255 */
enum EAxisOption::Type
{
  X = 0x0,
  Y = 0x1,
  Z = 0x2,
  X_Neg = 0x3,
  Y_Neg = 0x4,
  Z_Neg = 0x5,
  Custom = 0x6,
};

/* 431 */
typedef EAxisOption::Type ENavPathUpdateType::Type;

/* 8863 */
struct FNavigationPathVtbl
{
  void *(__cdecl *__vecDelDtor)(FNavigationPath *this, unsigned int);
  _BYTE gap8[8];
  void (__cdecl *DebugDraw)(FNavigationPath *this, ANavigationData *, FColor, UCanvas *, bool, const unsigned int);
  bool (__cdecl *ContainsCustomLink)(FNavigationPath *this, unsigned int);
  bool (__cdecl *ContainsAnyCustomLink)(FNavigationPath *this);
  bool (__cdecl *ContainsNode)(FNavigationPath *this, unsigned __int64);
  float (__cdecl *GetCostFromIndex)(FNavigationPath *this, int);
  float (__cdecl *GetCostFromNode)(FNavigationPath *this, unsigned __int64);
  float (__cdecl *GetLengthFromPosition)(FNavigationPath *this, FVector, unsigned int);
  bool (__cdecl *DoesIntersectBox)(FNavigationPath *this, FBox *, FVector *, unsigned int, int *, FVector *);
  bool (__cdecl *DoesIntersectBox)(FNavigationPath *this, FBox *, unsigned int, int *, FVector *);
  FVector *(__cdecl *GetSegmentDirection)(FNavigationPath *this, FVector *result, unsigned int);
  void (__cdecl *OnPathUpdated)(FNavigationPath *this, ENavPathUpdateType::Type);
};

/* 69198 */
struct TArray<FBlackboardEntry,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 5395 */
struct __cppobj ADebugCameraController : APlayerController
{
  unsigned __int32 bShowSelectedInfo : 1;
  unsigned __int32 bIsFrozenRendering : 1;
  UDrawFrustumComponent *DrawFrustum;
  AActor *SelectedActor;
  UPrimitiveComponent *SelectedComponent;
  APlayerController *OriginalControllerRef;
  UPlayer *OriginalPlayer;
  float SpeedScale;
  float InitialMaxSpeed;
  float InitialAccel;
  float InitialDecel;
  FVector2D LastTouchDragLocation;
};

/* 5445 */
struct __cppobj UHapticFeedbackEffect_Base : UObject
{
};

/* 5462 */
struct __cppobj __declspec(align(16)) USphereComponent : UShapeComponent
{
  float SphereRadius;
};

/* 225 */
enum ELogVerbosity::Type
{
  NoLogging = 0x0,
  Fatal = 0x1,
  Error = 0x2,
  Warning = 0x3,
  Display = 0x4,
  Log = 0x5,
  Verbose = 0x6,
  VeryVerbose = 0x7,
  All = 0x7,
  NumVerbosity = 0x8,
  VerbosityMask = 0xF,
  SetColor = 0x40,
  BreakOnLog = 0x80,
};

/* 4413 */
struct FOutputDeviceVtbl
{
  void *(__cdecl *__vecDelDtor)(FOutputDevice *this, unsigned int);
  void (__cdecl *Serialize)(FOutputDevice *this, const wchar_t *, ELogVerbosity::Type, FName *, const long double);
  void (__cdecl *Serialize)(FOutputDevice *this, const wchar_t *, ELogVerbosity::Type, FName *);
  void (__cdecl *Flush)(FOutputDevice *this);
  void (__cdecl *TearDown)(FOutputDevice *this);
  void (__cdecl *Dump)(FOutputDevice *this, FArchive *);
  bool (__cdecl *IsMemoryOnly)(FOutputDevice *this);
  bool (__cdecl *CanBeUsedOnAnyThread)(FOutputDevice *this);
};

/* 5107 */
struct TSharedPtr<FKeyDetails,0>
{
  FKeyDetails *Object;
  SharedPointerInternals::FSharedReferencer<0> SharedReferenceCount;
};

/* 5103 */
struct FKey
{
  FName KeyName;
  TSharedPtr<FKeyDetails,0> KeyDetails;
};

/* 64 */
enum EInputEvent
{
  IE_Pressed = 0x0,
  IE_Released = 0x1,
  IE_Repeat = 0x2,
  IE_DoubleClick = 0x3,
  IE_Axis = 0x4,
  IE_MAX = 0x5,
};

/* 384 */
typedef EComponentMobility::Type ETouchType::Type;

/* 471 */
typedef _PaddingMode EGestureEvent;

/* 167 */
typedef _PaddingMode EMouseCursor::Type;

/* 472 */
enum EFocusCause
{
  Mouse = 0x0,
  Navigation = 0x1,
  SetDirectly = 0x2,
  Cleared = 0x3,
  OtherWidgetLostFocus = 0x4,
  WindowActivate = 0x5,
};

/* 473 */
typedef __MIDL___MIDL_itf_amstream_0000_0000_0004 FViewportClient::ESoundShowFlags::Type;

/* 474 */
enum EMouseCaptureMode
{
  NoCapture = 0x0,
  CapturePermanently = 0x1,
  CapturePermanently_IncludingInitialMouseDown = 0x2,
  CaptureDuringMouseDown = 0x3,
  CaptureDuringRightMouseDown = 0x4,
};

/* 5360 */
struct FViewportClientVtbl
{
  void *(__cdecl *__vecDelDtor)(FViewportClient *this, unsigned int);
  _BYTE gap8[48];
  FEngineShowFlags *(__cdecl *GetEngineShowFlags)(FViewportClient *this);
  bool (__cdecl *InputKey)(FViewportClient *this, FViewport *, int, FKey, EInputEvent, float, bool);
  bool (__cdecl *InputAxis)(FViewportClient *this, FViewport *, int, FKey, float, float, int, bool);
  bool (__cdecl *InputChar)(FViewportClient *this, FViewport *, int, wchar_t);
  bool (__cdecl *InputTouch)(FViewportClient *this, FViewport *, int, unsigned int, ETouchType::Type, FVector2D *, float, FDateTime, unsigned int);
  bool (__cdecl *InputGesture)(FViewportClient *this, FViewport *, EGestureEvent, FVector2D *, bool);
  bool (__cdecl *InputMotion)(FViewportClient *this, FViewport *, int, FVector *, FVector *, FVector *, FVector *);
  void (__cdecl *SetIsSimulateInEditorViewport)(FViewportClient *this, bool);
  bool (__cdecl *WantsPollingMouseMovement)(FViewportClient *this);
  void (__cdecl *MouseEnter)(FViewportClient *this, FViewport *, int, int);
  void (__cdecl *MouseLeave)(FViewportClient *this, FViewport *);
  void (__cdecl *MouseMove)(FViewportClient *this, FViewport *, int, int);
  void (__cdecl *CapturedMouseMove)(FViewportClient *this, FViewport *, int, int);
  EMouseCursor::Type (__cdecl *GetCursor)(FViewportClient *this, FViewport *, int, int);
  TOptional<TSharedRef<SWidget,0> > *(__cdecl *MapCursor)(FViewportClient *this, TOptional<TSharedRef<SWidget,0> > *result, FViewport *, FCursorReply *);
  TOptional<bool> *(__cdecl *QueryShowFocus)(FViewportClient *this, TOptional<bool> *result, EFocusCause);
  void (__cdecl *LostFocus)(FViewportClient *this, FViewport *);
  void (__cdecl *ReceivedFocus)(FViewportClient *this, FViewport *);
  bool (__cdecl *IsFocused)(FViewportClient *this, FViewport *);
  void (__cdecl *Activated)(FViewportClient *this, FViewport *, FWindowActivateEvent *);
  void (__cdecl *Deactivated)(FViewportClient *this, FViewport *, FWindowActivateEvent *);
  bool (__cdecl *WindowCloseRequested)(FViewportClient *this);
  void (__cdecl *CloseRequested)(FViewportClient *this, FViewport *);
  bool (__cdecl *RequiresHitProxyStorage)(FViewportClient *this);
  bool (__cdecl *RequiresUncapturedAxisInput)(FViewportClient *this);
  bool (__cdecl *RequiresKeyboardInput)(FViewportClient *this);
  bool (__cdecl *IsOrtho)(FViewportClient *this);
  bool (__cdecl *IsInGameView)(FViewportClient *this);
  UWorld *(__cdecl *ConditionalSetWorld)(FViewportClient *this);
  void (__cdecl *ConditionalRestoreWorld)(FViewportClient *this, UWorld *);
  bool (__cdecl *OverrideHighResScreenshotCaptureRegion)(FViewportClient *this, FIntRect *);
  FStatUnitData *(__cdecl *GetStatUnitData)(FViewportClient *this);
  FStatHitchesData *(__cdecl *GetStatHitchesData)(FViewportClient *this);
  TArray<FString,FDefaultAllocator> *(__cdecl *GetEnabledStats)(FViewportClient *this);
  void (__cdecl *SetEnabledStats)(FViewportClient *this, TArray<FString,FDefaultAllocator> *);
  bool (__cdecl *IsStatEnabled)(FViewportClient *this, FString *);
  void (__cdecl *SetShowStats)(FViewportClient *this, bool);
  FViewportClient::ESoundShowFlags::Type (__cdecl *GetSoundShowFlags)(FViewportClient *this);
  void (__cdecl *SetSoundShowFlags)(FViewportClient *this, FViewportClient::ESoundShowFlags::Type);
  bool (__cdecl *IgnoreInput)(FViewportClient *this);
  EMouseCaptureMode (__cdecl *CaptureMouseOnClick)(FViewportClient *this);
  bool (__cdecl *CaptureMouseOnLaunch)(FViewportClient *this);
  bool (__cdecl *LockDuringCapture)(FViewportClient *this);
  bool (__cdecl *ShouldAlwaysLockMouse)(FViewportClient *this);
  bool (__cdecl *HideCursorDuringCapture)(FViewportClient *this);
  FPopupMethodReply *(__cdecl *OnQueryPopupMethod)(FViewportClient *this, FPopupMethodReply *result);
  bool (__cdecl *HandleNavigation)(FViewportClient *this, const unsigned int, TSharedPtr<SWidget,0>);
  bool (__cdecl *ShouldDPIScaleSceneCanvas)(FViewportClient *this);
  float (__cdecl *GetDPIScale)(FViewportClient *this);
};

/* 6582 */
struct TArray<FAutoCompleteCommand,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 6583 */
struct TArray<FAutoCompleteNode *,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 6584 */
struct FAutoCompleteNode
{
  int IndexChar;
  TArray<int,FDefaultAllocator> AutoCompleteListIndices;
  TArray<FAutoCompleteNode *,FDefaultAllocator> ChildNodes;
};

/* 6586 */
struct __cppobj UConsole : UObject, FOutputDevice
{
  ULocalPlayer *ConsoleTargetPlayer;
  UTexture2D *DefaultTexture_Black;
  UTexture2D *DefaultTexture_White;
  TArray<FString,FDefaultAllocator> Scrollback;
  int SBHead;
  int SBPos;
  TArray<FString,FDefaultAllocator> HistoryBuffer;
  FString TypedStr;
  int TypedStrPos;
  FString PrecompletedInputLine;
  FString LastAutoCompletedCommand;
  unsigned __int32 bCaptureKeyInput : 1;
  unsigned __int32 bCtrl : 1;
  TArray<FAutoCompleteCommand,FDefaultAllocator> AutoCompleteList;
  unsigned __int32 bAutoCompleteLocked : 1;
  int AutoCompleteIndex;
  int AutoCompleteCursor;
  unsigned __int32 bIsRuntimeAutoCompleteUpToDate : 1;
  FName ConsoleState;
  FAutoCompleteNode AutoCompleteTree;
  TArray<FAutoCompleteCommand,FDefaultAllocator> AutoComplete;
  UConsoleSettings *ConsoleSettings;
  TWeakPtr<SWidget,0> PreviousFocusedWidget;
};

/* 5362 */
struct __cppobj FViewport::FHitProxyMap : FHitProxyConsumer, FRenderTarget, FGCObject
{
  unsigned int SizeX;
  unsigned int SizeY;
  TArray<TRefCountPtr<HHitProxy>,FDefaultAllocator> HitProxies;
  TRefCountPtr<FRHITexture2D> HitProxyTexture;
  TRefCountPtr<FRHITexture2D> HitProxyCPUTexture;
};

/* 5365 */
struct TRefCountPtr<FRHIViewport>
{
  FRHIViewport *Reference;
};

/* 212 */
enum EWindowMode::Type
{
  Fullscreen = 0x0,
  WindowedFullscreen = 0x1,
  Windowed = 0x2,
  NumWindowModes = 0x3,
};

/* 5101 */
struct __cppobj __declspec(align(8)) FViewport : FRenderTarget, FRenderResource
{
  FString AppVersionString;
  FViewportClient *ViewportClient;
  FViewport::FHitProxyMap HitProxyMap;
  TArray<FColor,FDefaultAllocator> CachedHitProxyData;
  TRefCountPtr<FRHIViewport> ViewportRHI;
  unsigned int InitialPositionX;
  unsigned int InitialPositionY;
  unsigned int SizeX;
  unsigned int SizeY;
  unsigned int HitProxySize;
  EWindowMode::Type WindowMode;
  unsigned __int32 bRequiresHitProxyStorage : 1;
  unsigned __int32 bHitProxiesCached : 1;
  unsigned __int32 bHasRequestedToggleFreeze : 1;
  unsigned __int32 bIsPlayInEditorViewport : 1;
  unsigned __int32 bIsSlateViewport : 1;
  unsigned int FlushOnDrawCount;
  bool bTakeHighResScreenShot;
};

/* 6591 */
struct FViewportFrame
{
  FViewportFrameVtbl *vfptr;
};

/* 190 */
enum EWindowZone::Type
{
  NotInWindow = 0x0,
  TopLeftBorder = 0x1,
  TopBorder = 0x2,
  TopRightBorder = 0x3,
  LeftBorder = 0x4,
  ClientArea = 0x5,
  RightBorder = 0x6,
  BottomLeftBorder = 0x7,
  BottomBorder = 0x8,
  BottomRightBorder = 0x9,
  TitleBar = 0xA,
  MinimizeButton = 0xB,
  MaximizeButton = 0xC,
  CloseButton = 0xD,
  SysMenu = 0xE,
  Unspecified = 0x0,
};

/* 5184 */
struct FSlateRect
{
  float Left;
  float Top;
  float Right;
  float Bottom;
};

/* 27 */
enum EMultiBoxType::Type
{
  MenuBar = 0x0,
  ToolBar = 0x1,
  VerticalToolBar = 0x2,
  Menu = 0x3,
  ButtonRow = 0x4,
  ToolMenuBar = 0x5,
};

/* 734 */
typedef EMultiBoxType::Type EWindowType;

/* 632 */
typedef _PaddingMode EWindowTransparency;

/* 757 */
typedef EConsumeMouseWheel EWindowActivationPolicy;

/* 5291 */
struct TWeakPtr<ISlateViewport,0>
{
  ISlateViewport *Object;
  SharedPointerInternals::FWeakReferencer<0> WeakReferenceCount;
};

/* 5293 */
struct TWeakPtr<FCurveSequence,0>
{
  FCurveSequence *Object;
  SharedPointerInternals::FWeakReferencer<0> WeakReferenceCount;
};

/* 5294 */
struct TSharedFromThis<FCurveSequence,0>
{
  TWeakPtr<FCurveSequence,0> WeakThis;
};

/* 5297 */
struct TWeakPtr<FActiveTimerHandle,0>
{
  FActiveTimerHandle *Object;
  SharedPointerInternals::FWeakReferencer<0> WeakReferenceCount;
};

/* 5298 */
struct TArray<FCurveSequence::FSlateCurve,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 5292 */
struct __cppobj __declspec(align(4)) FCurveSequence : TSharedFromThis<FCurveSequence,0>
{
  TWeakPtr<SWidget,0> OwnerWidget;
  TWeakPtr<FActiveTimerHandle,0> ActiveTimerHandle;
  TArray<FCurveSequence::FSlateCurve,FDefaultAllocator> Curves;
  long double StartTime;
  long double PauseTime;
  float TotalDuration;
  __int8 bInReverse : 1;
  __int8 bIsLooping : 1;
  __int8 bIsPaused : 1;
};

/* 5299 */
struct __declspec(align(8)) SWindow::FMorpher
{
  float StartingOpacity;
  float TargetOpacity;
  FSlateRect StartingMorphShape;
  FSlateRect TargetMorphShape;
  FCurveSequence Sequence;
  __int8 bIsActive : 1;
  __int8 bIsAnimatingWindowSize : 1;
};

/* 4767 */
struct __cppobj TTypeCompatibleBytes<float> : TAlignedBytes<4,4>
{
};

/* 4768 */
struct __declspec(align(4)) TOptional<float>
{
  TTypeCompatibleBytes<float> Value;
  bool bIsSet;
};

/* 5329 */
struct FWindowSizeLimits
{
  TOptional<float> MinWidth;
  TOptional<float> MinHeight;
  TOptional<float> MaxWidth;
  TOptional<float> MaxHeight;
};

/* 5334 */
struct TSharedPtr<FGenericWindow,0>
{
  FGenericWindow *Object;
  SharedPointerInternals::FSharedReferencer<0> SharedReferenceCount;
};

/* 5338 */
struct TSharedRef<FHittestGrid,0>
{
  FHittestGrid *Object;
  SharedPointerInternals::FSharedReferencer<0> SharedReferenceCount;
};

/* 5341 */
struct __cppobj TBaseDelegate<TTypeWrapper<void>,TSharedRef<SWindow,0> const &> : FDelegateBase
{
};

/* 5342 */
struct __cppobj TBaseDelegate<void,TSharedRef<SWindow,0> const &> : TBaseDelegate<TTypeWrapper<void>,TSharedRef<SWindow,0> const &>
{
};

/* 5347 */
struct TSharedPtr<SOverlay,0>
{
  SOverlay *Object;
  SharedPointerInternals::FSharedReferencer<0> SharedReferenceCount;
};

/* 5351 */
struct TSharedPtr<SPopupLayer,0>
{
  SPopupLayer *Object;
  SharedPointerInternals::FSharedReferencer<0> SharedReferenceCount;
};

/* 5352 */
struct TArray<TSharedRef<SWindow,0>,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 5353 */
struct __cppobj TBaseDelegate<int,int> : FDelegateBase
{
};

/* 5356 */
struct TSharedPtr<IWindowTitleBar,0>
{
  IWindowTitleBar *Object;
  SharedPointerInternals::FSharedReferencer<0> SharedReferenceCount;
};

/* 5186 */
struct __cppobj SWindow : SCompoundWidget
{
  EWindowZone::Type MoveResizeZone;
  FVector2D MoveResizeStart;
  FSlateRect MoveResizeRect;
  EWindowType Type;
  TAttribute<FText> Title;
  bool bDragAnywhere;
  float Opacity;
  _BYTE SizingRule[1];
  _BYTE AutoCenterRule[1];
  EWindowTransparency TransparencySupport;
  __int8 bCreateTitleBar : 1;
  __int8 bIsPopupWindow : 1;
  __int8 bIsTopmostWindow : 1;
  __int8 bSizeWillChangeOften : 1;
  __int8 bInitiallyMaximized : 1;
  __int8 bInitiallyMinimized : 1;
  __int8 bHasEverBeenShown : 1;
  __int8 bFocusWhenFirstShown : 1;
  __int8 bHasOSWindowBorder : 1;
  __int8 bVirtualWindow : 1;
  __int8 bHasCloseButton : 1;
  __int8 bHasMinimizeButton : 1;
  __int8 bHasMaximizeButton : 1;
  __int8 bHasSizingFrame : 1;
  __int8 bIsModalWindow : 1;
  __int8 bIsMirrorWindow : 1;
  __int8 bShouldPreserveAspectRatio : 1;
  EWindowActivationPolicy WindowActivationPolicy;
  FVector2D InitialDesiredScreenPosition;
  FVector2D InitialDesiredSize;
  FVector2D ScreenPosition;
  FVector2D PreFullscreenPosition;
  FVector2D Size;
  FVector2D ViewportSize;
  TWeakPtr<ISlateViewport,0> Viewport;
  float TitleBarSize;
  SWindow::FMorpher Morpher;
  EWindowZone::Type WindowZone;
  TSharedPtr<SWidget,0> TitleArea;
  SVerticalBox::FSlot *ContentSlot;
  TWeakPtr<SWidget,0> WidgetToFocusOnActivate;
  TWeakPtr<SWidget,0> WidgetFocusedOnDeactivate;
  FWindowStyle *Style;
  FSlateBrush *WindowBackground;
  FWindowSizeLimits SizeLimits;
  TSharedPtr<FGenericWindow,0> NativeWindow;
  TSharedRef<FHittestGrid,0> HittestGrid;
  TBaseDelegate<void> OnWindowActivated;
  TMulticastDelegate<void> WindowActivatedEvent;
  TBaseDelegate<void> OnWindowDeactivated;
  TMulticastDelegate<void> WindowDeactivatedEvent;
  TBaseDelegate<void,TSharedRef<SWindow,0> const &> OnWindowClosed;
  TBaseDelegate<void,TSharedRef<SWindow,0> const &> OnWindowMoved;
  TBaseDelegate<void,TSharedRef<SWindow,0> const &> RequestDestroyWindowOverride;
  TSharedPtr<SOverlay,0> WindowOverlay;
  TSharedPtr<SPopupLayer,0> PopupLayer;
  TSharedPtr<SWidget,0> FullWindowOverlayWidget;
  TWeakPtr<SWindow,0> ParentWindowPtr;
  TArray<TSharedRef<SWindow,0>,FDefaultAllocator> ChildWindows;
  TBaseDelegate<int,int> OnWorldSwitchHack;
  bool bShouldShowWindowContentDuringOverlay;
  int ExpectedMaxWidth;
  int ExpectedMaxHeight;
  TSharedPtr<IWindowTitleBar,0> TitleBar;
  FMargin LayoutBorder;
  FMargin UserResizeBorder;
  bool bIsDrawingEnabled;
  TWeakPtr<FActiveTimerHandle,0> ActiveTimerHandle;
};

/* 5343 */
struct __cppobj SPanel : SWidget
{
};

/* 5344 */
struct TIndirectArray<SOverlay::FOverlaySlot,FDefaultAllocator>
{
  TArray<void *,FDefaultAllocator> Array;
};

/* 5345 */
struct __cppobj __declspec(align(8)) TPanelChildren<SOverlay::FOverlaySlot> : FChildren, TIndirectArray<SOverlay::FOverlaySlot,FDefaultAllocator>
{
  bool bEmptying;
};

/* 5346 */
struct __cppobj SOverlay : SPanel
{
  TPanelChildren<SOverlay::FOverlaySlot> Children;
};

/* 6594 */
struct IGameLayerManager
{
  IGameLayerManagerVtbl *vfptr;
};

/* 5357 */
struct FStatUnitData
{
  float RenderThreadTime;
  float GameThreadTime;
  float GPUFrameTime;
  float FrameTime;
  float RHITTime;
  float RawRenderThreadTime;
  float RawGameThreadTime;
  float RawGPUFrameTime;
  float RawFrameTime;
  float RawRHITTime;
  long double LastTime;
};

/* 5358 */
struct TArray<double,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 5359 */
struct FStatHitchesData
{
  long double LastTime;
  TArray<float,FDefaultAllocator> Hitches;
  TArray<double,FDefaultAllocator> When;
  int OverwriteIndex;
  int Count;
};

/* 69563 */
struct std::_Func_base<void,TCPPacket const &>
{
  std::_Func_base<void,TCPPacket const &>Vtbl *vfptr;
};

/* 69570 */
struct TQueue<TCPPacket,1>::TNode
{
  TQueue<TCPPacket,1>::TNode *volatile NextNode;
  TCPPacket Item;
};

/* 69564 */
const struct TCPPacket
{
  IPAddress targetIP;
  char *data;
  unsigned int currentDataPos;
  unsigned int size;
};

/* 69601 */
struct std::_Func_base<void,ksRacing::AssistRules const &>
{
  std::_Func_base<void,ksRacing::AssistRules const &>Vtbl *vfptr;
};

/* 69614 */
struct std::_Func_base<void,ksRacing::RealismRules const &>
{
  std::_Func_base<void,ksRacing::RealismRules const &>Vtbl *vfptr;
};

/* 68804 */
struct ksRacing::ReplayFrame<ksRacing::ReplayCarMatrix>
{
  ksRacing::ReplayCarMatrix data;
  long double timeStamp;
};

/* 68813 */
struct ksRacing::ReplayFrame<ksRacing::ReplayCarAdditional>
{
  ksRacing::ReplayCarAdditional data;
  long double timeStamp;
};

/* 7015 */
struct __declspec(align(4)) FWindSourceSceneProxy
{
  FVector Position;
  FVector Direction;
  float Strength;
  float Speed;
  float MinGustAmt;
  float MaxGustAmt;
  float Radius;
  bool bIsPointSource;
};

/* 7069 */
struct __cppobj FDefaultMaterialInstance : FMaterialRenderProxy
{
  UMaterial *Material;
};

/* 7070 */
struct TEnumAsByte<enum EMaterialFunctionUsage>
{
  char Value;
};

/* 7071 */
struct __cppobj __declspec(align(8)) UMaterialFunctionInterface : UObject
{
  FGuid StateId;
  TEnumAsByte<enum EMaterialFunctionUsage> MaterialFunctionUsage;
};

/* 7072 */
struct __cppobj __declspec(align(8)) UMaterialFunction : UMaterialFunctionInterface
{
  FString Description;
  unsigned __int32 bExposeToLibrary : 1;
  unsigned __int32 bPrefixParameterNames : 1;
  TArray<UMaterialExpression *,FDefaultAllocator> FunctionExpressions;
  unsigned __int32 bReentrantFlag : 1;
};

/* 5369 */
struct __cppobj __declspec(align(16)) UCameraAnim : UObject
{
  UInterpGroup *CameraInterpGroup;
  float AnimLength;
  FBox BoundingBox;
  __int8 bRelativeToInitialTransform : 1;
  __int8 bRelativeToInitialFOV : 1;
  float BaseFOV;
  FPostProcessSettings BasePostProcessSettings;
  float BasePostProcessBlendWeight;
};

/* 5370 */
struct TArray<UInterpTrackInst *,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 5371 */
struct __cppobj UInterpGroupInst : UObject
{
  UInterpGroup *Group;
  AActor *GroupActor;
  TArray<UInterpTrackInst *,FDefaultAllocator> TrackInst;
};

/* 5372 */
struct FCurveEdInterface
{
  FCurveEdInterfaceVtbl *vfptr;
};

/* 5099 */
struct FInterpEdInputInterface
{
  FInterpEdInputInterfaceVtbl *vfptr;
};

/* 5367 */
struct TArray<UInterpTrack *,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 5374 */
struct TSubclassOf<UInterpTrackInst>
{
  UClass *Class;
};

/* 5375 */
struct TEnumAsByte<enum ETrackActiveCondition>
{
  char Value;
};

/* 5376 */
struct __cppobj __declspec(align(8)) UInterpTrack : UObject, FCurveEdInterface, FInterpEdInputInterface
{
  TArray<UInterpTrack *,FDefaultAllocator> SubTracks;
  TSubclassOf<UInterpTrackInst> TrackInstClass;
  TEnumAsByte<enum ETrackActiveCondition> ActiveCondition;
  FString TrackTitle;
  unsigned __int32 bOnePerGroup : 1;
  unsigned __int32 bDirGroupOnly : 1;
  unsigned __int32 bDisableTrack : 1;
  unsigned __int32 bIsSelected : 1;
  unsigned __int32 bIsAnimControlTrack : 1;
  unsigned __int32 bSubTrackOnly : 1;
  unsigned __int32 bVisible : 1;
  unsigned __int32 bIsRecording : 1;
};

/* 5380 */
struct TArray<FInterpLookupPoint,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 5381 */
struct FInterpLookupTrack
{
  TArray<FInterpLookupPoint,FDefaultAllocator> Points;
};

/* 5382 */
struct TEnumAsByte<enum EInterpTrackMoveRotMode>
{
  char Value;
};

/* 5383 */
struct __cppobj UInterpTrackMove : UInterpTrack
{
  FInterpCurveVector PosTrack;
  FInterpCurveVector EulerTrack;
  FInterpLookupTrack LookupTrack;
  FName LookAtGroupName;
  float LinCurveTension;
  float AngCurveTension;
  unsigned __int32 bUseQuatInterpolation : 1;
  unsigned __int32 bShowArrowAtKeys : 1;
  unsigned __int32 bDisableMovement : 1;
  unsigned __int32 bShowTranslationOnCurveEd : 1;
  unsigned __int32 bShowRotationOnCurveEd : 1;
  unsigned __int32 bHide3DTrack : 1;
  TEnumAsByte<enum EInterpTrackMoveRotMode> RotMode;
};

/* 5384 */
struct __cppobj UInterpTrackInstMove : UInterpTrackInst
{
  FVector ResetLocation;
  FRotator ResetRotation;
};

/* 4266 */
struct TArray<FRichCurveEditInfoTemplate<FRichCurve const *>,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 4267 */
struct TArray<UObject const *,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 4265 */
struct TArray<FRichCurveEditInfoTemplate<FRichCurve *>,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 4269 */
struct TArray<TWeakObjectPtr<UObject,FWeakObjectPtr>,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 4270 */
const struct FPackageReloadedEvent
{
  UPackage *OldPackage;
  UPackage *NewPackage;
  TMap<UObject *,UObject *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<UObject *,UObject *,0> > RepointedObjects;
  TArray<TWeakObjectPtr<UObject,FWeakObjectPtr>,FDefaultAllocator> ObjectReferencers;
};

/* 158 */
enum EMaterialTessellationMode
{
  MTM_NoTessellation = 0x0,
  MTM_FlatTessellation = 0x1,
  MTM_PNTriangles = 0x2,
  MTM_MAX = 0x3,
};

/* 145 */
enum EBlendMode
{
  BLEND_Opaque = 0x0,
  BLEND_Masked = 0x1,
  BLEND_Translucent = 0x2,
  BLEND_Additive = 0x3,
  BLEND_Modulate = 0x4,
  BLEND_AlphaComposite = 0x5,
  BLEND_MAX = 0x6,
};

/* 148 */
enum ERefractionMode
{
  RM_IndexOfRefraction = 0x0,
  RM_PixelNormalOffset = 0x1,
};

/* 157 */
enum EMaterialShadingModel
{
  MSM_Unlit = 0x0,
  MSM_DefaultLit = 0x1,
  MSM_Subsurface = 0x2,
  MSM_PreintegratedSkin = 0x3,
  MSM_ClearCoat = 0x4,
  MSM_SubsurfaceProfile = 0x5,
  MSM_TwoSidedFoliage = 0x6,
  MSM_Hair = 0x7,
  MSM_Cloth = 0x8,
  MSM_Eye = 0x9,
  MSM_MAX = 0xA,
};

/* 147 */
enum ETranslucencyLightingMode
{
  TLM_VolumetricNonDirectional = 0x0,
  TLM_VolumetricDirectional = 0x1,
  TLM_VolumetricPerVertexNonDirectional = 0x2,
  TLM_VolumetricPerVertexDirectional = 0x3,
  TLM_Surface = 0x4,
  TLM_SurfacePerPixelLighting = 0x5,
  TLM_MAX = 0x6,
};

/* 136 */
enum EMaterialProperty
{
  MP_EmissiveColor = 0x0,
  MP_Opacity = 0x1,
  MP_OpacityMask = 0x2,
  MP_DiffuseColor = 0x3,
  MP_SpecularColor = 0x4,
  MP_BaseColor = 0x5,
  MP_Metallic = 0x6,
  MP_Specular = 0x7,
  MP_Roughness = 0x8,
  MP_Normal = 0x9,
  MP_WorldPositionOffset = 0xA,
  MP_WorldDisplacement = 0xB,
  MP_TessellationMultiplier = 0xC,
  MP_SubsurfaceColor = 0xD,
  MP_CustomData0 = 0xE,
  MP_CustomData1 = 0xF,
  MP_AmbientOcclusion = 0x10,
  MP_Refraction = 0x11,
  MP_CustomizedUVs0 = 0x12,
  MP_CustomizedUVs1 = 0x13,
  MP_CustomizedUVs2 = 0x14,
  MP_CustomizedUVs3 = 0x15,
  MP_CustomizedUVs4 = 0x16,
  MP_CustomizedUVs5 = 0x17,
  MP_CustomizedUVs6 = 0x18,
  MP_CustomizedUVs7 = 0x19,
  MP_PixelDepthOffset = 0x1A,
  MP_MaterialAttributes = 0x1B,
  MP_CustomOutput = 0x1C,
  MP_MAX = 0x1D,
};

/* 325 */
enum EShaderFrequency
{
  SF_Vertex = 0x0,
  SF_Hull = 0x1,
  SF_Domain = 0x2,
  SF_Pixel = 0x3,
  SF_Geometry = 0x4,
  SF_Compute = 0x5,
  SF_NumFrequencies = 0x6,
  SF_NumBits = 0x3,
};

/* 6566 */
struct FMaterialVtbl
{
  void *(__cdecl *__vecDelDtor)(FMaterial *this, unsigned int);
  _BYTE gap8[96];
  bool (__cdecl *ShouldWriteOnlyAlpha)(FMaterial *this);
  bool (__cdecl *ShouldEnableResponsiveAA)(FMaterial *this);
  bool (__cdecl *ShouldDoSSR)(FMaterial *this);
  bool (__cdecl *ShouldDoContactShadows)(FMaterial *this);
  bool (__cdecl *IsLightFunction)(FMaterial *this);
  bool (__cdecl *IsUsedWithEditorCompositing)(FMaterial *this);
  bool (__cdecl *IsDeferredDecal)(FMaterial *this);
  bool (__cdecl *IsVolumetricPrimitive)(FMaterial *this);
  bool (__cdecl *IsWireframe)(FMaterial *this);
  bool (__cdecl *IsUIMaterial)(FMaterial *this);
  bool (__cdecl *IsSpecialEngineMaterial)(FMaterial *this);
  bool (__cdecl *IsUsedWithSkeletalMesh)(FMaterial *this);
  bool (__cdecl *IsUsedWithLandscape)(FMaterial *this);
  bool (__cdecl *IsUsedWithParticleSystem)(FMaterial *this);
  bool (__cdecl *IsUsedWithParticleSprites)(FMaterial *this);
  bool (__cdecl *IsUsedWithBeamTrails)(FMaterial *this);
  bool (__cdecl *IsUsedWithMeshParticles)(FMaterial *this);
  bool (__cdecl *IsUsedWithNiagaraSprites)(FMaterial *this);
  bool (__cdecl *IsUsedWithNiagaraRibbons)(FMaterial *this);
  bool (__cdecl *IsUsedWithNiagaraMeshParticles)(FMaterial *this);
  bool (__cdecl *IsUsedWithStaticLighting)(FMaterial *this);
  bool (__cdecl *IsUsedWithMorphTargets)(FMaterial *this);
  bool (__cdecl *IsUsedWithSplineMeshes)(FMaterial *this);
  bool (__cdecl *IsUsedWithInstancedStaticMeshes)(FMaterial *this);
  bool (__cdecl *IsUsedWithAPEXCloth)(FMaterial *this);
  bool (__cdecl *IsUsedWithUI)(FMaterial *this);
  bool (__cdecl *IsUsedWithGeometryCache)(FMaterial *this);
  EMaterialTessellationMode (__cdecl *GetTessellationMode)(FMaterial *this);
  bool (__cdecl *IsCrackFreeDisplacementEnabled)(FMaterial *this);
  bool (__cdecl *IsAdaptiveTessellationEnabled)(FMaterial *this);
  bool (__cdecl *IsFullyRough)(FMaterial *this);
  bool (__cdecl *UseNormalCurvatureToRoughness)(FMaterial *this);
  bool (__cdecl *IsUsingFullPrecision)(FMaterial *this);
  bool (__cdecl *IsUsingHQForwardReflections)(FMaterial *this);
  bool (__cdecl *IsUsingPlanarForwardReflections)(FMaterial *this);
  bool (__cdecl *OutputsVelocityOnBasePass)(FMaterial *this);
  bool (__cdecl *IsNonmetal)(FMaterial *this);
  bool (__cdecl *UseLmDirectionality)(FMaterial *this);
  bool (__cdecl *IsMasked)(FMaterial *this);
  bool (__cdecl *IsDitherMasked)(FMaterial *this);
  bool (__cdecl *AllowNegativeEmissiveColor)(FMaterial *this);
  EBlendMode (__cdecl *GetBlendMode)(FMaterial *this);
  ERefractionMode (__cdecl *GetRefractionMode)(FMaterial *this);
  EMaterialShadingModel (__cdecl *GetShadingModel)(FMaterial *this);
  ETranslucencyLightingMode (__cdecl *GetTranslucencyLightingMode)(FMaterial *this);
  float (__cdecl *GetOpacityMaskClipValue)(FMaterial *this);
  bool (__cdecl *GetCastDynamicShadowAsMasked)(FMaterial *this);
  bool (__cdecl *IsDistorted)(FMaterial *this);
  float (__cdecl *GetTranslucencyDirectionalLightingIntensity)(FMaterial *this);
  float (__cdecl *GetTranslucentShadowDensityScale)(FMaterial *this);
  float (__cdecl *GetTranslucentSelfShadowDensityScale)(FMaterial *this);
  float (__cdecl *GetTranslucentSelfShadowSecondDensityScale)(FMaterial *this);
  float (__cdecl *GetTranslucentSelfShadowSecondOpacity)(FMaterial *this);
  float (__cdecl *GetTranslucentBackscatteringExponent)(FMaterial *this);
  bool (__cdecl *IsTranslucencyAfterDOFEnabled)(FMaterial *this);
  bool (__cdecl *IsMobileSeparateTranslucencyEnabled)(FMaterial *this);
  FLinearColor *(__cdecl *GetTranslucentMultipleScatteringExtinction)(FMaterial *this, FLinearColor *result);
  float (__cdecl *GetTranslucentShadowStartOffset)(FMaterial *this);
  float (__cdecl *GetRefractionDepthBiasValue)(FMaterial *this);
  float (__cdecl *GetMaxDisplacement)(FMaterial *this);
  bool (__cdecl *ShouldApplyFogging)(FMaterial *this);
  bool (__cdecl *ComputeFogPerPixel)(FMaterial *this);
  FString *(__cdecl *GetFriendlyName)(FMaterial *this, FString *result);
  bool (__cdecl *HasVertexPositionOffsetConnected)(FMaterial *this);
  bool (__cdecl *HasPixelDepthOffsetConnected)(FMaterial *this);
  bool (__cdecl *HasMaterialAttributesConnected)(FMaterial *this);
  unsigned int (__cdecl *GetDecalBlendMode)(FMaterial *this);
  unsigned int (__cdecl *GetMaterialDecalResponse)(FMaterial *this);
  bool (__cdecl *HasNormalConnected)(FMaterial *this);
  bool (__cdecl *RequiresSynchronousCompilation)(FMaterial *this);
  bool (__cdecl *IsDefaultMaterial)(FMaterial *this);
  int (__cdecl *GetNumCustomizedUVs)(FMaterial *this);
  int (__cdecl *GetBlendableLocation)(FMaterial *this);
  bool (__cdecl *GetBlendableOutputAlpha)(FMaterial *this);
  bool (__cdecl *IsPersistent)(FMaterial *this);
  UMaterialInterface *(__cdecl *GetMaterialInterface)(FMaterial *this);
  void (__cdecl *NotifyCompilationFinished)(FMaterial *this);
  void (__cdecl *AddReferencedObjects)(FMaterial *this, FReferenceCollector *);
  TArray<UTexture *,FDefaultAllocator> *(__cdecl *GetReferencedTextures)(FMaterial *this);
  FString *(__cdecl *GetMaterialUsageDescription)(FMaterial *this, FString *result);
  bool (__cdecl *GetAllowDevelopmentShaderCompile)(FMaterial *this);
  EMaterialShaderMapUsage::Type (__cdecl *GetMaterialShaderMapUsage)(FMaterial *this);
  void (__cdecl *SetupExtaCompilationSettings)(FMaterial *this, EShaderPlatform, FExtraShaderCompilerSettings *);
  int (__cdecl *CompilePropertyAndSetMaterialProperty)(FMaterial *this, EMaterialProperty, FMaterialCompiler *, EShaderFrequency, bool);
  void (__cdecl *GatherCustomOutputExpressions)(FMaterial *this, TArray<UMaterialExpressionCustomOutput *,FDefaultAllocator> *);
  void (__cdecl *GatherExpressionsForCustomInterpolators)(FMaterial *this, TArray<UMaterialExpression *,FDefaultAllocator> *);
  FString *(__cdecl *GetBaseMaterialPathName)(FMaterial *this, FString *result);
  FString *(__cdecl *GetDebugName)(FMaterial *this, FString *result);
  EMaterialShaderMapUsage::Type (__cdecl *GetShaderMapUsage)(FMaterial *this);
  FGuid *(__cdecl *GetMaterialId)(FMaterial *this, FGuid *result);
};

/* 6120 */
struct FLightSceneProxyVtbl
{
  void *(__cdecl *__vecDelDtor)(FLightSceneProxy *this, unsigned int);
  _BYTE gap8[24];
  float (__cdecl *GetOuterConeAngle)(FLightSceneProxy *this);
  float (__cdecl *GetSourceRadius)(FLightSceneProxy *this);
  bool (__cdecl *IsInverseSquared)(FLightSceneProxy *this);
  bool (__cdecl *IsRectLight)(FLightSceneProxy *this);
  float (__cdecl *GetLightSourceAngle)(FLightSceneProxy *this);
  float (__cdecl *GetTraceDistance)(FLightSceneProxy *this);
  float (__cdecl *GetEffectiveScreenRadius)(FLightSceneProxy *this, FViewMatrices *);
  FVector2D *(__cdecl *GetLightShaftConeParams)(FLightSceneProxy *this, FVector2D *result);
  void (__cdecl *GetParameters)(FLightSceneProxy *this, FLightParameters *);
  FVector2D *(__cdecl *GetDirectionalLightDistanceFadeParameters)(FLightSceneProxy *this, FVector2D *result, ERHIFeatureLevel::Type, bool, int);
  bool (__cdecl *GetLightShaftOcclusionParameters)(FLightSceneProxy *this, float *, float *);
  FVector *(__cdecl *GetLightPositionForLightShafts)(FLightSceneProxy *this, FVector *result, FVector);
  bool (__cdecl *GetWholeSceneProjectedShadowInitializer)(FLightSceneProxy *this, FSceneViewFamily *, TArray<FWholeSceneProjectedShadowInitializer,TInlineAllocator<6,FDefaultAllocator> > *);
  bool (__cdecl *ShouldCreatePerObjectShadowsForDynamicObjects)(FLightSceneProxy *this);
  bool (__cdecl *UseCSMForDynamicObjects)(FLightSceneProxy *this);
  unsigned int (__cdecl *GetNumViewDependentWholeSceneShadows)(FLightSceneProxy *this, FSceneView *, bool);
  bool (__cdecl *GetViewDependentWholeSceneProjectedShadowInitializer)(FLightSceneProxy *this, FSceneView *, int, bool, FWholeSceneProjectedShadowInitializer *);
  bool (__cdecl *GetViewDependentRsmWholeSceneProjectedShadowInitializer)(FLightSceneProxy *this, FSceneView *, FBox *, FWholeSceneProjectedShadowInitializer *);
  bool (__cdecl *GetPerObjectProjectedShadowInitializer)(FLightSceneProxy *this, FBoxSphereBounds *, FPerObjectProjectedShadowInitializer *);
  FSphere *(__cdecl *GetShadowSplitBounds)(FLightSceneProxy *this, FSphere *result, FSceneView *, int, bool, FShadowCascadeSettings *);
  FSphere *(__cdecl *GetShadowSplitBoundsDepthRange)(FLightSceneProxy *this, FSphere *result, FSceneView *, FVector, float, float, FShadowCascadeSettings *);
  bool (__cdecl *GetScissorRect)(FLightSceneProxy *this, FIntRect *, FSceneView *, FIntRect *);
  void (__cdecl *SetScissorRect)(FLightSceneProxy *this, FRHICommandList *, FSceneView *, FIntRect *);
  bool (__cdecl *ShouldCreateRayTracedCascade)(FLightSceneProxy *this, ERHIFeatureLevel::Type, bool, int);
  void (__cdecl *ApplyWorldOffset)(FLightSceneProxy *this, FVector);
  float (__cdecl *GetMaxDrawDistance)(FLightSceneProxy *this);
  float (__cdecl *GetFadeRange)(FLightSceneProxy *this);
};

/* 6491 */
struct __cppobj TDefaultDelete<FLightTileIntersectionResources>
{
};

/* 6493 */
struct __cppobj TUniquePtr<FLightTileIntersectionResources,TDefaultDelete<FLightTileIntersectionResources> > : TDefaultDelete<FLightTileIntersectionResources>
{
  FLightTileIntersectionResources *Ptr;
};

/* 6128 */
struct __cppobj FLightSceneInfo : FRenderResource
{
  FLightSceneProxy *Proxy;
  FLightPrimitiveInteraction *DynamicInteractionOftenMovingPrimitiveList;
  FLightPrimitiveInteraction *DynamicInteractionStaticPrimitiveList;
  int Id;
  FOctreeElementId OctreeId;
  TUniquePtr<FLightTileIntersectionResources,TDefaultDelete<FLightTileIntersectionResources> > TileIntersectionResources;
  TRefCountPtr<FRHIVertexBuffer> ShadowCapsuleShapesVertexBuffer;
  TRefCountPtr<FRHIShaderResourceView> ShadowCapsuleShapesSRV;
  int DynamicShadowMapChannel;
  unsigned __int32 bPrecomputedLightingIsValid : 1;
  unsigned __int32 bVisible : 1;
  unsigned __int32 bEnableLightShaftBloom : 1;
  float BloomScale;
  float BloomThreshold;
  FColor BloomTint;
  int NumUnbuiltInteractions;
  bool bCreatePerObjectShadowsForDynamicObjects;
  FScene *Scene;
};

/* 4124 */
struct FKConvexGeomRenderInfo
{
  FStaticMeshVertexBuffers *VertexBuffers;
  FDynamicMeshIndexBuffer32 *IndexBuffer;
  FLocalVertexFactory *CollisionVertexFactory;
};

/* 5464 */
struct TIndirectArray<FStaticMeshLODResources,FDefaultAllocator>
{
  TArray<void *,FDefaultAllocator> Array;
};

/* 5465 */
struct TIndirectArray<FStaticMeshVertexFactories,FDefaultAllocator>
{
  TArray<void *,FDefaultAllocator> Array;
};

/* 5466 */
struct __cppobj TPerPlatformProperty<FPerPlatformFloat,float,4>
{
};

/* 5467 */
struct __cppobj FPerPlatformFloat : TPerPlatformProperty<FPerPlatformFloat,float,4>
{
  float Default;
};

/* 5468 */
struct __declspec(align(4)) FStaticMeshRenderData
{
  TIndirectArray<FStaticMeshLODResources,FDefaultAllocator> LODResources;
  TIndirectArray<FStaticMeshVertexFactories,FDefaultAllocator> LODVertexFactories;
  FPerPlatformFloat ScreenSize[8];
  FBoxSphereBounds Bounds;
  bool bLODsShareStaticLighting;
};

/* 5471 */
struct TSharedPtr<TArray<FVector,FDefaultAllocator>,1>
{
  TArray<FVector,FDefaultAllocator> *Object;
  SharedPointerInternals::FSharedReferencer<1> SharedReferenceCount;
};

/* 5472 */
struct TSharedPtr<TArray<unsigned short,FDefaultAllocator>,1>
{
  TArray<unsigned short,FDefaultAllocator> *Object;
  SharedPointerInternals::FSharedReferencer<1> SharedReferenceCount;
};

/* 5473 */
struct FStaticMeshOccluderData
{
  TSharedPtr<TArray<FVector,FDefaultAllocator>,1> VerticesSP;
  TSharedPtr<TArray<unsigned short,FDefaultAllocator>,1> IndicesSP;
};

/* 5477 */
struct FSpeedTreeWind::SBranchWindLevel
{
  float m_afDistance[10];
  float m_afDirectionAdherence[10];
  float m_afWhip[10];
  float m_fTurbulence;
  float m_fTwitch;
  float m_fTwitchFreqScale;
};

/* 5478 */
struct FSpeedTreeWind::SWindGroup
{
  float m_afRippleDistance[10];
  float m_afTumbleFlip[10];
  float m_afTumbleTwist[10];
  float m_afTumbleDirectionAdherence[10];
  float m_afTwitchThrow[10];
  float m_fTwitchSharpness;
  float m_fRollMaxScale;
  float m_fRollMinScale;
  float m_fRollSpeed;
  float m_fRollSeparation;
  float m_fLeewardScalar;
};

/* 5479 */
struct FSpeedTreeWind::SParams
{
  float m_fStrengthResponse;
  float m_fDirectionResponse;
  float m_fAnchorOffset;
  float m_fAnchorDistanceScale;
  float m_afFrequencies[10][10];
  float m_fGlobalHeight;
  float m_fGlobalHeightExponent;
  float m_afGlobalDistance[10];
  float m_afGlobalDirectionAdherence[10];
  FSpeedTreeWind::SBranchWindLevel m_asBranch[2];
  FSpeedTreeWind::SWindGroup m_asLeaf[2];
  float m_afFrondRippleDistance[10];
  float m_fFrondRippleTile;
  float m_fFrondRippleLightingScalar;
  float m_fRollingNoiseSize;
  float m_fRollingNoiseTwist;
  float m_fRollingNoiseTurbulence;
  float m_fRollingNoisePeriod;
  float m_fRollingNoiseSpeed;
  float m_fRollingBranchFieldMin;
  float m_fRollingBranchLightingAdjust;
  float m_fRollingBranchVerticalOffset;
  float m_fRollingLeafRippleMin;
  float m_fRollingLeafTumbleMin;
  float m_fGustFrequency;
  float m_fGustStrengthMin;
  float m_fGustStrengthMax;
  float m_fGustDurationMin;
  float m_fGustDurationMax;
  float m_fGustRiseScalar;
  float m_fGustFallScalar;
};

/* 5480 */
struct FSpeedTreeWind
{
  FSpeedTreeWind::SParams m_sParams;
  float m_fStrength;
  float m_afDirection[3];
  long double m_fLastTime;
  long double m_fElapsedTime;
  bool m_bGustingEnabled;
  float m_fGust;
  long double m_fGustTarget;
  long double m_fGustRiseTarget;
  long double m_fGustFallTarget;
  long double m_fGustStart;
  long double m_fGustAtStart;
  long double m_fGustFallStart;
  float m_fStrengthTarget;
  long double m_fStrengthChangeStartTime;
  long double m_fStrengthChangeEndTime;
  float m_fStrengthAtStart;
  float m_afDirectionTarget[3];
  float m_afDirectionMidTarget[3];
  long double m_fDirectionChangeStartTime;
  long double m_fDirectionChangeEndTime;
  float m_afDirectionAtStart[3];
  float m_afRollingOffset[2];
  float m_fCombinedStrength;
  float m_afOscillationTimes[10];
  bool m_abOptions[28];
  float m_afBranchWindAnchor[3];
  float m_fMaxBranchLevel1Length;
  bool m_bNeedsReload;
  __declspec(align(16)) float m_afShaderTable[144];
};

/* 5482 */
struct __cppobj TNavStatArray<FVector> : TArray<FVector,FDefaultAllocator>
{
};

/* 5483 */
struct __cppobj TNavStatArray<int> : TArray<int,FDefaultAllocator>
{
};

/* 5484 */
struct FNavCollisionConvex
{
  TNavStatArray<FVector> VertexBuffer;
  TNavStatArray<int> IndexBuffer;
};

/* 5485 */
struct __cppobj UNavCollisionBase : UObject
{
  unsigned __int32 bIsDynamicObstacle : 1;
  unsigned __int32 bHasConvexGeometry : 1;
  FNavCollisionConvex TriMeshCollision;
  FNavCollisionConvex ConvexCollision;
};

/* 40544 */
struct TSparseArray<TSetElement<TTuple<FViewportClient *,EMovieSceneViewportParams> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<56,8> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 40545 */
struct __declspec(align(8)) TSet<TTuple<FViewportClient *,EMovieSceneViewportParams>,TDefaultMapHashableKeyFuncs<FViewportClient *,EMovieSceneViewportParams,0>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<TTuple<FViewportClient *,EMovieSceneViewportParams> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 40546 */
struct TMapBase<FViewportClient *,EMovieSceneViewportParams,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FViewportClient *,EMovieSceneViewportParams,0> >
{
  TSet<TTuple<FViewportClient *,EMovieSceneViewportParams>,TDefaultMapHashableKeyFuncs<FViewportClient *,EMovieSceneViewportParams,0>,FDefaultSetAllocator> Pairs;
};

/* 40547 */
struct __cppobj TSortableMapBase<FViewportClient *,EMovieSceneViewportParams,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FViewportClient *,EMovieSceneViewportParams,0> > : TMapBase<FViewportClient *,EMovieSceneViewportParams,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FViewportClient *,EMovieSceneViewportParams,0> >
{
};

/* 40548 */
const struct __cppobj TMap<FViewportClient *,EMovieSceneViewportParams,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FViewportClient *,EMovieSceneViewportParams,0> > : TSortableMapBase<FViewportClient *,EMovieSceneViewportParams,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FViewportClient *,EMovieSceneViewportParams,0> >
{
};

/* 40549 */
struct __cppobj TTypeCompatibleBytes<UObject *> : TAlignedBytes<8,8>
{
};

/* 22900 */
struct __cppobj FHeapAllocator::ForElementType<UObject *> : FHeapAllocator::ForAnyElementType
{
};

/* 40550 */
struct TInlineAllocator<1,FDefaultAllocator>::ForElementType<UObject *>
{
  TTypeCompatibleBytes<UObject *> InlineData[1];
  FHeapAllocator::ForElementType<UObject *> SecondaryData;
};

/* 40551 */
struct TArray<UObject *,TInlineAllocator<1,FDefaultAllocator> >
{
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<UObject *> AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 40557 */
struct __declspec(align(16)) FMovieSceneSpawnable
{
  FTransform SpawnTransform;
  TArray<FName,FDefaultAllocator> Tags;
  FGuid Guid;
  FString Name;
  UObject *ObjectTemplate;
  TArray<FGuid,FDefaultAllocator> ChildPossessables;
  _BYTE Ownership[1];
  FName LevelName;
};

/* 40509 */
struct IMovieSceneSequenceTemplateStoreVtbl
{
  void *(__cdecl *__vecDelDtor)(IMovieSceneSequenceTemplateStore *this, unsigned int);
  FMovieSceneEvaluationTemplate *(__cdecl *AccessTemplate)(IMovieSceneSequenceTemplateStore *this, UMovieSceneSequence *);
};

/* 12637 */
struct TArray<TSharedRef<FSlateWindowElementList,0>,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 12638 */
struct FSlateDrawBuffer
{
  TArray<TSharedRef<FSlateWindowElementList,0>,FDefaultAllocator> WindowElementLists;
  TArray<TSharedRef<FSlateWindowElementList,0>,FDefaultAllocator> WindowElementListsPool;
  volatile int Locked;
  unsigned int ResourceVersion;
  FVector2D ViewOffset;
};

/* 21158 */
struct TLinkedListBase<TLinkedList<FDeferredUpdateResource *>,FDeferredUpdateResource *,TLinkedListIterator>
{
  TLinkedList<FDeferredUpdateResource *> *NextLink;
  TLinkedList<FDeferredUpdateResource *> **PrevLink;
};

/* 21157 */
struct __cppobj TLinkedList<FDeferredUpdateResource *> : TLinkedListBase<TLinkedList<FDeferredUpdateResource *>,FDeferredUpdateResource *,TLinkedListIterator>
{
  FDeferredUpdateResource *Element;
};

/* 21155 */
struct __declspec(align(8)) FDeferredUpdateResource
{
  FDeferredUpdateResourceVtbl *vfptr;
  TLinkedList<FDeferredUpdateResource *> UpdateListLink;
  bool bOnlyUpdateOnce;
};

/* 21159 */
struct __cppobj FTextureRenderTargetResource : FTextureResource, FRenderTarget, FDeferredUpdateResource
{
};

/* 22645 */
struct __cppobj __declspec(align(8)) FTextureRenderTarget2DResource : FTextureRenderTargetResource
{
  UTextureRenderTarget2D *Owner;
  TRefCountPtr<FRHITexture2D> Texture2DRHI;
  FLinearColor ClearColor;
  EPixelFormat Format;
  int TargetSizeX;
  int TargetSizeY;
};

/* 5164 */
struct TSharedRef<SWidget const ,0>
{
  SWidget *Object;
  SharedPointerInternals::FSharedReferencer<0> SharedReferenceCount;
};

/* 8696 */
struct TSharedPtr<FSlateTextLayout,0>
{
  FSlateTextLayout *Object;
  SharedPointerInternals::FSharedReferencer<0> SharedReferenceCount;
};

/* 8699 */
struct TSharedPtr<ITextLayoutMarshaller,0>
{
  ITextLayoutMarshaller *Object;
  SharedPointerInternals::FSharedReferencer<0> SharedReferenceCount;
};

/* 8701 */
struct TSharedPtr<ISlateRunRenderer,0>
{
  ISlateRunRenderer *Object;
  SharedPointerInternals::FSharedReferencer<0> SharedReferenceCount;
};

/* 7479 */
struct TSharedPtr<ITextData,1>
{
  ITextData *Object;
  SharedPointerInternals::FSharedReferencer<1> SharedReferenceCount;
};

/* 7480 */
struct FTextSnapshot
{
  TSharedPtr<ITextData,1> TextDataPtr;
  unsigned __int16 GlobalHistoryRevision;
  unsigned __int16 LocalHistoryRevision;
  unsigned int Flags;
};

/* 8702 */
struct FSlateTextBlockLayout
{
  TSharedPtr<FSlateTextLayout,0> TextLayout;
  TSharedPtr<ITextLayoutMarshaller,0> Marshaller;
  TSharedPtr<ISlateRunRenderer,0> TextHighlighter;
  FVector2D CachedSize;
  FTextSnapshot TextLastUpdate;
  FTextSnapshot HighlightTextLastUpdate;
};

/* 5310 */
struct FSlateWidgetStyleVtbl
{
  void *(__cdecl *__vecDelDtor)(FSlateWidgetStyle *this, unsigned int);
  void (__cdecl *GetResources)(FSlateWidgetStyle *this, TArray<FSlateBrush const *,FDefaultAllocator> *);
  FName *(__cdecl *GetTypeName)(FSlateWidgetStyle *this, FName *result);
};

/* 5312 */
struct FSlateBrushVtbl
{
  void *(__cdecl *__vecDelDtor)(FSlateBrush *this, unsigned int);
};

/* 5320 */
struct FSlateSharedHandleData
{
  FSlateShaderResourceProxy *Proxy;
};

/* 12525 */
struct __cppobj USlateWidgetStyleAsset : UObject
{
  USlateWidgetStyleContainerBase *CustomStyle;
};

/* 69031 */
struct TSharedPtr<SScrollPanel,0>
{
  SScrollPanel *Object;
  SharedPointerInternals::FSharedReferencer<0> SharedReferenceCount;
};

/* 16233 */
struct TSharedPtr<SScrollBar,0>
{
  SScrollBar *Object;
  SharedPointerInternals::FSharedReferencer<0> SharedReferenceCount;
};

/* 15254 */
struct TArray<FInertialScrollManager::FScrollSample,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 30225 */
struct FInertialScrollManager
{
  TArray<FInertialScrollManager::FScrollSample,FDefaultAllocator> ScrollSamples;
  float ScrollVelocity;
  long double SampleTimeout;
};

/* 13122 */
struct FOverscroll
{
  float OverscrollAmount;
};

/* 9466 */
struct __cppobj TBaseDelegate<TTypeWrapper<void>,float> : FDelegateBase
{
};

/* 10664 */
struct __cppobj TBaseDelegate<void,float> : TBaseDelegate<TTypeWrapper<void>,float>
{
};

/* 72 */
enum EOrientation
{
  Orient_Horizontal = 0x0,
  Orient_Vertical = 0x1,
};

/* 69032 */
struct UE4Function_Private::TFunctionRefBase<TFunction<void __cdecl(FGeometry)>,void __cdecl(FGeometry)>
{
  void (__cdecl *Callable)(void *, FGeometry *);
};

/* 69033 */
struct __cppobj TFunction<void __cdecl(FGeometry)> : UE4Function_Private::TFunctionRefBase<TFunction<void __cdecl(FGeometry)>,void __cdecl(FGeometry)>
{
  UE4Function_Private::FFunctionStorage Storage;
};

/* 25517 */
struct TSharedPtr<FActiveTimerHandle,0>
{
  FActiveTimerHandle *Object;
  SharedPointerInternals::FSharedReferencer<0> SharedReferenceCount;
};

/* 69034 */
struct __cppobj __declspec(align(8)) SScrollBox : SCompoundWidget
{
  float DesiredScrollOffset;
  TSharedPtr<SScrollPanel,0> ScrollPanel;
  TSharedPtr<SScrollBar,0> ScrollBar;
  float TickScrollDelta;
  TOptional<int> bFingerOwningTouchInteraction;
  float AmountScrolledWhileRightMouseDown;
  float PendingScrollTriggerAmount;
  FInertialScrollManager InertialScrollManager;
  FOverscroll Overscroll;
  _BYTE AllowOverscroll[1];
  float NavigationScrollPadding;
  _BYTE NavigationDestination[1];
  FVector2D SoftwareCursorPosition;
  TBaseDelegate<void,float> OnUserScrolled;
  EOrientation Orientation;
  FScrollBoxStyle *Style;
  FScrollBarStyle *ScrollBarStyle;
  _BYTE ConsumeMouseWheel[1];
  FGeometry CachedGeometry;
  TFunction<void __cdecl(FGeometry)> ScrollIntoViewRequest;
  TSharedPtr<FActiveTimerHandle,0> UpdateInertialScrollHandle;
  long double LastScrollTime;
  __int8 bShowSoftwareCursor : 1;
  __int8 bScrollBarIsExternal : 1;
  __int8 bIsScrolling : 1;
  __int8 bAnimateScroll : 1;
  __int8 bScrollToEnd : 1;
  __int8 bIsScrollingActiveTimerRegistered : 1;
  __int8 bAllowsRightClickDragScrolling : 1;
  __int8 bTouchPanningCapture : 1;
};

/* 11657 */
struct TIndirectArray<SBoxPanel::FSlot,FDefaultAllocator>
{
  TArray<void *,FDefaultAllocator> Array;
};

/* 11658 */
struct __cppobj __declspec(align(8)) TPanelChildren<SBoxPanel::FSlot> : FChildren, TIndirectArray<SBoxPanel::FSlot,FDefaultAllocator>
{
  bool bEmptying;
};

/* 11659 */
struct __cppobj __declspec(align(8)) SBoxPanel : SPanel
{
  TPanelChildren<SBoxPanel::FSlot> Children;
  EOrientation Orientation;
};

/* 29192 */
struct __cppobj SVerticalBox : SBoxPanel
{
};

/* 5144 */
struct __cppobj TTypeCompatibleBytes<FCachedWidgetNode *> : TAlignedBytes<8,8>
{
};

/* 5145 */
struct __cppobj FHeapAllocator::ForElementType<FCachedWidgetNode *> : FHeapAllocator::ForAnyElementType
{
};

/* 5146 */
struct TInlineAllocator<4,FDefaultAllocator>::ForElementType<FCachedWidgetNode *>
{
  TTypeCompatibleBytes<FCachedWidgetNode *> InlineData[4];
  FHeapAllocator::ForElementType<FCachedWidgetNode *> SecondaryData;
};

/* 5147 */
struct TArray<FCachedWidgetNode *,TInlineAllocator<4,FDefaultAllocator> >
{
  TInlineAllocator<4,FDefaultAllocator>::ForElementType<FCachedWidgetNode *> AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 5148 */
struct FCachedWidgetNode
{
  TArray<FCachedWidgetNode *,TInlineAllocator<4,FDefaultAllocator> > Children;
  TWeakPtr<SWidget,0> Widget;
  FGeometry Geometry;
  FVector2D WindowOffset;
  EVisibility RecordedVisibility;
  int LastRecordedHittestIndex;
};

/* 39781 */
struct __cppobj FMOD::Sound
{
};

/* 39780 */
struct __cppobj FMOD::DSP
{
};

/* 9256 */
struct IModuleInterface
{
  IModuleInterfaceVtbl *vfptr;
};

/* 39724 */
struct __cppobj IFMODStudioModule : IModuleInterface
{
};

/* 69674 */
struct __cppobj __declspec(align(16)) UArrowComponent : UPrimitiveComponent
{
  FColor ArrowColor;
  float ArrowSize;
  bool bIsScreenSizeScaled;
  float ScreenSize;
  unsigned __int32 bTreatAsASprite : 1;
};

/* 6879 */
struct __cppobj __declspec(align(8)) UBoxComponent : UShapeComponent
{
  FVector BoxExtent;
};

/* 812 */
typedef ETextCommit::Type FResourceBulkDataInterface::EBulkDataType;

/* 4933 */
struct FResourceBulkDataInterfaceVtbl
{
  void *(__cdecl *__vecDelDtor)(FResourceBulkDataInterface *this, unsigned int);
  const void *(__cdecl *GetResourceBulkData)(FResourceBulkDataInterface *this);
  unsigned int (__cdecl *GetResourceBulkDataSize)(FResourceBulkDataInterface *this);
  void (__cdecl *Discard)(FResourceBulkDataInterface *this);
  FResourceBulkDataInterface::EBulkDataType (__cdecl *GetResourceType)(FResourceBulkDataInterface *this);
};

/* 4936 */
struct FTexture2DUpdateVtbl
{
  void *(__cdecl *__vecDelDtor)(FTexture2DUpdate *this, unsigned int);
  void (__cdecl *Abort)(FTexture2DUpdate *this);
};

/* 4432 */
struct __cppobj FRHITexture2D : FRHITexture
{
  unsigned int SizeX;
  unsigned int SizeY;
};

/* 4296 */
struct IQueuedWork
{
  IQueuedWorkVtbl *vfptr;
};

/* 4299 */
struct __cppobj FNonAbandonableTask
{
};

/* 4939 */
struct __cppobj FTexture2DUpdate::FMipUpdateTask : FNonAbandonableTask
{
  UTexture2D *Texture;
  FTexture2DUpdate *CachedPendingUpdate;
};

/* 4940 */
struct __cppobj FAsyncTask<FTexture2DUpdate::FMipUpdateTask> : IQueuedWork
{
  FTexture2DUpdate::FMipUpdateTask Task;
  FThreadSafeCounter WorkNotFinishedCounter;
  FEvent *DoneEvent;
  FQueuedThreadPool *QueuedPool;
};

/* 4943 */
const struct __declspec(align(8)) FTexture2DUpdate::FContext
{
  UTexture2D *Texture;
  FTexture2DResource *Resource;
  FTexture2DUpdate::EThreadType CurrentThread;
};

/* 4612 */
struct __cppobj UThumbnailInfo : UObject
{
};

/* 4550 */
struct TIndirectArray<FSkeletalMeshLODRenderData,FDefaultAllocator>
{
  TArray<void *,FDefaultAllocator> Array;
};

/* 4551 */
struct __declspec(align(8)) FSkeletalMeshRenderData
{
  TIndirectArray<FSkeletalMeshLODRenderData,FDefaultAllocator> LODRenderData;
  bool bInitialized;
};

/* 4644 */
struct TArray<FGPUSkinBatchElementUserData,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 4645 */
struct TArray<FGPUSkinCacheEntry::FSectionDispatchData,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 4658 */
struct __declspec(align(8)) FGPUSkinCacheEntry
{
  FGPUSkinCache::FRWBuffersAllocation *PositionAllocation;
  FGPUSkinCache *SkinCache;
  TArray<FGPUSkinBatchElementUserData,FDefaultAllocator> BatchElementsUserData;
  TArray<FGPUSkinCacheEntry::FSectionDispatchData,FDefaultAllocator> DispatchData;
  FSkeletalMeshObjectGPUSkin *GPUSkin;
  unsigned int InputWeightStride;
  TRefCountPtr<FRHIShaderResourceView> InputWeightStreamSRV;
  FRHIShaderResourceView *MorphBuffer;
  TRefCountPtr<FRHIShaderResourceView> ClothBuffer;
  TRefCountPtr<FRHIShaderResourceView> ClothPositionsAndNormalsBuffer;
  int LOD;
};

/* 4543 */
struct TArray<FTriIndices,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 4544 */
struct __declspec(align(8)) FTriMeshCollisionData
{
  TArray<FVector,FDefaultAllocator> Vertices;
  TArray<FTriIndices,FDefaultAllocator> Indices;
  TArray<unsigned short,FDefaultAllocator> MaterialIndices;
  TArray<TArray<FVector2D,FDefaultAllocator>,FDefaultAllocator> UVs;
  unsigned __int32 bFlipNormals : 1;
  unsigned __int32 bDeformableMesh : 1;
  unsigned __int32 bFastCook : 1;
};

/* 4671 */
struct TArray<USCS_Node *,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 4679 */
struct TSparseArray<TSetElement<TTuple<FName,USCS_Node *> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<24,8> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 4680 */
struct __declspec(align(8)) TSet<TTuple<FName,USCS_Node *>,TDefaultMapHashableKeyFuncs<FName,USCS_Node *,0>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<TTuple<FName,USCS_Node *> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 4681 */
struct TMapBase<FName,USCS_Node *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,USCS_Node *,0> >
{
  TSet<TTuple<FName,USCS_Node *>,TDefaultMapHashableKeyFuncs<FName,USCS_Node *,0>,FDefaultSetAllocator> Pairs;
};

/* 4682 */
struct __cppobj TSortableMapBase<FName,USCS_Node *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,USCS_Node *,0> > : TMapBase<FName,USCS_Node *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,USCS_Node *,0> >
{
};

/* 4683 */
struct __cppobj TMap<FName,USCS_Node *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,USCS_Node *,0> > : TSortableMapBase<FName,USCS_Node *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,USCS_Node *,0> >
{
};

/* 4684 */
struct __cppobj USimpleConstructionScript : UObject
{
  TArray<USCS_Node *,FDefaultAllocator> RootNodes;
  TArray<USCS_Node *,FDefaultAllocator> AllNodes;
  USCS_Node *DefaultSceneRootNode;
  USCS_Node *RootNode_DEPRECATED;
  TArray<USCS_Node *,FDefaultAllocator> ActorComponentNodes_DEPRECATED;
  TMap<FName,USCS_Node *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,USCS_Node *,0> > NameToSCSNodeMap;
};

/* 4685 */
struct TArray<FComponentOverrideRecord,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 4686 */
struct __cppobj UInheritableComponentHandler : UObject
{
  TArray<FComponentOverrideRecord,FDefaultAllocator> Records;
  TArray<UActorComponent *,FDefaultAllocator> UnnecessaryComponents;
};

/* 4687 */
struct __cppobj UStructProperty : UProperty
{
  UScriptStruct *Struct;
};

/* 407 */
enum EFunctionFlags
{
  FUNC_None = 0x0,
  FUNC_Final = 0x1,
  FUNC_RequiredAPI = 0x2,
  FUNC_BlueprintAuthorityOnly = 0x4,
  FUNC_BlueprintCosmetic = 0x8,
  FUNC_Net = 0x40,
  FUNC_NetReliable = 0x80,
  FUNC_NetRequest = 0x100,
  FUNC_Exec = 0x200,
  FUNC_Native = 0x400,
  FUNC_Event = 0x800,
  FUNC_NetResponse = 0x1000,
  FUNC_Static = 0x2000,
  FUNC_NetMulticast = 0x4000,
  FUNC_MulticastDelegate = 0x10000,
  FUNC_Public = 0x20000,
  FUNC_Private = 0x40000,
  FUNC_Protected = 0x80000,
  FUNC_Delegate = 0x100000,
  FUNC_NetServer = 0x200000,
  FUNC_HasOutParms = 0x400000,
  FUNC_HasDefaults = 0x800000,
  FUNC_NetClient = 0x1000000,
  FUNC_DLLImport = 0x2000000,
  FUNC_BlueprintCallable = 0x4000000,
  FUNC_BlueprintEvent = 0x8000000,
  FUNC_BlueprintPure = 0x10000000,
  FUNC_EditorOnly = 0x20000000,
  FUNC_Const = 0x40000000,
  FUNC_NetValidate = 0x80000000,
  FUNC_AllFlags = 0xFFFFFFFF,
};

/* 4688 */
struct __cppobj UFunction : UStruct
{
  EFunctionFlags FunctionFlags;
  char NumParms;
  unsigned __int16 ParmsSize;
  unsigned __int16 ReturnValueOffset;
  unsigned __int16 RPCId;
  unsigned __int16 RPCResponseId;
  UProperty *FirstPropertyToInit;
  UFunction *EventGraphFunction;
  int EventGraphCallOffset;
  void (__cdecl *Func)(UObject *, FFrame *, void *const );
};

/* 4704 */
struct IAnimClassInterfaceVtbl
{
  void *(__cdecl *__vecDelDtor)(IAnimClassInterface *this, unsigned int);
  _BYTE gap8[8];
  TArray<FBakedAnimationStateMachine,FDefaultAllocator> *(__cdecl *GetBakedStateMachines)(IAnimClassInterface *this);
  TArray<FAnimNotifyEvent,FDefaultAllocator> *(__cdecl *GetAnimNotifies)(IAnimClassInterface *this);
  TArray<UStructProperty *,FDefaultAllocator> *(__cdecl *GetAnimNodeProperties)(IAnimClassInterface *this);
  TArray<FName,FDefaultAllocator> *(__cdecl *GetSyncGroupNames)(IAnimClassInterface *this);
  TArray<int,FDefaultAllocator> *(__cdecl *GetOrderedSavedPoseNodeIndices)(IAnimClassInterface *this);
  USkeleton *(__cdecl *GetTargetSkeleton)(IAnimClassInterface *this);
  int (__cdecl *GetRootAnimNodeIndex)(IAnimClassInterface *this);
  UStructProperty *(__cdecl *GetRootAnimNodeProperty)(IAnimClassInterface *this);
  int (__cdecl *GetSyncGroupIndex)(IAnimClassInterface *this, FName);
};

/* 4758 */
struct __cppobj TBaseDelegate<TTypeWrapper<void>,UAnimMontage *,bool> : FDelegateBase
{
};

/* 4759 */
struct __cppobj TBaseDelegate<void,UAnimMontage *,bool> : TBaseDelegate<TTypeWrapper<void>,UAnimMontage *,bool>
{
};

/* 4760 */
struct FMarkerPair
{
  int MarkerIndex;
  float TimeToMarker;
};

/* 4761 */
struct FMarkerTickRecord
{
  FMarkerPair PreviousMarker;
  FMarkerPair NextMarker;
};

/* 4762 */
struct TArray<FPassedMarker,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 4764 */
struct FTimeStretchCurveInstance
{
  bool bHasValidData;
  float T_Original;
  float T_Target;
  TArray<float,FDefaultAllocator> P_Marker_Original;
  TArray<float,FDefaultAllocator> P_Marker_Target;
};

/* 4765 */
struct FMontageSubStepper
{
  FAnimMontageInstance *MontageInstance;
  UAnimMontage *Montage;
  float TimeRemaining;
  float Cached_CombinedPlayRate;
  float PlayRate;
  float DeltaMove;
  bool bPlayingForward;
  int CurrentSectionIndex;
  float CurrentSectionStartTime;
  float CurrentSectionLength;
  bool bReachedEndOfSection;
  bool bHasValidTimeStretchCurveData;
  int TimeStretchMarkerIndex;
  TArray<float,FDefaultAllocator> SectionStartPositions_Target;
  TArray<float,FDefaultAllocator> SectionEndPositions_Target;
  float Cached_P_Target;
  float Cached_P_Original;
  FTimeStretchCurveInstance TimeStretchCurveInstance;
};

/* 4766 */
struct __cppobj TWeakObjectPtr<UAnimInstance,FWeakObjectPtr> : FWeakObjectPtr
{
};

/* 4763 */
struct __declspec(align(8)) FAnimMontageInstance
{
  UAnimMontage *Montage;
  TBaseDelegate<void,UAnimMontage *,bool> OnMontageEnded;
  TBaseDelegate<void,UAnimMontage *,bool> OnMontageBlendingOutStarted;
  bool bPlaying;
  float DefaultBlendTimeMultiplier;
  FMarkerTickRecord MarkerTickRecord;
  TArray<FPassedMarker,FDefaultAllocator> MarkersPassedThisTick;
  bool bDidUseMarkerSyncThisTick;
  bool bEnableAutoBlendOut;
  FMontageSubStepper MontageSubStepper;
  TArray<int,FDefaultAllocator> NextSections;
  TArray<int,FDefaultAllocator> PrevSections;
  TWeakObjectPtr<UAnimInstance,FWeakObjectPtr> AnimInstance;
  int InstanceID;
  TArray<FAnimNotifyEvent,FDefaultAllocator> ActiveStateBranchingPoints;
  float Position;
  float PlayRate;
  FAlphaBlend Blend;
  bool bInterrupted;
  float PreviousWeight;
  float NotifyWeight;
  float DeltaMoved;
  float PreviousPosition;
  int SyncGroupIndex;
  TOptional<float> ForcedNextPosition;
  int DisableRootMotionCount;
  TArray<FAnimMontageInstance *,FDefaultAllocator> MontageSyncFollowers;
  FAnimMontageInstance *MontageSyncLeader;
  unsigned int MontageSyncUpdateFrameCounter;
};

/* 4821 */
struct TArray<FAnimNode_SaveCachedPose *,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 4822 */
struct TArray<FAnimTickRecord,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 4823 */
struct TArray<FAnimGroupInstance,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 130 */
enum ERootMotionMode::Type
{
  NoRootMotionExtraction = 0x0,
  IgnoreRootMotion = 0x1,
  RootMotionFromEverything = 0x2,
  RootMotionFromMontagesOnly = 0x3,
};

/* 4824 */
struct TArray<FMontageActiveSlotTracker,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 4782 */
struct __cppobj TWeakObjectPtr<USkeletalMesh,FWeakObjectPtr> : FWeakObjectPtr
{
};

/* 4783 */
struct __cppobj TWeakObjectPtr<USkeleton,FWeakObjectPtr> : FWeakObjectPtr
{
};

/* 4784 */
struct TArray<FCompactPoseBoneIndex,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 4785 */
struct TArray<FVirtualBoneCompactPoseData,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 4787 */
struct TSparseArray<TSetElement<TTuple<FName,FRetargetSourceCachedData> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<48,8> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 4788 */
struct __declspec(align(8)) TSet<TTuple<FName,FRetargetSourceCachedData>,TDefaultMapHashableKeyFuncs<FName,FRetargetSourceCachedData,0>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<TTuple<FName,FRetargetSourceCachedData> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 4789 */
struct TMapBase<FName,FRetargetSourceCachedData,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,FRetargetSourceCachedData,0> >
{
  TSet<TTuple<FName,FRetargetSourceCachedData>,TDefaultMapHashableKeyFuncs<FName,FRetargetSourceCachedData,0>,FDefaultSetAllocator> Pairs;
};

/* 4790 */
struct __cppobj TSortableMapBase<FName,FRetargetSourceCachedData,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,FRetargetSourceCachedData,0> > : TMapBase<FName,FRetargetSourceCachedData,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,FRetargetSourceCachedData,0> >
{
};

/* 4791 */
struct __cppobj TMap<FName,FRetargetSourceCachedData,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,FRetargetSourceCachedData,0> > : TSortableMapBase<FName,FRetargetSourceCachedData,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,FRetargetSourceCachedData,0> >
{
};

/* 4792 */
const struct FBoneContainer
{
  TArray<unsigned short,FDefaultAllocator> BoneIndicesArray;
  TBitArray<FDefaultBitArrayAllocator> BoneSwitchArray;
  TWeakObjectPtr<UObject,FWeakObjectPtr> Asset;
  TWeakObjectPtr<USkeletalMesh,FWeakObjectPtr> AssetSkeletalMesh;
  TWeakObjectPtr<USkeleton,FWeakObjectPtr> AssetSkeleton;
  FReferenceSkeleton *RefSkeleton;
  TArray<int,FDefaultAllocator> SkeletonToPoseBoneIndexArray;
  TArray<int,FDefaultAllocator> PoseToSkeletonBoneIndexArray;
  TArray<int,FDefaultAllocator> CompactPoseToSkeletonIndex;
  TArray<FCompactPoseBoneIndex,FDefaultAllocator> SkeletonToCompactPose;
  TArray<FCompactPoseBoneIndex,FDefaultAllocator> CompactPoseParentBones;
  TArray<FTransform,FDefaultAllocator> CompactPoseRefPoseBones;
  TArray<FVirtualBoneCompactPoseData,FDefaultAllocator> VirtualBoneCompactPoseData;
  TArray<unsigned short,FDefaultAllocator> UIDToArrayIndexLUT;
  bool bDisableRetargeting;
  bool bUseRAWData;
  bool bUseSourceData;
  TMap<FName,FRetargetSourceCachedData,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,FRetargetSourceCachedData,0> > RetargetSourceCachedDataLUT;
};

/* 4825 */
struct TArray<FMontageEvaluationState,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 4811 */
struct TArray<FAnimNode_Base *,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 4826 */
struct TArray<FNativeTransitionBinding,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 4827 */
struct TArray<FNativeStateBinding,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 4828 */
struct TArray<FPoseSnapshot,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 4829 */
struct TSparseArray<TSetElement<TTuple<FName,TArray<TTuple<enum EMessageSeverity::Type,FText>,FDefaultAllocator> > >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<32,8> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 4830 */
struct __declspec(align(8)) TSet<TTuple<FName,TArray<TTuple<enum EMessageSeverity::Type,FText>,FDefaultAllocator> >,TDefaultMapHashableKeyFuncs<FName,TArray<TTuple<enum EMessageSeverity::Type,FText>,FDefaultAllocator>,0>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<TTuple<FName,TArray<TTuple<enum EMessageSeverity::Type,FText>,FDefaultAllocator> > >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 4831 */
struct TMapBase<FName,TArray<TTuple<enum EMessageSeverity::Type,FText>,FDefaultAllocator>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,TArray<TTuple<enum EMessageSeverity::Type,FText>,FDefaultAllocator>,0> >
{
  TSet<TTuple<FName,TArray<TTuple<enum EMessageSeverity::Type,FText>,FDefaultAllocator> >,TDefaultMapHashableKeyFuncs<FName,TArray<TTuple<enum EMessageSeverity::Type,FText>,FDefaultAllocator>,0>,FDefaultSetAllocator> Pairs;
};

/* 4832 */
struct __cppobj TSortableMapBase<FName,TArray<TTuple<enum EMessageSeverity::Type,FText>,FDefaultAllocator>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,TArray<TTuple<enum EMessageSeverity::Type,FText>,FDefaultAllocator>,0> > : TMapBase<FName,TArray<TTuple<enum EMessageSeverity::Type,FText>,FDefaultAllocator>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,TArray<TTuple<enum EMessageSeverity::Type,FText>,FDefaultAllocator>,0> >
{
};

/* 4833 */
struct __cppobj TMap<FName,TArray<TTuple<enum EMessageSeverity::Type,FText>,FDefaultAllocator>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,TArray<TTuple<enum EMessageSeverity::Type,FText>,FDefaultAllocator>,0> > : TSortableMapBase<FName,TArray<TTuple<enum EMessageSeverity::Type,FText>,FDefaultAllocator>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,TArray<TTuple<enum EMessageSeverity::Type,FText>,FDefaultAllocator>,0> >
{
};

/* 4771 */
struct __declspec(align(8)) FAnimInstanceProxy
{
  FAnimInstanceProxyVtbl *vfptr;
  FTransform ComponentTransform;
  FTransform ComponentRelativeTransform;
  FTransform ActorTransform;
  UObject *AnimInstanceObject;
  IAnimClassInterface *AnimClassInterface;
  USkeleton *Skeleton;
  USkeletalMeshComponent *SkeletalMeshComponent;
  float CurrentDeltaSeconds;
  float CurrentTimeDilation;
  FString ActorName;
  FString AnimInstanceName;
  FAnimNode_Base *RootNode;
  FAnimNode_SubInput *SubInstanceInputNode;
  TArray<FAnimNode_SaveCachedPose *,FDefaultAllocator> SavedPoseQueue;
  TArray<FAnimTickRecord,FDefaultAllocator> UngroupedActivePlayerArrays[2];
  TArray<FAnimGroupInstance,FDefaultAllocator> SyncGroupArrays[2];
  TArray<float,FDefaultAllocator> MachineWeightArrays[2];
  TArray<float,FDefaultAllocator> StateWeightArrays[2];
  TMap<int,int,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<int,int,0> > StateMachineClassIndexToWeightOffset;
  int SyncGroupWriteIndex;
  FAnimNotifyQueue NotifyQueue;
  ERootMotionMode::Type RootMotionMode;
  TMap<FName,int,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,int,0> > SlotNameToTrackerIndex;
  TArray<FMontageActiveSlotTracker,FDefaultAllocator> SlotWeightTracker[2];
  FGraphTraversalCounter InitializationCounter;
  FGraphTraversalCounter CachedBonesCounter;
  FGraphTraversalCounter UpdateCounter;
  FGraphTraversalCounter EvaluationCounter;
  FGraphTraversalCounter SlotNodeInitializationCounter;
  FRootMotionMovementParams ExtractedRootMotion;
  FBoneContainer RequiredBones;
  int LODLevel;
  FTransform SkelMeshCompLocalToWorld;
  FTransform SkelMeshCompOwnerTransform;
  __int16 NumUroSkippedFrames_Update;
  __int16 NumUroSkippedFrames_Eval;
  TArray<FMontageEvaluationState,FDefaultAllocator> MontageEvaluationData;
  TArray<FAnimNode_Base *,FDefaultAllocator> GameThreadPreUpdateNodes;
  TArray<FAnimNode_Base *,FDefaultAllocator> LODDisabledGameThreadPreUpdateNodes;
  TArray<FAnimNode_Base *,FDefaultAllocator> DynamicResetNodes;
  TArray<FNativeTransitionBinding,FDefaultAllocator> NativeTransitionBindings;
  TArray<FNativeStateBinding,FDefaultAllocator> NativeStateEntryBindings;
  TArray<FNativeStateBinding,FDefaultAllocator> NativeStateExitBindings;
  TArray<FPoseSnapshot,FDefaultAllocator> PoseSnapshots;
  TMap<FName,TArray<TTuple<enum EMessageSeverity::Type,FText>,FDefaultAllocator>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,TArray<TTuple<enum EMessageSeverity::Type,FText>,FDefaultAllocator>,0> > LoggedMessagesMap;
  TArray<FGuid,FDefaultAllocator> PreviouslyLoggedMessages;
  __int8 bBoneCachesInvalidated : 1;
  __int8 bShouldExtractRootMotion : 1;
};

/* 4858 */
struct IClothingSimulationVtbl
{
  void *(__cdecl *__vecDelDtor)(IClothingSimulation *this, unsigned int);
  __declspec(align(16)) IClothingSimulationContext *(__cdecl *CreateContext)(IClothingSimulation *this);
  void (__cdecl *FillContext)(IClothingSimulation *this, USkeletalMeshComponent *, float, IClothingSimulationContext *);
  void (__cdecl *Initialize)(IClothingSimulation *this);
  void (__cdecl *Shutdown)(IClothingSimulation *this);
  bool (__cdecl *ShouldSimulate)(IClothingSimulation *this);
  void (__cdecl *Simulate)(IClothingSimulation *this, IClothingSimulationContext *);
  void (__cdecl *DestroyActors)(IClothingSimulation *this);
  void (__cdecl *DestroyContext)(IClothingSimulation *this, IClothingSimulationContext *);
  void (__cdecl *GetSimulationData)(IClothingSimulation *this, TMap<int,FClothSimulData,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<int,FClothSimulData,0> > *, USkeletalMeshComponent *, USkinnedMeshComponent *);
  FBoxSphereBounds *(__cdecl *GetBounds)(IClothingSimulation *this, FBoxSphereBounds *result, USkeletalMeshComponent *);
  void (__cdecl *AddExternalCollisions)(IClothingSimulation *this, FClothCollisionData *);
  void (__cdecl *ClearExternalCollisions)(IClothingSimulation *this);
  void (__cdecl *GetCollisions)(IClothingSimulation *this, FClothCollisionData *, bool);
  void (__cdecl *GatherStats)(IClothingSimulation *this);
};

/* 4853 */
struct IClothingSimulationContextVtbl
{
  void *(__cdecl *__vecDelDtor)(IClothingSimulationContext *this, unsigned int);
};

/* 4548 */
struct INodeMappingProviderInterfaceVtbl
{
  void *(__cdecl *__vecDelDtor)(INodeMappingProviderInterface *this, unsigned int);
  UObject *(__cdecl *_getUObject)(INodeMappingProviderInterface *this);
  void (__cdecl *GetMappableNodeData)(INodeMappingProviderInterface *this, TArray<FName,FDefaultAllocator> *, TArray<FNodeItem,FDefaultAllocator> *);
};

/* 69444 */
struct std::_Func_base<void,FCornerSectionCarResult const &>Vtbl
{
  std::_Func_base<void,FCornerSectionCarResult const &> *(__cdecl *_Copy)(std::_Func_base<void,FCornerSectionCarResult const &> *this, void *);
  std::_Func_base<void,FCornerSectionCarResult const &> *(__cdecl *_Move)(std::_Func_base<void,FCornerSectionCarResult const &> *this, void *);
  void (__cdecl *_Do_call)(std::_Func_base<void,FCornerSectionCarResult const &> *this, FCornerSectionCarResult *);
  type_info *(__cdecl *_Target_type)(std::_Func_base<void,FCornerSectionCarResult const &> *this);
  void (__cdecl *_Delete_this)(std::_Func_base<void,FCornerSectionCarResult const &> *this, bool);
  const void *(__cdecl *_Get)(std::_Func_base<void,FCornerSectionCarResult const &> *this);
};

/* 69490 */
struct std::_Func_base<void,int const &>
{
  std::_Func_base<void,int const &>Vtbl *vfptr;
};

/* 4035 */
union SHA1_WORKSPACE_BLOCK
{
  char c[64];
  unsigned int l[16];
};

/* 4325 */
struct TSparseArray<TSetElement<TTuple<FName,FRichCurve *> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<24,8> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 4326 */
struct __declspec(align(8)) TSet<TTuple<FName,FRichCurve *>,TDefaultMapHashableKeyFuncs<FName,FRichCurve *,0>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<TTuple<FName,FRichCurve *> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 4327 */
struct TMapBase<FName,FRichCurve *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,FRichCurve *,0> >
{
  TSet<TTuple<FName,FRichCurve *>,TDefaultMapHashableKeyFuncs<FName,FRichCurve *,0>,FDefaultSetAllocator> Pairs;
};

/* 4328 */
struct __cppobj TSortableMapBase<FName,FRichCurve *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,FRichCurve *,0> > : TMapBase<FName,FRichCurve *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,FRichCurve *,0> >
{
};

/* 4329 */
struct __cppobj TMap<FName,FRichCurve *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,FRichCurve *,0> > : TSortableMapBase<FName,FRichCurve *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,FRichCurve *,0> >
{
};

/* 4330 */
struct __cppobj UCurveTable : UObject, FCurveOwnerInterface
{
  TMap<FName,FRichCurve *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,FRichCurve *,0> > RowMap;
};

/* 4334 */
struct __cppobj FAsyncAudioDecompressWorker : FNonAbandonableTask
{
  USoundWave *Wave;
  ICompressedAudioInfo *AudioInfo;
};

/* 4335 */
struct __cppobj FAsyncTask<FAsyncAudioDecompressWorker> : IQueuedWork
{
  FAsyncAudioDecompressWorker Task;
  FThreadSafeCounter WorkNotFinishedCounter;
  FEvent *DoneEvent;
  FQueuedThreadPool *QueuedPool;
};

/* 4338 */
struct TIndirectArray<FStreamedAudioChunk,FDefaultAllocator>
{
  TArray<void *,FDefaultAllocator> Array;
};

/* 4339 */
struct FStreamedAudioPlatformData
{
  int NumChunks;
  FName AudioFormat;
  TIndirectArray<FStreamedAudioChunk,FDefaultAllocator> Chunks;
};

/* 67040 */
const struct __declspec(align(8)) TimeLineEvent
{
  int id;
  long double physicsTime;
  bool isLastLine;
};

/* 67055 */
const struct OnStepCompleteEvent
{
  Car *car;
  long double physicsTime;
};

/* 67074 */
const struct OnControlsProviderChanged
{
  Car *car;
  ICarControlsProvider *newControlsProvider;
};

/* 67088 */
const struct OnLapCompletedEvent
{
  unsigned int carIndex;
  unsigned int lapTime;
  unsigned int lapCount;
  std::vector<unsigned int,std::allocator<unsigned int> > splits;
  long double eventTime;
  bool isValid;
  int cuts;
};

/* 67102 */
const struct OnSectorSplitEvent
{
  unsigned int carIndex;
  unsigned int sectorIndex;
  unsigned int sectorTime;
  unsigned int cuts;
};

/* 67129 */
const struct std::pair<int,int>
{
  int first;
  int second;
};

/* 67146 */
const struct __declspec(align(4)) OnCollisionEvent
{
  IRigidBody *body;
  long double relativeSpeed;
  vec3d worldPos;
  vec3d relPos;
  unsigned int colliderGroup;
  bool damages;
};

/* 67703 */
const struct OnGearRequestEvent
{
  GearChangeRequest request;
  int nextGear;
};

/* 4082 */
struct FStaticMeshVertexDataInterfaceVtbl
{
  void *(__cdecl *__vecDelDtor)(FStaticMeshVertexDataInterface *this, unsigned int);
  _BYTE gap8[8];
  void (__cdecl *Empty)(FStaticMeshVertexDataInterface *this, unsigned int);
  bool (__cdecl *IsValidIndex)(FStaticMeshVertexDataInterface *this, unsigned int);
  unsigned int (__cdecl *GetStride)(FStaticMeshVertexDataInterface *this);
  int (__cdecl *Num)(FStaticMeshVertexDataInterface *this);
  char *(__cdecl *GetDataPointer)(FStaticMeshVertexDataInterface *this);
  FResourceArrayInterface *(__cdecl *GetResourceArray)(FStaticMeshVertexDataInterface *this);
  void (__cdecl *Serialize)(FStaticMeshVertexDataInterface *this, FArchive *);
  unsigned __int64 (__cdecl *GetResourceSize)(FStaticMeshVertexDataInterface *this);
  bool (__cdecl *GetAllowCPUAccess)(FStaticMeshVertexDataInterface *this);
};

/* 4081 */
struct FResourceArrayInterfaceVtbl
{
  const void *(__cdecl *GetResourceData)(FResourceArrayInterface *this);
  unsigned int (__cdecl *GetResourceDataSize)(FResourceArrayInterface *this);
  void (__cdecl *Discard)(FResourceArrayInterface *this);
  bool (__cdecl *IsStatic)(FResourceArrayInterface *this);
  bool (__cdecl *GetAllowCPUAccess)(FResourceArrayInterface *this);
  void (__cdecl *SetAllowCPUAccess)(FResourceArrayInterface *this, bool);
};

/* 5674 */
struct __cppobj __declspec(align(8)) FRHITexture3D : FRHITexture
{
  unsigned int SizeX;
  unsigned int SizeY;
  unsigned int SizeZ;
};

/* 5512 */
struct BufferedPacket
{
  char *Data;
  unsigned int CountBits;
  float ResendTime;
  unsigned int Id;
  FString Address;
  HandlerComponent *FromComponent;
};

/* 5502 */
const struct TArray<FAnalyticsEventAttribute,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 3931 */
struct FStructuredArchive
{
  FBinaryArchiveFormatter *Formatter;
};

/* 3927 */
struct FStructuredArchiveFormatter
{
  FStructuredArchiveFormatterVtbl *vfptr;
};

/* 3930 */
struct __cppobj FBinaryArchiveFormatter : FStructuredArchiveFormatter
{
  FArchive *Inner;
};

/* 3943 */
struct __cppobj TDefaultDelete<TBaseDelegate<void,FName const &,UPackage *,enum EAsyncLoadingResult::Type> >
{
};

/* 3948 */
struct __cppobj TUniquePtr<TBaseDelegate<void,FName const &,UPackage *,enum EAsyncLoadingResult::Type>,TDefaultDelete<TBaseDelegate<void,FName const &,UPackage *,enum EAsyncLoadingResult::Type> > > : TDefaultDelete<TBaseDelegate<void,FName const &,UPackage *,enum EAsyncLoadingResult::Type> >
{
  TBaseDelegate<void,FName const &,UPackage *,enum EAsyncLoadingResult::Type> *Ptr;
};

/* 442 */
enum EPackageFlags
{
  PKG_None = 0x0,
  PKG_NewlyCreated = 0x1,
  PKG_ClientOptional = 0x2,
  PKG_ServerSideOnly = 0x4,
  PKG_CompiledIn = 0x10,
  PKG_ForDiffing = 0x20,
  PKG_EditorOnly = 0x40,
  PKG_Developer = 0x80,
  PKG_ContainsMapData = 0x4000,
  PKG_Need = 0x8000,
  PKG_Compiling = 0x10000,
  PKG_ContainsMap = 0x20000,
  PKG_RequiresLocalizationGather = 0x40000,
  PKG_DisallowLazyLoading = 0x80000,
  PKG_PlayInEditor = 0x100000,
  PKG_ContainsScript = 0x200000,
  PKG_DisallowExport = 0x400000,
  PKG_ReloadingForCooker = 0x40000000,
  PKG_FilterEditorOnly = 0x80000000,
};

/* 3949 */
struct __declspec(align(8)) FAsyncPackageDesc
{
  int RequestID;
  FName Name;
  FName NameToLoad;
  FGuid Guid;
  TUniquePtr<TBaseDelegate<void,FName const &,UPackage *,enum EAsyncLoadingResult::Type>,TDefaultDelete<TBaseDelegate<void,FName const &,UPackage *,enum EAsyncLoadingResult::Type> > > PackageLoadedDelegate;
  EPackageFlags PackageFlags;
  int Priority;
  int PIEInstanceID;
};

/* 3952 */
struct TArray<FAsyncPackage::FCompletionCallback,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 3953 */
struct TArray<FAsyncPackage *,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 3956 */
struct TArray<FLinkerLoad *,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 3990 */
struct __cppobj FImportOrImportIndexArray : TArray<int,FDefaultAllocator>
{
};

/* 3991 */
struct TArray<IAsyncReadRequest *,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 3993 */
struct TSparseArray<TSetElement<TTuple<IAsyncReadRequest *,FAsyncPackage::FExportIORequest> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<56,8> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 3994 */
struct __declspec(align(8)) TSet<TTuple<IAsyncReadRequest *,FAsyncPackage::FExportIORequest>,TDefaultMapHashableKeyFuncs<IAsyncReadRequest *,FAsyncPackage::FExportIORequest,0>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<TTuple<IAsyncReadRequest *,FAsyncPackage::FExportIORequest> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 3995 */
struct TMapBase<IAsyncReadRequest *,FAsyncPackage::FExportIORequest,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<IAsyncReadRequest *,FAsyncPackage::FExportIORequest,0> >
{
  TSet<TTuple<IAsyncReadRequest *,FAsyncPackage::FExportIORequest>,TDefaultMapHashableKeyFuncs<IAsyncReadRequest *,FAsyncPackage::FExportIORequest,0>,FDefaultSetAllocator> Pairs;
};

/* 3996 */
struct __cppobj TSortableMapBase<IAsyncReadRequest *,FAsyncPackage::FExportIORequest,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<IAsyncReadRequest *,FAsyncPackage::FExportIORequest,0> > : TMapBase<IAsyncReadRequest *,FAsyncPackage::FExportIORequest,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<IAsyncReadRequest *,FAsyncPackage::FExportIORequest,0> >
{
};

/* 3997 */
struct __cppobj TMap<IAsyncReadRequest *,FAsyncPackage::FExportIORequest,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<IAsyncReadRequest *,FAsyncPackage::FExportIORequest,0> > : TSortableMapBase<IAsyncReadRequest *,FAsyncPackage::FExportIORequest,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<IAsyncReadRequest *,FAsyncPackage::FExportIORequest,0> >
{
};

/* 3998 */
struct TSparseArray<TSetElement<TTuple<int,IAsyncReadRequest *> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<24,8> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 3999 */
struct __declspec(align(8)) TSet<TTuple<int,IAsyncReadRequest *>,TDefaultMapHashableKeyFuncs<int,IAsyncReadRequest *,0>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<TTuple<int,IAsyncReadRequest *> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 4000 */
struct TMapBase<int,IAsyncReadRequest *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<int,IAsyncReadRequest *,0> >
{
  TSet<TTuple<int,IAsyncReadRequest *>,TDefaultMapHashableKeyFuncs<int,IAsyncReadRequest *,0>,FDefaultSetAllocator> Pairs;
};

/* 4001 */
struct __cppobj TSortableMapBase<int,IAsyncReadRequest *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<int,IAsyncReadRequest *,0> > : TMapBase<int,IAsyncReadRequest *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<int,IAsyncReadRequest *,0> >
{
};

/* 4002 */
struct __cppobj TMap<int,IAsyncReadRequest *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<int,IAsyncReadRequest *,0> > : TSortableMapBase<int,IAsyncReadRequest *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<int,IAsyncReadRequest *,0> >
{
};

/* 4003 */
struct TSparseArray<TSetElement<TTuple<TTuple<FName,FPackageIndex>,FPackageIndex> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<32,8> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 4004 */
struct __declspec(align(8)) TSet<TTuple<TTuple<FName,FPackageIndex>,FPackageIndex>,TDefaultMapHashableKeyFuncs<TTuple<FName,FPackageIndex>,FPackageIndex,0>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<TTuple<TTuple<FName,FPackageIndex>,FPackageIndex> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 4005 */
struct TMapBase<TTuple<FName,FPackageIndex>,FPackageIndex,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<TTuple<FName,FPackageIndex>,FPackageIndex,0> >
{
  TSet<TTuple<TTuple<FName,FPackageIndex>,FPackageIndex>,TDefaultMapHashableKeyFuncs<TTuple<FName,FPackageIndex>,FPackageIndex,0>,FDefaultSetAllocator> Pairs;
};

/* 4006 */
struct __cppobj TSortableMapBase<TTuple<FName,FPackageIndex>,FPackageIndex,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<TTuple<FName,FPackageIndex>,FPackageIndex,0> > : TMapBase<TTuple<FName,FPackageIndex>,FPackageIndex,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<TTuple<FName,FPackageIndex>,FPackageIndex,0> >
{
};

/* 4007 */
struct __cppobj TMap<TTuple<FName,FPackageIndex>,FPackageIndex,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<TTuple<FName,FPackageIndex>,FPackageIndex,0> > : TSortableMapBase<TTuple<FName,FPackageIndex>,FPackageIndex,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<TTuple<FName,FPackageIndex>,FPackageIndex,0> >
{
};

/* 4008 */
struct TSparseArray<TSetElement<FWeakAsyncPackagePtr>,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<24,8> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 4009 */
struct __declspec(align(8)) TSet<FWeakAsyncPackagePtr,DefaultKeyFuncs<FWeakAsyncPackagePtr,0>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<FWeakAsyncPackagePtr>,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 4010 */
struct TArray<FUnsafeWeakAsyncPackagePtr,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 4011 */
struct TArray<FEventLoadNodePtr,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 4012 */
struct __declspec(align(4)) FEventLoadNode
{
  TArray<FEventLoadNodePtr,FDefaultAllocator> NodesWaitingForMe;
  int NumPrerequistes;
  bool bFired;
  bool bAddedToGraph;
};

/* 4013 */
struct FEventLoadNodeArray
{
  FEventLoadNode PackageNodes[3];
  FEventLoadNode *Array;
  int TotalNumberOfImportExportNodes;
  int TotalNumberOfNodesAdded;
  int NumImports;
  int NumExports;
  int OffsetToImports;
  int OffsetToExports;
};

/* 3954 */
struct __cppobj FAsyncPackage : FGCObject
{
  FAsyncPackageDesc Desc;
  FLinkerLoad *Linker;
  UPackage *LinkerRoot;
  TArray<FAsyncPackage::FCompletionCallback,FDefaultAllocator> CompletionCallbacks;
  TArray<FAsyncPackage *,FDefaultAllocator> PendingImportedPackages;
  TArray<FAsyncPackage *,FDefaultAllocator> ReferencedImports;
  FAsyncPackage *DependencyRootPackage;
  FThreadSafeCounter DependencyRefCount;
  int LoadImportIndex;
  int ImportIndex;
  int ExportIndex;
  int PreLoadIndex;
  int PreLoadSortIndex;
  int FinishExternalReadDependenciesIndex;
  int PostLoadIndex;
  int DeferredPostLoadIndex;
  int DeferredFinalizeIndex;
  int DeferredClusterIndex;
  float TimeLimit;
  bool bUseTimeLimit;
  bool bUseFullTimeLimit;
  bool bTimeLimitExceeded;
  bool bLoadHasFailed;
  bool bLoadHasFinished;
  bool bThreadedLoadingFinished;
  bool bCreatedLinkerRoot;
  long double TickStartTime;
  UObject *LastObjectWorkWasPerformedOn;
  const wchar_t *LastTypeOfWorkPerformed;
  long double LoadStartTime;
  float LoadPercentage;
  TArray<UObject *,FDefaultAllocator> DeferredPostLoadObjects;
  TArray<UObject *,FDefaultAllocator> DeferredFinalizeObjects;
  TArray<UObject *,FDefaultAllocator> PackageObjLoaded;
  TArray<FLinkerLoad *,FDefaultAllocator> DelayedLinkerClosePackages;
  TArray<UObject *,FDefaultAllocator> DeferredClusterObjects;
  TArray<int,FDefaultAllocator> RequestIDs;
  int ReentryCount;
  TSet<UObject *,DefaultKeyFuncs<UObject *,0>,FDefaultSetAllocator> ReferencedObjects;
  FWindowsCriticalSection ReferencedObjectsCritical;
  FAsyncLoadingThread *AsyncLoadingThread;
  _BYTE AsyncPackageLoadingState[1];
  int SerialNumber;
  FImportOrImportIndexArray ImportsThatAreNowCreated;
  FImportOrImportIndexArray ImportsThatAreNowSerialized;
  FImportOrImportIndexArray ExportsThatCanBeCreated;
  FImportOrImportIndexArray ExportsThatCanHaveIOStarted;
  FImportOrImportIndexArray ExportsThatCanBeSerialized;
  TArray<IAsyncReadRequest *,FDefaultAllocator> ReadyPrecacheRequests;
  TMap<IAsyncReadRequest *,FAsyncPackage::FExportIORequest,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<IAsyncReadRequest *,FAsyncPackage::FExportIORequest,0> > PrecacheRequests;
  TMap<int,IAsyncReadRequest *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<int,IAsyncReadRequest *,0> > ExportIndexToPrecacheRequest;
  __int64 CurrentBlockOffset;
  __int64 CurrentBlockBytes;
  TSet<int,DefaultKeyFuncs<int,0>,FDefaultSetAllocator> ExportsInThisBlock;
  TMap<TTuple<FName,FPackageIndex>,FPackageIndex,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<TTuple<FName,FPackageIndex>,FPackageIndex,0> > ObjectNameWithOuterToExport;
  TSet<FWeakAsyncPackagePtr,DefaultKeyFuncs<FWeakAsyncPackagePtr,0>,FDefaultSetAllocator> PackagesIMayBeWaitingForBeforePostload;
  TSet<FWeakAsyncPackagePtr,DefaultKeyFuncs<FWeakAsyncPackagePtr,0>,FDefaultSetAllocator> PackagesIAmWaitingForBeforePostload;
  TSet<FWeakAsyncPackagePtr,DefaultKeyFuncs<FWeakAsyncPackagePtr,0>,FDefaultSetAllocator> OtherPackagesWaitingForMeBeforePostload;
  TArray<FUnsafeWeakAsyncPackagePtr,FDefaultAllocator> PackagesWaitingToLinkImports;
  int ImportAddNodeIndex;
  int ExportAddNodeIndex;
  bool bProcessImportsAndExportsInFlight;
  bool bProcessPostloadWaitInFlight;
  bool bAllExportsSerialized;
  FEventLoadNodeArray EventNodeArray;
};

/* 6500 */
struct FOccluderElementsCollector
{
  FOccluderElementsCollectorVtbl *vfptr;
};

/* 6503 */
struct FPrimitiveViewRelevance
{
  unsigned __int16 ShadingModelMaskRelevance;
  unsigned __int32 bOpaqueRelevance : 1;
  unsigned __int32 bMaskedRelevance : 1;
  unsigned __int32 bDistortionRelevance : 1;
  unsigned __int32 bSeparateTranslucencyRelevance : 1;
  unsigned __int32 bNormalTranslucencyRelevance : 1;
  unsigned __int32 bUsesSceneColorCopy : 1;
  unsigned __int32 bDisableOffscreenRendering : 1;
  unsigned __int32 bUsesGlobalDistanceField : 1;
  unsigned __int32 bStaticRelevance : 1;
  unsigned __int32 bDynamicRelevance : 1;
  unsigned __int32 bDrawRelevance : 1;
  unsigned __int32 bShadowRelevance : 1;
  unsigned __int32 bRenderCustomDepth : 1;
  unsigned __int32 bRenderInMainPass : 1;
  unsigned __int32 bHasVolumeMaterialDomain : 1;
  unsigned __int32 bEditorPrimitiveRelevance : 1;
  unsigned __int32 bEditorStaticSelectionRelevance : 1;
  unsigned __int32 bEditorNoDepthTestPrimitiveRelevance : 1;
  unsigned __int32 bHasSimpleLights : 1;
  unsigned __int32 bUsesWorldPositionOffset : 1;
  unsigned __int32 bUsesLightingChannels : 1;
  unsigned __int32 bDecal : 1;
  unsigned __int32 bTranslucentSurfaceLighting : 1;
  unsigned __int32 bUsesSceneDepth : 1;
  unsigned __int32 bUseCustomViewData : 1;
  unsigned __int32 bInitializedThisFrame : 1;
};

/* 6264 */
struct TMemStackAllocator<0>::ForElementType<FSimpleLightEntry>
{
  FSimpleLightEntry *Data;
};

/* 6265 */
struct TArray<FSimpleLightEntry,TMemStackAllocator<0> >
{
  TMemStackAllocator<0>::ForElementType<FSimpleLightEntry> AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 6267 */
struct TMemStackAllocator<0>::ForElementType<FSimpleLightPerViewEntry>
{
  FSimpleLightPerViewEntry *Data;
};

/* 6268 */
struct TArray<FSimpleLightPerViewEntry,TMemStackAllocator<0> >
{
  TMemStackAllocator<0>::ForElementType<FSimpleLightPerViewEntry> AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 6270 */
struct TMemStackAllocator<0>::ForElementType<FSimpleLightInstacePerViewIndexData>
{
  FSimpleLightInstacePerViewIndexData *Data;
};

/* 6271 */
struct TArray<FSimpleLightInstacePerViewIndexData,TMemStackAllocator<0> >
{
  TMemStackAllocator<0>::ForElementType<FSimpleLightInstacePerViewIndexData> AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 6272 */
struct FSimpleLightArray
{
  TArray<FSimpleLightEntry,TMemStackAllocator<0> > InstanceData;
  TArray<FSimpleLightPerViewEntry,TMemStackAllocator<0> > PerViewData;
  TArray<FSimpleLightInstacePerViewIndexData,TMemStackAllocator<0> > InstancePerViewDataIndices;
};

/* 6504 */
struct FHeightfieldComponentDescription
{
  FVector4 HeightfieldScaleBias;
  FVector4 MinMaxUV;
  FMatrix LocalToWorld;
  FVector2D LightingAtlasLocation;
  FIntRect HeightfieldRect;
  int NumSubsections;
  __declspec(align(8)) FVector4 SubsectionScaleAndBias;
};

/* 6505 */
struct __cppobj TTypeCompatibleBytes<FLightCacheInterface *> : TAlignedBytes<8,8>
{
};

/* 6506 */
struct __cppobj FHeapAllocator::ForElementType<FLightCacheInterface *> : FHeapAllocator::ForAnyElementType
{
};

/* 6507 */
struct TInlineAllocator<8,FDefaultAllocator>::ForElementType<FLightCacheInterface *>
{
  TTypeCompatibleBytes<FLightCacheInterface *> InlineData[8];
  FHeapAllocator::ForElementType<FLightCacheInterface *> SecondaryData;
};

/* 6508 */
struct TArray<FLightCacheInterface *,TInlineAllocator<8,FDefaultAllocator> >
{
  TInlineAllocator<8,FDefaultAllocator>::ForElementType<FLightCacheInterface *> AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 6509 */
const struct FLODMask
{
  char DitheredLODIndices[2];
};

/* 5929 */
struct FIndirectLightingCacheAllocation
{
  FVector Add;
  FVector Scale;
  FVector MinUV;
  FVector MaxUV;
  FIntVector MinTexel;
  int AllocationTexelSize;
  FVector TargetPosition;
  __declspec(align(8)) FVector4 TargetSamplePacked0[3];
  FVector4 TargetSamplePacked1[3];
  FVector4 TargetSamplePacked2;
  float TargetDirectionalShadowing;
  __declspec(align(16)) FVector4 TargetSkyBentNormal;
  FVector SingleSamplePosition;
  __declspec(align(8)) FVector4 SingleSamplePacked0[3];
  FVector4 SingleSamplePacked1[3];
  FVector4 SingleSamplePacked2;
  float CurrentDirectionalShadowing;
  __declspec(align(16)) FVector4 CurrentSkyBentNormal;
  bool bHasEverUpdatedSingleSample;
  bool bPointSample;
  bool bIsDirty;
  bool bUnbuiltPreview;
};

/* 6133 */
const struct FPlanarReflectionSceneProxy
{
  FBox WorldBounds;
  __declspec(align(8)) FPlane ReflectionPlane;
  FVector PlanarReflectionOrigin;
  float DistanceFromPlaneFadeEnd;
  FVector4 PlanarReflectionXAxis;
  FVector4 PlanarReflectionYAxis;
  FVector PlanarReflectionParameters;
  FVector2D PlanarReflectionParameters2;
  __declspec(align(16)) FMatrix ProjectionWithExtraFOV[2];
  FIntRect ViewRect[2];
  FVector4 InverseTransposeMirrorMatrix[3];
  FName OwnerName;
  int PlanarReflectionId;
  float PrefilterRoughness;
  float PrefilterRoughnessDistance;
  bool bIsStereo;
  FPlanarReflectionRenderTarget *RenderTarget;
};

/* 41 */
enum EAttenuationShape::Type
{
  Sphere = 0x0,
  Capsule = 0x1,
  Box = 0x2,
  Cone = 0x3,
};

/* 127 */
typedef EAttenuationShape::Type EReflectionCaptureShape::Type;

/* 6134 */
const struct FReflectionCaptureProxy
{
  UReflectionCaptureComponent *Component;
  int PackedIndex;
  FTexture *EncodedHDRCubemap;
  float EncodedHDRAverageBrightness;
  EReflectionCaptureShape::Type Shape;
  FVector Position;
  float InfluenceRadius;
  float Brightness;
  unsigned int Guid;
  FVector CaptureOffset;
  __declspec(align(16)) FMatrix BoxTransform;
  FVector BoxScales;
  float BoxTransitionDistance;
  FPlane ReflectionPlane;
  FVector4 ReflectionXAxisAndYScale;
  bool bUsingPreviewCaptureData;
};

/* 6143 */
struct FLightPrimitiveInteraction
{
  FLightSceneInfo *LightSceneInfo;
  FPrimitiveSceneInfo *PrimitiveSceneInfo;
  FLightPrimitiveInteraction **PrevPrimitiveLink;
  FLightPrimitiveInteraction *NextPrimitive;
  FLightPrimitiveInteraction **PrevLightLink;
  FLightPrimitiveInteraction *NextLight;
  int LightId;
  unsigned __int32 bCastShadow : 1;
  unsigned __int32 bLightMapped : 1;
  unsigned __int32 bIsDynamic : 1;
  unsigned __int32 bIsShadowMapped : 1;
  unsigned __int32 bUncachedStaticLighting : 1;
  unsigned __int32 bHasTranslucentObjectShadow : 1;
  unsigned __int32 bHasInsetObjectShadow : 1;
  unsigned __int32 bSelfShadowOnly : 1;
  unsigned __int32 bES2DynamicPointLight : 1;
};

/* 4249 */
struct FBaseAttenuationSettingsVtbl
{
  void *(__cdecl *__vecDelDtor)(FBaseAttenuationSettings *this, unsigned int);
  void (__cdecl *CollectAttenuationShapesForVisualization)(FBaseAttenuationSettings *this, TMultiMap<enum EAttenuationShape::Type,FBaseAttenuationSettings::AttenuationShapeDetails,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<enum EAttenuationShape::Type,FBaseAttenuationSettings::AttenuationShapeDetails,1> > *);
};

/* 4285 */
struct __cppobj UAmbisonicsSubmixSettingsBase : UObject
{
};

/* 4291 */
struct __cppobj TDefaultDelete<short [0]>
{
};

/* 4292 */
struct __cppobj TUniquePtr<short [0],TDefaultDelete<short [0]> > : TDefaultDelete<short [0]>
{
  __int16 *Ptr;
};

/* 4293 */
struct __declspec(align(8)) Audio::TSampleBuffer<short>
{
  TUniquePtr<short [0],TDefaultDelete<short [0]> > RawPCMData;
  int NumSamples;
  int NumFrames;
  int NumChannels;
  int SampleRate;
  float SampleDuration;
};

/* 4295 */
struct __cppobj TDefaultDelete<FAsyncTask<Audio::FAsyncSoundWavePCMWriteWorker> >
{
};

/* 4313 */
struct __cppobj TUniquePtr<FAsyncTask<Audio::FAsyncSoundWavePCMWriteWorker>,TDefaultDelete<FAsyncTask<Audio::FAsyncSoundWavePCMWriteWorker> > > : TDefaultDelete<FAsyncTask<Audio::FAsyncSoundWavePCMWriteWorker> >
{
  FAsyncTask<Audio::FAsyncSoundWavePCMWriteWorker> *Ptr;
};

/* 4300 */
struct Audio::FSoundWavePCMWriter
{
  Audio::TSampleBuffer<short> CurrentBuffer;
  USoundWave *CurrentSoundWave;
  _BYTE CurrentState[1];
  FString AbsoluteFilePath;
  bool bWasPreviouslyAddedToRoot;
  TUniquePtr<FAsyncTask<Audio::FAsyncSoundWavePCMWriteWorker>,TDefaultDelete<FAsyncTask<Audio::FAsyncSoundWavePCMWriteWorker> > > CurrentOperation;
  TArray<unsigned char,FDefaultAllocator> SerializedWavData;
  FThreadSafeCounter Progress;
  int ChunkSize;
  UPackage *CurrentPackage;
};

/* 4314 */
struct Audio::FAudioRecordingData
{
  Audio::TSampleBuffer<short> InputBuffer;
  Audio::FSoundWavePCMWriter Writer;
};

/* 5761 */
struct __cppobj TBaseDelegate<TTypeWrapper<void>,FGotoResult const &> : FDelegateBase
{
};

/* 5762 */
const struct __cppobj TBaseDelegate<void,FGotoResult const &> : TBaseDelegate<TTypeWrapper<void>,FGotoResult const &>
{
};

/* 5763 */
struct __cppobj TBaseDelegate<TTypeWrapper<void>,bool const ,__int64 const > : FDelegateBase
{
};

/* 5764 */
const struct __cppobj TBaseDelegate<void,bool const ,__int64 const > : TBaseDelegate<TTypeWrapper<void>,bool const ,__int64 const >
{
};

/* 5765 */
struct __cppobj TBaseDelegate<TTypeWrapper<void>,FEnumerateEventsResult const &> : FDelegateBase
{
};

/* 5766 */
const struct __cppobj TBaseDelegate<void,FEnumerateEventsResult const &> : TBaseDelegate<TTypeWrapper<void>,FEnumerateEventsResult const &>
{
};

/* 5767 */
struct __cppobj TBaseDelegate<TTypeWrapper<void>,FReplayEventList const &,bool> : FDelegateBase
{
};

/* 5768 */
const struct __cppobj TBaseDelegate<void,FReplayEventList const &,bool> : TBaseDelegate<TTypeWrapper<void>,FReplayEventList const &,bool>
{
};

/* 5769 */
struct __cppobj TBaseDelegate<TTypeWrapper<void>,FRequestEventDataResult const &> : FDelegateBase
{
};

/* 5770 */
const struct __cppobj TBaseDelegate<void,FRequestEventDataResult const &> : TBaseDelegate<TTypeWrapper<void>,FRequestEventDataResult const &>
{
};

/* 5771 */
struct __cppobj TBaseDelegate<TTypeWrapper<void>,TArray<unsigned char,FDefaultAllocator> const &,bool> : FDelegateBase
{
};

/* 5772 */
const struct __cppobj TBaseDelegate<void,TArray<unsigned char,FDefaultAllocator> const &,bool> : TBaseDelegate<TTypeWrapper<void>,TArray<unsigned char,FDefaultAllocator> const &,bool>
{
};

/* 5773 */
struct __cppobj TBaseDelegate<TTypeWrapper<void>,FSearchEventsResult const &> : FDelegateBase
{
};

/* 5774 */
const struct __cppobj TBaseDelegate<void,FSearchEventsResult const &> : TBaseDelegate<TTypeWrapper<void>,FSearchEventsResult const &>
{
};

/* 5775 */
struct __cppobj TBaseDelegate<TTypeWrapper<void>,TArray<FNetworkReplayStreamInfo,FDefaultAllocator> const &> : FDelegateBase
{
};

/* 5776 */
const struct __cppobj TBaseDelegate<void,TArray<FNetworkReplayStreamInfo,FDefaultAllocator> const &> : TBaseDelegate<TTypeWrapper<void>,TArray<FNetworkReplayStreamInfo,FDefaultAllocator> const &>
{
};

/* 5777 */
struct __cppobj TBaseDelegate<TTypeWrapper<void>,FDownloadHeaderResult const &> : FDelegateBase
{
};

/* 5778 */
const struct __cppobj TBaseDelegate<void,FDownloadHeaderResult const &> : TBaseDelegate<TTypeWrapper<void>,FDownloadHeaderResult const &>
{
};

/* 5781 */
struct __cppobj TBaseDelegate<TTypeWrapper<void>,FKeepReplayResult const &> : FDelegateBase
{
};

/* 5782 */
const struct __cppobj TBaseDelegate<void,FKeepReplayResult const &> : TBaseDelegate<TTypeWrapper<void>,FKeepReplayResult const &>
{
};

/* 5783 */
struct __cppobj TBaseDelegate<TTypeWrapper<void>,FRenameReplayResult const &> : FDelegateBase
{
};

/* 5784 */
const struct __cppobj TBaseDelegate<void,FRenameReplayResult const &> : TBaseDelegate<TTypeWrapper<void>,FRenameReplayResult const &>
{
};

/* 5785 */
struct __cppobj TBaseDelegate<TTypeWrapper<void>,FDeleteFinishedStreamResult const &> : FDelegateBase
{
};

/* 5786 */
const struct __cppobj TBaseDelegate<void,FDeleteFinishedStreamResult const &> : TBaseDelegate<TTypeWrapper<void>,FDeleteFinishedStreamResult const &>
{
};

/* 5756 */
const struct FNetworkReplayVersion
{
  FString AppString;
  unsigned int NetworkVersion;
  unsigned int Changelist;
};

/* 5787 */
struct __cppobj TBaseDelegate<TTypeWrapper<void>,FEnumerateStreamsResult const &> : FDelegateBase
{
};

/* 5788 */
const struct __cppobj TBaseDelegate<void,FEnumerateStreamsResult const &> : TBaseDelegate<TTypeWrapper<void>,FEnumerateStreamsResult const &>
{
};

/* 5881 */
struct TArray<FNavEdgeSegment,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 4973 */
struct __declspec(align(8)) FComputedUniformBuffer
{
  TRefCountPtr<FRHIUniformBuffer> UniformBuffer;
  int UseCount;
};

/* 4977 */
struct TShaderMap<FMaterialShaderType>Vtbl
{
  void *(__cdecl *__vecDelDtor)(TShaderMap<FMaterialShaderType> *this, unsigned int);
  void (__cdecl *RegisterSerializedShaders)(TShaderMap<FMaterialShaderType> *this);
  void (__cdecl *DiscardSerializedShaders)(TShaderMap<FMaterialShaderType> *this);
};

/* 4952 */
struct IBreakIterator
{
  IBreakIteratorVtbl *vfptr;
};

/* 4436 */
struct FRenderTargetVtbl
{
  void *(__cdecl *__vecDelDtor)(FRenderTarget *this, unsigned int);
  TRefCountPtr<FRHITexture2D> *(__cdecl *GetRenderTargetTexture)(FRenderTarget *this);
  TRefCountPtr<FRHIUnorderedAccessView> *(__cdecl *GetRenderTargetUAV)(FRenderTarget *this, TRefCountPtr<FRHIUnorderedAccessView> *result);
  FIntPoint *(__cdecl *GetSizeXY)(FRenderTarget *this, FIntPoint *result);
  float (__cdecl *GetDisplayGamma)(FRenderTarget *this);
  void (__cdecl *ProcessToggleFreezeCommand)(FRenderTarget *this);
  bool (__cdecl *HasToggleFreezeCommand)(FRenderTarget *this);
};

/* 4964 */
struct FHitProxyConsumerVtbl
{
  void (__cdecl *AddHitProxy)(FHitProxyConsumer *this, HHitProxy *);
};

/* 7025 */
struct ISceneViewFamilyScreenPercentage
{
  ISceneViewFamilyScreenPercentageVtbl *vfptr;
};

/* 6576 */
union $960F906AA21E220D78D99A2F0BA53BF5
{
  void (__cdecl *~FSceneViewStateInterface)(FSceneViewStateInterface *this);
  void *(__cdecl *__vecDelDtor)(FSceneViewStateInterface *this, unsigned int);
};

/* 6577 */
struct FSceneViewStateInterfaceVtbl
{
  void (__cdecl *Destroy)(FSceneViewStateInterface *this);
  _BYTE gap8[16];
  unsigned __int64 (__cdecl *GetSizeBytes)(FSceneViewStateInterface *this);
  void (__cdecl *OnStartPostProcessing)(FSceneViewStateInterface *this, FSceneView *);
  UMaterialInstanceDynamic *(__cdecl *GetReusableMID)(FSceneViewStateInterface *this, UMaterialInterface *);
  void (__cdecl *ResetViewState)(FSceneViewStateInterface *this);
  FTemporalLODState *(__cdecl *GetTemporalLODState)(FSceneViewStateInterface *this);
  FTemporalLODState *(__cdecl *GetTemporalLODState)(FSceneViewStateInterface *this);
  float (__cdecl *GetTemporalLODTransition)(FSceneViewStateInterface *this);
  unsigned int (__cdecl *GetViewKey)(FSceneViewStateInterface *this);
  unsigned int (__cdecl *GetCurrentTemporalAASampleIndex)(FSceneViewStateInterface *this);
  void (__cdecl *SetSequencerState)(FSceneViewStateInterface *this, const bool);
  bool (__cdecl *GetSequencerState)(FSceneViewStateInterface *this);
  unsigned int (__cdecl *GetFrameIndexMod8)(FSceneViewStateInterface *this);
  unsigned int (__cdecl *GetOcclusionFrameCounter)(FSceneViewStateInterface *this);
  $960F906AA21E220D78D99A2F0BA53BF5 ___u14;
};

/* 7032 */
struct FViewElementDrawerVtbl
{
  void (__cdecl *Draw)(FViewElementDrawer *this, FSceneView *, FPrimitiveDrawInterface *);
};

/* 5991 */
struct FDynamicReadBufferVtbl
{
  void *(__cdecl *__vecDelDtor)(FDynamicReadBuffer *this, unsigned int);
  void (__cdecl *Initialize)(FDynamicReadBuffer *this, unsigned int, unsigned int, EPixelFormat, unsigned int);
};

/* 4434 */
struct __cppobj FRHIUnorderedAccessView : FRHIResource
{
};

/* 6872 */
struct __declspec(align(16)) FDeferredDecalProxy
{
  UDecalComponent *Component;
  UMaterialInterface *DecalMaterial;
  FTransform ComponentTrans;
  bool DrawInGame;
  bool DrawInEditor;
  bool bOwnerSelected;
  int SortOrder;
  float InvFadeDuration;
  float FadeStartDelayNormalized;
  float FadeScreenSize;
};

/* 6136 */
struct TRefCountPtr<FRHITextureCube>
{
  FRHITextureCube *Reference;
};

/* 6137 */
struct __cppobj FReflectionTextureCubeResource : FTexture
{
  int Size;
  int NumMips;
  EPixelFormat Format;
  TRefCountPtr<FRHITextureCube> TextureCubeRHI;
  TArray<unsigned char,FDefaultAllocator> *SourceData;
};

/* 6356 */
struct __cppobj __declspec(align(8)) FSkyTextureCubeResource : FTexture, FDeferredCleanupInterface
{
  int Size;
  int NumMips;
  EPixelFormat Format;
  TRefCountPtr<FRHITextureCube> TextureCubeRHI;
  int NumRefs;
};

/* 6132 */
struct __cppobj FPlanarReflectionRenderTarget : FTexture, FRenderTarget
{
  FIntPoint Size;
};

/* 6883 */
struct __cppobj __declspec(align(4)) UTextureRenderTargetCube : UTextureRenderTarget
{
  int SizeX;
  FLinearColor ClearColor;
  TEnumAsByte<enum EPixelFormat> OverrideFormat;
  __int8 bHDR : 1;
  __int8 bForceLinearGamma : 1;
};

/* 6891 */
struct FSceneRendererVtbl
{
  void *(__cdecl *__vecDelDtor)(FSceneRenderer *this, unsigned int);
  void (__cdecl *Render)(FSceneRenderer *this, FRHICommandListImmediate *);
  void (__cdecl *RenderHitProxies)(FSceneRenderer *this, FRHICommandListImmediate *);
};

/* 6256 */
struct FOneFrameResource
{
  FOneFrameResourceVtbl *vfptr;
};

/* 6994 */
struct TMemStackAllocator<0>::ForElementType<TRefCountPtr<FProjectedShadowInfo> >
{
  TRefCountPtr<FProjectedShadowInfo> *Data;
};

/* 6995 */
struct TArray<TRefCountPtr<FProjectedShadowInfo>,TMemStackAllocator<0> >
{
  TMemStackAllocator<0>::ForElementType<TRefCountPtr<FProjectedShadowInfo> > AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 6996 */
struct FVisibleLightInfo
{
  TArray<FProjectedShadowInfo *,TMemStackAllocator<0> > MemStackProjectedShadows;
  TArray<FProjectedShadowInfo *,TMemStackAllocator<0> > AllProjectedShadows;
  TArray<FProjectedShadowInfo *,TMemStackAllocator<0> > ShadowsToProject;
  TArray<FProjectedShadowInfo *,TMemStackAllocator<0> > CapsuleShadowsToProject;
  TArray<FProjectedShadowInfo *,TMemStackAllocator<0> > RSMsToProject;
  TArray<TRefCountPtr<FProjectedShadowInfo>,TMemStackAllocator<0> > ProjectedPreShadows;
  TArray<FProjectedShadowInfo *,TMemStackAllocator<0> > OccludedPerObjectShadows;
};

/* 5912 */
struct __cppobj TTypeCompatibleBytes<TRefCountPtr<FRHIUnorderedAccessView> > : TAlignedBytes<8,8>
{
};

/* 5913 */
struct __cppobj FHeapAllocator::ForElementType<TRefCountPtr<FRHIUnorderedAccessView> > : FHeapAllocator::ForAnyElementType
{
};

/* 5914 */
struct TInlineAllocator<1,FDefaultAllocator>::ForElementType<TRefCountPtr<FRHIUnorderedAccessView> >
{
  TTypeCompatibleBytes<TRefCountPtr<FRHIUnorderedAccessView> > InlineData[1];
  FHeapAllocator::ForElementType<TRefCountPtr<FRHIUnorderedAccessView> > SecondaryData;
};

/* 5915 */
struct TArray<TRefCountPtr<FRHIUnorderedAccessView>,TInlineAllocator<1,FDefaultAllocator> >
{
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<TRefCountPtr<FRHIUnorderedAccessView> > AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 5916 */
struct TArray<TRefCountPtr<FRHIShaderResourceView>,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 5918 */
struct TRefCountPtr<FRHIStructuredBuffer>
{
  FRHIStructuredBuffer *Reference;
};

/* 5919 */
struct FSceneRenderTargetItem
{
  TRefCountPtr<FRHITexture> TargetableTexture;
  TRefCountPtr<FRHITexture> ShaderResourceTexture;
  TRefCountPtr<FRHIUnorderedAccessView> UAV;
  TArray<TRefCountPtr<FRHIUnorderedAccessView>,TInlineAllocator<1,FDefaultAllocator> > MipUAVs;
  TArray<TRefCountPtr<FRHIShaderResourceView>,FDefaultAllocator> MipSRVs;
  TRefCountPtr<FRHIShaderResourceView> RTWriteMaskBufferRHI_SRV;
  TRefCountPtr<FRHIStructuredBuffer> RTWriteMaskDataBufferRHI;
};

/* 5909 */
struct IPooledRenderTarget
{
  IPooledRenderTargetVtbl *vfptr;
  FSceneRenderTargetItem RenderTargetItem;
};

/* 6976 */
struct TMemStackAllocator<0>::ForElementType<IPooledRenderTarget *>
{
  IPooledRenderTarget **Data;
};

/* 6977 */
struct TArray<IPooledRenderTarget *,TMemStackAllocator<0> >
{
  TMemStackAllocator<0>::ForElementType<IPooledRenderTarget *> AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 6978 */
struct FShadowMapRenderTargets
{
  TArray<IPooledRenderTarget *,TMemStackAllocator<0> > ColorTargets;
  IPooledRenderTarget *DepthTarget;
};

/* 2640 */
enum EShadowDepthCacheMode
{
  SDCM_MovablePrimitivesOnly = 0x0,
  SDCM_StaticPrimitivesOnly = 0x1,
  SDCM_Uncached = 0x2,
};

/* 6100 */
struct FSphere
{
  FVector Center;
  float W;
};

/* 6117 */
struct __declspec(align(16)) FShadowCascadeSettings
{
  float SplitNear;
  float SplitFar;
  float SplitNearFadeRegion;
  float SplitFarFadeRegion;
  float FadePlaneOffset;
  float FadePlaneLength;
  FConvexVolume ShadowBoundsAccurate;
  FPlane NearFrustumPlane;
  FPlane FarFrustumPlane;
  bool bFarShadowCascade;
  int ShadowSplitIndex;
};

/* 6979 */
struct __cppobj FHeapAllocator::ForElementType<float> : FHeapAllocator::ForAnyElementType
{
};

/* 6980 */
struct TInlineAllocator<2,FDefaultAllocator>::ForElementType<float>
{
  TTypeCompatibleBytes<float> InlineData[2];
  FHeapAllocator::ForElementType<float> SecondaryData;
};

/* 6981 */
struct TArray<float,TInlineAllocator<2,FDefaultAllocator> >
{
  TInlineAllocator<2,FDefaultAllocator>::ForElementType<float> AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 6902 */
struct TMemStackAllocator<0>::ForElementType<unsigned int>
{
  unsigned int *Data;
};

/* 6903 */
struct TInlineAllocator<4,TMemStackAllocator<0> >::ForElementType<unsigned int>
{
  TTypeCompatibleBytes<unsigned int> InlineData[4];
  TMemStackAllocator<0>::ForElementType<unsigned int> SecondaryData;
};

/* 6904 */
struct TBitArray<SceneRenderingBitArrayAllocator>
{
  TInlineAllocator<4,TMemStackAllocator<0> >::ForElementType<unsigned int> AllocatorInstance;
  int NumBits;
  int MaxBits;
};

/* 6911 */
struct TMemStackAllocator<0>::ForElementType<unsigned __int64>
{
  unsigned __int64 *Data;
};

/* 6912 */
struct TArray<unsigned __int64,TMemStackAllocator<0> >
{
  TMemStackAllocator<0>::ForElementType<unsigned __int64> AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 6982 */
struct TArray<FConvexVolume,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 6983 */
struct TRefCountPtr<FRHIComputeFence>
{
  FRHIComputeFence *Reference;
};

/* 6984 */
struct __declspec(align(8)) FLightSceneInfoCompact
{
  __m128 BoundingSphereVector;
  FLinearColor Color;
  FLightSceneInfo *LightSceneInfo;
  unsigned __int32 LightType : 2;
  unsigned __int32 bCastDynamicShadow : 1;
  unsigned __int32 bCastStaticShadow : 1;
  unsigned __int32 bStaticLighting : 1;
};

/* 6913 */
struct TMemStackAllocator<0>::ForElementType<FPrimitiveSceneInfo const *>
{
  FPrimitiveSceneInfo **Data;
};

/* 6914 */
struct TArray<FPrimitiveSceneInfo const *,TMemStackAllocator<0> >
{
  TMemStackAllocator<0>::ForElementType<FPrimitiveSceneInfo const *> AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 6988 */
struct TMemStackAllocator<0>::ForElementType<FShadowStaticMeshElement>
{
  FShadowStaticMeshElement *Data;
};

/* 6989 */
struct TArray<FShadowStaticMeshElement,TMemStackAllocator<0> >
{
  TMemStackAllocator<0>::ForElementType<FShadowStaticMeshElement> AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 6941 */
struct TMemStackAllocator<0>::ForElementType<FMeshBatchAndRelevance>
{
  FMeshBatchAndRelevance *Data;
};

/* 6942 */
struct TArray<FMeshBatchAndRelevance,TMemStackAllocator<0> >
{
  TMemStackAllocator<0>::ForElementType<FMeshBatchAndRelevance> AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 6990 */
struct __cppobj __declspec(align(8)) FProjectedShadowInfo : FRefCountedObject
{
  FViewInfo *ShadowDepthView;
  FShadowMapRenderTargets RenderTargets;
  EShadowDepthCacheMode CacheMode;
  FViewInfo *DependentView;
  int ShadowId;
  FVector PreShadowTranslation;
  FMatrix ShadowViewMatrix;
  FMatrix SubjectAndReceiverMatrix;
  FMatrix ReceiverMatrix;
  FMatrix InvReceiverMatrix;
  float InvMaxSubjectDepth;
  float MaxSubjectZ;
  float MinSubjectZ;
  FConvexVolume CasterFrustum;
  FConvexVolume ReceiverFrustum;
  float MinPreSubjectZ;
  FSphere ShadowBounds;
  FShadowCascadeSettings CascadeSettings;
  unsigned int X;
  unsigned int Y;
  unsigned int ResolutionX;
  unsigned int ResolutionY;
  unsigned int BorderSize;
  float MaxScreenPercent;
  TArray<float,TInlineAllocator<2,FDefaultAllocator> > FadeAlphas;
  unsigned __int32 bAllocated : 1;
  unsigned __int32 bRendered : 1;
  unsigned __int32 bAllocatedInPreshadowCache : 1;
  unsigned __int32 bDepthsCached : 1;
  unsigned __int32 bDirectionalLight : 1;
  unsigned __int32 bOnePassPointLightShadow : 1;
  unsigned __int32 bWholeSceneShadow : 1;
  unsigned __int32 bReflectiveShadowmap : 1;
  unsigned __int32 bTranslucentShadow : 1;
  unsigned __int32 bRayTracedDistanceField : 1;
  unsigned __int32 bCapsuleShadow : 1;
  unsigned __int32 bPreShadow : 1;
  unsigned __int32 bSelfShadowOnly : 1;
  unsigned __int32 bPerObjectOpaqueShadow : 1;
  unsigned __int32 bTransmission : 1;
  TBitArray<SceneRenderingBitArrayAllocator> StaticMeshWholeSceneShadowDepthMap;
  TArray<unsigned __int64,TMemStackAllocator<0> > StaticMeshWholeSceneShadowBatchVisibility;
  TArray<FMatrix,FDefaultAllocator> OnePassShadowViewProjectionMatrices;
  TArray<FConvexVolume,FDefaultAllocator> OnePassShadowFrustums;
  TRefCountPtr<FRHIComputeFence> RayTracedShadowsEndFence;
  TRefCountPtr<IPooledRenderTarget> RayTracedShadowsRT;
  FLightSceneInfo *LightSceneInfo;
  FLightSceneInfoCompact LightSceneInfoCompact;
  FPrimitiveSceneInfo *ParentSceneInfo;
  TArray<FPrimitiveSceneInfo const *,TMemStackAllocator<0> > DynamicSubjectPrimitives;
  TArray<FPrimitiveSceneInfo const *,TMemStackAllocator<0> > ReceiverPrimitives;
  TArray<FPrimitiveSceneInfo const *,TMemStackAllocator<0> > SubjectTranslucentPrimitives;
  TArray<FPrimitiveSceneInfo const *,TMemStackAllocator<0> > EmissiveOnlyPrimitives;
  TArray<FShadowStaticMeshElement,TMemStackAllocator<0> > EmissiveOnlyMeshElements;
  TArray<FPrimitiveSceneInfo const *,TMemStackAllocator<0> > GIBlockingPrimitives;
  TArray<FShadowStaticMeshElement,TMemStackAllocator<0> > GIBlockingMeshElements;
  TArray<FShadowStaticMeshElement,TMemStackAllocator<0> > StaticSubjectMeshElements;
  TArray<FMeshBatchAndRelevance,TMemStackAllocator<0> > DynamicSubjectMeshElements;
  TArray<FMeshBatchAndRelevance,TMemStackAllocator<0> > DynamicReceiverMeshElements;
  TArray<FMeshBatchAndRelevance,TMemStackAllocator<0> > DynamicSubjectTranslucentMeshElements;
  float ShaderDepthBias;
};

/* 5239 */
struct FMemMark
{
  FMemStackBase *Mem;
  char *Top;
  FMemStackBase::FTaggedMemory *SavedChunk;
  bool bPopped;
  FMemMark *NextTopmostMark;
};

/* 2642 */
enum FAtmosphereTextureResource::ETextureType
{
  E_Transmittance = 0x0,
  E_Irradiance = 0x1,
  E_Inscatter = 0x2,
};

/* 6437 */
struct __cppobj FAtmosphereTextureResource : FRenderResource
{
  FAtmosphereTextureResource::ETextureType TexType;
  TRefCountPtr<FRHITexture> TextureRHI;
  int SizeX;
  int SizeY;
  int SizeZ;
  void *TextureData;
};

/* 4107 */
struct __cppobj FRHIVertexDeclaration : FRHIResource
{
};

/* 6402 */
struct FDistanceFieldObjectBuffers
{
  int MaxObjects;
  FRWBuffer Bounds;
  FRWBuffer Data;
};

/* 6405 */
struct FSurfelBuffers
{
  int MaxSurfels;
  FRWBuffer InterpolatedVertexData;
  FRWBuffer Surfels;
};

/* 6413 */
struct FInstancedSurfelBuffers
{
  int MaxSurfels;
  FRWBuffer VPLFlux;
};

/* 6489 */
const struct __declspec(align(4)) FReadOnlyCVARCache
{
  bool bEnablePointLightShadows;
  bool bEnableStationarySkylight;
  bool bEnableAtmosphericFog;
  bool bEnableLowQualityLightmaps;
  bool bEnableVertexFoggingForOpaque;
  bool bAllowStaticLighting;
  bool bMobileAllowMovableDirectionalLights;
  bool bMobileAllowDistanceFieldShadows;
  bool bMobileEnableStaticAndCSMShadowReceivers;
  int NumMobileMovablePointLights;
  bool bMobileMovablePointLightsUseStaticBranch;
  bool bInitialized;
};

/* 6703 */
struct __declspec(align(8)) physx::PxConstraintInfo
{
  physx::PxConstraint *constraint;
  void *externalReference;
  unsigned int type;
};

/* 6705 */
struct physx::PxFlags<enum physx::PxContactPairHeaderFlag::Enum,unsigned short>
{
  unsigned __int16 mBits;
};

/* 6710 */
const struct __declspec(align(8)) physx::PxContactPairHeader
{
  physx::PxRigidActor *actors[2];
  const char *extraDataStream;
  unsigned __int16 extraDataStreamSize;
  physx::PxFlags<enum physx::PxContactPairHeaderFlag::Enum,unsigned short> flags;
  physx::PxContactPair *pairs;
  unsigned int nbPairs;
};

/* 6707 */
struct physx::PxFlags<enum physx::PxContactPairFlag::Enum,unsigned short>
{
  unsigned __int16 mBits;
};

/* 6708 */
struct physx::PxFlags<enum physx::PxPairFlag::Enum,unsigned short>
{
  unsigned __int16 mBits;
};

/* 6709 */
const struct __declspec(align(8)) physx::PxContactPair
{
  physx::PxShape *shapes[2];
  const char *contactPatches;
  const char *contactPoints;
  const float *contactImpulses;
  unsigned int requiredBufferSize;
  char contactCount;
  char patchCount;
  unsigned __int16 contactStreamSize;
  physx::PxFlags<enum physx::PxContactPairFlag::Enum,unsigned short> flags;
  physx::PxFlags<enum physx::PxPairFlag::Enum,unsigned short> events;
  unsigned int internalData[2];
};

/* 1059 */
enum physx::PxContactPairExtraDataType::Enum
{
  ePRE_SOLVER_VELOCITY = 0x0,
  ePOST_SOLVER_VELOCITY = 0x1,
  eCONTACT_EVENT_POSE = 0x2,
  eCONTACT_PAIR_INDEX = 0x3,
};

/* 1118 */
typedef physx::PxContactPairExtraDataType::Enum physx::PxPairFlag::Enum;

/* 6711 */
struct physx::PxFlags<enum physx::PxTriggerPairFlag::Enum,unsigned char>
{
  char mBits;
};

/* 6712 */
struct __declspec(align(4)) physx::PxTriggerPair
{
  physx::PxShape *triggerShape;
  physx::PxRigidActor *triggerActor;
  physx::PxShape *otherShape;
  physx::PxRigidActor *otherActor;
  physx::PxPairFlag::Enum status;
  physx::PxFlags<enum physx::PxTriggerPairFlag::Enum,unsigned char> flags;
};

/* 6713 */
const struct __cppobj physx::PxRigidBody : physx::PxRigidActor
{
};

/* 6714 */
struct physx::PxQuat
{
  float x;
  float y;
  float z;
  float w;
};

/* 6715 */
struct physx::PxVec3
{
  float x;
  float y;
  float z;
};

/* 6716 */
const struct physx::PxTransform
{
  physx::PxQuat q;
  physx::PxVec3 p;
};

/* 6722 */
struct physx::PxContactSet
{
  unsigned int mCount;
  physx::PxModifiableContact *mContacts;
};

/* 6723 */
struct physx::PxContactModifyPair
{
  physx::PxRigidActor *actor[2];
  physx::PxShape *shape[2];
  physx::PxTransform transform[2];
  physx::PxContactSet contacts;
};

/* 6706 */
struct __cppobj physx::PxShape : physx::PxBase
{
  void *userData;
};

/* 6676 */
struct physx::PxBaseTaskVtbl
{
  void *(__cdecl *__vecDelDtor)(physx::PxBaseTask *this, unsigned int);
  void (__cdecl *run)(physx::PxBaseTask *this);
  const char *(__cdecl *getName)(physx::PxBaseTask *this);
  void (__cdecl *addReference)(physx::PxBaseTask *this);
  void (__cdecl *removeReference)(physx::PxBaseTask *this);
  int (__cdecl *getReference)(physx::PxBaseTask *this);
  void (__cdecl *release)(physx::PxBaseTask *this);
};

/* 6678 */
struct physx::PxTaskManager
{
  physx::PxTaskManagerVtbl *vfptr;
};

/* 6743 */
struct nvidia::apex::RenderDataProviderVtbl
{
  void (__cdecl *lockRenderResources)(nvidia::apex::RenderDataProvider *this);
  void (__cdecl *unlockRenderResources)(nvidia::apex::RenderDataProvider *this);
  void (__cdecl *updateRenderResources)(nvidia::apex::RenderDataProvider *this, bool, void *);
};

/* 6750 */
union $2E3356643FDFC7D383E48F3DD9D2280C
{
  void (__cdecl *~Context)(nvidia::apex::Context *this);
  void *(__cdecl *__vecDelDtor)(nvidia::apex::Context *this, unsigned int);
};

/* 6751 */
struct nvidia::apex::ContextVtbl
{
  void (__cdecl *removeAllActors)(nvidia::apex::Context *this);
  nvidia::apex::RenderableIterator *(__cdecl *createRenderableIterator)(nvidia::apex::Context *this);
  void (__cdecl *releaseRenderableIterator)(nvidia::apex::Context *this, nvidia::apex::RenderableIterator *);
  $2E3356643FDFC7D383E48F3DD9D2280C ___u3;
};

/* 6747 */
struct nvidia::apex::RWLockableVtbl
{
  void (__cdecl *acquireReadLock)(nvidia::apex::RWLockable *this, const char *, const unsigned int);
  void (__cdecl *acquireWriteLock)(nvidia::apex::RWLockable *this, const char *, const unsigned int);
  void (__cdecl *releaseReadLock)(nvidia::apex::RWLockable *this);
  void (__cdecl *releaseWriteLock)(nvidia::apex::RWLockable *this);
};

/* 6145 */
struct __cppobj UVectorField : UObject
{
  FBox Bounds;
  float Intensity;
};

/* 6147 */
struct FVectorFieldInstance
{
  FVectorFieldResource *Resource;
  FBox WorldBounds;
  __declspec(align(16)) FMatrix VolumeToWorldNoScale;
  FMatrix WorldToVolume;
  FMatrix VolumeToWorld;
  float Tightness;
  float Intensity;
  int Index;
  unsigned __int32 bTileX : 1;
  unsigned __int32 bTileY : 1;
  unsigned __int32 bTileZ : 1;
  unsigned __int32 bUseFixDT : 1;
  bool bInstancedResource;
};

/* 155 */
enum ETrailWidthMode
{
  ETrailWidthMode_FromCentre = 0x0,
  ETrailWidthMode_FromFirst = 0x1,
  ETrailWidthMode_FromSecond = 0x2,
};

/* 6278 */
struct FParticleEmitterInstanceVtbl
{
  void *(__cdecl *__vecDelDtor)(FParticleEmitterInstance *this, unsigned int);
  _BYTE gap8[64];
  void (__cdecl *Tick_ModuleFinalUpdate)(FParticleEmitterInstance *this, float, UParticleLODLevel *);
  void (__cdecl *SetCurrentLODIndex)(FParticleEmitterInstance *this, int, bool);
  void (__cdecl *Rewind)(FParticleEmitterInstance *this);
  FBox *(__cdecl *GetBoundingBox)(FParticleEmitterInstance *this, FBox *result);
  void (__cdecl *UpdateBoundingBox)(FParticleEmitterInstance *this, float);
  void (__cdecl *ForceUpdateBoundingBox)(FParticleEmitterInstance *this);
  unsigned int (__cdecl *RequiredBytes)(FParticleEmitterInstance *this);
  char *(__cdecl *GetTypeDataModuleInstanceData)(FParticleEmitterInstance *this);
  unsigned int (__cdecl *CalculateParticleStride)(FParticleEmitterInstance *this, unsigned int);
  void (__cdecl *ResetBurstList)(FParticleEmitterInstance *this);
  float (__cdecl *GetCurrentBurstRateOffset)(FParticleEmitterInstance *this, float *, int *);
  void (__cdecl *ResetParticleParameters)(FParticleEmitterInstance *this, float);
  void (__cdecl *UpdateOrbitData)(FParticleEmitterInstance *this, float);
  void (__cdecl *ParticlePrefetch)(FParticleEmitterInstance *this);
  float (__cdecl *Spawn)(FParticleEmitterInstance *this, float);
  void (__cdecl *ForceSpawn)(FParticleEmitterInstance *this, float, int, int, FVector *, FVector *);
  void (__cdecl *PreSpawn)(FParticleEmitterInstance *this, FBaseParticle *, FVector *, FVector *);
  void (__cdecl *PostSpawn)(FParticleEmitterInstance *this, FBaseParticle *, float, float);
  bool (__cdecl *HasCompleted)(FParticleEmitterInstance *this);
  void (__cdecl *KillParticles)(FParticleEmitterInstance *this);
  void (__cdecl *KillParticle)(FParticleEmitterInstance *this, int);
  void (__cdecl *KillParticlesForced)(FParticleEmitterInstance *this, bool);
  void (__cdecl *SetHaltSpawning)(FParticleEmitterInstance *this, bool);
  void (__cdecl *SetHaltSpawningExternal)(FParticleEmitterInstance *this, bool);
  FBaseParticle *(__cdecl *GetParticle)(FParticleEmitterInstance *this, int);
  FBaseParticle *(__cdecl *GetParticleDirect)(FParticleEmitterInstance *this, int);
  bool (__cdecl *IsDynamicDataRequired)(FParticleEmitterInstance *this, UParticleLODLevel *);
  FDynamicEmitterDataBase *(__cdecl *GetDynamicData)(FParticleEmitterInstance *this, bool, ERHIFeatureLevel::Type);
  FDynamicEmitterReplayDataBase *(__cdecl *GetReplayData)(FParticleEmitterInstance *this);
  void (__cdecl *GetAllocatedSize)(FParticleEmitterInstance *this, int *, int *);
  void (__cdecl *GetResourceSizeEx)(FParticleEmitterInstance *this, FResourceSizeEx *);
  void (__cdecl *ProcessParticleEvents)(FParticleEmitterInstance *this, float, bool);
  void (__cdecl *OnDeactivateSystem)(FParticleEmitterInstance *this);
  int (__cdecl *GetMeshRotationOffset)(FParticleEmitterInstance *this);
  bool (__cdecl *IsMeshRotationActive)(FParticleEmitterInstance *this);
  void (__cdecl *SetMeshMaterials)(FParticleEmitterInstance *this, TArray<UMaterialInterface *,FDefaultAllocator> *);
  void (__cdecl *GatherMaterialRelevance)(FParticleEmitterInstance *this, FMaterialRelevance *, UParticleLODLevel *, ERHIFeatureLevel::Type);
  void (__cdecl *OnEmitterInstanceKilled)(FParticleEmitterInstance *this, FParticleEmitterInstance *);
  void (__cdecl *SetBeamEndPoint)(FParticleEmitterInstance *this, FVector);
  void (__cdecl *SetBeamSourcePoint)(FParticleEmitterInstance *this, FVector, int);
  void (__cdecl *SetBeamSourceTangent)(FParticleEmitterInstance *this, FVector, int);
  void (__cdecl *SetBeamSourceStrength)(FParticleEmitterInstance *this, float, int);
  void (__cdecl *SetBeamTargetPoint)(FParticleEmitterInstance *this, FVector, int);
  void (__cdecl *SetBeamTargetTangent)(FParticleEmitterInstance *this, FVector, int);
  void (__cdecl *SetBeamTargetStrength)(FParticleEmitterInstance *this, float, int);
  bool (__cdecl *GetBeamEndPoint)(FParticleEmitterInstance *this, FVector *);
  bool (__cdecl *GetBeamSourcePoint)(FParticleEmitterInstance *this, int, FVector *);
  bool (__cdecl *GetBeamSourceTangent)(FParticleEmitterInstance *this, int, FVector *);
  bool (__cdecl *GetBeamSourceStrength)(FParticleEmitterInstance *this, int, float *);
  bool (__cdecl *GetBeamTargetPoint)(FParticleEmitterInstance *this, int, FVector *);
  bool (__cdecl *GetBeamTargetTangent)(FParticleEmitterInstance *this, int, FVector *);
  bool (__cdecl *GetBeamTargetStrength)(FParticleEmitterInstance *this, int, float *);
  void (__cdecl *ApplyWorldOffset)(FParticleEmitterInstance *this, FVector, bool);
  bool (__cdecl *IsTrailEmitter)(FParticleEmitterInstance *this);
  void (__cdecl *BeginTrail)(FParticleEmitterInstance *this);
  void (__cdecl *EndTrail)(FParticleEmitterInstance *this);
  void (__cdecl *SetTrailSourceData)(FParticleEmitterInstance *this, FName, FName, ETrailWidthMode, float);
  void (__cdecl *Tick_MaterialOverrides)(FParticleEmitterInstance *this, int);
  bool (__cdecl *FillReplayData)(FParticleEmitterInstance *this, FDynamicEmitterReplayDataBase *);
};

/* 6150 */
struct TEnumAsByte<enum EEmitterRenderMode>
{
  char Value;
};

/* 6151 */
struct TArray<UParticleLODLevel *,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 6154 */
struct TSparseArray<TSetElement<TTuple<UParticleModule *,unsigned int> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<24,8> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 6155 */
struct __declspec(align(8)) TSet<TTuple<UParticleModule *,unsigned int>,TDefaultMapHashableKeyFuncs<UParticleModule *,unsigned int,0>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<TTuple<UParticleModule *,unsigned int> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 6156 */
struct TMapBase<UParticleModule *,unsigned int,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<UParticleModule *,unsigned int,0> >
{
  TSet<TTuple<UParticleModule *,unsigned int>,TDefaultMapHashableKeyFuncs<UParticleModule *,unsigned int,0>,FDefaultSetAllocator> Pairs;
};

/* 6157 */
struct __cppobj TSortableMapBase<UParticleModule *,unsigned int,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<UParticleModule *,unsigned int,0> > : TMapBase<UParticleModule *,unsigned int,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<UParticleModule *,unsigned int,0> >
{
};

/* 6158 */
struct __cppobj TMap<UParticleModule *,unsigned int,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<UParticleModule *,unsigned int,0> > : TSortableMapBase<UParticleModule *,unsigned int,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<UParticleModule *,unsigned int,0> >
{
};

/* 6166 */
struct __cppobj UParticleEmitter : UObject
{
  FName EmitterName;
  int SubUVDataOffset;
  TEnumAsByte<enum EEmitterRenderMode> EmitterRenderMode;
  TArray<UParticleLODLevel *,FDefaultAllocator> LODLevels;
  unsigned __int32 ConvertedModules : 1;
  int PeakActiveParticles;
  int InitialAllocationCount;
  float MediumDetailSpawnRateScale_DEPRECATED;
  float QualityLevelSpawnRateScale;
  TEnumAsByte<enum EDetailMode> DetailMode_DEPRECATED;
  unsigned int DetailModeBitmask;
  unsigned __int32 bIsSoloing : 1;
  unsigned __int32 bCookedOut : 1;
  unsigned __int32 bDisabledLODsKeepEmitterAlive : 1;
  unsigned __int32 bDisableWhenInsignficant : 1;
  _BYTE SignificanceLevel[1];
  unsigned __int32 bUseLegacySpawningBehavior : 1;
  unsigned __int32 bRequiresLoopNotification : 1;
  unsigned __int32 bAxisLockEnabled : 1;
  unsigned __int32 bMeshRotationActive : 1;
  TEnumAsByte<enum EParticleAxisLock> LockAxisFlags;
  TMap<UParticleModule *,unsigned int,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<UParticleModule *,unsigned int,0> > ModuleOffsetMap;
  TMap<UParticleModule *,unsigned int,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<UParticleModule *,unsigned int,0> > ModuleInstanceOffsetMap;
  TArray<UMaterialInterface *,FDefaultAllocator> MeshMaterials;
  int DynamicParameterDataOffset;
  int LightDataOffset;
  float LightVolumetricScatteringIntensity;
  int CameraPayloadOffset;
  int ParticleSize;
  int ReqInstanceBytes;
  FVector2D PivotOffset;
  int TypeDataOffset;
  int TypeDataInstanceOffset;
  unsigned __int32 bRemoveHMDRollInVR : 1;
  float MinFacingCameraBlendDistance;
  float MaxFacingCameraBlendDistance;
  TArray<UParticleModule *,FDefaultAllocator> ModulesNeedingInstanceData;
  USubUVAnimation *SubUVAnimation;
};

/* 6218 */
struct TArray<UParticleModuleSpawnBase *,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 6219 */
struct TArray<UParticleModuleOrbit *,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 6220 */
struct TArray<UParticleModuleEventReceiverBase *,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 6221 */
struct __cppobj UParticleLODLevel : UObject
{
  int Level;
  unsigned __int32 bEnabled : 1;
  UParticleModuleRequired *RequiredModule;
  TArray<UParticleModule *,FDefaultAllocator> Modules;
  UParticleModuleTypeDataBase *TypeDataModule;
  UParticleModuleSpawn *SpawnModule;
  UParticleModuleEventGenerator *EventGenerator;
  TArray<UParticleModuleSpawnBase *,FDefaultAllocator> SpawningModules;
  TArray<UParticleModule *,FDefaultAllocator> SpawnModules;
  TArray<UParticleModule *,FDefaultAllocator> UpdateModules;
  TArray<UParticleModuleOrbit *,FDefaultAllocator> OrbitModules;
  TArray<UParticleModuleEventReceiverBase *,FDefaultAllocator> EventReceiverModules;
  unsigned __int32 ConvertedModules : 1;
  int PeakActiveParticles;
};

/* 6199 */
struct __cppobj UParticleModule : UObject
{
  unsigned __int32 bSpawnModule : 1;
  unsigned __int32 bUpdateModule : 1;
  unsigned __int32 bFinalUpdateModule : 1;
  unsigned __int32 bUpdateForGPUEmitter : 1;
  unsigned __int32 bCurvesAsColor : 1;
  unsigned __int32 b3DDrawMode : 1;
  unsigned __int32 bSupported3DDrawMode : 1;
  unsigned __int32 bEnabled : 1;
  unsigned __int32 bEditable : 1;
  unsigned __int32 LODDuplicate : 1;
  unsigned __int32 bSupportsRandomSeed : 1;
  unsigned __int32 bRequiresLoopingNotification : 1;
  char LODValidity;
};

/* 6201 */
struct TEnumAsByte<enum EParticleSortMode>
{
  char Value;
};

/* 6207 */
struct TEnumAsByte<enum EParticleBurstMethod>
{
  char Value;
};

/* 6208 */
struct TArray<FParticleBurst,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 6209 */
struct TEnumAsByte<enum EParticleSubUVInterpMethod>
{
  char Value;
};

/* 6160 */
struct TEnumAsByte<enum ESubUVBoundingVertexCount>
{
  char Value;
};

/* 6161 */
struct TEnumAsByte<enum EOpacitySourceMode>
{
  char Value;
};

/* 6210 */
struct TEnumAsByte<enum EEmitterNormalsMode>
{
  char Value;
};

/* 6163 */
struct FSubUVDerivedData
{
  TArray<FVector2D,FDefaultAllocator> BoundingGeometry;
};

/* 6211 */
struct __cppobj UParticleModuleRequired : UParticleModule
{
  UMaterialInterface *Material;
  FVector EmitterOrigin;
  FRotator EmitterRotation;
  TEnumAsByte<enum EParticleScreenAlignment> ScreenAlignment;
  float MinFacingCameraBlendDistance;
  float MaxFacingCameraBlendDistance;
  unsigned __int32 bUseLocalSpace : 1;
  unsigned __int32 bKillOnDeactivate : 1;
  unsigned __int32 bKillOnCompleted : 1;
  TEnumAsByte<enum EParticleSortMode> SortMode;
  unsigned __int32 bUseLegacyEmitterTime : 1;
  unsigned __int32 bRemoveHMDRoll : 1;
  float EmitterDuration;
  float EmitterDurationLow;
  unsigned __int32 bEmitterDurationUseRange : 1;
  unsigned __int32 bDurationRecalcEachLoop : 1;
  int EmitterLoops;
  FRawDistributionFloat SpawnRate;
  TEnumAsByte<enum EParticleBurstMethod> ParticleBurstMethod;
  TArray<FParticleBurst,FDefaultAllocator> BurstList;
  float EmitterDelay;
  float EmitterDelayLow;
  unsigned __int32 bEmitterDelayUseRange : 1;
  unsigned __int32 bDelayFirstLoopOnly : 1;
  TEnumAsByte<enum EParticleSubUVInterpMethod> InterpolationMethod;
  int SubImages_Horizontal;
  int SubImages_Vertical;
  unsigned __int32 bScaleUV : 1;
  float RandomImageTime;
  int RandomImageChanges;
  unsigned __int32 bOverrideSystemMacroUV : 1;
  FVector MacroUVPosition;
  float MacroUVRadius;
  unsigned __int32 bUseMaxDrawCount : 1;
  int MaxDrawCount;
  _BYTE UVFlippingMode[1];
  UTexture2D *CutoutTexture;
  TEnumAsByte<enum ESubUVBoundingVertexCount> BoundingMode;
  TEnumAsByte<enum EOpacitySourceMode> OpacitySourceMode;
  float AlphaThreshold;
  TEnumAsByte<enum EEmitterNormalsMode> EmitterNormalsMode;
  FVector NormalsSphereCenter;
  FVector NormalsCylinderDirection;
  unsigned __int32 bOrbitModuleAffectsVelocityAlignment : 1;
  TArray<FName,FDefaultAllocator> NamedMaterialOverrides;
  FSubUVDerivedData DerivedData;
  FRenderCommandFence ReleaseFence;
  FSubUVBoundingGeometryBuffer *BoundingGeometryBuffer;
};

/* 6213 */
struct __cppobj __declspec(align(8)) UParticleModuleSpawnBase : UParticleModule
{
  unsigned __int32 bProcessSpawnRate : 1;
  unsigned __int32 bProcessBurstList : 1;
};

/* 6214 */
struct __cppobj __declspec(align(8)) UParticleModuleSpawn : UParticleModuleSpawnBase
{
  FRawDistributionFloat Rate;
  FRawDistributionFloat RateScale;
  TEnumAsByte<enum EParticleBurstMethod> ParticleBurstMethod;
  TArray<FParticleBurst,FDefaultAllocator> BurstList;
  FRawDistributionFloat BurstScale;
  unsigned __int32 bApplyGlobalSpawnRateScale : 1;
};

/* 6281 */
struct __cppobj UParticleModuleSpawnPerUnit : UParticleModuleSpawnBase
{
  float UnitScalar;
  FRawDistributionFloat SpawnPerUnit;
  unsigned __int32 bIgnoreSpawnRateWhenMoving : 1;
  float MovementTolerance;
  float MaxFrameDistance;
  unsigned __int32 bIgnoreMovementAlongX : 1;
  unsigned __int32 bIgnoreMovementAlongY : 1;
  unsigned __int32 bIgnoreMovementAlongZ : 1;
};

/* 6204 */
struct __cppobj UDistribution : UObject, FCurveEdInterface
{
};

/* 6285 */
struct __cppobj __declspec(align(8)) UDistributionVector : UDistribution
{
  unsigned __int32 bCanBeBaked : 1;
  unsigned __int32 bIsDirty : 1;
  unsigned __int32 bBakedDataSuccesfully : 1;
};

/* 6205 */
struct __cppobj __declspec(align(8)) UDistributionFloat : UDistribution
{
  unsigned __int32 bCanBeBaked : 1;
  unsigned __int32 bIsDirty : 1;
  unsigned __int32 bBakedDataSuccesfully : 1;
};

/* 6287 */
struct __cppobj TUniformBufferRef<FGPUSpriteEmitterUniformParameters> : TRefCountPtr<FRHIUniformBuffer>
{
};

/* 6288 */
struct __cppobj TUniformBufferRef<FParticleSimulationParameters> : TRefCountPtr<FRHIUniformBuffer>
{
};

/* 6289 */
struct FParticleEmitterSimulationResources
{
  TUniformBufferRef<FParticleSimulationParameters> SimulationUniformBuffer;
  float GlobalVectorFieldScale;
  float GlobalVectorFieldTightness;
};

/* 6290 */
struct FTexelAllocation
{
  unsigned __int16 X;
  unsigned __int16 Y;
  unsigned __int16 Size;
};

/* 6291 */
struct __declspec(align(16)) FGPUSpriteEmitterUniformParameters
{
  FVector4 ColorCurve;
  FVector4 ColorScale;
  FVector4 ColorBias;
  FVector4 MiscCurve;
  FVector4 MiscScale;
  FVector4 MiscBias;
  FVector4 SizeBySpeed;
  FVector4 SubImageSize;
  FVector4 TangentSelector;
  FVector CameraFacingBlend;
  float RemoveHMDRoll;
  float RotationRateScale;
  float RotationBias;
  float CameraMotionBlurAmount;
  __declspec(align(8)) FVector2D PivotOffset;
};

/* 6292 */
struct __declspec(align(16)) FParticleSimulationParameters
{
  FVector4 AttributeCurve;
  FVector4 AttributeCurveScale;
  FVector4 AttributeCurveBias;
  FVector4 AttributeScale;
  FVector4 AttributeBias;
  FVector4 MiscCurve;
  FVector4 MiscScale;
  FVector4 MiscBias;
  FVector Acceleration;
  __declspec(align(8)) FVector OrbitOffsetBase;
  __declspec(align(8)) FVector OrbitOffsetRange;
  __declspec(align(8)) FVector OrbitFrequencyBase;
  __declspec(align(8)) FVector OrbitFrequencyRange;
  __declspec(align(8)) FVector OrbitPhaseBase;
  __declspec(align(8)) FVector OrbitPhaseRange;
  float CollisionRadiusScale;
  float CollisionRadiusBias;
  float CollisionTimeBias;
  float CollisionRandomSpread;
  float CollisionRandomDistribution;
  float OneMinusFriction;
};

/* 6293 */
struct __cppobj __declspec(align(16)) FGPUSpriteResources : FRenderResource
{
  TUniformBufferRef<FGPUSpriteEmitterUniformParameters> UniformBuffer;
  FParticleEmitterSimulationResources EmitterSimulationResources;
  FTexelAllocation ColorTexelAllocation;
  FTexelAllocation MiscTexelAllocation;
  FTexelAllocation SimulationAttrTexelAllocation;
  FGPUSpriteEmitterUniformParameters UniformParameters;
  FParticleSimulationParameters SimulationParameters;
  FThreadSafeCounter NumRefs;
};

/* 6059 */
struct FRHICommandBase
{
  FRHICommandBaseVtbl *vfptr;
  FRHICommandBase *Next;
};

/* 6062 */
struct IRHIComputeContext
{
  IRHIComputeContextVtbl *vfptr;
};

/* 6066 */
struct IRHIDeprecatedContext
{
  IRHIDeprecatedContextVtbl *vfptr;
};

/* 6071 */
struct __declspec(align(4)) FRHIRenderPassInfo::FColorEntry
{
  FRHITexture *RenderTarget;
  FRHITexture *ResolveTarget;
  int ArraySlice;
  char MipIndex;
  _BYTE Action[1];
};

/* 6073 */
struct FRHIRenderPassInfo::FDepthStencilEntry
{
  FRHITexture *DepthStencilTarget;
  FRHITexture *ResolveTarget;
  _BYTE Action[1];
  FExclusiveDepthStencil ExclusiveDepthStencil;
};

/* 358 */
enum ECubeFace
{
  CubeFace_PosX = 0x0,
  CubeFace_NegX = 0x1,
  CubeFace_PosY = 0x2,
  CubeFace_NegY = 0x3,
  CubeFace_PosZ = 0x4,
  CubeFace_NegZ = 0x5,
  CubeFace_MAX = 0x6,
};

/* 6074 */
struct FResolveRect
{
  int X1;
  int Y1;
  int X2;
  int Y2;
};

/* 6075 */
struct FResolveParams
{
  ECubeFace CubeFace;
  FResolveRect Rect;
  FResolveRect DestRect;
  int MipIndex;
  int SourceArrayIndex;
  int DestArrayIndex;
};

/* 6076 */
struct __declspec(align(8)) FRHIRenderPassInfo
{
  FRHIRenderPassInfo::FColorEntry ColorRenderTargets[8];
  FRHIRenderPassInfo::FDepthStencilEntry DepthStencilRenderTarget;
  FResolveParams ResolveParameters;
  unsigned int NumOcclusionQueries;
  bool bOcclusionQueries;
  bool bGeneratingMips;
  int UAVIndex;
  int NumUAVs;
  TRefCountPtr<FRHIUnorderedAccessView> UAVs[8];
  bool bIsMSAA;
};

/* 6077 */
struct __cppobj IRHICommandContext : IRHIComputeContext, IRHIDeprecatedContext
{
  FRHIRenderPassInfo RenderPassInfo;
};

/* 5237 */
struct __declspec(align(8)) FMemStackBase::FTaggedMemory
{
  FMemStackBase::FTaggedMemory *Next;
  int DataSize;
};

/* 4871 */
struct FNetworkPredictionData_ClientVtbl
{
  void *(__cdecl *__vecDelDtor)(FNetworkPredictionData_Client *this, unsigned int);
};

/* 4890 */
struct __cppobj TWeakObjectPtr<UAnimMontage,FWeakObjectPtr> : FWeakObjectPtr
{
};

/* 4885 */
struct FSavedMove_Character
{
  FSavedMove_CharacterVtbl *vfptr;
  __declspec(align(16)) ACharacter *CharacterOwner;
  unsigned __int32 bPressedJump : 1;
  unsigned __int32 bWantsToCrouch : 1;
  unsigned __int32 bForceMaxAccel : 1;
  unsigned __int32 bForceNoCombine : 1;
  unsigned __int32 bOldTimeStampBeforeReset : 1;
  unsigned __int32 bWasJumping : 1;
  float TimeStamp;
  float DeltaTime;
  float CustomTimeDilation;
  float JumpKeyHoldTime;
  float JumpForceTimeRemaining;
  int JumpMaxCount;
  int JumpCurrentCount;
  char MovementMode;
  char StartPackedMovementMode;
  FVector StartLocation;
  FVector StartRelativeLocation;
  FVector StartVelocity;
  FFindFloorResult StartFloor;
  FRotator StartRotation;
  FRotator StartControlRotation;
  FQuat StartBaseRotation;
  float StartCapsuleRadius;
  float StartCapsuleHalfHeight;
  TWeakObjectPtr<UPrimitiveComponent,FWeakObjectPtr> StartBase;
  FName StartBoneName;
  unsigned int StartActorOverlapCounter;
  unsigned int StartComponentOverlapCounter;
  char EndPackedMovementMode;
  FVector SavedLocation;
  FRotator SavedRotation;
  FVector SavedVelocity;
  FVector SavedRelativeLocation;
  FRotator SavedControlRotation;
  TWeakObjectPtr<UPrimitiveComponent,FWeakObjectPtr> EndBase;
  FName EndBoneName;
  unsigned int EndActorOverlapCounter;
  unsigned int EndComponentOverlapCounter;
  FVector Acceleration;
  float MaxSpeed;
  FVector AccelNormal;
  float AccelMag;
  TWeakObjectPtr<UAnimMontage,FWeakObjectPtr> RootMotionMontage;
  float RootMotionTrackPosition;
  FRootMotionMovementParams RootMotionMovement;
  FRootMotionSourceGroup SavedRootMotion;
  float AccelDotThreshold;
  float AccelMagThreshold;
  float AccelDotThresholdCombine;
  float MaxSpeedThresholdCombine;
};

/* 4873 */
struct FNetworkPredictionData_ServerVtbl
{
  void *(__cdecl *__vecDelDtor)(FNetworkPredictionData_Server *this, unsigned int);
};

/* 68427 */
const struct __declspec(align(8)) ksRacing::RaceStateEvent
{
  float sessionStartTime;
  float sessionEndTime;
  long double timeStamp;
  _BYTE sessionPhase[1];
};

/* 68441 */
const struct __declspec(align(8)) ksRacing::RaceStartTimeEvent
{
  long double timeStamp;
  float startTime;
};

/* 68469 */
const struct __declspec(align(4)) ksRacing::SwapDriverEvent
{
  long double timeStamp;
  unsigned __int16 carIndex;
  unsigned __int16 driverIndex;
  bool isStartingDriver;
};

/* 68496 */
const struct __declspec(align(8)) ksRacing::AddOnlineEvent
{
  ksRacing::CarInfo carInfo;
  unsigned __int16 carIndex;
  ksRacing::DriverInfo driverInfo;
  unsigned __int16 driverIndex;
  char connectedCarId;
};

/* 68385 */
struct std::_Func_base<void,ksRacing::EntryListUpdatedEvent const &>Vtbl
{
  std::_Func_base<void,ksRacing::EntryListUpdatedEvent const &> *(__cdecl *_Copy)(std::_Func_base<void,ksRacing::EntryListUpdatedEvent const &> *this, void *);
  std::_Func_base<void,ksRacing::EntryListUpdatedEvent const &> *(__cdecl *_Move)(std::_Func_base<void,ksRacing::EntryListUpdatedEvent const &> *this, void *);
  void (__cdecl *_Do_call)(std::_Func_base<void,ksRacing::EntryListUpdatedEvent const &> *this, ksRacing::EntryListUpdatedEvent *);
  type_info *(__cdecl *_Target_type)(std::_Func_base<void,ksRacing::EntryListUpdatedEvent const &> *this);
  void (__cdecl *_Delete_this)(std::_Func_base<void,ksRacing::EntryListUpdatedEvent const &> *this, bool);
  const void *(__cdecl *_Get)(std::_Func_base<void,ksRacing::EntryListUpdatedEvent const &> *this);
};

/* 68517 */
struct std::_Func_base<void,ksRacing::UpdateOfficialPositionEvent const &>Vtbl
{
  std::_Func_base<void,ksRacing::UpdateOfficialPositionEvent const &> *(__cdecl *_Copy)(std::_Func_base<void,ksRacing::UpdateOfficialPositionEvent const &> *this, void *);
  std::_Func_base<void,ksRacing::UpdateOfficialPositionEvent const &> *(__cdecl *_Move)(std::_Func_base<void,ksRacing::UpdateOfficialPositionEvent const &> *this, void *);
  void (__cdecl *_Do_call)(std::_Func_base<void,ksRacing::UpdateOfficialPositionEvent const &> *this, ksRacing::UpdateOfficialPositionEvent *);
  type_info *(__cdecl *_Target_type)(std::_Func_base<void,ksRacing::UpdateOfficialPositionEvent const &> *this);
  void (__cdecl *_Delete_this)(std::_Func_base<void,ksRacing::UpdateOfficialPositionEvent const &> *this, bool);
  const void *(__cdecl *_Get)(std::_Func_base<void,ksRacing::UpdateOfficialPositionEvent const &> *this);
};

/* 68531 */
struct std::_Func_base<void,ksRacing::UpdateCarSystems const &>Vtbl
{
  std::_Func_base<void,ksRacing::UpdateCarSystems const &> *(__cdecl *_Copy)(std::_Func_base<void,ksRacing::UpdateCarSystems const &> *this, void *);
  std::_Func_base<void,ksRacing::UpdateCarSystems const &> *(__cdecl *_Move)(std::_Func_base<void,ksRacing::UpdateCarSystems const &> *this, void *);
  void (__cdecl *_Do_call)(std::_Func_base<void,ksRacing::UpdateCarSystems const &> *this, ksRacing::UpdateCarSystems *);
  type_info *(__cdecl *_Target_type)(std::_Func_base<void,ksRacing::UpdateCarSystems const &> *this);
  void (__cdecl *_Delete_this)(std::_Func_base<void,ksRacing::UpdateCarSystems const &> *this, bool);
  const void *(__cdecl *_Get)(std::_Func_base<void,ksRacing::UpdateCarSystems const &> *this);
};

/* 68544 */
struct std::_Func_base<void,unsigned short const &>Vtbl
{
  std::_Func_base<void,unsigned short const &> *(__cdecl *_Copy)(std::_Func_base<void,unsigned short const &> *this, void *);
  std::_Func_base<void,unsigned short const &> *(__cdecl *_Move)(std::_Func_base<void,unsigned short const &> *this, void *);
  void (__cdecl *_Do_call)(std::_Func_base<void,unsigned short const &> *this, const unsigned __int16 *);
  type_info *(__cdecl *_Target_type)(std::_Func_base<void,unsigned short const &> *this);
  void (__cdecl *_Delete_this)(std::_Func_base<void,unsigned short const &> *this, bool);
  const void *(__cdecl *_Get)(std::_Func_base<void,unsigned short const &> *this);
};

/* 68640 */
struct std::_Func_base<void,ksRacing::Lap const &>Vtbl
{
  std::_Func_base<void,ksRacing::Lap const &> *(__cdecl *_Copy)(std::_Func_base<void,ksRacing::Lap const &> *this, void *);
  std::_Func_base<void,ksRacing::Lap const &> *(__cdecl *_Move)(std::_Func_base<void,ksRacing::Lap const &> *this, void *);
  void (__cdecl *_Do_call)(std::_Func_base<void,ksRacing::Lap const &> *this, ksRacing::Lap *);
  type_info *(__cdecl *_Target_type)(std::_Func_base<void,ksRacing::Lap const &> *this);
  void (__cdecl *_Delete_this)(std::_Func_base<void,ksRacing::Lap const &> *this, bool);
  const void *(__cdecl *_Get)(std::_Func_base<void,ksRacing::Lap const &> *this);
};

/* 68654 */
struct std::_Func_base<void,ksRacing::BestLap const &>Vtbl
{
  std::_Func_base<void,ksRacing::BestLap const &> *(__cdecl *_Copy)(std::_Func_base<void,ksRacing::BestLap const &> *this, void *);
  std::_Func_base<void,ksRacing::BestLap const &> *(__cdecl *_Move)(std::_Func_base<void,ksRacing::BestLap const &> *this, void *);
  void (__cdecl *_Do_call)(std::_Func_base<void,ksRacing::BestLap const &> *this, ksRacing::BestLap *);
  type_info *(__cdecl *_Target_type)(std::_Func_base<void,ksRacing::BestLap const &> *this);
  void (__cdecl *_Delete_this)(std::_Func_base<void,ksRacing::BestLap const &> *this, bool);
  const void *(__cdecl *_Get)(std::_Func_base<void,ksRacing::BestLap const &> *this);
};

/* 68673 */
struct std::_Func_base<void,ksRacing::InvestigationStart const &>Vtbl
{
  std::_Func_base<void,ksRacing::InvestigationStart const &> *(__cdecl *_Copy)(std::_Func_base<void,ksRacing::InvestigationStart const &> *this, void *);
  std::_Func_base<void,ksRacing::InvestigationStart const &> *(__cdecl *_Move)(std::_Func_base<void,ksRacing::InvestigationStart const &> *this, void *);
  void (__cdecl *_Do_call)(std::_Func_base<void,ksRacing::InvestigationStart const &> *this, ksRacing::InvestigationStart *);
  type_info *(__cdecl *_Target_type)(std::_Func_base<void,ksRacing::InvestigationStart const &> *this);
  void (__cdecl *_Delete_this)(std::_Func_base<void,ksRacing::InvestigationStart const &> *this, bool);
  const void *(__cdecl *_Get)(std::_Func_base<void,ksRacing::InvestigationStart const &> *this);
};

/* 68687 */
struct std::_Func_base<void,ksRacing::InvestigationEnd const &>Vtbl
{
  std::_Func_base<void,ksRacing::InvestigationEnd const &> *(__cdecl *_Copy)(std::_Func_base<void,ksRacing::InvestigationEnd const &> *this, void *);
  std::_Func_base<void,ksRacing::InvestigationEnd const &> *(__cdecl *_Move)(std::_Func_base<void,ksRacing::InvestigationEnd const &> *this, void *);
  void (__cdecl *_Do_call)(std::_Func_base<void,ksRacing::InvestigationEnd const &> *this, ksRacing::InvestigationEnd *);
  type_info *(__cdecl *_Target_type)(std::_Func_base<void,ksRacing::InvestigationEnd const &> *this);
  void (__cdecl *_Delete_this)(std::_Func_base<void,ksRacing::InvestigationEnd const &> *this, bool);
  const void *(__cdecl *_Get)(std::_Func_base<void,ksRacing::InvestigationEnd const &> *this);
};

/* 4368 */
struct TArray<FHistoricTextFormatData,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 266 */
enum EFormatArgumentType::Type
{
  Int = 0x0,
  UInt = 0x1,
  Float = 0x2,
  Double = 0x3,
  Text = 0x4,
  Gender = 0x5,
};

/* 4371 */
union $45FB821FCC50746E866DADCC1A2B31BA
{
  __int64 IntValue;
  unsigned __int64 UIntValue;
  float FloatValue;
  long double DoubleValue;
};

/* 4369 */
struct __cppobj TTypeCompatibleBytes<FText> : TAlignedBytes<24,8>
{
};

/* 4370 */
struct __declspec(align(8)) TOptional<FText>
{
  TTypeCompatibleBytes<FText> Value;
  bool bIsSet;
};

/* 4372 */
struct FFormatArgumentValue
{
  EFormatArgumentType::Type Type;
  $45FB821FCC50746E866DADCC1A2B31BA ___u1;
  TOptional<FText> TextValue;
};

/* 4375 */
struct __cppobj TTypeCompatibleBytes<FNumberFormattingOptions> : TAlignedBytes<24,4>
{
};

/* 4376 */
struct __declspec(align(4)) TOptional<FNumberFormattingOptions>
{
  TTypeCompatibleBytes<FNumberFormattingOptions> Value;
  bool bIsSet;
};

/* 4377 */
struct __declspec(align(8)) FHistoricTextNumericData
{
  _BYTE FormatType[1];
  FFormatArgumentValue SourceValue;
  TOptional<FNumberFormattingOptions> FormatOptions;
};

/* 4411 */
struct FNetDeltaSerializeInfo
{
  FBitWriter *Writer;
  FBitReader *Reader;
  TSharedPtr<INetDeltaBaseState,0> *NewState;
  INetDeltaBaseState *OldState;
  UPackageMap *Map;
  void *Data;
  UStruct *Struct;
  INetSerializeCB *NetSerializeCB;
  bool bUpdateUnmappedObjects;
  bool bOutSomeObjectsWereMapped;
  bool bCalledPreNetReceive;
  bool bOutHasMoreUnmapped;
  bool bGuidListsChanged;
  bool bIsWritingOnClient;
  UObject *Object;
  TSet<FNetworkGUID,DefaultKeyFuncs<FNetworkGUID,0>,FDefaultSetAllocator> *GatherGuidReferences;
  int *TrackedGuidMemoryBytes;
  FNetworkGUID *MoveGuidToUnmapped;
  FString DebugName;
};

/* 4414 */
const struct __declspec(align(8)) FPropertyTag
{
  FName Type;
  char BoolVal;
  FName Name;
  FName StructName;
  FName EnumName;
  FName InnerType;
  FName ValueType;
  int Size;
  int ArrayIndex;
  __int64 SizeOffset;
  FGuid StructGuid;
  char HasPropertyGuid;
  FGuid PropertyGuid;
};

/* 7807 */
struct INavigationQueryFilterInterface
{
  INavigationQueryFilterInterfaceVtbl *vfptr;
};

/* 8848 */
struct FNavDataGeneratorVtbl
{
  void *(__cdecl *__vecDelDtor)(FNavDataGenerator *this, unsigned int);
  _BYTE gap8[8];
  void (__cdecl *EnsureBuildCompletion)(FNavDataGenerator *this);
  void (__cdecl *CancelBuild)(FNavDataGenerator *this);
  void (__cdecl *TickAsyncBuild)(FNavDataGenerator *this, float);
  void (__cdecl *OnNavigationBoundsChanged)(FNavDataGenerator *this);
  void (__cdecl *RebuildDirtyAreas)(FNavDataGenerator *this, TArray<FNavigationDirtyArea,FDefaultAllocator> *);
  bool (__cdecl *IsBuildInProgress)(FNavDataGenerator *this, bool);
  int (__cdecl *GetNumRemaningBuildTasks)(FNavDataGenerator *this);
  int (__cdecl *GetNumRunningBuildTasks)(FNavDataGenerator *this);
  unsigned int (__cdecl *LogMemUsed)(FNavDataGenerator *this);
};

/* 5106 */
struct FKeyDetails
{
  FKey Key;
  FName MenuCategory;
  __int8 bIsModifierKey : 1;
  __int8 bIsGamepadKey : 1;
  __int8 bIsMouseButton : 1;
  __int8 bIsBindableInBlueprints : 1;
  __int8 bShouldUpdateAxisWithoutSamples : 1;
  _BYTE AxisType[1];
  TAttribute<FText> LongDisplayName;
  TAttribute<FText> ShortDisplayName;
};

/* 5109 */
struct __cppobj TTypeCompatibleBytes<TSharedRef<SWidget,0> > : TAlignedBytes<16,8>
{
};

/* 5110 */
struct __declspec(align(8)) TOptional<TSharedRef<SWidget,0> >
{
  TTypeCompatibleBytes<TSharedRef<SWidget,0> > Value;
  bool bIsSet;
};

/* 5161 */
struct FReplyBase
{
  bool bIsHandled;
  TSharedPtr<SWidget,0> EventHandler;
};

/* 5162 */
struct __cppobj TReplyBase<FCursorReply> : FReplyBase
{
};

/* 5259 */
struct TSharedPtr<SWindow,0>
{
  SWindow *Object;
  SharedPointerInternals::FSharedReferencer<0> SharedReferenceCount;
};

/* 5248 */
const struct __cppobj __declspec(align(8)) FCursorReply : TReplyBase<FCursorReply>
{
  TSharedPtr<SWindow,0> CursorWindow;
  TSharedPtr<SWidget,0> CursorWidget;
  EMouseCursor::Type MouseCursor;
};

/* 5280 */
struct TAlignedBytes<1,1>
{
  char Pad[1];
};

/* 5281 */
struct __cppobj TTypeCompatibleBytes<bool> : TAlignedBytes<1,1>
{
};

/* 5282 */
struct TOptional<bool>
{
  TTypeCompatibleBytes<bool> Value;
  bool bIsSet;
};

/* 759 */
enum FWindowActivateEvent::EActivationType
{
  EA_Activate = 0x0,
  EA_ActivateByMouse = 0x1,
  EA_Deactivate = 0x2,
};

/* 5288 */
struct TSharedRef<SWindow,0>
{
  SWindow *Object;
  SharedPointerInternals::FSharedReferencer<0> SharedReferenceCount;
};

/* 5289 */
const struct FWindowActivateEvent
{
  FWindowActivateEvent::EActivationType ActivationType;
  TSharedRef<SWindow,0> AffectedWindow;
};

/* 5283 */
struct __cppobj TReplyBase<FPopupMethodReply> : FReplyBase
{
};

/* 5284 */
struct __cppobj __declspec(align(8)) FPopupMethodReply : TReplyBase<FPopupMethodReply>
{
  _BYTE PopupMethod[1];
  _BYTE ShouldThrottle[1];
};

/* 5895 */
struct TEnumAsByte<enum EAspectRatioAxisConstraint>
{
  char Value;
};

/* 6579 */
struct TLinkedListBase<TLinkedList<FSceneViewStateReference *>,FSceneViewStateReference *,TLinkedListIterator>
{
  TLinkedList<FSceneViewStateReference *> *NextLink;
  TLinkedList<FSceneViewStateReference *> **PrevLink;
};

/* 6578 */
struct __cppobj TLinkedList<FSceneViewStateReference *> : TLinkedListBase<TLinkedList<FSceneViewStateReference *>,FSceneViewStateReference *,TLinkedListIterator>
{
  FSceneViewStateReference *Element;
};

/* 5896 */
struct FSceneViewStateReference
{
  FSceneViewStateReferenceVtbl *vfptr;
  FSceneViewStateInterface *Reference;
  TLinkedList<FSceneViewStateReference *> GlobalListLink;
};

/* 6580 */
struct TArray<FSceneViewStateReference,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 5265 */
struct __cppobj TReplyBase<FReply> : FReplyBase
{
};

/* 5266 */
struct __cppobj TTypeCompatibleBytes<FIntPoint> : TAlignedBytes<8,4>
{
};

/* 5267 */
struct __declspec(align(4)) TOptional<FIntPoint>
{
  TTypeCompatibleBytes<FIntPoint> Value;
  bool bIsSet;
};

/* 5271 */
struct TSharedPtr<FDragDropOperation,0>
{
  FDragDropOperation *Object;
  SharedPointerInternals::FSharedReferencer<0> SharedReferenceCount;
};

/* 5274 */
struct __cppobj FReply : TReplyBase<FReply>
{
  TOptional<FIntPoint> RequestedMousePos;
  TSharedPtr<SWidget,0> EventHandler;
  TSharedPtr<SWidget,0> MouseCaptor;
  TSharedPtr<SWidget,0> FocusRecipient;
  TSharedPtr<SWidget,0> MouseLockWidget;
  TSharedPtr<SWidget,0> DetectDragForWidget;
  TSharedPtr<SWidget,0> NavigationDestination;
  FKey DetectDragForMouseButton;
  TSharedPtr<FDragDropOperation,0> DragDropContent;
  _BYTE FocusChangeReason[1];
  _BYTE NavigationType[1];
  _BYTE NavigationGenesis[1];
  _BYTE NavigationSource[1];
  unsigned __int32 bReleaseMouseCapture : 1;
  unsigned __int32 bSetUserFocus : 1;
  unsigned __int32 bReleaseUserFocus : 1;
  unsigned __int32 bAllUsers : 1;
  unsigned __int32 bShouldReleaseMouseLock : 1;
  unsigned __int32 bUseHighPrecisionMouse : 1;
  unsigned __int32 bPreventThrottling : 1;
  unsigned __int32 bEndDragDrop : 1;
};

/* 6581 */
struct __cppobj ULocalPlayer : UPlayer
{
  FUniqueNetIdRepl CachedUniqueNetId;
  UGameViewportClient *ViewportClient;
  FVector2D Origin;
  FVector2D Size;
  FVector LastViewLocation;
  TEnumAsByte<enum EAspectRatioAxisConstraint> AspectRatioAxisConstraint;
  TSubclassOf<APlayerController> PendingLevelPlayerControllerClass;
  unsigned __int32 bSentSplitJoin : 1;
  FSceneViewStateReference ViewState;
  TArray<FSceneViewStateReference,FDefaultAllocator> StereoViewStates;
  FSceneViewStateReference MonoViewState;
  int ControllerId;
  FReply SlateOperations;
};

/* 6585 */
const struct __cppobj __declspec(align(8)) UConsoleSettings : UObject
{
  int MaxScrollbackSize;
  TArray<FAutoCompleteCommand,FDefaultAllocator> ManualAutoCompleteList;
  TArray<FString,FDefaultAllocator> AutoCompleteMapPaths;
  float BackgroundOpacityPercentage;
  bool bOrderTopToBottom;
  FColor InputColor;
  FColor HistoryColor;
  FColor AutoCompleteCommandColor;
  FColor AutoCompleteCVarColor;
  FColor AutoCompleteFadedColor;
};

/* 5364 */
struct __cppobj FRHIViewport : FRHIResource
{
};

/* 6592 */
struct FViewportFrameVtbl
{
  FViewport *(__cdecl *GetViewport)(FViewportFrame *this);
  void (__cdecl *ResizeFrame)(FViewportFrame *this, unsigned int, unsigned int, EWindowMode::Type);
};

/* 5185 */
struct ISlateViewport
{
  ISlateViewportVtbl *vfptr;
};

/* 5295 */
struct __cppobj TBaseDelegate<enum EActiveTimerReturnType,double,float> : FDelegateBase
{
};

/* 5296 */
struct __declspec(align(8)) FActiveTimerHandle
{
  float ExecutionPeriod;
  TBaseDelegate<enum EActiveTimerReturnType,double,float> TimerFunction;
  long double NextExecutionTime;
  bool bExecutionPending;
};

/* 5300 */
struct __cppobj TSlotBase<SBoxPanel::FSlot> : FSlotBase
{
};

/* 5301 */
struct TEnumAsByte<enum EHorizontalAlignment>
{
  char Value;
};

/* 5302 */
struct TEnumAsByte<enum EVerticalAlignment>
{
  char Value;
};

/* 884 */
enum FSizeParam::ESizeRule
{
  SizeRule_Auto = 0x0,
  SizeRule_Stretch = 0x1,
};

/* 5305 */
struct FSizeParam
{
  FSizeParam::ESizeRule SizeRule;
  TAttribute<float> Value;
};

/* 5306 */
struct __cppobj SBoxPanel::FSlot : TSlotBase<SBoxPanel::FSlot>
{
  TEnumAsByte<enum EHorizontalAlignment> HAlignment;
  TEnumAsByte<enum EVerticalAlignment> VAlignment;
  FSizeParam SizeParam;
  TAttribute<FMargin> SlotPadding;
  TAttribute<float> MaxSize;
};

/* 5307 */
struct __cppobj SVerticalBox::FSlot : SBoxPanel::FSlot
{
};

/* 5322 */
struct FSlateSound
{
  UObject *ResourceObject;
  FName LegacyResourceName_DEPRECATED;
  TWeakObjectPtr<UObject,FWeakObjectPtr> LegacyResourceObject_DEPRECATED;
};

/* 5323 */
struct __cppobj FButtonStyle : FSlateWidgetStyle
{
  FSlateBrush Normal;
  FSlateBrush Hovered;
  FSlateBrush Pressed;
  FSlateBrush Disabled;
  FMargin NormalPadding;
  FMargin PressedPadding;
  FSlateSound PressedSlateSound;
  FSlateSound HoveredSlateSound;
};

/* 5328 */
const struct __cppobj FWindowStyle : FSlateWidgetStyle
{
  FButtonStyle MinimizeButtonStyle;
  FButtonStyle MaximizeButtonStyle;
  FButtonStyle RestoreButtonStyle;
  FButtonStyle CloseButtonStyle;
  FTextBlockStyle TitleTextStyle;
  FSlateBrush ActiveTitleBrush;
  FSlateBrush InactiveTitleBrush;
  FSlateBrush FlashTitleBrush;
  FSlateColor BackgroundColor;
  FSlateBrush OutlineBrush;
  FSlateColor OutlineColor;
  FSlateBrush BorderBrush;
  FSlateBrush BackgroundBrush;
  FSlateBrush ChildBackgroundBrush;
};

/* 5333 */
struct TSharedPtr<FGenericWindowDefinition,0>
{
  FGenericWindowDefinition *Object;
  SharedPointerInternals::FSharedReferencer<0> SharedReferenceCount;
};

/* 5330 */
struct FGenericWindow
{
  FGenericWindowVtbl *vfptr;
  TSharedPtr<FGenericWindowDefinition,0> Definition;
};

/* 5335 */
struct TArray<FCachedWidget,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 5336 */
struct TArray<FHittestGrid::FCell,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 5196 */
struct TArray<FSlateClippingState,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 5226 */
struct FSlateClippingManager
{
  TArray<int,FDefaultAllocator> ClippingStack;
  TArray<FSlateClippingState,FDefaultAllocator> ClippingStates;
};

/* 5337 */
struct FHittestGrid
{
  TArray<FCachedWidget,FDefaultAllocator> WidgetsCachedThisFrame;
  TArray<FHittestGrid::FCell,FDefaultAllocator> Cells;
  FVector2D GridOrigin;
  FIntPoint NumCells;
  FSlateClippingManager ClippingManager;
};

/* 5348 */
struct TIndirectArray<FPopupLayerSlot,FDefaultAllocator>
{
  TArray<void *,FDefaultAllocator> Array;
};

/* 5349 */
struct __cppobj __declspec(align(8)) TPanelChildren<FPopupLayerSlot> : FChildren, TIndirectArray<FPopupLayerSlot,FDefaultAllocator>
{
  bool bEmptying;
};

/* 5350 */
struct __cppobj SPopupLayer : SPanel
{
  TPanelChildren<FPopupLayerSlot> Children;
  TWeakPtr<SWindow,0> OwnerWindow;
};

/* 5354 */
struct IWindowTitleBar
{
  IWindowTitleBarVtbl *vfptr;
};

/* 6601 */
struct TSharedRef<IGameLayer,0>
{
  IGameLayer *Object;
  SharedPointerInternals::FSharedReferencer<0> SharedReferenceCount;
};

/* 2049 */
enum EWindowTitleBarMode
{
  Overlay = 0x0,
  VerticalBox = 0x1,
};

/* 6602 */
struct IGameLayerManagerVtbl
{
  FGeometry *(__cdecl *GetViewportWidgetHostGeometry)(IGameLayerManager *this);
  __declspec(align(16)) void (__cdecl *NotifyPlayerAdded)(IGameLayerManager *this, int, ULocalPlayer *);
  void (__cdecl *NotifyPlayerRemoved)(IGameLayerManager *this, int, ULocalPlayer *);
  void (__cdecl *AddWidgetForPlayer)(IGameLayerManager *this, ULocalPlayer *, TSharedRef<SWidget,0>, int);
  void (__cdecl *RemoveWidgetForPlayer)(IGameLayerManager *this, ULocalPlayer *, TSharedRef<SWidget,0>);
  void (__cdecl *ClearWidgetsForPlayer)(IGameLayerManager *this, ULocalPlayer *);
  TSharedPtr<IGameLayer,0> *(__cdecl *FindLayerForPlayer)(IGameLayerManager *this, TSharedPtr<IGameLayer,0> *result, ULocalPlayer *, FName *);
  bool (__cdecl *AddLayerForPlayer)(IGameLayerManager *this, ULocalPlayer *, FName *, TSharedRef<IGameLayer,0>, int);
  void (__cdecl *ClearWidgets)(IGameLayerManager *this);
  void (__cdecl *SetDefaultWindowTitleBarHeight)(IGameLayerManager *this, float);
  void (__cdecl *SetWindowTitleBarState)(IGameLayerManager *this, TSharedPtr<SWidget,0> *, EWindowTitleBarMode, bool, bool, bool);
  void (__cdecl *RestorePreviousWindowTitleBarState)(IGameLayerManager *this);
  void (__cdecl *SetWindowTitleBarVisibility)(IGameLayerManager *this, bool);
};

/* 69565 */
struct std::_Func_base<void,TCPPacket const &>Vtbl
{
  std::_Func_base<void,TCPPacket const &> *(__cdecl *_Copy)(std::_Func_base<void,TCPPacket const &> *this, void *);
  std::_Func_base<void,TCPPacket const &> *(__cdecl *_Move)(std::_Func_base<void,TCPPacket const &> *this, void *);
  void (__cdecl *_Do_call)(std::_Func_base<void,TCPPacket const &> *this, TCPPacket *);
  type_info *(__cdecl *_Target_type)(std::_Func_base<void,TCPPacket const &> *this);
  void (__cdecl *_Delete_this)(std::_Func_base<void,TCPPacket const &> *this, bool);
  const void *(__cdecl *_Get)(std::_Func_base<void,TCPPacket const &> *this);
};

/* 69602 */
struct std::_Func_base<void,ksRacing::AssistRules const &>Vtbl
{
  std::_Func_base<void,ksRacing::AssistRules const &> *(__cdecl *_Copy)(std::_Func_base<void,ksRacing::AssistRules const &> *this, void *);
  std::_Func_base<void,ksRacing::AssistRules const &> *(__cdecl *_Move)(std::_Func_base<void,ksRacing::AssistRules const &> *this, void *);
  void (__cdecl *_Do_call)(std::_Func_base<void,ksRacing::AssistRules const &> *this, ksRacing::AssistRules *);
  type_info *(__cdecl *_Target_type)(std::_Func_base<void,ksRacing::AssistRules const &> *this);
  void (__cdecl *_Delete_this)(std::_Func_base<void,ksRacing::AssistRules const &> *this, bool);
  const void *(__cdecl *_Get)(std::_Func_base<void,ksRacing::AssistRules const &> *this);
};

/* 69615 */
struct std::_Func_base<void,ksRacing::RealismRules const &>Vtbl
{
  std::_Func_base<void,ksRacing::RealismRules const &> *(__cdecl *_Copy)(std::_Func_base<void,ksRacing::RealismRules const &> *this, void *);
  std::_Func_base<void,ksRacing::RealismRules const &> *(__cdecl *_Move)(std::_Func_base<void,ksRacing::RealismRules const &> *this, void *);
  void (__cdecl *_Do_call)(std::_Func_base<void,ksRacing::RealismRules const &> *this, ksRacing::RealismRules *);
  type_info *(__cdecl *_Target_type)(std::_Func_base<void,ksRacing::RealismRules const &> *this);
  void (__cdecl *_Delete_this)(std::_Func_base<void,ksRacing::RealismRules const &> *this, bool);
  const void *(__cdecl *_Get)(std::_Func_base<void,ksRacing::RealismRules const &> *this);
};

/* 5368 */
struct __cppobj UInterpGroup : UObject, FInterpEdInputInterface
{
  TArray<UInterpTrack *,FDefaultAllocator> InterpTracks;
  FName GroupName;
  FColor GroupColor;
  unsigned __int32 bCollapsed : 1;
  unsigned __int32 bVisible : 1;
  unsigned __int32 bIsFolder : 1;
  unsigned __int32 bIsParented : 1;
  unsigned __int32 bIsSelected : 1;
};

/* 124 */
enum EInterpCurveMode
{
  CIM_Linear = 0x0,
  CIM_CurveAuto = 0x1,
  CIM_Constant = 0x2,
  CIM_CurveUser = 0x3,
  CIM_CurveBreak = 0x4,
  CIM_CurveAutoClamped = 0x5,
  CIM_Unknown = 0x6,
};

/* 5373 */
struct FCurveEdInterfaceVtbl
{
  int (__cdecl *GetNumKeys)(FCurveEdInterface *this);
  _BYTE gap8[16];
  float (__cdecl *GetKeyIn)(FCurveEdInterface *this, int);
  float (__cdecl *GetKeyOut)(FCurveEdInterface *this, int, int);
  FColor *(__cdecl *GetKeyColor)(FCurveEdInterface *this, FColor *result, int, int, FColor *);
  float (__cdecl *EvalSub)(FCurveEdInterface *this, int, float);
  EInterpCurveMode (__cdecl *GetKeyInterpMode)(FCurveEdInterface *this, int);
  void (__cdecl *GetTangents)(FCurveEdInterface *this, int, int, float *, float *);
  void (__cdecl *GetInRange)(FCurveEdInterface *this, float *, float *);
  void (__cdecl *GetOutRange)(FCurveEdInterface *this, float *, float *);
  int (__cdecl *CreateNewKey)(FCurveEdInterface *this, float);
  void (__cdecl *DeleteKey)(FCurveEdInterface *this, int);
  int (__cdecl *SetKeyIn)(FCurveEdInterface *this, int, float);
  void (__cdecl *SetKeyOut)(FCurveEdInterface *this, int, int, float);
  void (__cdecl *SetKeyInterpMode)(FCurveEdInterface *this, int, EInterpCurveMode);
  void (__cdecl *SetTangents)(FCurveEdInterface *this, int, int, float, float);
};

/* 5366 */
struct FInterpEdInputInterfaceVtbl
{
  EMouseCursor::Type (__cdecl *GetMouseCursor)(FInterpEdInputInterface *this, FInterpEdInputData *);
  _BYTE gap8[8];
  void (__cdecl *EndDrag)(FInterpEdInputInterface *this, FInterpEdInputData *);
  bool (__cdecl *AcceptsDropping)(FInterpEdInputInterface *this, FInterpEdInputData *, FInterpEdInputInterface *);
  void (__cdecl *ObjectDragged)(FInterpEdInputInterface *this, FInterpEdInputData *);
  void (__cdecl *DrawDragObject)(FInterpEdInputInterface *this, FInterpEdInputData *, FViewport *, FCanvas *);
  void (__cdecl *DrawDropObject)(FInterpEdInputInterface *this, FInterpEdInputData *, FViewport *, FCanvas *);
  bool (__cdecl *ShouldDropObject)(FInterpEdInputInterface *this, FInterpEdInputData *);
  UObject *(__cdecl *GetUObject)(FInterpEdInputInterface *this);
};

/* 6563 */
struct FExtraShaderCompilerSettings
{
  bool bExtractShaderSource;
  FString OfflineCompilerPath;
};

/* 4426 */
struct FMaterialCompiler
{
  FMaterialCompilerVtbl *vfptr;
};

/* 6564 */
struct TArray<UMaterialExpressionCustomOutput *,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 6101 */
struct __declspec(align(16)) FLightParameters
{
  FVector4 LightPositionAndInvRadius;
  FVector4 LightColorAndFalloffExponent;
  FVector NormalizedLightDirection;
  FVector NormalizedLightTangent;
  FVector2D SpotAngles;
  float SpecularScale;
  float LightSourceRadius;
  float LightSoftSourceRadius;
  float LightSourceLength;
  FTexture *SourceTexture;
};

/* 6103 */
struct TAlignedBytes<560,16>::TPadding
{
  char Pad[560];
};

/* 6104 */
struct TAlignedBytes<560,16>
{
  TAlignedBytes<560,16>::TPadding Padding;
};

/* 6105 */
struct __cppobj TTypeCompatibleBytes<FWholeSceneProjectedShadowInitializer> : TAlignedBytes<560,16>
{
};

/* 6106 */
struct __cppobj FHeapAllocator::ForElementType<FWholeSceneProjectedShadowInitializer> : FHeapAllocator::ForAnyElementType
{
};

/* 6107 */
struct __declspec(align(16)) TInlineAllocator<6,FDefaultAllocator>::ForElementType<FWholeSceneProjectedShadowInitializer>
{
  TTypeCompatibleBytes<FWholeSceneProjectedShadowInitializer> InlineData[6];
  FHeapAllocator::ForElementType<FWholeSceneProjectedShadowInitializer> SecondaryData;
};

/* 6108 */
struct __declspec(align(16)) TArray<FWholeSceneProjectedShadowInitializer,TInlineAllocator<6,FDefaultAllocator> >
{
  TInlineAllocator<6,FDefaultAllocator>::ForElementType<FWholeSceneProjectedShadowInitializer> AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 6109 */
struct FProjectedShadowInitializer
{
  FVector PreShadowTranslation;
  __declspec(align(8)) FMatrix WorldToLight;
  FVector Scales;
  FVector FaceDirection;
  FBoxSphereBounds SubjectBounds;
  __declspec(align(16)) FVector4 WAxis;
  float MinLightW;
  float MaxDistanceToCastInLightW;
};

/* 6118 */
struct __cppobj __declspec(align(16)) FWholeSceneProjectedShadowInitializer : FProjectedShadowInitializer
{
  FShadowCascadeSettings CascadeSettings;
  bool bOnePassPointLightShadow;
  bool bRayTracedDistanceField;
};

/* 6119 */
struct __cppobj FPerObjectProjectedShadowInitializer : FProjectedShadowInitializer
{
};

/* 6492 */
struct __declspec(align(8)) FLightTileIntersectionResources
{
  FIntPoint TileDimensions;
  FRWBuffer TileNumCulledObjects;
  FRWBuffer NextStartOffset;
  FRWBuffer TileStartOffsets;
  FRWBuffer TileArrayData;
  bool b16BitIndices;
};

/* 4099 */
struct TRefCountPtr<FRHIIndexBuffer>
{
  FRHIIndexBuffer *Reference;
};

/* 4100 */
struct __cppobj FIndexBuffer : FRenderResource
{
  TRefCountPtr<FRHIIndexBuffer> IndexBufferRHI;
};

/* 4101 */
struct __cppobj FDynamicMeshIndexBuffer32 : FIndexBuffer
{
  TArray<unsigned int,FDefaultAllocator> Indices;
};

/* 4110 */
struct TEnumAsByte<enum EVertexElementType>
{
  char Value;
};

/* 4111 */
struct FVertexStreamComponent
{
  FVertexBuffer *VertexBuffer;
  unsigned int StreamOffset;
  char Offset;
  char Stride;
  TEnumAsByte<enum EVertexElementType> Type;
  _BYTE VertexStreamUsage[1];
};

/* 4112 */
struct __cppobj TTypeCompatibleBytes<FVertexStreamComponent> : TAlignedBytes<16,8>
{
};

/* 4113 */
struct TFixedAllocator<4>::ForElementType<FVertexStreamComponent>
{
  TTypeCompatibleBytes<FVertexStreamComponent> InlineData[4];
};

/* 4114 */
struct TArray<FVertexStreamComponent,TFixedAllocator<4> >
{
  TFixedAllocator<4>::ForElementType<FVertexStreamComponent> AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 4115 */
struct __declspec(align(8)) FStaticMeshDataType
{
  FVertexStreamComponent PositionComponent;
  FVertexStreamComponent TangentBasisComponents[2];
  TArray<FVertexStreamComponent,TFixedAllocator<4> > TextureCoordinates;
  FVertexStreamComponent LightMapCoordinateComponent;
  FVertexStreamComponent ColorComponent;
  FRHIShaderResourceView *PositionComponentSRV;
  FRHIShaderResourceView *TangentsSRV;
  FRHIShaderResourceView *TextureCoordinatesSRV;
  FRHIShaderResourceView *ColorComponentsSRV;
  int LightMapCoordinateIndex;
  int NumTexCoords;
  unsigned int ColorIndexMask;
};

/* 4116 */
struct __cppobj FLocalVertexFactory::FDataType : FStaticMeshDataType
{
};

/* 4121 */
struct __cppobj TUniformBufferRef<FLocalVertexFactoryUniformShaderParameters> : TRefCountPtr<FRHIUniformBuffer>
{
};

/* 4122 */
struct __cppobj FLocalVertexFactory::FDebugName
{
};

/* 4123 */
struct __cppobj __declspec(align(4)) FLocalVertexFactory : FVertexFactory
{
  FLocalVertexFactory::FDataType Data;
  FStaticMeshDataType *StaticMeshDataType;
  TUniformBufferRef<FLocalVertexFactoryUniformShaderParameters> UniformBuffer;
  int ColorStreamIndex;
  FLocalVertexFactory::FDebugName DebugName;
};

/* 21156 */
struct FDeferredUpdateResourceVtbl
{
  void (__cdecl *UpdateDeferredResource)(FDeferredUpdateResource *this, FRHICommandListImmediate *, bool);
};

/* 8663 */
struct TWeakPtr<FTextLayout,0>
{
  FTextLayout *Object;
  SharedPointerInternals::FWeakReferencer<0> WeakReferenceCount;
};

/* 8664 */
struct TSharedFromThis<FTextLayout,0>
{
  TWeakPtr<FTextLayout,0> WeakThis;
};

/* 8688 */
struct TArray<FTextLayout::FLineModel,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 8689 */
struct TArray<FTextLayout::FLineView,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 8690 */
struct FTextLayout::FTextLayoutSize
{
  float DrawWidth;
  float WrappedWidth;
  float Height;
};

/* 8219 */
struct TSharedRef<IBreakIterator,0>
{
  IBreakIterator *Object;
  SharedPointerInternals::FSharedReferencer<0> SharedReferenceCount;
};

/* 8214 */
struct __cppobj TDefaultDelete<TextBiDi::ITextBiDi>
{
};

/* 8218 */
struct __cppobj TUniquePtr<TextBiDi::ITextBiDi,TDefaultDelete<TextBiDi::ITextBiDi> > : TDefaultDelete<TextBiDi::ITextBiDi>
{
  TextBiDi::ITextBiDi *Ptr;
};

/* 8691 */
struct __cppobj TBaseDelegate<FString> : FDelegateBase
{
};

/* 8692 */
struct TAttribute<FString>
{
  FString Value;
  bool bIsSet;
  TBaseDelegate<FString> Getter;
};

/* 8662 */
struct __cppobj FTextLayout : TSharedFromThis<FTextLayout,0>
{
  FTextLayoutVtbl *vfptr;
  TArray<FTextLayout::FLineModel,FDefaultAllocator> LineModels;
  TArray<FTextLayout::FLineView,FDefaultAllocator> LineViews;
  TSet<int,DefaultKeyFuncs<int,0>,FDefaultSetAllocator> LineViewsToJustify;
  char DirtyFlags;
  _BYTE TextShapingMethod[1];
  _BYTE TextFlowDirection[1];
  float Scale;
  float WrappingWidth;
  _BYTE WrappingPolicy[1];
  FMargin Margin;
  ETextJustify::Type Justification;
  float LineHeightPercentage;
  FTextLayout::FTextLayoutSize TextLayoutSize;
  FVector2D ViewSize;
  FVector2D ScrollOffset;
  TSharedPtr<IBreakIterator,0> LineBreakIterator;
  TSharedRef<IBreakIterator,0> GraphemeBreakIterator;
  TSharedRef<IBreakIterator,0> WordBreakIterator;
  TUniquePtr<TextBiDi::ITextBiDi,TDefaultDelete<TextBiDi::ITextBiDi> > TextBiDiDetection;
  TAttribute<FString> DebugSourceInfo;
};

/* 8693 */
struct TArray<TSharedRef<SWidget,0>,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 8694 */
struct __cppobj __declspec(align(8)) TSlotlessChildren<SWidget> : FChildren, TArray<TSharedRef<SWidget,0>,FDefaultAllocator>
{
  bool bChangesInvalidatePrepass;
};

/* 8695 */
struct __cppobj __declspec(align(8)) FSlateTextLayout : FTextLayout
{
  FTextBlockStyle DefaultTextStyle;
  TSlotlessChildren<SWidget> Children;
  TAttribute<bool> bIsPassword;
  unsigned __int16 LocalizedFallbackFontRevision;
};

/* 8697 */
struct ITextLayoutMarshaller
{
  ITextLayoutMarshallerVtbl *vfptr;
};

/* 8679 */
struct IRunRenderer
{
  IRunRendererVtbl *vfptr;
};

/* 8700 */
struct __cppobj ISlateRunRenderer : IRunRenderer
{
};

/* 5309 */
struct TArray<FSlateBrush const *,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 5319 */
struct FSlateShaderResourceProxy
{
  FVector2D StartUV;
  FVector2D SizeUV;
  FSlateShaderResource *Resource;
  FIntPoint ActualSize;
  TSharedPtr<FSlateSharedHandleData,0> HandleData;
};

/* 12522 */
struct ISlateWidgetStyleContainerInterface
{
  ISlateWidgetStyleContainerInterfaceVtbl *vfptr;
};

/* 12524 */
struct __cppobj USlateWidgetStyleContainerBase : UObject, ISlateWidgetStyleContainerInterface
{
};

/* 69028 */
struct TIndirectArray<SScrollBox::FSlot,FDefaultAllocator>
{
  TArray<void *,FDefaultAllocator> Array;
};

/* 69029 */
struct __cppobj __declspec(align(8)) TPanelChildren<SScrollBox::FSlot> : FChildren, TIndirectArray<SScrollBox::FSlot,FDefaultAllocator>
{
  bool bEmptying;
};

/* 69030 */
struct __cppobj __declspec(align(8)) SScrollPanel : SPanel
{
  float PhysicalOffset;
  TPanelChildren<SScrollBox::FSlot> Children;
  EOrientation Orientation;
};

/* 7799 */
struct __cppobj SBorder : SCompoundWidget
{
  TAttribute<FSlateBrush const *> BorderImage;
  TAttribute<FSlateColor> BorderBackgroundColor;
  TAttribute<FVector2D> DesiredSizeScale;
  TAttribute<bool> ShowDisabledEffect;
};

/* 8744 */
struct TSharedPtr<SBorder,0>
{
  SBorder *Object;
  SharedPointerInternals::FSharedReferencer<0> SharedReferenceCount;
};

/* 16230 */
struct TSharedPtr<SSpacer,0>
{
  SSpacer *Object;
  SharedPointerInternals::FSharedReferencer<0> SharedReferenceCount;
};

/* 16231 */
struct TSharedPtr<SScrollBarTrack,0>
{
  SScrollBarTrack *Object;
  SharedPointerInternals::FSharedReferencer<0> SharedReferenceCount;
};

/* 16232 */
struct __cppobj SScrollBar : SBorder
{
  TAttribute<EVisibility> UserVisibility;
  TSharedPtr<SBorder,0> DragThumb;
  TSharedPtr<SSpacer,0> ThicknessSpacer;
  bool bDraggingThumb;
  TSharedPtr<SScrollBarTrack,0> Track;
  TBaseDelegate<void,float> OnUserScrolled;
  float DragGrabOffset;
  EOrientation Orientation;
  _BYTE DragFocusCause[1];
  bool bHideWhenNotInUse;
  bool bIsScrolling;
  long double LastInteractionTime;
  bool bAlwaysShow;
  FSlateBrush *NormalThumbImage;
  FSlateBrush *HoveredThumbImage;
  FSlateBrush *DraggedThumbImage;
  FSlateBrush *BackgroundBrush;
  FSlateBrush *TopBrush;
  FSlateBrush *BottomBrush;
};

/* 9257 */
struct IModuleInterfaceVtbl
{
  void *(__cdecl *__vecDelDtor)(IModuleInterface *this, unsigned int);
  void (__cdecl *StartupModule)(IModuleInterface *this);
  void (__cdecl *PreUnloadCallback)(IModuleInterface *this);
  void (__cdecl *PostLoadCallback)(IModuleInterface *this);
  void (__cdecl *ShutdownModule)(IModuleInterface *this);
  bool (__cdecl *SupportsDynamicReloading)(IModuleInterface *this);
  bool (__cdecl *SupportsAutomaticShutdown)(IModuleInterface *this);
  bool (__cdecl *IsGameModule)(IModuleInterface *this);
};

/* 4297 */
union $2B233CAB5F34D68EFB14A77EF841F4EE
{
  void (__cdecl *~IQueuedWork)(IQueuedWork *this);
  void *(__cdecl *__vecDelDtor)(IQueuedWork *this, unsigned int);
};

/* 4298 */
struct IQueuedWorkVtbl
{
  void (__cdecl *DoThreadedWork)(IQueuedWork *this);
  void (__cdecl *Abandon)(IQueuedWork *this);
  $2B233CAB5F34D68EFB14A77EF841F4EE ___u2;
};

/* 4304 */
struct FQueuedThreadPool
{
  FQueuedThreadPoolVtbl *vfptr;
};

/* 256 */
enum EMipFadeSettings
{
  MipFade_Normal = 0x0,
  MipFade_Slow = 0x1,
  MipFade_NumSettings = 0x2,
};

/* 4942 */
struct __cppobj FTexture2DResource : FTextureResource
{
  UTexture2D *Owner;
  FTexture2DResourceMem *ResourceMem;
  bool bReadyForStreaming;
  bool bUseVirtualUpdatePath;
  EMipFadeSettings MipFadeSetting;
  int CurrentFirstMip;
  void *MipData[14];
  TRefCountPtr<FRHITexture2D> Texture2DRHI;
};

/* 4638 */
struct __declspec(align(4)) FGPUSkinCache::FRWBuffersAllocation
{
  FRWBuffer RWBuffers[2];
  FRWBuffer Tangents;
  const unsigned int NumVertices;
  const bool WithTangents;
};

/* 4647 */
struct TArray<FSkeletalMeshObjectGPUSkin::FSkeletalMeshObjectLOD,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 4657 */
struct __cppobj FSkeletalMeshObjectGPUSkin : FSkeletalMeshObject
{
  TArray<FSkeletalMeshObjectGPUSkin::FSkeletalMeshObjectLOD,FDefaultAllocator> LODs;
  FDynamicSkelMeshObjectDataGPUSkin *DynamicData;
  TRefCountPtr<FGraphEvent> RHIThreadFenceForDynamicData;
  bool bNeedsUpdateDeferred;
  bool bMorphNeedsUpdateDeferred;
  bool bMorphResourcesInitialized;
  unsigned int LastBoneTransformRevisionNumber;
};

/* 4672 */
struct TArray<FBlueprintComponentChangedPropertyInfo,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 4674 */
struct FBlueprintCookedComponentInstancingData
{
  bool bIsValid;
  TArray<FBlueprintComponentChangedPropertyInfo,FDefaultAllocator> ChangedPropertyList;
  FName ComponentTemplateName;
  UClass *ComponentTemplateClass;
  EObjectFlags ComponentTemplateFlags;
  TIndirectArray<FCustomPropertyListNode,FDefaultAllocator> CachedPropertyListForSerialization;
  TArray<unsigned char,FDefaultAllocator> CachedPropertyDataForSerialization;
};

/* 4675 */
struct TArray<FBPVariableMetaDataEntry,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 4676 */
struct __cppobj TBaseDelegate<TTypeWrapper<void>,FName const &> : FDelegateBase
{
};

/* 4677 */
struct __cppobj TBaseDelegate<void,FName const &> : TBaseDelegate<TTypeWrapper<void>,FName const &>
{
};

/* 4678 */
struct __cppobj USCS_Node : UObject
{
  UClass *ComponentClass;
  UActorComponent *ComponentTemplate;
  FBlueprintCookedComponentInstancingData CookedComponentInstancingData;
  FName VariableName;
  FName AttachToName;
  FName ParentComponentOrVariableName;
  FName ParentComponentOwnerClassName;
  bool bIsParentComponentNative;
  TArray<USCS_Node *,FDefaultAllocator> ChildNodes;
  TArray<FBPVariableMetaDataEntry,FDefaultAllocator> MetaDataArray;
  FGuid VariableGuid;
  bool bIsFalseRoot_DEPRECATED;
  bool bIsNative_DEPRECATED;
  FName NativeComponentName_DEPRECATED;
  bool bVariableNameAutoGenerated_DEPRECATED;
  FName InternalVariableName;
  TBaseDelegate<void,FName const &> OnNameChangedExternal;
};

/* 4689 */
struct TInlineAllocator<8,FDefaultAllocator>::ForElementType<unsigned int>
{
  TTypeCompatibleBytes<unsigned int> InlineData[8];
  FHeapAllocator::ForElementType<unsigned int> SecondaryData;
};

/* 4690 */
struct TArray<unsigned int,TInlineAllocator<8,FDefaultAllocator> >
{
  TInlineAllocator<8,FDefaultAllocator>::ForElementType<unsigned int> AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 4691 */
struct __cppobj __declspec(align(8)) FFrame : FOutputDevice
{
  UFunction *Node;
  UObject *Object;
  char *Code;
  char *Locals;
  UProperty *MostRecentProperty;
  char *MostRecentPropertyAddress;
  TArray<unsigned int,TInlineAllocator<8,FDefaultAllocator> > FlowStack;
  FFrame *PreviousFrame;
  FOutParmRec *OutParms;
  UField *PropertyChainForCompiledIn;
  UFunction *CurrentNativeFunction;
  bool bArrayContextFailed;
};

/* 4812 */
struct FAnimInstanceProxyVtbl
{
  void *(__cdecl *__vecDelDtor)(FAnimInstanceProxy *this, unsigned int);
  _BYTE gap8[8];
  void (__cdecl *Uninitialize)(FAnimInstanceProxy *this, UAnimInstance *);
  void (__cdecl *PreUpdate)(FAnimInstanceProxy *this, UAnimInstance *, float);
  void (__cdecl *Update)(FAnimInstanceProxy *this, float);
  void (__cdecl *UpdateAnimationNode)(FAnimInstanceProxy *this, float);
  void (__cdecl *PreEvaluateAnimation)(FAnimInstanceProxy *this, UAnimInstance *);
  FAnimNode_Base *(__cdecl *GetCustomRootNode)(FAnimInstanceProxy *this);
  void (__cdecl *GetCustomNodes)(FAnimInstanceProxy *this, TArray<FAnimNode_Base *,FDefaultAllocator> *);
  void (__cdecl *CacheBones)(FAnimInstanceProxy *this);
  bool (__cdecl *Evaluate)(FAnimInstanceProxy *this, FPoseContext *);
  void (__cdecl *PostUpdate)(FAnimInstanceProxy *this, UAnimInstance *);
  void (__cdecl *PostEvaluate)(FAnimInstanceProxy *this, UAnimInstance *);
  void (__cdecl *InitializeObjects)(FAnimInstanceProxy *this, UAnimInstance *);
  void (__cdecl *ClearObjects)(FAnimInstanceProxy *this);
};

/* 4809 */
struct TArray<FExposedValueCopyRecord,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 4810 */
struct __declspec(align(8)) FExposedValueHandler
{
  FName BoundFunction;
  TArray<FExposedValueCopyRecord,FDefaultAllocator> CopyRecords;
  UFunction *Function;
  bool bInitialized;
};

/* 4775 */
struct FAnimNode_Base
{
  FAnimNode_BaseVtbl *vfptr;
  FExposedValueHandler EvaluateGraphExposedInputs;
};

/* 4814 */
struct FBasePose<FCompactPoseBoneIndex,FDefaultAllocator>
{
  TArray<FTransform,FDefaultAllocator> Bones;
};

/* 4815 */
struct __cppobj FBaseCompactPose<FDefaultAllocator> : FBasePose<FCompactPoseBoneIndex,FDefaultAllocator>
{
  FBoneContainer *BoneContainer;
};

/* 4816 */
struct __cppobj FCompactHeapPose : FBaseCompactPose<FDefaultAllocator>
{
};

/* 4820 */
struct __cppobj FAnimNode_SubInput : FAnimNode_Base
{
  FCompactHeapPose InputPose;
  FBlendedHeapCurve InputCurve;
};

/* 4854 */
struct TArray<FClothCollisionPrim_Sphere,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 4855 */
struct TArray<FClothCollisionPrim_SphereConnection,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 4856 */
struct TArray<FClothCollisionPrim_Convex,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 4857 */
const struct FClothCollisionData
{
  TArray<FClothCollisionPrim_Sphere,FDefaultAllocator> Spheres;
  TArray<FClothCollisionPrim_SphereConnection,FDefaultAllocator> SphereConnections;
  TArray<FClothCollisionPrim_Convex,FDefaultAllocator> Convexes;
};

/* 4547 */
struct TArray<FNodeItem,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 69442 */
struct FCornerSectionTyreStatistics
{
  float tempSurfaceIMO[3][4];
  float tempCore[4];
  float pressurePsi[4];
  float treadMM[4];
  float grain[4];
  float blister[4];
  float discTemp[4];
};

/* 69443 */
const struct FCornerSectionCarResult
{
  int CornerSectionIndex;
  unsigned __int16 CarIndex;
  int LaptimeEntry;
  int LaptimeExit;
  int Duration;
  float VelocityExit;
  float VelocityMin;
  bool TrafficSituation;
  int OutOfTrackTime;
  int EstimatedGain;
  _BYTE referencedLap[1];
  int delta;
  float consistencyRatingPercent;
  FCornerSectionTyreStatistics tyreData;
};

/* 69491 */
struct std::_Func_base<void,int const &>Vtbl
{
  std::_Func_base<void,int const &> *(__cdecl *_Copy)(std::_Func_base<void,int const &> *this, void *);
  std::_Func_base<void,int const &> *(__cdecl *_Move)(std::_Func_base<void,int const &> *this, void *);
  void (__cdecl *_Do_call)(std::_Func_base<void,int const &> *this, const int *);
  type_info *(__cdecl *_Target_type)(std::_Func_base<void,int const &> *this);
  void (__cdecl *_Delete_this)(std::_Func_base<void,int const &> *this, bool);
  const void *(__cdecl *_Get)(std::_Func_base<void,int const &> *this);
};

/* 4331 */
struct ICompressedAudioInfo
{
  ICompressedAudioInfoVtbl *vfptr;
};

/* 3928 */
struct __cppobj FArchiveFieldName
{
};

/* 3929 */
struct FStructuredArchiveFormatterVtbl
{
  void *(__cdecl *__vecDelDtor)(FStructuredArchiveFormatter *this, unsigned int);
  _BYTE gap8[32];
  void (__cdecl *LeaveRecord)(FStructuredArchiveFormatter *this);
  void (__cdecl *EnterField)(FStructuredArchiveFormatter *this, FArchiveFieldName);
  void (__cdecl *LeaveField)(FStructuredArchiveFormatter *this);
  bool (__cdecl *TryEnterField)(FStructuredArchiveFormatter *this, FArchiveFieldName, bool);
  void (__cdecl *EnterArray)(FStructuredArchiveFormatter *this, int *);
  void (__cdecl *LeaveArray)(FStructuredArchiveFormatter *this);
  void (__cdecl *EnterArrayElement)(FStructuredArchiveFormatter *this);
  void (__cdecl *LeaveArrayElement)(FStructuredArchiveFormatter *this);
  void (__cdecl *EnterStream)(FStructuredArchiveFormatter *this);
  void (__cdecl *LeaveStream)(FStructuredArchiveFormatter *this);
  void (__cdecl *EnterStreamElement)(FStructuredArchiveFormatter *this);
  void (__cdecl *LeaveStreamElement)(FStructuredArchiveFormatter *this);
  void (__cdecl *EnterMap)(FStructuredArchiveFormatter *this, int *);
  void (__cdecl *LeaveMap)(FStructuredArchiveFormatter *this);
  void (__cdecl *EnterMapElement)(FStructuredArchiveFormatter *this, FString *);
  void (__cdecl *LeaveMapElement)(FStructuredArchiveFormatter *this);
  void (__cdecl *Serialize)(FStructuredArchiveFormatter *this, void *, unsigned __int64);
  void (__cdecl *Serialize)(FStructuredArchiveFormatter *this, TArray<unsigned char,FDefaultAllocator> *);
  void (__cdecl *Serialize)(FStructuredArchiveFormatter *this, UObject **);
  void (__cdecl *Serialize)(FStructuredArchiveFormatter *this, FName *);
  void (__cdecl *Serialize)(FStructuredArchiveFormatter *this, FString *);
  void (__cdecl *Serialize)(FStructuredArchiveFormatter *this, bool *);
  void (__cdecl *Serialize)(FStructuredArchiveFormatter *this, long double *);
  void (__cdecl *Serialize)(FStructuredArchiveFormatter *this, float *);
  void (__cdecl *Serialize)(FStructuredArchiveFormatter *this, __int64 *);
  void (__cdecl *Serialize)(FStructuredArchiveFormatter *this, int *);
  void (__cdecl *Serialize)(FStructuredArchiveFormatter *this, __int16 *);
  void (__cdecl *Serialize)(FStructuredArchiveFormatter *this, char *);
  void (__cdecl *Serialize)(FStructuredArchiveFormatter *this, unsigned __int64 *);
  void (__cdecl *Serialize)(FStructuredArchiveFormatter *this, unsigned int *);
  void (__cdecl *Serialize)(FStructuredArchiveFormatter *this, unsigned __int16 *);
  void (__cdecl *Serialize)(FStructuredArchiveFormatter *this, char *);
};

/* 3946 */
struct __cppobj TBaseDelegate<TTypeWrapper<void>,FName const &,UPackage *,enum EAsyncLoadingResult::Type> : FDelegateBase
{
};

/* 3947 */
struct __cppobj TBaseDelegate<void,FName const &,UPackage *,enum EAsyncLoadingResult::Type> : TBaseDelegate<TTypeWrapper<void>,FName const &,UPackage *,enum EAsyncLoadingResult::Type>
{
};

/* 3976 */
struct TArray<FAsyncPackageDesc *,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 3978 */
struct TSparseArray<TSetElement<TTuple<FName,FAsyncPackage *> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<24,8> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 3979 */
struct __declspec(align(8)) TSet<TTuple<FName,FAsyncPackage *>,TDefaultMapHashableKeyFuncs<FName,FAsyncPackage *,0>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<TTuple<FName,FAsyncPackage *> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 3980 */
struct TMapBase<FName,FAsyncPackage *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,FAsyncPackage *,0> >
{
  TSet<TTuple<FName,FAsyncPackage *>,TDefaultMapHashableKeyFuncs<FName,FAsyncPackage *,0>,FDefaultSetAllocator> Pairs;
};

/* 3981 */
struct __cppobj TSortableMapBase<FName,FAsyncPackage *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,FAsyncPackage *,0> > : TMapBase<FName,FAsyncPackage *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,FAsyncPackage *,0> >
{
};

/* 3982 */
struct __cppobj TMap<FName,FAsyncPackage *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,FAsyncPackage *,0> > : TSortableMapBase<FName,FAsyncPackage *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,FAsyncPackage *,0> >
{
};

/* 3983 */
const struct FMaxPackageSummarySize
{
  int Value;
};

/* 3987 */
struct TArray<FAsyncLoadEvent,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 3988 */
struct FAsyncLoadEventQueue
{
  int RunningSerialNumber;
  TArray<FAsyncLoadEvent,FDefaultAllocator> EventQueue;
};

/* 3989 */
struct __cppobj __declspec(align(8)) FAsyncLoadingThread : FRunnable
{
  FRunnableThread *Thread;
  FThreadSafeCounter StopTaskCounter;
  FEvent *QueuedRequestsEvent;
  FEvent *CancelLoadingEvent;
  FEvent *ThreadSuspendedEvent;
  FEvent *ThreadResumedEvent;
  TArray<FAsyncPackageDesc *,FDefaultAllocator> QueuedPackages;
  FWindowsCriticalSection QueueCritical;
  FThreadSafeBool bShouldCancelLoading;
  FThreadSafeCounter IsLoadingSuspended;
  TArray<FAsyncPackage *,FDefaultAllocator> LoadedPackages;
  TMap<FName,FAsyncPackage *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,FAsyncPackage *,0> > LoadedPackagesNameLookup;
  FWindowsCriticalSection LoadedPackagesCritical;
  TArray<FAsyncPackage *,FDefaultAllocator> LoadedPackagesToProcess;
  TArray<FAsyncPackage *,FDefaultAllocator> PackagesToDelete;
  TMap<FName,FAsyncPackage *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,FAsyncPackage *,0> > LoadedPackagesToProcessNameLookup;
  FWindowsCriticalSection LoadedPackagesToProcessCritical;
  TArray<FAsyncPackage *,FDefaultAllocator> AsyncPackages;
  TMap<FName,FAsyncPackage *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FName,FAsyncPackage *,0> > AsyncPackageNameLookup;
  TArray<FAsyncPackage *,FDefaultAllocator> AsyncPackagesReadyForTick;
  FMaxPackageSummarySize MaxPackageSummarySize;
  FWindowsCriticalSection AsyncPackagesCritical;
  TSet<int,DefaultKeyFuncs<int,0>,FDefaultSetAllocator> PendingRequests;
  FWindowsCriticalSection PendingRequestsCritical;
  FThreadSafeCounter QueuedPackagesCounter;
  FThreadSafeCounter ExistingAsyncPackagesCounter;
  FThreadSafeCounter AsyncThreadReady;
  FAsyncLoadEventQueue EventQueue;
  int AsyncLoadingTickCounter;
};

/* 6501 */
struct FOccluderElementsCollectorVtbl
{
  void *(__cdecl *__vecDelDtor)(FOccluderElementsCollector *this, unsigned int);
  void (__cdecl *AddElements)(FOccluderElementsCollector *this, TSharedPtr<TArray<FVector,FDefaultAllocator>,1> *, TSharedPtr<TArray<unsigned short,FDefaultAllocator>,1> *, FMatrix *);
};

/* 6263 */
struct __declspec(align(4)) FSimpleLightEntry
{
  FVector Color;
  float Radius;
  float Exponent;
  float VolumetricScatteringIntensity;
  bool bAffectTranslucency;
};

/* 6266 */
struct FSimpleLightPerViewEntry
{
  FVector Position;
};

/* 6269 */
struct FSimpleLightInstacePerViewIndexData
{
  unsigned __int32 PerViewIndex : 31;
  unsigned int bHasPerViewData;
};

/* 4243 */
struct TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<32,4> >,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 4244 */
struct TSparseArray<TSetElement<TTuple<enum EAttenuationShape::Type,FBaseAttenuationSettings::AttenuationShapeDetails> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<32,4> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 4245 */
struct __declspec(align(8)) TSet<TTuple<enum EAttenuationShape::Type,FBaseAttenuationSettings::AttenuationShapeDetails>,TDefaultMapHashableKeyFuncs<enum EAttenuationShape::Type,FBaseAttenuationSettings::AttenuationShapeDetails,1>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<TTuple<enum EAttenuationShape::Type,FBaseAttenuationSettings::AttenuationShapeDetails> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 4246 */
struct TMapBase<enum EAttenuationShape::Type,FBaseAttenuationSettings::AttenuationShapeDetails,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<enum EAttenuationShape::Type,FBaseAttenuationSettings::AttenuationShapeDetails,1> >
{
  TSet<TTuple<enum EAttenuationShape::Type,FBaseAttenuationSettings::AttenuationShapeDetails>,TDefaultMapHashableKeyFuncs<enum EAttenuationShape::Type,FBaseAttenuationSettings::AttenuationShapeDetails,1>,FDefaultSetAllocator> Pairs;
};

/* 4247 */
struct __cppobj TSortableMapBase<enum EAttenuationShape::Type,FBaseAttenuationSettings::AttenuationShapeDetails,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<enum EAttenuationShape::Type,FBaseAttenuationSettings::AttenuationShapeDetails,1> > : TMapBase<enum EAttenuationShape::Type,FBaseAttenuationSettings::AttenuationShapeDetails,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<enum EAttenuationShape::Type,FBaseAttenuationSettings::AttenuationShapeDetails,1> >
{
};

/* 4248 */
struct __cppobj TMultiMap<enum EAttenuationShape::Type,FBaseAttenuationSettings::AttenuationShapeDetails,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<enum EAttenuationShape::Type,FBaseAttenuationSettings::AttenuationShapeDetails,1> > : TSortableMapBase<enum EAttenuationShape::Type,FBaseAttenuationSettings::AttenuationShapeDetails,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<enum EAttenuationShape::Type,FBaseAttenuationSettings::AttenuationShapeDetails,1> >
{
};

/* 4301 */
struct UE4Function_Private::TFunctionRefBase<TFunction<void __cdecl(USoundWave const *)>,void __cdecl(USoundWave const *)>
{
  void (__cdecl *Callable)(void *, USoundWave **);
};

/* 4302 */
struct __cppobj TFunction<void __cdecl(USoundWave const *)> : UE4Function_Private::TFunctionRefBase<TFunction<void __cdecl(USoundWave const *)>,void __cdecl(USoundWave const *)>
{
  UE4Function_Private::FFunctionStorage Storage;
};

/* 4303 */
struct __cppobj Audio::FAsyncSoundWavePCMWriteWorker : FNonAbandonableTask
{
  Audio::FSoundWavePCMWriter *Writer;
  _BYTE TaskType[1];
  FWindowsCriticalSection NonAbandonableSection;
  TFunction<void __cdecl(USoundWave const *)> CallbackOnSuccess;
};

/* 4312 */
struct __cppobj __declspec(align(16)) FAsyncTask<Audio::FAsyncSoundWavePCMWriteWorker> : IQueuedWork
{
  Audio::FAsyncSoundWavePCMWriteWorker Task;
  FThreadSafeCounter WorkNotFinishedCounter;
  FEvent *DoneEvent;
  FQueuedThreadPool *QueuedPool;
};

/* 4953 */
struct IBreakIteratorVtbl
{
  void *(__cdecl *__vecDelDtor)(IBreakIterator *this, unsigned int);
  __declspec(align(16)) void (__cdecl *SetString)(IBreakIterator *this, FString *);
  void (__cdecl *SetString)(IBreakIterator *this, FText *);
  void (__cdecl *ClearString)(IBreakIterator *this);
  int (__cdecl *GetCurrentPosition)(IBreakIterator *this);
  int (__cdecl *ResetToBeginning)(IBreakIterator *this);
  int (__cdecl *ResetToEnd)(IBreakIterator *this);
  int (__cdecl *MoveToPrevious)(IBreakIterator *this);
  int (__cdecl *MoveToNext)(IBreakIterator *this);
  int (__cdecl *MoveToCandidateBefore)(IBreakIterator *this, const int);
  int (__cdecl *MoveToCandidateAfter)(IBreakIterator *this, const int);
};

/* 7027 */
struct ISceneViewFamilyScreenPercentageVtbl
{
  void *(__cdecl *__vecDelDtor)(ISceneViewFamilyScreenPercentage *this, unsigned int);
  float (__cdecl *GetPrimaryResolutionFractionUpperBound)(ISceneViewFamilyScreenPercentage *this);
  ISceneViewFamilyScreenPercentage *(__cdecl *Fork_GameThread)(ISceneViewFamilyScreenPercentage *this, FSceneViewFamily *);
  void (__cdecl *ComputePrimaryResolutionFractions_RenderThread)(ISceneViewFamilyScreenPercentage *this, TArray<FSceneViewScreenPercentageConfig,FDefaultAllocator> *);
};

/* 6003 */
struct FTemporalLODState
{
  FVector TemporalLODViewOrigin[2];
  float TemporalDistanceFactor[2];
  float TemporalLODTime[2];
  float TemporalLODLag;
};

/* 6944 */
struct FPrimitiveDrawInterface
{
  FPrimitiveDrawInterfaceVtbl *vfptr;
  FSceneView *const View;
};

/* 6135 */
struct __cppobj __declspec(align(8)) FRHITextureCube : FRHITexture
{
  unsigned int Size;
};

/* 6257 */
struct FOneFrameResourceVtbl
{
  void *(__cdecl *__vecDelDtor)(FOneFrameResource *this, unsigned int);
};

/* 6993 */
struct TRefCountPtr<FProjectedShadowInfo>
{
  FProjectedShadowInfo *Reference;
};

/* 5911 */
struct IPooledRenderTargetVtbl
{
  void *(__cdecl *__vecDelDtor)(IPooledRenderTarget *this, unsigned int);
  bool (__cdecl *IsFree)(IPooledRenderTarget *this);
  FPooledRenderTargetDesc *(__cdecl *GetDesc)(IPooledRenderTarget *this);
  void (__cdecl *SetDebugName)(IPooledRenderTarget *this, const wchar_t *);
  unsigned int (__cdecl *ComputeMemorySize)(IPooledRenderTarget *this);
  unsigned int (__cdecl *AddRef)(IPooledRenderTarget *this);
  unsigned int (__cdecl *Release)(IPooledRenderTarget *this);
  unsigned int (__cdecl *GetRefCount)(IPooledRenderTarget *this);
};

/* 5917 */
struct __cppobj __declspec(align(8)) FRHIStructuredBuffer : FRHIResource
{
  unsigned int Stride;
  unsigned int Size;
  unsigned int Usage;
};

/* 6893 */
struct __cppobj TDefaultDelete<FViewUniformShaderParameters>
{
};

/* 6901 */
struct __cppobj TUniquePtr<FViewUniformShaderParameters,TDefaultDelete<FViewUniformShaderParameters> > : TDefaultDelete<FViewUniformShaderParameters>
{
  FViewUniformShaderParameters *Ptr;
};

/* 6905 */
struct TMemStackAllocator<0>::ForElementType<FRHIUniformBuffer *>
{
  FRHIUniformBuffer **Data;
};

/* 6906 */
struct TArray<FRHIUniformBuffer *,TMemStackAllocator<0> >
{
  TMemStackAllocator<0>::ForElementType<FRHIUniformBuffer *> AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 6907 */
struct TMemStackAllocator<0>::ForElementType<FPrimitiveViewRelevance>
{
  FPrimitiveViewRelevance *Data;
};

/* 6908 */
struct TArray<FPrimitiveViewRelevance,TMemStackAllocator<0> >
{
  TMemStackAllocator<0>::ForElementType<FPrimitiveViewRelevance> AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 6909 */
struct TMemStackAllocator<0>::ForElementType<FLODMask>
{
  FLODMask *Data;
};

/* 6910 */
struct TArray<FLODMask,TMemStackAllocator<0> >
{
  TMemStackAllocator<0>::ForElementType<FLODMask> AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 6915 */
struct TMemStackAllocator<0>::ForElementType<FPrimitiveSceneInfo *>
{
  FPrimitiveSceneInfo **Data;
};

/* 6916 */
struct TArray<FPrimitiveSceneInfo *,TMemStackAllocator<0> >
{
  TMemStackAllocator<0>::ForElementType<FPrimitiveSceneInfo *> AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 6917 */
struct TArray<FGlobalDistanceFieldClipmap,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 6918 */
struct FGlobalDistanceFieldInfo
{
  bool bInitialized;
  TArray<FGlobalDistanceFieldClipmap,FDefaultAllocator> MostlyStaticClipmaps;
  TArray<FGlobalDistanceFieldClipmap,FDefaultAllocator> Clipmaps;
  FGlobalDistanceFieldParameterData ParameterData;
};

/* 6919 */
struct __declspec(align(4)) FTranslucenyPrimCount
{
  unsigned int Count[3];
  bool UseSceneColorCopyPerPass[3];
  bool DisableOffscreenRenderingPerPass[3];
};

/* 6921 */
struct TMemStackAllocator<0>::ForElementType<FTranslucentPrimSet::FTranslucentSortedPrim>
{
  FTranslucentPrimSet::FTranslucentSortedPrim *Data;
};

/* 6922 */
struct TArray<FTranslucentPrimSet::FTranslucentSortedPrim,TMemStackAllocator<0> >
{
  TMemStackAllocator<0>::ForElementType<FTranslucentPrimSet::FTranslucentSortedPrim> AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 6923 */
struct FTranslucentPrimSet
{
  FTranslucenyPrimCount SortedPrimsNum;
  TArray<FTranslucentPrimSet::FTranslucentSortedPrim,TMemStackAllocator<0> > SortedPrims;
};

/* 6924 */
struct TMemStackAllocator<0>::ForElementType<FPrimitiveSceneProxy *>
{
  FPrimitiveSceneProxy **Data;
};

/* 6925 */
struct TArray<FPrimitiveSceneProxy *,TMemStackAllocator<0> >
{
  TMemStackAllocator<0>::ForElementType<FPrimitiveSceneProxy *> AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 6926 */
struct FDistortionPrimSet
{
  TArray<FPrimitiveSceneProxy *,TMemStackAllocator<0> > Prims;
};

/* 6928 */
struct TMemStackAllocator<0>::ForElementType<FSortedPrimSet<unsigned int>::FSortedPrim>
{
  FSortedPrimSet<unsigned int>::FSortedPrim *Data;
};

/* 6929 */
struct TArray<FSortedPrimSet<unsigned int>::FSortedPrim,TMemStackAllocator<0> >
{
  TMemStackAllocator<0>::ForElementType<FSortedPrimSet<unsigned int>::FSortedPrim> AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 6930 */
struct FSortedPrimSet<unsigned int>
{
  TArray<FSortedPrimSet<unsigned int>::FSortedPrim,TMemStackAllocator<0> > Prims;
};

/* 6931 */
struct __cppobj FMeshDecalPrimSet : FSortedPrimSet<unsigned int>
{
};

/* 6932 */
struct FCustomDepthPrimSet
{
  TArray<FPrimitiveSceneProxy *,TMemStackAllocator<0> > Prims;
};

/* 6933 */
struct FVolumetricPrimSet
{
  TArray<FPrimitiveSceneProxy *,TMemStackAllocator<0> > Prims;
};

/* 6936 */
struct TMemStackAllocator<0>::ForElementType<FVisibleLightViewInfo>
{
  FVisibleLightViewInfo *Data;
};

/* 6937 */
struct TArray<FVisibleLightViewInfo,TMemStackAllocator<0> >
{
  TMemStackAllocator<0>::ForElementType<FVisibleLightViewInfo> AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 6938 */
struct TIndirectArray<FMeshBatch,FDefaultAllocator>
{
  TArray<void *,FDefaultAllocator> Array;
};

/* 6939 */
struct TArray<FDynamicPrimitiveResource *,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 6943 */
struct TArray<unsigned int,TMemStackAllocator<0> >
{
  TMemStackAllocator<0>::ForElementType<unsigned int> AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 6948 */
struct TMemStackAllocator<0>::ForElementType<FDynamicPrimitiveResource *>
{
  FDynamicPrimitiveResource **Data;
};

/* 6949 */
struct TArray<FDynamicPrimitiveResource *,TMemStackAllocator<0> >
{
  TMemStackAllocator<0>::ForElementType<FDynamicPrimitiveResource *> AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 6950 */
struct __cppobj __declspec(align(16)) FSimpleElementCollector : FPrimitiveDrawInterface
{
  FBatchedElements BatchedElements;
  FHitProxyId HitProxyId;
  bool bIsMobileHDR;
  TArray<FDynamicPrimitiveResource *,TMemStackAllocator<0> > DynamicResources;
};

/* 6951 */
struct FMobileCSMVisibilityInfo
{
  unsigned __int32 bMobileDynamicCSMInUse : 1;
  TBitArray<SceneRenderingBitArrayAllocator> MobilePrimitiveCSMReceiverVisibilityMap;
  TBitArray<SceneRenderingBitArrayAllocator> MobileCSMStaticMeshVisibilityMap;
  TArray<unsigned __int64,TMemStackAllocator<0> > MobileCSMStaticBatchVisibility;
  TBitArray<SceneRenderingBitArrayAllocator> MobileNonCSMStaticMeshVisibilityMap;
  TArray<unsigned __int64,TMemStackAllocator<0> > MobileNonCSMStaticBatchVisibility;
};

/* 6952 */
struct TMemStackAllocator<0>::ForElementType<FMemStackBase>
{
  FMemStackBase *Data;
};

/* 6953 */
struct TArray<FMemStackBase,TMemStackAllocator<0> >
{
  TMemStackAllocator<0>::ForElementType<FMemStackBase> AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 5965 */
struct __declspec(align(8)) FTemporalAAHistory
{
  TRefCountPtr<IPooledRenderTarget> RT[2];
  FIntPoint ReferenceBufferSize;
  FIntRect ViewportRect;
  float SceneColorPreExposure;
};

/* 5966 */
struct __declspec(align(16)) FPreviousViewInfo
{
  FViewMatrices ViewMatrices;
  FTemporalAAHistory TemporalAAHistory;
  FTemporalAAHistory DOFPreGatherHistory;
  FTemporalAAHistory DOFPostGatherForegroundHistory;
  FTemporalAAHistory DOFPostGatherBackgroundHistory;
  TRefCountPtr<IPooledRenderTarget> CustomSSRInput;
};

/* 6956 */
struct TMemStackAllocator<0>::ForElementType<FOcclusionQueryBatcher::FOcclusionBatch>
{
  FOcclusionQueryBatcher::FOcclusionBatch *Data;
};

/* 6957 */
struct TArray<FOcclusionQueryBatcher::FOcclusionBatch,TMemStackAllocator<0> >
{
  TMemStackAllocator<0>::ForElementType<FOcclusionQueryBatcher::FOcclusionBatch> AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 6958 */
struct FOcclusionQueryBatcher
{
  TArray<FOcclusionQueryBatcher::FOcclusionBatch,TMemStackAllocator<0> > BatchOcclusionQueries;
  FOcclusionQueryBatcher::FOcclusionBatch *CurrentBatchOcclusionQuery;
  const unsigned int MaxBatchedPrimitives;
  unsigned int NumBatchedPrimitives;
  FRenderQueryPool *OcclusionQueryPool;
};

/* 6959 */
struct __cppobj TUniformBufferRef<FReflectionCaptureShaderData> : TRefCountPtr<FRHIUniformBuffer>
{
};

/* 5974 */
struct __cppobj TDefaultDelete<FForwardLightingViewResources>
{
};

/* 5993 */
struct __cppobj TUniquePtr<FForwardLightingViewResources,TDefaultDelete<FForwardLightingViewResources> > : TDefaultDelete<FForwardLightingViewResources>
{
  FForwardLightingViewResources *Ptr;
};

/* 6960 */
struct __cppobj TUniformBufferRef<FVolumetricFogGlobalData> : TRefCountPtr<FRHIUniformBuffer>
{
};

/* 6961 */
struct FVolumetricFogViewResources
{
  TUniformBufferRef<FVolumetricFogGlobalData> VolumetricFogGlobalData;
  TRefCountPtr<IPooledRenderTarget> IntegratedLightScattering;
};

/* 6962 */
struct TSparseArray<TSetElement<TTuple<FHeightfieldComponentTextures,TArray<FHeightfieldComponentDescription,FDefaultAllocator> > >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<40,8> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 6963 */
struct __declspec(align(8)) TSet<TTuple<FHeightfieldComponentTextures,TArray<FHeightfieldComponentDescription,FDefaultAllocator> >,TDefaultMapHashableKeyFuncs<FHeightfieldComponentTextures,TArray<FHeightfieldComponentDescription,FDefaultAllocator>,0>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<TTuple<FHeightfieldComponentTextures,TArray<FHeightfieldComponentDescription,FDefaultAllocator> > >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 6964 */
struct TMapBase<FHeightfieldComponentTextures,TArray<FHeightfieldComponentDescription,FDefaultAllocator>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FHeightfieldComponentTextures,TArray<FHeightfieldComponentDescription,FDefaultAllocator>,0> >
{
  TSet<TTuple<FHeightfieldComponentTextures,TArray<FHeightfieldComponentDescription,FDefaultAllocator> >,TDefaultMapHashableKeyFuncs<FHeightfieldComponentTextures,TArray<FHeightfieldComponentDescription,FDefaultAllocator>,0>,FDefaultSetAllocator> Pairs;
};

/* 6965 */
struct __cppobj TSortableMapBase<FHeightfieldComponentTextures,TArray<FHeightfieldComponentDescription,FDefaultAllocator>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FHeightfieldComponentTextures,TArray<FHeightfieldComponentDescription,FDefaultAllocator>,0> > : TMapBase<FHeightfieldComponentTextures,TArray<FHeightfieldComponentDescription,FDefaultAllocator>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FHeightfieldComponentTextures,TArray<FHeightfieldComponentDescription,FDefaultAllocator>,0> >
{
};

/* 6966 */
struct __cppobj TMap<FHeightfieldComponentTextures,TArray<FHeightfieldComponentDescription,FDefaultAllocator>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FHeightfieldComponentTextures,TArray<FHeightfieldComponentDescription,FDefaultAllocator>,0> > : TSortableMapBase<FHeightfieldComponentTextures,TArray<FHeightfieldComponentDescription,FDefaultAllocator>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FHeightfieldComponentTextures,TArray<FHeightfieldComponentDescription,FDefaultAllocator>,0> >
{
};

/* 6967 */
struct FHeightfieldDescription
{
  FIntRect Rect;
  int DownsampleFactor;
  FIntRect DownsampledRect;
  TMap<FHeightfieldComponentTextures,TArray<FHeightfieldComponentDescription,FDefaultAllocator>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FHeightfieldComponentTextures,TArray<FHeightfieldComponentDescription,FDefaultAllocator>,0> > ComponentDescriptions;
};

/* 6968 */
struct FHeightfieldLightingViewInfo
{
  FHeightfieldDescription Heightfield;
};

/* 337 */
enum ESamplerFilter
{
  SF_Point = 0x0,
  SF_Bilinear = 0x1,
  SF_Trilinear = 0x2,
  SF_AnisotropicPoint = 0x3,
  SF_AnisotropicLinear = 0x4,
  ESamplerFilter_Num = 0x5,
  ESamplerFilter_NumBits = 0x3,
};

/* 6975 */
struct __cppobj FViewInfo : FSceneView
{
  FIntRect ViewRect;
  FSceneViewState *ViewState;
  TUniquePtr<FViewUniformShaderParameters,TDefaultDelete<FViewUniformShaderParameters> > CachedViewUniformShaderParameters;
  TBitArray<SceneRenderingBitArrayAllocator> PrimitiveVisibilityMap;
  TBitArray<SceneRenderingBitArrayAllocator> PrimitiveDefinitelyUnoccludedMap;
  TBitArray<SceneRenderingBitArrayAllocator> PotentiallyFadingPrimitiveMap;
  TArray<FRHIUniformBuffer *,TMemStackAllocator<0> > PrimitiveFadeUniformBuffers;
  TArray<FPrimitiveViewRelevance,TMemStackAllocator<0> > PrimitiveViewRelevanceMap;
  TBitArray<SceneRenderingBitArrayAllocator> StaticMeshVisibilityMap;
  TBitArray<SceneRenderingBitArrayAllocator> StaticMeshOccluderMap;
  TBitArray<SceneRenderingBitArrayAllocator> StaticMeshVelocityMap;
  TBitArray<SceneRenderingBitArrayAllocator> StaticMeshShadowDepthMap;
  TBitArray<SceneRenderingBitArrayAllocator> StaticMeshFadeOutDitheredLODMap;
  TBitArray<SceneRenderingBitArrayAllocator> StaticMeshFadeInDitheredLODMap;
  TArray<FLODMask,TMemStackAllocator<0> > PrimitivesLODMask;
  TBitArray<SceneRenderingBitArrayAllocator> InitializedShadowCastingPrimitive;
  TArray<unsigned __int64,TMemStackAllocator<0> > StaticMeshBatchVisibility;
  TArray<FPrimitiveSceneInfo const *,TMemStackAllocator<0> > VisibleDynamicPrimitives;
  TArray<FPrimitiveSceneInfo const *,TMemStackAllocator<0> > VisibleEditorPrimitives;
  TArray<FPrimitiveSceneInfo *,TMemStackAllocator<0> > DirtyPrecomputedLightingBufferPrimitives;
  FGlobalDistanceFieldInfo GlobalDistanceFieldInfo;
  FTranslucentPrimSet TranslucentPrimSet;
  FDistortionPrimSet DistortionPrimSet;
  FMeshDecalPrimSet MeshDecalPrimSet;
  FCustomDepthPrimSet CustomDepthSet;
  FVolumetricPrimSet VolumetricPrimSet;
  TArray<FVisibleLightViewInfo,TMemStackAllocator<0> > VisibleLightInfos;
  FBatchedElements BatchedViewElements;
  FBatchedElements TopBatchedViewElements;
  TIndirectArray<FMeshBatch,FDefaultAllocator> ViewMeshElements;
  TIndirectArray<FMeshBatch,FDefaultAllocator> TopViewMeshElements;
  TArray<FDynamicPrimitiveResource *,FDefaultAllocator> DynamicResources;
  TArray<FMeshBatchAndRelevance,TMemStackAllocator<0> > DynamicMeshElements;
  TArray<unsigned int,TMemStackAllocator<0> > DynamicMeshEndIndices;
  TArray<FMeshBatchAndRelevance,TMemStackAllocator<0> > DynamicEditorMeshElements;
  FSimpleElementCollector SimpleElementCollector;
  FSimpleElementCollector EditorSimpleElementCollector;
  FMobileCSMVisibilityInfo MobileCSMVisibilityInfo;
  TArray<FPrimitiveSceneInfo const *,TMemStackAllocator<0> > PrimitivesWithCustomData;
  TBitArray<SceneRenderingBitArrayAllocator> UpdatedPrimitivesWithCustomData;
  TArray<FMemStackBase,TMemStackAllocator<0> > PrimitiveCustomDataMemStack;
  __declspec(align(16)) FVector4 ExponentialFogParameters;
  FVector ExponentialFogColor;
  float FogMaxOpacity;
  FVector4 ExponentialFogParameters3;
  FVector2D SinCosInscatteringColorCubemapRotation;
  UTexture *FogInscatteringColorCubemap;
  FVector FogInscatteringTextureParameters;
  bool bUseDirectionalInscattering;
  float DirectionalInscatteringExponent;
  float DirectionalInscatteringStartDistance;
  FVector InscatteringLightDirection;
  FLinearColor DirectionalInscatteringColor;
  FVector TranslucencyLightingVolumeMin[2];
  float TranslucencyVolumeVoxelSize[2];
  FVector TranslucencyLightingVolumeSize[2];
  FVector2D TemporalJitterPixels;
  unsigned __int32 bHasNoVisiblePrimitive : 1;
  unsigned __int32 bHasTranslucentViewMeshElements : 1;
  unsigned __int32 bPrevTransformsReset : 1;
  unsigned __int32 bIgnoreExistingQueries : 1;
  unsigned __int32 bDisableQuerySubmissions : 1;
  unsigned __int32 bDisableDistanceBasedFadeTransitions : 1;
  unsigned __int32 bUsesGlobalDistanceField : 1;
  unsigned __int32 bUsesLightingChannels : 1;
  unsigned __int32 bTranslucentSurfaceLighting : 1;
  unsigned __int32 bUsesSceneDepth : 1;
  unsigned __int32 bSceneHasDecals : 1;
  unsigned __int16 ShadingModelMaskInView;
  FPreviousViewInfo PrevViewInfo;
  FRHIGPUMask GPUMask;
  int NumVisibleStaticMeshElements;
  float PreExposure;
  float MaterialTextureMipBias;
  const char *PrecomputedVisibilityData;
  FOcclusionQueryBatcher IndividualOcclusionQueries;
  FOcclusionQueryBatcher GroupedOcclusionQueries;
  TRefCountPtr<IPooledRenderTarget> HZB;
  int NumBoxReflectionCaptures;
  int NumSphereReflectionCaptures;
  float FurthestReflectionCaptureDistance;
  TUniformBufferRef<FReflectionCaptureShaderData> ReflectionCaptureUniformBuffer;
  TUniquePtr<FForwardLightingViewResources,TDefaultDelete<FForwardLightingViewResources> > ForwardLightingResourcesStorage;
  FVolumetricFogViewResources VolumetricFogResources;
  FIntPoint HZBMipmap0Size;
  float OneOverNumPossiblePixels;
  __declspec(align(8)) FVector4 LightShaftCenter;
  FLinearColor LightShaftColorMask;
  FLinearColor LightShaftColorApply;
  bool bLightShaftUse;
  FHeightfieldLightingViewInfo HeightfieldLightingViewInfo;
  TShaderMap<FGlobalShaderType> *ShaderMap;
  bool bIsSnapshot;
  bool bAllowStencilDither;
  ICustomVisibilityQuery *CustomVisibilityQuery;
  TArray<FPrimitiveSceneInfo *,TMemStackAllocator<0> > IndirectShadowPrimitives;
  ESamplerFilter WorldTextureGroupSamplerFilter;
  bool bIsValidWorldTextureGroupSamplerFilter;
};

/* 6061 */
struct __cppobj __declspec(align(8)) FRHIComputeFence : FRHIResource
{
  FName Name;
  bool bWriteEnqueued;
};

/* 6987 */
struct __declspec(align(8)) FShadowStaticMeshElement
{
  FMaterialRenderProxy *RenderProxy;
  FMaterial *MaterialResource;
  FStaticMesh *Mesh;
  bool bIsTwoSided;
};

/* 6940 */
struct __declspec(align(8)) FMeshBatchAndRelevance
{
  FMeshBatch *Mesh;
  FPrimitiveSceneProxy *PrimitiveSceneProxy;
  unsigned __int32 bHasOpaqueMaterial : 1;
  unsigned __int32 bHasMaskedMaterial : 1;
  unsigned __int32 bRenderInMainPass : 1;
};

/* 6702 */
struct __cppobj physx::PxConstraint : physx::PxBase
{
};

/* 6719 */
struct physx::PxContact
{
  physx::PxVec3 contact;
  float separation;
};

/* 6720 */
struct __cppobj physx::PxExtendedContact : physx::PxContact
{
  physx::PxVec3 targetVelocity;
  float maxImpulse;
};

/* 6721 */
struct __cppobj physx::PxModifiableContact : physx::PxExtendedContact
{
  physx::PxVec3 normal;
  float restitution;
  unsigned int materialFlags;
  unsigned __int16 materialIndex0;
  unsigned __int16 materialIndex1;
  float staticFriction;
  float dynamicFriction;
};

/* 1154 */
enum physx::PxTaskType::Enum
{
  TT_CPU = 0x0,
  TT_GPU = 0x1,
  TT_NOT_PRESENT = 0x2,
  TT_COMPLETED = 0x3,
};

/* 6698 */
union $F66B8C552892BF2904413E8BF19D627F
{
  void (__cdecl *~PxTaskManager)(physx::PxTaskManager *this);
  void *(__cdecl *__vecDelDtor)(physx::PxTaskManager *this, unsigned int);
};

/* 6699 */
struct physx::PxTaskManagerVtbl
{
  void (__cdecl *setCpuDispatcher)(physx::PxTaskManager *this, physx::PxCpuDispatcher *);
  _BYTE gap8[16];
  physx::PxGpuDispatcher *(__cdecl *getGpuDispatcher)(physx::PxTaskManager *this);
  void (__cdecl *resetDependencies)(physx::PxTaskManager *this);
  void (__cdecl *startSimulation)(physx::PxTaskManager *this);
  void (__cdecl *stopSimulation)(physx::PxTaskManager *this);
  void (__cdecl *taskCompleted)(physx::PxTaskManager *this, physx::PxTask *);
  unsigned int (__cdecl *getNamedTask)(physx::PxTaskManager *this, const char *);
  unsigned int (__cdecl *submitNamedTask)(physx::PxTaskManager *this, physx::PxTask *, const char *, physx::PxTaskType::Enum);
  unsigned int (__cdecl *submitUnnamedTask)(physx::PxTaskManager *this, physx::PxTask *, physx::PxTaskType::Enum);
  physx::PxTask *(__cdecl *getTaskFromID)(physx::PxTaskManager *this, unsigned int);
  void (__cdecl *release)(physx::PxTaskManager *this);
  $F66B8C552892BF2904413E8BF19D627F ___u11;
  void (__cdecl *finishBefore)(physx::PxTaskManager *this, physx::PxTask *, unsigned int);
  void (__cdecl *startAfter)(physx::PxTaskManager *this, physx::PxTask *, unsigned int);
  void (__cdecl *addReference)(physx::PxTaskManager *this, physx::PxLightCpuTask *);
  void (__cdecl *addReference)(physx::PxTaskManager *this, unsigned int);
  void (__cdecl *decrReference)(physx::PxTaskManager *this, physx::PxLightCpuTask *);
  void (__cdecl *decrReference)(physx::PxTaskManager *this, unsigned int);
  int (__cdecl *getReference)(physx::PxTaskManager *this, unsigned int);
};

/* 6749 */
struct __cppobj nvidia::apex::RenderableIterator : nvidia::apex::ApexInterface
{
};

/* 6146 */
struct __cppobj __declspec(align(8)) FVectorFieldResource : FRenderResource
{
  TRefCountPtr<FRHITexture3D> VolumeTextureRHI;
  int SizeX;
  int SizeY;
  int SizeZ;
  float Intensity;
  FBox LocalBounds;
};

/* 6222 */
struct FBaseParticle
{
  FVector OldLocation;
  float RelativeTime;
  FVector Location;
  float OneOverMaxLifetime;
  FVector BaseVelocity;
  float Rotation;
  FVector Velocity;
  float BaseRotationRate;
  FVector BaseSize;
  float RotationRate;
  FVector Size;
  int Flags;
  FLinearColor Color;
  FLinearColor BaseColor;
};

/* 6223 */
struct FDynamicEmitterDataBase
{
  FDynamicEmitterDataBaseVtbl *vfptr;
  TStatId StatID;
  unsigned __int32 bSelected : 1;
  unsigned __int32 bValid : 1;
  int EmitterIndex;
  FParticleVertexFactoryBase *ParticleVertexFactory;
};

/* 904 */
enum EDynamicEmitterType
{
  DET_Unknown = 0x0,
  DET_Sprite = 0x1,
  DET_Mesh = 0x2,
  DET_Beam2 = 0x3,
  DET_Ribbon = 0x4,
  DET_AnimTrail = 0x5,
  DET_Custom = 0x6,
};

/* 6275 */
struct FParticleDataContainer
{
  int MemBlockSize;
  int ParticleDataNumBytes;
  int ParticleIndicesNumShorts;
  char *ParticleData;
  unsigned __int16 *ParticleIndices;
};

/* 6276 */
struct FMacroUVOverride
{
  bool bOverride;
  float Radius;
  FVector Position;
};

/* 6273 */
const struct __declspec(align(8)) FDynamicEmitterReplayDataBase
{
  FDynamicEmitterReplayDataBaseVtbl *vfptr;
  EDynamicEmitterType eEmitterType;
  int ActiveParticleCount;
  int ParticleStride;
  FParticleDataContainer DataContainer;
  FVector Scale;
  int SortMode;
  FMacroUVOverride MacroUVOverride;
};

/* 114 */
enum EResourceSizeMode::Type
{
  Exclusive = 0x0,
  EstimatedTotal = 0x1,
};

/* 4649 */
struct FResourceSizeEx
{
  EResourceSizeMode::Type ResourceSizeMode;
  unsigned __int64 DedicatedSystemMemoryBytes;
  unsigned __int64 SharedSystemMemoryBytes;
  unsigned __int64 DedicatedVideoMemoryBytes;
  unsigned __int64 SharedVideoMemoryBytes;
  unsigned __int64 UnknownMemoryBytes;
};

/* 6225 */
struct FMaterialRelevance
{
  unsigned __int16 ShadingModelMask;
  unsigned __int32 bOpaque : 1;
  unsigned __int32 bMasked : 1;
  unsigned __int32 bDistortion : 1;
  unsigned __int32 bSeparateTranslucency : 1;
  unsigned __int32 bNormalTranslucency : 1;
  unsigned __int32 bUsesSceneColorCopy : 1;
  unsigned __int32 bDisableOffscreenRendering : 1;
  unsigned __int32 bDisableDepthTest : 1;
  unsigned __int32 bOutputsVelocityInBasePass : 1;
  unsigned __int32 bUsesGlobalDistanceField : 1;
  unsigned __int32 bUsesWorldPositionOffset : 1;
  unsigned __int32 bDecal : 1;
  unsigned __int32 bTranslucentSurfaceLighting : 1;
  unsigned __int32 bUsesSceneDepth : 1;
  unsigned __int32 bHasVolumeMaterialDomain : 1;
};

/* 6165 */
struct __cppobj USubUVAnimation : UObject
{
  UTexture2D *SubUVTexture;
  int SubImages_Horizontal;
  int SubImages_Vertical;
  TEnumAsByte<enum ESubUVBoundingVertexCount> BoundingMode;
  TEnumAsByte<enum EOpacitySourceMode> OpacitySourceMode;
  float AlphaThreshold;
  FSubUVDerivedData DerivedData;
  FRenderCommandFence ReleaseFence;
  FSubUVBoundingGeometryBuffer *BoundingGeometryBuffer;
};

/* 6212 */
struct __cppobj UParticleModuleTypeDataBase : UParticleModule
{
};

/* 6215 */
struct __cppobj UParticleModuleEventBase : UParticleModule
{
};

/* 6216 */
struct TArray<FParticleEvent_GenerateInfo,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 6217 */
struct __cppobj UParticleModuleEventGenerator : UParticleModuleEventBase
{
  TArray<FParticleEvent_GenerateInfo,FDefaultAllocator> Events;
};

/* 6164 */
struct __cppobj FSubUVBoundingGeometryBuffer : FVertexBuffer
{
  TArray<FVector2D,FDefaultAllocator> *Vertices;
  TRefCountPtr<FRHIShaderResourceView> ShaderResourceView;
};

/* 6060 */
struct FRHICommandBaseVtbl
{
  void (__cdecl *ExecuteAndDestruct)(FRHICommandBase *this, FRHICommandListBase *, FRHICommandListDebugContext *);
};

/* 529 */
enum EAsyncComputeBudget
{
  ELeast_0 = 0x0,
  EGfxHeavy_1 = 0x1,
  EBalanced_2 = 0x2,
  EComputeHeavy_3 = 0x3,
  EAll_4 = 0x4,
};

/* 530 */
enum EResourceTransitionAccess
{
  EReadable = 0x0,
  EWritable = 0x1,
  ERWBarrier = 0x2,
  ERWNoBarrier = 0x3,
  ERWSubResBarrier = 0x4,
  EMetaData = 0x5,
  EMaxAccess = 0x6,
};

/* 531 */
enum EResourceTransitionPipeline
{
  EGfxToCompute = 0x0,
  EComputeToGfx = 0x1,
  EGfxToGfx = 0x2,
  EComputeToCompute = 0x3,
};

/* 6064 */
struct IRHIComputeContextVtbl
{
  void (__cdecl *RHIWaitComputeFence)(IRHIComputeContext *this, FRHIComputeFence *);
  _BYTE gap8[16];
  void (__cdecl *RHIDispatchComputeShader)(IRHIComputeContext *this, unsigned int, unsigned int, unsigned int);
  void (__cdecl *RHIDispatchIndirectComputeShader)(IRHIComputeContext *this, FRHIVertexBuffer *, unsigned int);
  void (__cdecl *RHISetAsyncComputeBudget)(IRHIComputeContext *this, EAsyncComputeBudget);
  void (__cdecl *RHITransitionResources)(IRHIComputeContext *this, EResourceTransitionAccess, EResourceTransitionPipeline, FRHIUnorderedAccessView **, int, FRHIComputeFence *);
  void (__cdecl *RHISetShaderTexture)(IRHIComputeContext *this, FRHIComputeShader *, unsigned int, FRHITexture *);
  void (__cdecl *RHISetShaderSampler)(IRHIComputeContext *this, FRHIComputeShader *, unsigned int, FRHISamplerState *);
  void (__cdecl *RHISetUAVParameter)(IRHIComputeContext *this, FRHIComputeShader *, unsigned int, FRHIUnorderedAccessView *, unsigned int);
  void (__cdecl *RHISetUAVParameter)(IRHIComputeContext *this, FRHIComputeShader *, unsigned int, FRHIUnorderedAccessView *);
  void (__cdecl *RHISetShaderResourceViewParameter)(IRHIComputeContext *this, FRHIComputeShader *, unsigned int, FRHIShaderResourceView *);
  void (__cdecl *RHISetShaderUniformBuffer)(IRHIComputeContext *this, FRHIComputeShader *, unsigned int, FRHIUniformBuffer *);
  void (__cdecl *RHISetShaderParameter)(IRHIComputeContext *this, FRHIComputeShader *, unsigned int, unsigned int, unsigned int, const void *);
  void (__cdecl *RHIPushEvent)(IRHIComputeContext *this, const wchar_t *, FColor);
  void (__cdecl *RHIPopEvent)(IRHIComputeContext *this);
  void (__cdecl *RHISubmitCommandsHint)(IRHIComputeContext *this);
  void (__cdecl *RHIInvalidateCachedState)(IRHIComputeContext *this);
};

/* 6070 */
struct IRHIDeprecatedContextVtbl
{
  void (__cdecl *RHISetBoundShaderState)(IRHIDeprecatedContext *this, FRHIBoundShaderState *);
  void (__cdecl *RHISetDepthStencilState)(IRHIDeprecatedContext *this, FRHIDepthStencilState *, unsigned int);
  void (__cdecl *RHISetRasterizerState)(IRHIDeprecatedContext *this, FRHIRasterizerState *);
  void (__cdecl *RHISetBlendState)(IRHIDeprecatedContext *this, FRHIBlendState *, FLinearColor *);
  void (__cdecl *RHIEnableDepthBoundsTest)(IRHIDeprecatedContext *this, bool);
};

/* 1486 */
enum FSavedMove_Character::EPostUpdateMode
{
  PostUpdate_Record = 0x0,
  PostUpdate_Replay = 0x1,
};

/* 4889 */
struct FSavedMove_CharacterVtbl
{
  void *(__cdecl *__vecDelDtor)(FSavedMove_Character *this, unsigned int);
  _BYTE gap8[8];
  void (__cdecl *SetMoveFor)(FSavedMove_Character *this, ACharacter *, float, FVector *, FNetworkPredictionData_Client_Character *);
  void (__cdecl *SetInitialPosition)(FSavedMove_Character *this, ACharacter *);
  bool (__cdecl *IsImportantMove)(FSavedMove_Character *this, TSharedPtr<FSavedMove_Character,0> *);
  FVector *(__cdecl *GetRevertedLocation)(FSavedMove_Character *this, FVector *result);
  void (__cdecl *PostUpdate)(FSavedMove_Character *this, ACharacter *, FSavedMove_Character::EPostUpdateMode);
  bool (__cdecl *CanCombineWith)(FSavedMove_Character *this, TSharedPtr<FSavedMove_Character,0> *, ACharacter *, float);
  void (__cdecl *CombineWith)(FSavedMove_Character *this, FSavedMove_Character *, ACharacter *, APlayerController *, FVector *);
  void (__cdecl *PrepMoveFor)(FSavedMove_Character *this, ACharacter *);
  char (__cdecl *GetCompressedFlags)(FSavedMove_Character *this);
};

/* 1752 */
typedef __MIDL___MIDL_itf_autosvcs_0000_0119_0003 ksRacing::ESpawnType;

/* 68384 */
const struct ksRacing::EntryListUpdatedEvent
{
  long double timeStamp;
  unsigned __int16 carIndex;
  unsigned __int16 driverIndex;
  unsigned __int16 carCount;
  unsigned __int16 driverCount;
  ksRacing::ESpawnType spawnType;
  char connectedCarId;
  ksRacing::CarInfo carInfo;
  ksRacing::DriverInfo driverInfo;
};

/* 68516 */
const struct __declspec(align(8)) ksRacing::UpdateOfficialPositionEvent
{
  long double timeStamp;
  unsigned __int16 carIndex;
  unsigned __int16 newPosition;
};

/* 68530 */
const struct __declspec(align(8)) ksRacing::UpdateCarSystems
{
  unsigned __int16 carIndex;
  unsigned __int64 newSystems;
  bool isReplay;
};

/* 68653 */
const struct __declspec(align(8)) ksRacing::BestLap
{
  ksRacing::Lap lap;
  bool bestPersonal;
  bool bestOverall;
};

/* 68672 */
const struct ksRacing::InvestigationStart
{
  unsigned __int16 carIndex;
  unsigned __int16 driverIndex;
  _BYTE investigationType[1];
  unsigned __int16 microSector;
};

/* 68686 */
const struct ksRacing::InvestigationEnd
{
  unsigned __int16 carIndex;
  unsigned __int16 driverIndex;
  _BYTE penaltyType[1];
  unsigned __int16 microSector;
  int value;
};

/* 4406 */
struct TSharedPtr<INetDeltaBaseState,0>
{
  INetDeltaBaseState *Object;
  SharedPointerInternals::FSharedReferencer<0> SharedReferenceCount;
};

/* 4404 */
struct INetDeltaBaseState
{
  INetDeltaBaseStateVtbl *vfptr;
};

/* 4408 */
struct INetSerializeCB
{
  INetSerializeCBVtbl *vfptr;
};

/* 4410 */
const struct FNetworkGUID
{
  unsigned int Value;
};

/* 7808 */
struct INavigationQueryFilterInterfaceVtbl
{
  void *(__cdecl *__vecDelDtor)(INavigationQueryFilterInterface *this, unsigned int);
  __declspec(align(16)) void (__cdecl *SetAreaCost)(INavigationQueryFilterInterface *this, char, float);
  void (__cdecl *SetFixedAreaEnteringCost)(INavigationQueryFilterInterface *this, char, float);
  void (__cdecl *SetExcludedArea)(INavigationQueryFilterInterface *this, char);
  void (__cdecl *SetAllAreaCosts)(INavigationQueryFilterInterface *this, const float *, const int);
  void (__cdecl *GetAllAreaCosts)(INavigationQueryFilterInterface *this, float *, float *, const int);
  void (__cdecl *SetBacktrackingEnabled)(INavigationQueryFilterInterface *this, const bool);
  bool (__cdecl *IsBacktrackingEnabled)(INavigationQueryFilterInterface *this);
  bool (__cdecl *IsEqual)(INavigationQueryFilterInterface *this, INavigationQueryFilterInterface *);
  void (__cdecl *SetIncludeFlags)(INavigationQueryFilterInterface *this, unsigned __int16);
  unsigned __int16 (__cdecl *GetIncludeFlags)(INavigationQueryFilterInterface *this);
  void (__cdecl *SetExcludeFlags)(INavigationQueryFilterInterface *this, unsigned __int16);
  unsigned __int16 (__cdecl *GetExcludeFlags)(INavigationQueryFilterInterface *this);
  FVector *(__cdecl *GetAdjustedEndLocation)(INavigationQueryFilterInterface *this, FVector *result, FVector *);
  INavigationQueryFilterInterface *(__cdecl *CreateCopy)(INavigationQueryFilterInterface *this);
};

/* 8847 */
const struct TArray<FNavigationDirtyArea,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 5897 */
struct FSceneViewStateReferenceVtbl
{
  void *(__cdecl *__vecDelDtor)(FSceneViewStateReference *this, unsigned int);
};

/* 5269 */
struct TWeakPtr<FDragDropOperation,0>
{
  FDragDropOperation *Object;
  SharedPointerInternals::FWeakReferencer<0> WeakReferenceCount;
};

/* 5270 */
struct TSharedFromThis<FDragDropOperation,0>
{
  TWeakPtr<FDragDropOperation,0> WeakThis;
};

/* 5268 */
struct __cppobj FDragDropOperation : TSharedFromThis<FDragDropOperation,0>
{
  FDragDropOperationVtbl *vfptr;
  bool bCreateNewWindow;
  TSharedPtr<SWindow,0> CursorDecoratorWindow;
  TOptional<enum EMouseCursor::Type> MouseCursor;
  TOptional<enum EMouseCursor::Type> MouseCursorOverride;
};

/* 5290 */
struct ISlateViewportVtbl
{
  void *(__cdecl *__vecDelDtor)(ISlateViewport *this, unsigned int);
  _BYTE gap8[32];
  void (__cdecl *Tick)(ISlateViewport *this, FGeometry *, long double, float);
  bool (__cdecl *RequiresVsync)(ISlateViewport *this);
  bool (__cdecl *AllowScaling)(ISlateViewport *this);
  FCursorReply *(__cdecl *OnCursorQuery)(ISlateViewport *this, FCursorReply *result, FGeometry *, FPointerEvent *);
  TOptional<TSharedRef<SWidget,0> > *(__cdecl *OnMapCursor)(ISlateViewport *this, TOptional<TSharedRef<SWidget,0> > *result, FCursorReply *);
  bool (__cdecl *IsSoftwareCursorVisible)(ISlateViewport *this);
  FVector2D *(__cdecl *GetSoftwareCursorPosition)(ISlateViewport *this, FVector2D *result);
  FReply *(__cdecl *OnMouseButtonDown)(ISlateViewport *this, FReply *result, FGeometry *, FPointerEvent *);
  FReply *(__cdecl *OnMouseButtonUp)(ISlateViewport *this, FReply *result, FGeometry *, FPointerEvent *);
  void (__cdecl *OnMouseEnter)(ISlateViewport *this, FGeometry *, FPointerEvent *);
  void (__cdecl *OnMouseLeave)(ISlateViewport *this, FPointerEvent *);
  FReply *(__cdecl *OnMouseMove)(ISlateViewport *this, FReply *result, FGeometry *, FPointerEvent *);
  FReply *(__cdecl *OnMouseWheel)(ISlateViewport *this, FReply *result, FGeometry *, FPointerEvent *);
  FReply *(__cdecl *OnMouseButtonDoubleClick)(ISlateViewport *this, FReply *result, FGeometry *, FPointerEvent *);
  FReply *(__cdecl *OnKeyDown)(ISlateViewport *this, FReply *result, FGeometry *, FKeyEvent *);
  FReply *(__cdecl *OnKeyUp)(ISlateViewport *this, FReply *result, FGeometry *, FKeyEvent *);
  FReply *(__cdecl *OnAnalogValueChanged)(ISlateViewport *this, FReply *result, FGeometry *, FAnalogInputEvent *);
  FReply *(__cdecl *OnKeyChar)(ISlateViewport *this, FReply *result, FGeometry *, FCharacterEvent *);
  FReply *(__cdecl *OnFocusReceived)(ISlateViewport *this, FReply *result, FFocusEvent *);
  FReply *(__cdecl *OnTouchStarted)(ISlateViewport *this, FReply *result, FGeometry *, FPointerEvent *);
  FReply *(__cdecl *OnTouchMoved)(ISlateViewport *this, FReply *result, FGeometry *, FPointerEvent *);
  FReply *(__cdecl *OnTouchEnded)(ISlateViewport *this, FReply *result, FGeometry *, FPointerEvent *);
  FReply *(__cdecl *OnTouchGesture)(ISlateViewport *this, FReply *result, FGeometry *, FPointerEvent *);
  FReply *(__cdecl *OnMotionDetected)(ISlateViewport *this, FReply *result, FGeometry *, FMotionEvent *);
  TOptional<bool> *(__cdecl *OnQueryShowFocus)(ISlateViewport *this, TOptional<bool> *result, EFocusCause);
  void (__cdecl *OnFinishedPointerInput)(ISlateViewport *this);
  FPopupMethodReply *(__cdecl *OnQueryPopupMethod)(ISlateViewport *this, FPopupMethodReply *result);
  FNavigationReply *(__cdecl *OnNavigation)(ISlateViewport *this, FNavigationReply *result, FGeometry *, FNavigationEvent *);
  bool (__cdecl *HandleNavigation)(ISlateViewport *this, const unsigned int, TSharedPtr<SWidget,0>);
  void (__cdecl *OnFocusLost)(ISlateViewport *this, FFocusEvent *);
  FReply *(__cdecl *OnRequestWindowClose)(ISlateViewport *this, FReply *result);
  void (__cdecl *OnViewportClosed)(ISlateViewport *this);
  TWeakPtr<SWidget,0> *(__cdecl *GetWidget)(ISlateViewport *this, TWeakPtr<SWidget,0> *result);
  FReply *(__cdecl *OnViewportActivated)(ISlateViewport *this, FReply *result, FWindowActivateEvent *);
  void (__cdecl *OnViewportDeactivated)(ISlateViewport *this, FWindowActivateEvent *);
};

/* 5332 */
struct FGenericWindowVtbl
{
  void *(__cdecl *__vecDelDtor)(FGenericWindow *this, unsigned int);
  _BYTE gap8[24];
  void (__cdecl *BringToFront)(FGenericWindow *this, bool);
  void (__cdecl *HACK_ForceToFront)(FGenericWindow *this);
  void (__cdecl *Destroy)(FGenericWindow *this);
  void (__cdecl *Minimize)(FGenericWindow *this);
  void (__cdecl *Maximize)(FGenericWindow *this);
  void (__cdecl *Restore)(FGenericWindow *this);
  void (__cdecl *Show)(FGenericWindow *this);
  void (__cdecl *Hide)(FGenericWindow *this);
  void (__cdecl *SetWindowMode)(FGenericWindow *this, EWindowMode::Type);
  EWindowMode::Type (__cdecl *GetWindowMode)(FGenericWindow *this);
  bool (__cdecl *IsMaximized)(FGenericWindow *this);
  bool (__cdecl *IsMinimized)(FGenericWindow *this);
  bool (__cdecl *IsVisible)(FGenericWindow *this);
  bool (__cdecl *GetRestoredDimensions)(FGenericWindow *this, int *, int *, int *, int *);
  void (__cdecl *SetWindowFocus)(FGenericWindow *this);
  void (__cdecl *SetOpacity)(FGenericWindow *this, const float);
  void (__cdecl *Enable)(FGenericWindow *this, bool);
  bool (__cdecl *IsPointInWindow)(FGenericWindow *this, int, int);
  int (__cdecl *GetWindowBorderSize)(FGenericWindow *this);
  int (__cdecl *GetWindowTitleBarSize)(FGenericWindow *this);
  void *(__cdecl *GetOSWindowHandle)(FGenericWindow *this);
  bool (__cdecl *IsForegroundWindow)(FGenericWindow *this);
  void (__cdecl *SetText)(FGenericWindow *this, const wchar_t *const );
  FGenericWindowDefinition *(__cdecl *GetDefinition)(FGenericWindow *this);
  bool (__cdecl *IsDefinitionValid)(FGenericWindow *this);
  void (__cdecl *AdjustCachedSize)(FGenericWindow *this, FVector2D *);
  float (__cdecl *GetDPIScaleFactor)(FGenericWindow *this);
};

/* 5331 */
const struct FGenericWindowDefinition
{
  EWindowType Type;
  float XDesiredPositionOnScreen;
  float YDesiredPositionOnScreen;
  float WidthDesiredOnScreen;
  float HeightDesiredOnScreen;
  EWindowTransparency TransparencySupport;
  bool HasOSWindowBorder;
  bool AppearsInTaskbar;
  bool IsTopmostWindow;
  bool AcceptsInput;
  EWindowActivationPolicy ActivationPolicy;
  bool FocusWhenFirstShown;
  bool HasCloseButton;
  bool SupportsMinimize;
  bool SupportsMaximize;
  bool IsModalWindow;
  bool IsRegularWindow;
  bool HasSizingFrame;
  bool SizeWillChangeOften;
  bool ShouldPreserveAspectRatio;
  int ExpectedMaxWidth;
  int ExpectedMaxHeight;
  FString Title;
  float Opacity;
  int CornerRadius;
  FWindowSizeLimits SizeLimits;
};

/* 5355 */
struct IWindowTitleBarVtbl
{
  void (__cdecl *Flash)(IWindowTitleBar *this);
};

/* 6600 */
struct TSharedPtr<IGameLayer,0>
{
  IGameLayer *Object;
  SharedPointerInternals::FSharedReferencer<0> SharedReferenceCount;
};

/* 6596 */
struct TWeakPtr<IGameLayer,0>
{
  IGameLayer *Object;
  SharedPointerInternals::FWeakReferencer<0> WeakReferenceCount;
};

/* 6597 */
struct TSharedFromThis<IGameLayer,0>
{
  TWeakPtr<IGameLayer,0> WeakThis;
};

/* 6595 */
struct __cppobj IGameLayer : TSharedFromThis<IGameLayer,0>
{
  IGameLayerVtbl *vfptr;
};

/* 5098 */
struct FInterpEdInputData
{
  int InputType;
  int InputData;
  void *TempData;
  bool bCtrlDown;
  bool bAltDown;
  bool bShiftDown;
  bool bCmdDown;
  FIntPoint MouseStart;
  FIntPoint MouseCurrent;
  float PixelsPerSec;
};

/* 2898 */
enum EMaterialExposedViewProperty
{
  MEVP_BufferSize = 0x0,
  MEVP_FieldOfView = 0x1,
  MEVP_TanHalfFieldOfView = 0x2,
  MEVP_ViewSize = 0x3,
  MEVP_WorldSpaceViewPosition = 0x4,
  MEVP_WorldSpaceCameraPosition = 0x5,
  MEVP_ViewportOffset = 0x6,
  MEVP_MAX = 0x7,
};

/* 2896 */
enum EWorldPositionIncludedOffsets
{
  WPT_Default = 0x0,
  WPT_ExcludeAllShaderOffsets = 0x1,
  WPT_CameraRelative = 0x2,
  WPT_CameraRelativeNoOffsets = 0x3,
  WPT_MAX = 0x4,
};

/* 159 */
enum EMaterialSamplerType
{
  SAMPLERTYPE_Color = 0x0,
  SAMPLERTYPE_Grayscale = 0x1,
  SAMPLERTYPE_Alpha = 0x2,
  SAMPLERTYPE_Normal = 0x3,
  SAMPLERTYPE_Masks = 0x4,
  SAMPLERTYPE_DistanceFieldFont = 0x5,
  SAMPLERTYPE_LinearColor = 0x6,
  SAMPLERTYPE_LinearGrayscale = 0x7,
  SAMPLERTYPE_External = 0x8,
  SAMPLERTYPE_MAX = 0x9,
};

/* 234 */
enum ETextureMipValueMode
{
  TMVM_None = 0x0,
  TMVM_MipLevel = 0x1,
  TMVM_MipBias = 0x2,
  TMVM_Derivative = 0x3,
  TMVM_MAX = 0x4,
};

/* 146 */
enum ESamplerSourceMode
{
  SSM_FromTextureAsset = 0x0,
  SSM_Wrap_WorldGroupSettings = 0x1,
  SSM_Clamp_WorldGroupSettings = 0x2,
};

/* 2897 */
enum EMaterialExposedTextureProperty
{
  TMTM_TextureSize = 0x0,
  TMTM_TexelSize = 0x1,
  TMTM_MAX = 0x2,
};

/* 7095 */
struct __cppobj TTypeCompatibleBytes<FName> : TAlignedBytes<8,8>
{
};

/* 7096 */
struct __declspec(align(8)) TOptional<FName>
{
  TTypeCompatibleBytes<FName> Value;
  bool bIsSet;
};

/* 340 */
enum EMaterialCommonBasis
{
  MCB_Tangent = 0x0,
  MCB_Local = 0x1,
  MCB_TranslatedWorld = 0x2,
  MCB_World = 0x3,
  MCB_View = 0x4,
  MCB_Camera = 0x5,
  MCB_MeshParticle = 0x6,
  MCB_MAX = 0x7,
};

/* 7103 */
struct FMaterialCompilerVtbl
{
  void *(__cdecl *__vecDelDtor)(FMaterialCompiler *this, unsigned int);
  _BYTE gap8[160];
  int (__cdecl *GetCurrentFunctionStackDepth)(FMaterialCompiler *this);
  int (__cdecl *AccessCollectionParameter)(FMaterialCompiler *this, UMaterialParameterCollection *, int, int);
  int (__cdecl *ScalarParameter)(FMaterialCompiler *this, FName, float);
  int (__cdecl *VectorParameter)(FMaterialCompiler *this, FName, FLinearColor *);
  int (__cdecl *Constant)(FMaterialCompiler *this, float);
  int (__cdecl *Constant2)(FMaterialCompiler *this, float, float);
  int (__cdecl *Constant3)(FMaterialCompiler *this, float, float, float);
  int (__cdecl *Constant4)(FMaterialCompiler *this, float, float, float, float);
  int (__cdecl *ViewProperty)(FMaterialCompiler *this, EMaterialExposedViewProperty, bool);
  int (__cdecl *GameTime)(FMaterialCompiler *this, bool, float);
  int (__cdecl *RealTime)(FMaterialCompiler *this, bool, float);
  int (__cdecl *PeriodicHint)(FMaterialCompiler *this, int);
  int (__cdecl *Sine)(FMaterialCompiler *this, int);
  int (__cdecl *Cosine)(FMaterialCompiler *this, int);
  int (__cdecl *Tangent)(FMaterialCompiler *this, int);
  int (__cdecl *Arcsine)(FMaterialCompiler *this, int);
  int (__cdecl *ArcsineFast)(FMaterialCompiler *this, int);
  int (__cdecl *Arccosine)(FMaterialCompiler *this, int);
  int (__cdecl *ArccosineFast)(FMaterialCompiler *this, int);
  int (__cdecl *Arctangent)(FMaterialCompiler *this, int);
  int (__cdecl *ArctangentFast)(FMaterialCompiler *this, int);
  int (__cdecl *Arctangent2)(FMaterialCompiler *this, int, int);
  int (__cdecl *Arctangent2Fast)(FMaterialCompiler *this, int, int);
  int (__cdecl *Floor)(FMaterialCompiler *this, int);
  int (__cdecl *Ceil)(FMaterialCompiler *this, int);
  int (__cdecl *Round)(FMaterialCompiler *this, int);
  int (__cdecl *Truncate)(FMaterialCompiler *this, int);
  int (__cdecl *Sign)(FMaterialCompiler *this, int);
  int (__cdecl *Frac)(FMaterialCompiler *this, int);
  int (__cdecl *Fmod)(FMaterialCompiler *this, int, int);
  int (__cdecl *Abs)(FMaterialCompiler *this, int);
  int (__cdecl *ReflectionVector)(FMaterialCompiler *this);
  int (__cdecl *ReflectionAboutCustomWorldNormal)(FMaterialCompiler *this, int, int);
  int (__cdecl *CameraVector)(FMaterialCompiler *this);
  int (__cdecl *LightVector)(FMaterialCompiler *this);
  int (__cdecl *GetViewportUV)(FMaterialCompiler *this);
  int (__cdecl *GetPixelPosition)(FMaterialCompiler *this);
  int (__cdecl *WorldPosition)(FMaterialCompiler *this, EWorldPositionIncludedOffsets);
  int (__cdecl *ObjectWorldPosition)(FMaterialCompiler *this);
  int (__cdecl *ObjectRadius)(FMaterialCompiler *this);
  int (__cdecl *ObjectBounds)(FMaterialCompiler *this);
  int (__cdecl *DistanceCullFade)(FMaterialCompiler *this);
  int (__cdecl *ActorWorldPosition)(FMaterialCompiler *this);
  int (__cdecl *ParticleMacroUV)(FMaterialCompiler *this);
  int (__cdecl *ParticleSubUV)(FMaterialCompiler *this, int, EMaterialSamplerType, bool);
  int (__cdecl *ParticleColor)(FMaterialCompiler *this);
  int (__cdecl *ParticlePosition)(FMaterialCompiler *this);
  int (__cdecl *ParticleRadius)(FMaterialCompiler *this);
  int (__cdecl *SphericalParticleOpacity)(FMaterialCompiler *this, int);
  int (__cdecl *ParticleRelativeTime)(FMaterialCompiler *this);
  int (__cdecl *ParticleMotionBlurFade)(FMaterialCompiler *this);
  int (__cdecl *ParticleRandom)(FMaterialCompiler *this);
  int (__cdecl *ParticleDirection)(FMaterialCompiler *this);
  int (__cdecl *ParticleSpeed)(FMaterialCompiler *this);
  int (__cdecl *ParticleSize)(FMaterialCompiler *this);
  int (__cdecl *If)(FMaterialCompiler *this, int, int, int, int, int, int);
  int (__cdecl *TextureCoordinate)(FMaterialCompiler *this, unsigned int, bool, bool);
  int (__cdecl *TextureSample)(FMaterialCompiler *this, int, int, EMaterialSamplerType, int, int, ETextureMipValueMode, ESamplerSourceMode, int, bool);
  int (__cdecl *TextureProperty)(FMaterialCompiler *this, int, EMaterialExposedTextureProperty);
  int (__cdecl *TextureDecalMipmapLevel)(FMaterialCompiler *this, int);
  int (__cdecl *TextureDecalDerivative)(FMaterialCompiler *this, bool);
  int (__cdecl *DecalLifetimeOpacity)(FMaterialCompiler *this);
  int (__cdecl *Texture)(FMaterialCompiler *this, UTexture *, int *, ESamplerSourceMode, ETextureMipValueMode);
  int (__cdecl *TextureParameter)(FMaterialCompiler *this, FName, UTexture *, int *, ESamplerSourceMode);
  int (__cdecl *ExternalTexture)(FMaterialCompiler *this, UTexture *, int *);
  int (__cdecl *ExternalTexture)(FMaterialCompiler *this, FGuid *);
  int (__cdecl *ExternalTextureParameter)(FMaterialCompiler *this, FName, UTexture *, int *);
  int (__cdecl *ExternalTextureCoordinateScaleRotation)(FMaterialCompiler *this, FGuid *);
  int (__cdecl *ExternalTextureCoordinateScaleRotation)(FMaterialCompiler *this, int, TOptional<FName>);
  int (__cdecl *ExternalTextureCoordinateOffset)(FMaterialCompiler *this, FGuid *);
  int (__cdecl *ExternalTextureCoordinateOffset)(FMaterialCompiler *this, int, TOptional<FName>);
  int (__cdecl *GetTextureReferenceIndex)(FMaterialCompiler *this, UTexture *);
  int (__cdecl *PixelDepth)(FMaterialCompiler *this);
  int (__cdecl *SceneDepth)(FMaterialCompiler *this, int, int, bool);
  int (__cdecl *SceneColor)(FMaterialCompiler *this, int, int, bool);
  int (__cdecl *SceneTextureLookup)(FMaterialCompiler *this, int, unsigned int, bool);
  int (__cdecl *GetSceneTextureViewSize)(FMaterialCompiler *this, int, bool);
  int (__cdecl *StaticBool)(FMaterialCompiler *this, bool);
  int (__cdecl *StaticBoolParameter)(FMaterialCompiler *this, FName, bool);
  int (__cdecl *StaticComponentMask)(FMaterialCompiler *this, int, FName, bool, bool, bool, bool);
  FMaterialLayersFunctions *(__cdecl *StaticMaterialLayersParameter)(FMaterialCompiler *this, FName);
  bool (__cdecl *GetStaticBoolValue)(FMaterialCompiler *this, int, bool *);
  int (__cdecl *StaticTerrainLayerWeight)(FMaterialCompiler *this, FName, int);
  int (__cdecl *VertexColor)(FMaterialCompiler *this);
  int (__cdecl *PreSkinnedPosition)(FMaterialCompiler *this);
  int (__cdecl *PreSkinnedNormal)(FMaterialCompiler *this);
  int (__cdecl *VertexInterpolator)(FMaterialCompiler *this, unsigned int);
  int (__cdecl *Add)(FMaterialCompiler *this, int, int);
  int (__cdecl *Sub)(FMaterialCompiler *this, int, int);
  int (__cdecl *Mul)(FMaterialCompiler *this, int, int);
  int (__cdecl *Div)(FMaterialCompiler *this, int, int);
  int (__cdecl *Dot)(FMaterialCompiler *this, int, int);
  int (__cdecl *Cross)(FMaterialCompiler *this, int, int);
  int (__cdecl *Power)(FMaterialCompiler *this, int, int);
  int (__cdecl *Logarithm2)(FMaterialCompiler *this, int);
  int (__cdecl *Logarithm10)(FMaterialCompiler *this, int);
  int (__cdecl *SquareRoot)(FMaterialCompiler *this, int);
  int (__cdecl *Length)(FMaterialCompiler *this, int);
  int (__cdecl *Lerp)(FMaterialCompiler *this, int, int, int);
  int (__cdecl *Min)(FMaterialCompiler *this, int, int);
  int (__cdecl *Max)(FMaterialCompiler *this, int, int);
  int (__cdecl *Clamp)(FMaterialCompiler *this, int, int, int);
  int (__cdecl *Saturate)(FMaterialCompiler *this, int);
  int (__cdecl *ComponentMask)(FMaterialCompiler *this, int, bool, bool, bool, bool);
  int (__cdecl *AppendVector)(FMaterialCompiler *this, int, int);
  int (__cdecl *TransformVector)(FMaterialCompiler *this, EMaterialCommonBasis, EMaterialCommonBasis, int);
  int (__cdecl *TransformPosition)(FMaterialCompiler *this, EMaterialCommonBasis, EMaterialCommonBasis, int);
  int (__cdecl *DynamicParameter)(FMaterialCompiler *this, FLinearColor *, unsigned int);
  int (__cdecl *LightmapUVs)(FMaterialCompiler *this);
  int (__cdecl *PrecomputedAOMask)(FMaterialCompiler *this);
  int (__cdecl *LightmassReplace)(FMaterialCompiler *this, int, int);
  int (__cdecl *GIReplace)(FMaterialCompiler *this, int, int, int);
  int (__cdecl *MaterialProxyReplace)(FMaterialCompiler *this, int, int);
  int (__cdecl *ObjectOrientation)(FMaterialCompiler *this);
  int (__cdecl *RotateAboutAxis)(FMaterialCompiler *this, int, int, int);
  int (__cdecl *TwoSidedSign)(FMaterialCompiler *this);
  int (__cdecl *VertexNormal)(FMaterialCompiler *this);
  int (__cdecl *PixelNormalWS)(FMaterialCompiler *this);
  int (__cdecl *CustomExpression)(FMaterialCompiler *this, UMaterialExpressionCustom *, TArray<int,FDefaultAllocator> *);
  int (__cdecl *CustomOutput)(FMaterialCompiler *this, UMaterialExpressionCustomOutput *, int, int);
  int (__cdecl *DDX)(FMaterialCompiler *this, int);
  int (__cdecl *DDY)(FMaterialCompiler *this, int);
  int (__cdecl *PerInstanceRandom)(FMaterialCompiler *this);
  int (__cdecl *PerInstanceFadeAmount)(FMaterialCompiler *this);
  int (__cdecl *AntialiasedTextureMask)(FMaterialCompiler *this, int, int, float, char);
  int (__cdecl *Sobol)(FMaterialCompiler *this, int, int, int);
  int (__cdecl *TemporalSobol)(FMaterialCompiler *this, int, int);
  int (__cdecl *Noise)(FMaterialCompiler *this, int, float, int, char, bool, int, float, float, float, int, bool, unsigned int);
  int (__cdecl *VectorNoise)(FMaterialCompiler *this, int, int, char, bool, unsigned int);
  int (__cdecl *BlackBody)(FMaterialCompiler *this, int);
  int (__cdecl *DistanceToNearestSurface)(FMaterialCompiler *this, int);
  int (__cdecl *DistanceFieldGradient)(FMaterialCompiler *this, int);
  int (__cdecl *DepthOfFieldFunction)(FMaterialCompiler *this, int, int);
  int (__cdecl *AtmosphericFogColor)(FMaterialCompiler *this, int);
  int (__cdecl *RotateScaleOffsetTexCoords)(FMaterialCompiler *this, int, int, int);
  int (__cdecl *SpeedTree)(FMaterialCompiler *this, int, int, int, float, bool, bool, int);
  int (__cdecl *TextureCoordinateOffset)(FMaterialCompiler *this);
  int (__cdecl *EyeAdaptation)(FMaterialCompiler *this);
  int (__cdecl *AtmosphericLightVector)(FMaterialCompiler *this);
  int (__cdecl *AtmosphericLightColor)(FMaterialCompiler *this);
  bool (__cdecl *IsCurrentlyCompilingForPreviousFrame)(FMaterialCompiler *this);
};

/* 4098 */
struct __cppobj __declspec(align(8)) FRHIIndexBuffer : FRHIResource
{
  unsigned int Stride;
  unsigned int Size;
  unsigned int Usage;
};

/* 8687 */
struct FTextLayoutVtbl
{
  void *(__cdecl *__vecDelDtor)(FTextLayout *this, unsigned int);
  void (__cdecl *UpdateIfNeeded)(FTextLayout *this);
  void (__cdecl *UpdateLayout)(FTextLayout *this);
  void (__cdecl *UpdateHighlights)(FTextLayout *this);
  void (__cdecl *BeginLayout)(FTextLayout *this);
  void (__cdecl *EndLayout)(FTextLayout *this);
  TSharedRef<IRun,0> *(__cdecl *CreateDefaultTextRun)(FTextLayout *this, TSharedRef<IRun,0> *result, TSharedRef<FString,0> *, FTextRange *);
};

/* 8215 */
struct TextBiDi::ITextBiDi
{
  TextBiDi::ITextBiDiVtbl *vfptr;
};

/* 8698 */
struct ITextLayoutMarshallerVtbl
{
  void *(__cdecl *__vecDelDtor)(ITextLayoutMarshaller *this, unsigned int);
  void (__cdecl *SetText)(ITextLayoutMarshaller *this, FString *, FTextLayout *);
  void (__cdecl *GetText)(ITextLayoutMarshaller *this, FString *, FTextLayout *);
  bool (__cdecl *RequiresLiveUpdate)(ITextLayoutMarshaller *this);
  void (__cdecl *MakeDirty)(ITextLayoutMarshaller *this);
  void (__cdecl *ClearDirty)(ITextLayoutMarshaller *this);
  bool (__cdecl *IsDirty)(ITextLayoutMarshaller *this);
};

/* 8680 */
struct IRunRendererVtbl
{
  void *(__cdecl *__vecDelDtor)(IRunRenderer *this, unsigned int);
};

/* 5245 */
struct FSlateShaderResource
{
  FSlateShaderResourceVtbl *vfptr;
};

/* 12523 */
struct ISlateWidgetStyleContainerInterfaceVtbl
{
  void *(__cdecl *__vecDelDtor)(ISlateWidgetStyleContainerInterface *this, unsigned int);
  UObject *(__cdecl *_getUObject)(ISlateWidgetStyleContainerInterface *this);
  FSlateWidgetStyle *(__cdecl *GetStyle)(ISlateWidgetStyleContainerInterface *this);
};

/* 16229 */
struct __cppobj SSpacer : SLeafWidget
{
  TAttribute<FVector2D> SpacerSize;
};

/* 9742 */
struct TIndirectArray<SScrollBarTrack::FSlot,FDefaultAllocator>
{
  TArray<void *,FDefaultAllocator> Array;
};

/* 9743 */
struct __cppobj __declspec(align(8)) TPanelChildren<SScrollBarTrack::FSlot> : FChildren, TIndirectArray<SScrollBarTrack::FSlot,FDefaultAllocator>
{
  bool bEmptying;
};

/* 9744 */
struct __cppobj SScrollBarTrack : SPanel
{
  TPanelChildren<SScrollBarTrack::FSlot> Children;
  float OffsetFraction;
  float ThumbSizeFraction;
  float MinThumbSize;
  EOrientation Orientation;
};

/* 4310 */
union $5AD9E17AB132E8AEEB75CAE19F99B44E
{
  void (__cdecl *~FQueuedThreadPool)(FQueuedThreadPool *this);
  void *(__cdecl *__vecDelDtor)(FQueuedThreadPool *this, unsigned int);
};

/* 4311 */
struct FQueuedThreadPoolVtbl
{
  bool (__cdecl *Create)(FQueuedThreadPool *this, unsigned int, unsigned int, EThreadPriority);
  void (__cdecl *Destroy)(FQueuedThreadPool *this);
  void (__cdecl *AddQueuedWork)(FQueuedThreadPool *this, IQueuedWork *);
  bool (__cdecl *RetractQueuedWork)(FQueuedThreadPool *this, IQueuedWork *);
  IQueuedWork *(__cdecl *ReturnToPoolOrGetNextJob)(FQueuedThreadPool *this, FQueuedThread *);
  int (__cdecl *GetNumThreads)(FQueuedThreadPool *this);
  $5AD9E17AB132E8AEEB75CAE19F99B44E ___u6;
};

/* 4648 */
struct FDynamicSkelMeshObjectDataGPUSkin
{
  FDynamicSkelMeshObjectDataGPUSkinVtbl *vfptr;
  __declspec(align(16)) TArray<FMatrix,FDefaultAllocator> ReferenceToLocal;
  TArray<FMatrix,FDefaultAllocator> PreviousReferenceToLocal;
  int LODIndex;
  TArray<FActiveMorphTarget,FDefaultAllocator> ActiveMorphTargets;
  TArray<float,FDefaultAllocator> MorphTargetWeights;
  TArray<int,FDefaultAllocator> SectionIdsUseByActiveMorphTargets;
  int NumWeightedActiveMorphTargets;
  TMap<int,FClothSimulData,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<int,FClothSimulData,0> > ClothingSimData;
  FMatrix ClothObjectLocalToWorld;
  float ClothBlendWeight;
};

/* 4692 */
struct FOutParmRec
{
  UProperty *Property;
  char *PropAddr;
  FOutParmRec *NextOutParm;
};

/* 4773 */
struct FAnimationBaseContext
{
  FAnimInstanceProxy *AnimInstanceProxy;
};

/* 4778 */
struct TMemStackAllocator<0>::ForElementType<FTransform>
{
  FTransform *Data;
};

/* 4779 */
struct TArray<FTransform,TMemStackAllocator<0> >
{
  TMemStackAllocator<0>::ForElementType<FTransform> AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 4780 */
struct FBasePose<FCompactPoseBoneIndex,TMemStackAllocator<0> >
{
  TArray<FTransform,TMemStackAllocator<0> > Bones;
};

/* 4793 */
struct __cppobj FBaseCompactPose<TMemStackAllocator<0> > : FBasePose<FCompactPoseBoneIndex,TMemStackAllocator<0> >
{
  FBoneContainer *BoneContainer;
};

/* 4794 */
struct __cppobj FCompactPose : FBaseCompactPose<TMemStackAllocator<0> >
{
};

/* 4796 */
struct TMemStackAllocator<0>::ForElementType<FCurveElement>
{
  FCurveElement *Data;
};

/* 4797 */
struct TArray<FCurveElement,TMemStackAllocator<0> >
{
  TMemStackAllocator<0>::ForElementType<FCurveElement> AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 4798 */
struct __declspec(align(8)) FBaseBlendedCurve<TMemStackAllocator<0> >
{
  TArray<FCurveElement,TMemStackAllocator<0> > Elements;
  TArray<unsigned short,FDefaultAllocator> *UIDToArrayIndexLUT;
  unsigned __int16 NumValidCurveCount;
  bool bInitialized;
};

/* 4799 */
struct __cppobj FBlendedCurve : FBaseBlendedCurve<TMemStackAllocator<0> >
{
};

/* 4800 */
struct __cppobj __declspec(align(8)) FPoseContext : FAnimationBaseContext
{
  FCompactPose Pose;
  FBlendedCurve Curve;
  bool bExpectsAdditivePose;
};

/* 545 */
typedef _PaddingMode ETeleportType;

/* 4807 */
union $E1773F4A53F30EE67E9EA1FC7F311B56
{
  void (__cdecl *~FAnimNode_Base)(FAnimNode_Base *this);
  void *(__cdecl *__vecDelDtor)(FAnimNode_Base *this, unsigned int);
};

/* 4808 */
struct FAnimNode_BaseVtbl
{
  void (__cdecl *Initialize_AnyThread)(FAnimNode_Base *this, FAnimationInitializeContext *);
  _BYTE gap8[16];
  void (__cdecl *Evaluate_AnyThread)(FAnimNode_Base *this, FPoseContext *);
  void (__cdecl *EvaluateComponentSpace_AnyThread)(FAnimNode_Base *this, FComponentSpacePoseContext *);
  void (__cdecl *OverrideAsset)(FAnimNode_Base *this, UAnimationAsset *);
  void (__cdecl *GatherDebugData)(FAnimNode_Base *this, FNodeDebugData *);
  bool (__cdecl *CanUpdateInWorkerThread)(FAnimNode_Base *this);
  bool (__cdecl *HasPreUpdate)(FAnimNode_Base *this);
  void (__cdecl *PreUpdate)(FAnimNode_Base *this, UAnimInstance *);
  bool (__cdecl *NeedsDynamicReset)(FAnimNode_Base *this);
  void (__cdecl *ResetDynamics)(FAnimNode_Base *this);
  void (__cdecl *ResetDynamics)(FAnimNode_Base *this, ETeleportType);
  void (__cdecl *PostCompile)(FAnimNode_Base *this, USkeleton *);
  $E1773F4A53F30EE67E9EA1FC7F311B56 ___u12;
  void (__cdecl *Initialize)(FAnimNode_Base *this, FAnimationInitializeContext *);
  void (__cdecl *CacheBones)(FAnimNode_Base *this, FAnimationCacheBonesContext *);
  void (__cdecl *Update)(FAnimNode_Base *this, FAnimationUpdateContext *);
  void (__cdecl *Evaluate)(FAnimNode_Base *this, FPoseContext *);
  void (__cdecl *EvaluateComponentSpace)(FAnimNode_Base *this, FComponentSpacePoseContext *);
  int (__cdecl *GetLODThreshold)(FAnimNode_Base *this);
  void (__cdecl *RootInitialize)(FAnimNode_Base *this, FAnimInstanceProxy *);
  void (__cdecl *OnInitializeAnimInstance)(FAnimNode_Base *this, FAnimInstanceProxy *, UAnimInstance *);
};

/* 4333 */
struct ICompressedAudioInfoVtbl
{
  void *(__cdecl *__vecDelDtor)(ICompressedAudioInfo *this, unsigned int);
  __declspec(align(16)) bool (__cdecl *ReadCompressedData)(ICompressedAudioInfo *this, char *, bool, unsigned int);
  void (__cdecl *SeekToTime)(ICompressedAudioInfo *this, const float);
  void (__cdecl *ExpandFile)(ICompressedAudioInfo *this, char *, FSoundQualityInfo *);
  void (__cdecl *EnableHalfRate)(ICompressedAudioInfo *this, bool);
  unsigned int (__cdecl *GetSourceBufferSize)(ICompressedAudioInfo *this);
  bool (__cdecl *UsesVorbisChannelOrdering)(ICompressedAudioInfo *this);
  int (__cdecl *GetStreamBufferSize)(ICompressedAudioInfo *this);
  bool (__cdecl *SupportsStreaming)(ICompressedAudioInfo *this);
  bool (__cdecl *StreamCompressedInfo)(ICompressedAudioInfo *this, USoundWave *, FSoundQualityInfo *);
  bool (__cdecl *StreamCompressedData)(ICompressedAudioInfo *this, char *, bool, unsigned int);
  int (__cdecl *GetCurrentChunkIndex)(ICompressedAudioInfo *this);
  int (__cdecl *GetCurrentChunkOffset)(ICompressedAudioInfo *this);
};

/* 7026 */
struct TArray<FSceneViewScreenPercentageConfig,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 6947 */
struct FPrimitiveDrawInterfaceVtbl
{
  void *(__cdecl *__vecDelDtor)(FPrimitiveDrawInterface *this, unsigned int);
  _BYTE gap8[8];
  void (__cdecl *SetHitProxy)(FPrimitiveDrawInterface *this, HHitProxy *);
  void (__cdecl *RegisterDynamicResource)(FPrimitiveDrawInterface *this, FDynamicPrimitiveResource *);
  void (__cdecl *AddReserveLines)(FPrimitiveDrawInterface *this, char, int, bool, bool);
  void (__cdecl *DrawSprite)(FPrimitiveDrawInterface *this, FVector *, float, float, FTexture *, FLinearColor *, char, float, float, float, float, char);
  void (__cdecl *DrawLine)(FPrimitiveDrawInterface *this, FVector *, FVector *, FLinearColor *, char, float, float, bool);
  void (__cdecl *DrawPoint)(FPrimitiveDrawInterface *this, FVector *, FLinearColor *, float, char);
  int (__cdecl *DrawMesh)(FPrimitiveDrawInterface *this, FMeshBatch *);
};

/* 5910 */
const struct __declspec(align(8)) FPooledRenderTargetDesc
{
  FClearValueBinding ClearValue;
  FIntPoint Extent;
  unsigned int Depth;
  unsigned int ArraySize;
  bool bIsArray;
  bool bIsCubemap;
  unsigned __int16 NumMips;
  unsigned __int16 NumSamples;
  EPixelFormat Format;
  unsigned int Flags;
  unsigned int TargetableFlags;
  bool bForceSeparateTargetAndShaderResource;
  const wchar_t *DebugName;
  bool AutoWritable;
  bool bCreateRenderTargetWriteMask;
};

/* 5899 */
struct __cppobj TTypeCompatibleBytes<TMap<FSceneViewState::FProjectedShadowKey,TRefCountPtr<FRHIRenderQuery>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FSceneViewState::FProjectedShadowKey,TRefCountPtr<FRHIRenderQuery>,0> > > : TAlignedBytes<80,8>
{
};

/* 5900 */
struct __cppobj FHeapAllocator::ForElementType<TMap<FSceneViewState::FProjectedShadowKey,TRefCountPtr<FRHIRenderQuery>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FSceneViewState::FProjectedShadowKey,TRefCountPtr<FRHIRenderQuery>,0> > > : FHeapAllocator::ForAnyElementType
{
};

/* 5901 */
struct TInlineAllocator<3,FDefaultAllocator>::ForElementType<TMap<FSceneViewState::FProjectedShadowKey,TRefCountPtr<FRHIRenderQuery>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FSceneViewState::FProjectedShadowKey,TRefCountPtr<FRHIRenderQuery>,0> > >
{
  TTypeCompatibleBytes<TMap<FSceneViewState::FProjectedShadowKey,TRefCountPtr<FRHIRenderQuery>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FSceneViewState::FProjectedShadowKey,TRefCountPtr<FRHIRenderQuery>,0> > > InlineData[3];
  FHeapAllocator::ForElementType<TMap<FSceneViewState::FProjectedShadowKey,TRefCountPtr<FRHIRenderQuery>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FSceneViewState::FProjectedShadowKey,TRefCountPtr<FRHIRenderQuery>,0> > > SecondaryData;
};

/* 5902 */
struct TArray<TMap<FSceneViewState::FProjectedShadowKey,TRefCountPtr<FRHIRenderQuery>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FSceneViewState::FProjectedShadowKey,TRefCountPtr<FRHIRenderQuery>,0> >,TInlineAllocator<3,FDefaultAllocator> >
{
  TInlineAllocator<3,FDefaultAllocator>::ForElementType<TMap<FSceneViewState::FProjectedShadowKey,TRefCountPtr<FRHIRenderQuery>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FSceneViewState::FProjectedShadowKey,TRefCountPtr<FRHIRenderQuery>,0> > > AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 5905 */
struct TArray<TRefCountPtr<FRHIRenderQuery>,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 328 */
enum ERenderQueryType
{
  RQT_Undefined = 0x0,
  RQT_Occlusion = 0x1,
  RQT_AbsoluteTime = 0x2,
};

/* 5903 */
struct FRenderQueryPool
{
  FRenderQueryPoolVtbl *vfptr;
  TArray<TRefCountPtr<FRHIRenderQuery>,FDefaultAllocator> Queries;
  ERenderQueryType QueryType;
  int NumQueriesAllocated;
};

/* 5907 */
struct TMemStackAllocator<0>::ForElementType<FOcclusionPrimitive>
{
  FOcclusionPrimitive *Data;
};

/* 5908 */
struct TArray<FOcclusionPrimitive,TMemStackAllocator<0> >
{
  TMemStackAllocator<0>::ForElementType<FOcclusionPrimitive> AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 5921 */
struct __cppobj __declspec(align(8)) FHZBOcclusionTester : FRenderResource
{
  TArray<FOcclusionPrimitive,TMemStackAllocator<0> > Primitives;
  TRefCountPtr<IPooledRenderTarget> ResultsTextureCPU;
  const char *ResultsBuffer;
  unsigned int ValidFrameNumber;
};

/* 5924 */
struct TSparseArray<TSetElement<TTuple<FPrimitiveComponentId,FPrimitiveFadingState> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<48,8> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 5925 */
struct __declspec(align(8)) TSet<TTuple<FPrimitiveComponentId,FPrimitiveFadingState>,TDefaultMapHashableKeyFuncs<FPrimitiveComponentId,FPrimitiveFadingState,0>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<TTuple<FPrimitiveComponentId,FPrimitiveFadingState> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 5926 */
struct TMapBase<FPrimitiveComponentId,FPrimitiveFadingState,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FPrimitiveComponentId,FPrimitiveFadingState,0> >
{
  TSet<TTuple<FPrimitiveComponentId,FPrimitiveFadingState>,TDefaultMapHashableKeyFuncs<FPrimitiveComponentId,FPrimitiveFadingState,0>,FDefaultSetAllocator> Pairs;
};

/* 5927 */
struct __cppobj TSortableMapBase<FPrimitiveComponentId,FPrimitiveFadingState,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FPrimitiveComponentId,FPrimitiveFadingState,0> > : TMapBase<FPrimitiveComponentId,FPrimitiveFadingState,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FPrimitiveComponentId,FPrimitiveFadingState,0> >
{
};

/* 5928 */
struct __cppobj TMap<FPrimitiveComponentId,FPrimitiveFadingState,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FPrimitiveComponentId,FPrimitiveFadingState,0> > : TSortableMapBase<FPrimitiveComponentId,FPrimitiveFadingState,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FPrimitiveComponentId,FPrimitiveFadingState,0> >
{
};

/* 5930 */
struct TSparseArray<TSetElement<TTuple<int,FIndividualOcclusionHistory> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<56,8> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 5931 */
struct __declspec(align(8)) TSet<TTuple<int,FIndividualOcclusionHistory>,TDefaultMapHashableKeyFuncs<int,FIndividualOcclusionHistory,0>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<TTuple<int,FIndividualOcclusionHistory> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 5932 */
struct TMapBase<int,FIndividualOcclusionHistory,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<int,FIndividualOcclusionHistory,0> >
{
  TSet<TTuple<int,FIndividualOcclusionHistory>,TDefaultMapHashableKeyFuncs<int,FIndividualOcclusionHistory,0>,FDefaultSetAllocator> Pairs;
};

/* 5933 */
struct __cppobj TSortableMapBase<int,FIndividualOcclusionHistory,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<int,FIndividualOcclusionHistory,0> > : TMapBase<int,FIndividualOcclusionHistory,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<int,FIndividualOcclusionHistory,0> >
{
};

/* 5934 */
struct __cppobj TMap<int,FIndividualOcclusionHistory,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<int,FIndividualOcclusionHistory,0> > : TSortableMapBase<int,FIndividualOcclusionHistory,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<int,FIndividualOcclusionHistory,0> >
{
};

/* 5935 */
struct __declspec(align(8)) FHLODVisibilityState
{
  TBitArray<FDefaultBitArrayAllocator> PrimitiveFadingLODMap;
  TBitArray<FDefaultBitArrayAllocator> PrimitiveFadingOutLODMap;
  TBitArray<FDefaultBitArrayAllocator> ForcedVisiblePrimitiveMap;
  TBitArray<FDefaultBitArrayAllocator> ForcedHiddenPrimitiveMap;
  float TemporalLODSyncTime;
  float FOVDistanceScaleSq;
  unsigned __int16 UpdateCount;
};

/* 5936 */
struct TSparseArray<TSetElement<TTuple<FPrimitiveComponentId,FHLODSceneNodeVisibilityState> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<16,4> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 5937 */
struct __declspec(align(8)) TSet<TTuple<FPrimitiveComponentId,FHLODSceneNodeVisibilityState>,TDefaultMapHashableKeyFuncs<FPrimitiveComponentId,FHLODSceneNodeVisibilityState,0>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<TTuple<FPrimitiveComponentId,FHLODSceneNodeVisibilityState> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 5938 */
struct TMapBase<FPrimitiveComponentId,FHLODSceneNodeVisibilityState,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FPrimitiveComponentId,FHLODSceneNodeVisibilityState,0> >
{
  TSet<TTuple<FPrimitiveComponentId,FHLODSceneNodeVisibilityState>,TDefaultMapHashableKeyFuncs<FPrimitiveComponentId,FHLODSceneNodeVisibilityState,0>,FDefaultSetAllocator> Pairs;
};

/* 5939 */
struct __cppobj TSortableMapBase<FPrimitiveComponentId,FHLODSceneNodeVisibilityState,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FPrimitiveComponentId,FHLODSceneNodeVisibilityState,0> > : TMapBase<FPrimitiveComponentId,FHLODSceneNodeVisibilityState,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FPrimitiveComponentId,FHLODSceneNodeVisibilityState,0> >
{
};

/* 5940 */
struct __cppobj TMap<FPrimitiveComponentId,FHLODSceneNodeVisibilityState,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FPrimitiveComponentId,FHLODSceneNodeVisibilityState,0> > : TSortableMapBase<FPrimitiveComponentId,FHLODSceneNodeVisibilityState,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FPrimitiveComponentId,FHLODSceneNodeVisibilityState,0> >
{
};

/* 5941 */
struct __cppobj TDefaultDelete<FSceneSoftwareOcclusion>
{
};

/* 5952 */
struct __cppobj TUniquePtr<FSceneSoftwareOcclusion,TDefaultDelete<FSceneSoftwareOcclusion> > : TDefaultDelete<FSceneSoftwareOcclusion>
{
  FSceneSoftwareOcclusion *Ptr;
};

/* 5953 */
struct FSceneViewState::FEyeAdaptationRTManager
{
  int CurrentBuffer;
  float LastExposure;
  int CurrentStagingBuffer;
  TRefCountPtr<IPooledRenderTarget> PooledRenderTarget[2];
  TRefCountPtr<IPooledRenderTarget> StagingBuffers[3];
};

/* 5963 */
struct TRefCountPtr<FLightPropagationVolume>
{
  FLightPropagationVolume *Reference;
};

/* 5968 */
struct TSparseArray<TSetElement<TTuple<ULightComponent const *,FTemporalAAHistory> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<64,8> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 5969 */
struct __declspec(align(8)) TSet<TTuple<ULightComponent const *,FTemporalAAHistory>,TDefaultMapHashableKeyFuncs<ULightComponent const *,FTemporalAAHistory,0>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<TTuple<ULightComponent const *,FTemporalAAHistory> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 5970 */
struct TMapBase<ULightComponent const *,FTemporalAAHistory,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<ULightComponent const *,FTemporalAAHistory,0> >
{
  TSet<TTuple<ULightComponent const *,FTemporalAAHistory>,TDefaultMapHashableKeyFuncs<ULightComponent const *,FTemporalAAHistory,0>,FDefaultSetAllocator> Pairs;
};

/* 5971 */
struct __cppobj TSortableMapBase<ULightComponent const *,FTemporalAAHistory,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<ULightComponent const *,FTemporalAAHistory,0> > : TMapBase<ULightComponent const *,FTemporalAAHistory,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<ULightComponent const *,FTemporalAAHistory,0> >
{
};

/* 5972 */
struct __cppobj TMap<ULightComponent const *,FTemporalAAHistory,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<ULightComponent const *,FTemporalAAHistory,0> > : TSortableMapBase<ULightComponent const *,FTemporalAAHistory,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<ULightComponent const *,FTemporalAAHistory,0> >
{
};

/* 5973 */
struct $5302DCE6124C98B7D46162F3333C50EF
{
  TRefCountPtr<IPooledRenderTarget> Spectral;
  TRefCountPtr<IPooledRenderTarget> CenterWeight;
  UTexture2D *Physical;
  float Scale;
  FIntPoint ImageSize;
  FVector2D CenterUV;
  unsigned int PhysicalMipLevel;
};

/* 5994 */
struct FForwardLightingCullingResources
{
  FRWBuffer NextCulledLightLink;
  FRWBuffer StartOffsetGrid;
  FRWBuffer CulledLightLinks;
  FRWBuffer NextCulledLightData;
};

/* 5998 */
struct FGlobalDistanceFieldCacheTypeState
{
  TArray<FVector4,FDefaultAllocator> PrimitiveModifiedBounds;
  TRefCountPtr<IPooledRenderTarget> VolumeTexture;
};

/* 5999 */
struct FGlobalDistanceFieldClipmapState
{
  FIntVector FullUpdateOrigin;
  FIntVector LastPartialUpdateOrigin;
  float CachedMaxOcclusionDistance;
  float CachedGlobalDistanceFieldViewDistance;
  unsigned int CacheMostlyStaticSeparately;
  FGlobalDistanceFieldCacheTypeState Cache[2];
};

/* 6001 */
struct TRefCountPtr<FRHIRenderQuery>
{
  FRHIRenderQuery *Reference;
};

/* 6002 */
struct FLatentGPUTimer
{
  int AvgSamples;
  TArray<float,FDefaultAllocator> TimeSamples;
  float TotalTime;
  int SampleIndex;
  int QueryIndex;
  TRefCountPtr<FRHIRenderQuery> StartQueries[4];
  TRefCountPtr<FRHIRenderQuery> EndQueries[4];
  TRefCountPtr<FGraphEvent> QuerySubmittedFences[4];
};

/* 6004 */
struct TSparseArray<TSetElement<FPrimitiveOcclusionHistory>,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<88,8> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 6005 */
struct __declspec(align(8)) TSet<FPrimitiveOcclusionHistory,FPrimitiveOcclusionHistoryKeyFuncs,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<FPrimitiveOcclusionHistory>,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 6006 */
struct __cppobj FSceneViewState : FSceneViewStateInterface, FDeferredCleanupInterface, FRenderResource
{
  unsigned int UniqueID;
  TArray<TMap<FSceneViewState::FProjectedShadowKey,TRefCountPtr<FRHIRenderQuery>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FSceneViewState::FProjectedShadowKey,TRefCountPtr<FRHIRenderQuery>,0> >,TInlineAllocator<3,FDefaultAllocator> > ShadowOcclusionQueryMaps;
  FRenderQueryPool OcclusionQueryPool;
  FHZBOcclusionTester HZBOcclusionTests;
  TArray<unsigned char,FDefaultAllocator> DecompressedVisibilityChunk;
  TArray<unsigned char,FDefaultAllocator> *CachedVisibilityChunk;
  int CachedVisibilityHandlerId;
  int CachedVisibilityBucketIndex;
  int CachedVisibilityChunkIndex;
  unsigned int PendingPrevFrameNumber;
  unsigned int PrevFrameNumber;
  float LastRenderTime;
  float LastRenderTimeDelta;
  float MotionBlurTimeScale;
  __declspec(align(16)) FMatrix PrevViewMatrixForOcclusionQuery;
  FVector PrevViewOriginForOcclusionQuery;
  unsigned int OcclusionFrameCounter;
  TSet<FPrimitiveComponentId,DefaultKeyFuncs<FPrimitiveComponentId,0>,FDefaultSetAllocator> ParentPrimitives;
  TMap<FPrimitiveComponentId,FPrimitiveFadingState,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FPrimitiveComponentId,FPrimitiveFadingState,0> > PrimitiveFadingStates;
  FIndirectLightingCacheAllocation *TranslucencyLightingCacheAllocations[2];
  TMap<int,FIndividualOcclusionHistory,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<int,FIndividualOcclusionHistory,0> > PlanarReflectionOcclusionHistories;
  TArray<int,FDefaultAllocator> DeferredGlobalDistanceFieldUpdates[2];
  FHLODVisibilityState HLODVisibilityState;
  TMap<FPrimitiveComponentId,FHLODSceneNodeVisibilityState,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FPrimitiveComponentId,FHLODSceneNodeVisibilityState,0> > HLODSceneNodeVisibilityStates;
  TUniquePtr<FSceneSoftwareOcclusion,TDefaultDelete<FSceneSoftwareOcclusion> > SceneSoftwareOcclusion;
  float PreExposure;
  bool bUpdateLastExposure;
  FSceneViewState::FEyeAdaptationRTManager EyeAdaptationRTManager;
  bool bValidEyeAdaptation;
  TRefCountPtr<IPooledRenderTarget> CombinedLUTRenderTarget;
  bool bValidTonemappingLUT;
  TArray<UMaterialInstanceDynamic *,FDefaultAllocator> MIDPool;
  unsigned int MIDUsedCount;
  char TemporalAASampleIndex;
  char TemporalAASampleCount;
  unsigned int FrameIndexMod8;
  int DistanceFieldTemporalSampleIndex;
  TRefCountPtr<FLightPropagationVolume> LightPropagationVolume;
  bool bIsStereoView;
  FPreviousViewInfo PrevFrameViewInfo;
  FPreviousViewInfo PendingPrevFrameViewInfo;
  FHeightfieldLightingAtlas *HeightfieldLightingAtlas;
  FTemporalAAHistory DOFHistory;
  FTemporalAAHistory DOFHistory2;
  FTemporalAAHistory SSRHistory;
  FTemporalAAHistory LightShaftOcclusionHistory;
  TMap<ULightComponent const *,FTemporalAAHistory,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<ULightComponent const *,FTemporalAAHistory,0> > LightShaftBloomHistoryRTs;
  FIntRect DistanceFieldAOHistoryViewRect;
  TRefCountPtr<IPooledRenderTarget> DistanceFieldAOHistoryRT;
  TRefCountPtr<IPooledRenderTarget> DistanceFieldIrradianceHistoryRT;
  TRefCountPtr<IPooledRenderTarget> MobileAaBloomSunVignette0;
  TRefCountPtr<IPooledRenderTarget> MobileAaBloomSunVignette1;
  TRefCountPtr<IPooledRenderTarget> MobileAaColor0;
  TRefCountPtr<IPooledRenderTarget> MobileAaColor1;
  $5302DCE6124C98B7D46162F3333C50EF BloomFFTKernel;
  float MaterialTextureCachedMipBias;
  TRefCountPtr<FRHISamplerState> MaterialTextureBilinearWrapedSamplerCache;
  TRefCountPtr<FRHISamplerState> MaterialTextureBilinearClampedSamplerCache;
  TRefCountPtr<FRHITexture> SelectionOutlineCacheKey;
  TRefCountPtr<FRHIShaderResourceView> SelectionOutlineCacheValue;
  TUniquePtr<FForwardLightingViewResources,TDefaultDelete<FForwardLightingViewResources> > ForwardLightingResources;
  FForwardLightingCullingResources ForwardLightingCullingResources;
  TRefCountPtr<IPooledRenderTarget> LightScatteringHistory;
  FTileIntersectionResources *AOTileIntersectionResources;
  FAOScreenGridResources *AOScreenGridResources;
  bool bInitializedGlobalDistanceFieldOrigins;
  FGlobalDistanceFieldClipmapState GlobalDistanceFieldClipmapState[4];
  int GlobalDistanceFieldUpdateIndex;
  TRefCountPtr<FRHIVertexBuffer> IndirectShadowCapsuleShapesVertexBuffer;
  TRefCountPtr<FRHIShaderResourceView> IndirectShadowCapsuleShapesSRV;
  TRefCountPtr<FRHIVertexBuffer> IndirectShadowMeshDistanceFieldCasterIndicesVertexBuffer;
  TRefCountPtr<FRHIShaderResourceView> IndirectShadowMeshDistanceFieldCasterIndicesSRV;
  TRefCountPtr<FRHIVertexBuffer> IndirectShadowLightDirectionVertexBuffer;
  TRefCountPtr<FRHIShaderResourceView> IndirectShadowLightDirectionSRV;
  FRWBuffer IndirectShadowVolumetricLightmapDerivedLightDirection;
  FRWBuffer CapsuleTileIntersectionCountsBuffer;
  FLatentGPUTimer TranslucencyTimer;
  FLatentGPUTimer SeparateTranslucencyTimer;
  float LastAutoDownsampleChangeTime;
  float SmoothedHalfResTranslucencyGPUDuration;
  float SmoothedFullResTranslucencyGPUDuration;
  bool bShouldAutoDownsampleTranslucency;
  bool bDOFHistory;
  bool bDOFHistory2;
  bool bSequencerIsPaused;
  FTemporalLODState TemporalLODState;
  TSet<FPrimitiveOcclusionHistory,FPrimitiveOcclusionHistoryKeyFuncs,FDefaultSetAllocator> PrimitiveOcclusionHistorySet;
};

/* 6894 */
struct TStaticArray<FVector4,2,16>::TArrayStorageElementAligned
{
  FVector4 Element;
};

/* 6895 */
struct TStaticArray<FVector4,2,16>::TArrayStorage
{
  TStaticArray<FVector4,2,16>::TArrayStorageElementAligned Elements[2];
};

/* 6896 */
struct TStaticArray<FVector4,2,16>
{
  TStaticArray<FVector4,2,16>::TArrayStorage Storage;
};

/* 6897 */
struct TStaticArray<FVector4,7,16>::TArrayStorageElementAligned
{
  FVector4 Element;
};

/* 6898 */
struct TStaticArray<FVector4,7,16>::TArrayStorage
{
  TStaticArray<FVector4,7,16>::TArrayStorageElementAligned Elements[7];
};

/* 6899 */
struct TStaticArray<FVector4,7,16>
{
  TStaticArray<FVector4,7,16>::TArrayStorage Storage;
};

/* 6900 */
struct FViewUniformShaderParameters
{
  FMatrix TranslatedWorldToClip;
  FMatrix WorldToClip;
  FMatrix TranslatedWorldToView;
  FMatrix ViewToTranslatedWorld;
  FMatrix TranslatedWorldToCameraView;
  FMatrix CameraViewToTranslatedWorld;
  FMatrix ViewToClip;
  FMatrix ViewToClipNoAA;
  FMatrix ClipToView;
  FMatrix ClipToTranslatedWorld;
  FMatrix SVPositionToTranslatedWorld;
  FMatrix ScreenToWorld;
  FMatrix ScreenToTranslatedWorld;
  FVector ViewForward;
  __declspec(align(8)) FVector ViewUp;
  __declspec(align(8)) FVector ViewRight;
  __declspec(align(8)) FVector HMDViewNoRollUp;
  __declspec(align(8)) FVector HMDViewNoRollRight;
  __declspec(align(8)) FVector4 InvDeviceZToWorldZTransform;
  FVector4 ScreenPositionScaleBias;
  FVector WorldCameraOrigin;
  __declspec(align(8)) FVector TranslatedWorldCameraOrigin;
  __declspec(align(8)) FVector WorldViewOrigin;
  __declspec(align(8)) FVector PreViewTranslation;
  __declspec(align(8)) FMatrix PrevProjection;
  FMatrix PrevViewProj;
  FMatrix PrevViewRotationProj;
  FMatrix PrevViewToClip;
  FMatrix PrevClipToView;
  FMatrix PrevTranslatedWorldToClip;
  FMatrix PrevTranslatedWorldToView;
  FMatrix PrevViewToTranslatedWorld;
  FMatrix PrevTranslatedWorldToCameraView;
  FMatrix PrevCameraViewToTranslatedWorld;
  FVector PrevWorldCameraOrigin;
  __declspec(align(8)) FVector PrevWorldViewOrigin;
  __declspec(align(8)) FVector PrevPreViewTranslation;
  __declspec(align(8)) FMatrix PrevInvViewProj;
  FMatrix PrevScreenToTranslatedWorld;
  FMatrix ClipToPrevClip;
  FVector4 TemporalAAJitter;
  FVector4 GlobalClippingPlane;
  FVector2D FieldOfViewWideAngles;
  FVector2D PrevFieldOfViewWideAngles;
  FVector4 ViewRectMin;
  FVector4 ViewSizeAndInvSize;
  FVector4 BufferSizeAndInvSize;
  FVector4 BufferBilinearUVMinMax;
  int NumSceneColorMSAASamples;
  float PreExposure;
  float OneOverPreExposure;
  __declspec(align(8)) FVector4 DiffuseOverrideParameter;
  FVector4 SpecularOverrideParameter;
  FVector4 NormalOverrideParameter;
  FVector2D RoughnessOverrideParameter;
  float PrevFrameGameTime;
  float PrevFrameRealTime;
  float OutOfBoundsMask;
  __declspec(align(16)) FVector WorldCameraMovementSinceLastFrame;
  float CullingSign;
  float NearPlane;
  float AdaptiveTessellationFactor;
  float GameTime;
  float RealTime;
  float MaterialTextureMipBias;
  float MaterialTextureDerivativeMultiply;
  unsigned int Random;
  unsigned int FrameNumber;
  unsigned int StateFrameIndexMod8;
  float CameraCut;
  float UnlitViewmodeMask;
  __declspec(align(8)) FLinearColor DirectionalLightColor;
  FVector DirectionalLightDirection;
  __declspec(align(8)) TStaticArray<FVector4,2,16> TranslucencyLightingVolumeMin;
  TStaticArray<FVector4,2,16> TranslucencyLightingVolumeInvSize;
  FVector4 TemporalAAParams;
  FVector4 CircleDOFParams;
  float DepthOfFieldSensorWidth;
  float DepthOfFieldFocalDistance;
  float DepthOfFieldScale;
  float DepthOfFieldFocalLength;
  float DepthOfFieldFocalRegion;
  float DepthOfFieldNearTransitionRegion;
  float DepthOfFieldFarTransitionRegion;
  float MotionBlurNormalizedToPixel;
  float bSubsurfacePostprocessEnabled;
  float GeneralPurposeTweak;
  float DemosaicVposOffset;
  __declspec(align(8)) FVector IndirectLightingColorScale;
  float HDR32bppEncodingMode;
  FVector AtmosphericFogSunDirection;
  float AtmosphericFogSunPower;
  float AtmosphericFogPower;
  float AtmosphericFogDensityScale;
  float AtmosphericFogDensityOffset;
  float AtmosphericFogGroundOffset;
  float AtmosphericFogDistanceScale;
  float AtmosphericFogAltitudeScale;
  float AtmosphericFogHeightScaleRayleigh;
  float AtmosphericFogStartDistance;
  float AtmosphericFogDistanceOffset;
  float AtmosphericFogSunDiscScale;
  unsigned int AtmosphericFogRenderMask;
  unsigned int AtmosphericFogInscatterAltitudeSampleNum;
  FLinearColor AtmosphericFogSunColor;
  FVector NormalCurvatureToRoughnessScaleBias;
  float RenderingReflectionCaptureMask;
  FLinearColor AmbientCubemapTint;
  float AmbientCubemapIntensity;
  float SkyLightParameters;
  __declspec(align(16)) FLinearColor SkyLightColor;
  TStaticArray<FVector4,7,16> SkyIrradianceEnvironmentMap;
  float MobilePreviewMode;
  float HMDEyePaddingOffset;
  float ReflectionCubemapMaxMip;
  float ShowDecalsMask;
  unsigned int DistanceFieldAOSpecularOcclusionMode;
  float IndirectCapsuleSelfShadowingIntensity;
  __declspec(align(16)) FVector ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight;
  int StereoPassIndex;
  TStaticArray<FVector4,4,16> GlobalVolumeCenterAndExtent;
  TStaticArray<FVector4,4,16> GlobalVolumeWorldToUVAddAndMul;
  float GlobalVolumeDimension;
  float GlobalVolumeTexelSize;
  float MaxGlobalDistance;
  float bCheckerboardSubsurfaceProfileRendering;
  FVector VolumetricFogInvGridSize;
  __declspec(align(8)) FVector VolumetricFogGridZParams;
  __declspec(align(8)) FVector2D VolumetricFogSVPosToVolumeUV;
  float VolumetricFogMaxDistance;
  __declspec(align(8)) FVector VolumetricLightmapWorldToUVScale;
  __declspec(align(8)) FVector VolumetricLightmapWorldToUVAdd;
  __declspec(align(8)) FVector VolumetricLightmapIndirectionTextureSize;
  float VolumetricLightmapBrickSize;
  FVector VolumetricLightmapBrickTexelSize;
  float StereoIPD;
  TFixedSizePointerWrapper<FRHISamplerState *> MaterialTextureBilinearWrapedSampler;
  TFixedSizePointerWrapper<FRHISamplerState *> MaterialTextureBilinearClampedSampler;
  TFixedSizePointerWrapper<FRHITexture *> VolumetricLightmapIndirectionTexture;
  TFixedSizePointerWrapper<FRHITexture *> VolumetricLightmapBrickAmbientVector;
  TFixedSizePointerWrapper<FRHITexture *> VolumetricLightmapBrickSHCoefficients0;
  TFixedSizePointerWrapper<FRHITexture *> VolumetricLightmapBrickSHCoefficients1;
  TFixedSizePointerWrapper<FRHITexture *> VolumetricLightmapBrickSHCoefficients2;
  TFixedSizePointerWrapper<FRHITexture *> VolumetricLightmapBrickSHCoefficients3;
  TFixedSizePointerWrapper<FRHITexture *> VolumetricLightmapBrickSHCoefficients4;
  TFixedSizePointerWrapper<FRHITexture *> VolumetricLightmapBrickSHCoefficients5;
  TFixedSizePointerWrapper<FRHITexture *> SkyBentNormalBrickTexture;
  TFixedSizePointerWrapper<FRHITexture *> DirectionalLightShadowingBrickTexture;
  TFixedSizePointerWrapper<FRHISamplerState *> VolumetricLightmapBrickAmbientVectorSampler;
  TFixedSizePointerWrapper<FRHISamplerState *> VolumetricLightmapTextureSampler0;
  TFixedSizePointerWrapper<FRHISamplerState *> VolumetricLightmapTextureSampler1;
  TFixedSizePointerWrapper<FRHISamplerState *> VolumetricLightmapTextureSampler2;
  TFixedSizePointerWrapper<FRHISamplerState *> VolumetricLightmapTextureSampler3;
  TFixedSizePointerWrapper<FRHISamplerState *> VolumetricLightmapTextureSampler4;
  TFixedSizePointerWrapper<FRHISamplerState *> VolumetricLightmapTextureSampler5;
  TFixedSizePointerWrapper<FRHISamplerState *> SkyBentNormalTextureSampler;
  TFixedSizePointerWrapper<FRHISamplerState *> DirectionalLightShadowingTextureSampler;
  TFixedSizePointerWrapper<FRHITexture *> GlobalDistanceFieldTexture0;
  TFixedSizePointerWrapper<FRHISamplerState *> GlobalDistanceFieldSampler0;
  TFixedSizePointerWrapper<FRHITexture *> GlobalDistanceFieldTexture1;
  TFixedSizePointerWrapper<FRHISamplerState *> GlobalDistanceFieldSampler1;
  TFixedSizePointerWrapper<FRHITexture *> GlobalDistanceFieldTexture2;
  TFixedSizePointerWrapper<FRHISamplerState *> GlobalDistanceFieldSampler2;
  TFixedSizePointerWrapper<FRHITexture *> GlobalDistanceFieldTexture3;
  TFixedSizePointerWrapper<FRHISamplerState *> GlobalDistanceFieldSampler3;
  TFixedSizePointerWrapper<FRHITexture *> AtmosphereTransmittanceTexture;
  TFixedSizePointerWrapper<FRHISamplerState *> AtmosphereTransmittanceTextureSampler;
  TFixedSizePointerWrapper<FRHITexture *> AtmosphereIrradianceTexture;
  TFixedSizePointerWrapper<FRHISamplerState *> AtmosphereIrradianceTextureSampler;
  TFixedSizePointerWrapper<FRHITexture *> AtmosphereInscatterTexture;
  TFixedSizePointerWrapper<FRHISamplerState *> AtmosphereInscatterTextureSampler;
  TFixedSizePointerWrapper<FRHITexture *> PerlinNoiseGradientTexture;
  TFixedSizePointerWrapper<FRHISamplerState *> PerlinNoiseGradientTextureSampler;
  TFixedSizePointerWrapper<FRHITexture *> PerlinNoise3DTexture;
  TFixedSizePointerWrapper<FRHISamplerState *> PerlinNoise3DTextureSampler;
  TFixedSizePointerWrapper<FRHITexture *> SobolSamplingTexture;
  TFixedSizePointerWrapper<FRHISamplerState *> SharedPointWrappedSampler;
  TFixedSizePointerWrapper<FRHISamplerState *> SharedPointClampedSampler;
  TFixedSizePointerWrapper<FRHISamplerState *> SharedBilinearWrappedSampler;
  TFixedSizePointerWrapper<FRHISamplerState *> SharedBilinearClampedSampler;
  TFixedSizePointerWrapper<FRHISamplerState *> SharedTrilinearWrappedSampler;
  TFixedSizePointerWrapper<FRHISamplerState *> SharedTrilinearClampedSampler;
  TFixedSizePointerWrapper<FRHITexture *> PreIntegratedBRDF;
  TFixedSizePointerWrapper<FRHISamplerState *> PreIntegratedBRDFSampler;
};

/* 6920 */
struct FTranslucentPrimSet::FTranslucentSortedPrim
{
  FPrimitiveSceneInfo *PrimitiveSceneInfo;
  unsigned int SortOrder;
  float SortKey;
};

/* 6927 */
struct __declspec(align(8)) FSortedPrimSet<unsigned int>::FSortedPrim
{
  FPrimitiveSceneInfo *PrimitiveSceneInfo;
  unsigned int SortKey;
};

/* 6934 */
struct FMobileCSMSubjectPrimitives
{
  TBitArray<SceneRenderingBitArrayAllocator> ShadowSubjectPrimitivesEncountered;
  TArray<FPrimitiveSceneInfo const *,TMemStackAllocator<0> > ShadowSubjectPrimitives;
};

/* 6935 */
struct FVisibleLightViewInfo
{
  TArray<FPrimitiveSceneInfo *,TMemStackAllocator<0> > VisibleDynamicLitPrimitives;
  TBitArray<SceneRenderingBitArrayAllocator> ProjectedShadowVisibilityMap;
  TArray<FPrimitiveViewRelevance,TMemStackAllocator<0> > ProjectedShadowViewRelevanceMap;
  unsigned __int32 bInViewFrustum : 1;
  FMobileCSMSubjectPrimitives MobileCSMSubjectPrimitives;
};

/* 6945 */
struct FDynamicPrimitiveResource
{
  FDynamicPrimitiveResourceVtbl *vfptr;
};

/* 6954 */
struct __declspec(align(8)) FGlobalDynamicVertexBuffer::FAllocation
{
  char *Buffer;
  FVertexBuffer *VertexBuffer;
  unsigned int VertexOffset;
};

/* 6955 */
struct FOcclusionQueryBatcher::FOcclusionBatch
{
  TRefCountPtr<FRHIRenderQuery> Query;
  FGlobalDynamicVertexBuffer::FAllocation VertexAllocation;
};

/* 6971 */
struct TArray<TShaderMap<FGlobalShaderType>::FSerializedShaderPipeline *,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 6969 */
struct TShaderMap<FGlobalShaderType>
{
  TShaderMap<FGlobalShaderType>Vtbl *vfptr;
  TArray<FShader *,FDefaultAllocator> SerializedShaders;
  TArray<TShaderMap<FGlobalShaderType>::FSerializedShaderPipeline *,FDefaultAllocator> SerializedShaderPipelines;
  EShaderPlatform Platform;
  bool bHasBeenRegistered;
  TMap<TShaderTypePermutation<FShaderType>,TRefCountPtr<FShader>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<TShaderTypePermutation<FShaderType>,TRefCountPtr<FShader>,0> > Shaders;
  TMap<FShaderPipelineType const *,FShaderPipeline *,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FShaderPipelineType const *,FShaderPipeline *,0> > ShaderPipelines;
};

/* 6972 */
struct IRefCountedObject
{
  IRefCountedObjectVtbl *vfptr;
};

/* 6974 */
struct __cppobj ICustomVisibilityQuery : IRefCountedObject
{
};

/* 6093 */
struct __cppobj TTypeCompatibleBytes<FMeshBatchElement> : TAlignedBytes<96,8>
{
};

/* 6094 */
struct __cppobj FHeapAllocator::ForElementType<FMeshBatchElement> : FHeapAllocator::ForAnyElementType
{
};

/* 6095 */
struct TInlineAllocator<1,FDefaultAllocator>::ForElementType<FMeshBatchElement>
{
  TTypeCompatibleBytes<FMeshBatchElement> InlineData[1];
  FHeapAllocator::ForElementType<FMeshBatchElement> SecondaryData;
};

/* 6096 */
struct TArray<FMeshBatchElement,TInlineAllocator<1,FDefaultAllocator> >
{
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FMeshBatchElement> AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 6497 */
const struct FMeshBatch
{
  TArray<FMeshBatchElement,TInlineAllocator<1,FDefaultAllocator> > Elements;
  char LODIndex;
  char VisualizeHLODIndex;
  unsigned __int32 ReverseCulling : 1;
  unsigned __int32 bDisableBackfaceCulling : 1;
  unsigned __int32 CastShadow : 1;
  unsigned __int32 bUseForMaterial : 1;
  unsigned __int32 bUseAsOccluder : 1;
  unsigned __int32 bWireframe : 1;
  unsigned __int32 Type : 6;
  unsigned __int32 DepthPriorityGroup : 3;
  unsigned __int32 bCanApplyViewModeOverrides : 1;
  unsigned __int32 bUseWireframeSelectionColoring : 1;
  unsigned __int32 bUseSelectionOutline : 1;
  unsigned __int32 bSelectable : 1;
  unsigned __int32 bRequiresPerElementVisibility : 1;
  unsigned __int32 bDitheredLODTransition : 1;
  float DitheredLODTransitionAlpha;
  FLightCacheInterface *LCI;
  FVertexFactory *VertexFactory;
  FMaterialRenderProxy *MaterialRenderProxy;
  FHitProxyId BatchHitProxyId;
  float TessellationDisablingShadowMapMeshSize;
};

/* 6985 */
struct TArray<TRefCountPtr<FStaticMesh::FDrawListElementLink>,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 6986 */
const struct __cppobj FStaticMesh : FMeshBatch
{
  float ScreenSize;
  FPrimitiveSceneInfo *PrimitiveSceneInfo;
  int Id;
  int BatchVisibilityId;
  TArray<TRefCountPtr<FStaticMesh::FDrawListElementLink>,FDefaultAllocator> DrawListLinks;
};

/* 6679 */
struct physx::PxGpuDispatcher
{
  physx::PxGpuDispatcherVtbl *vfptr;
};

/* 6680 */
struct __cppobj __declspec(align(8)) physx::PxTask : physx::PxBaseTask
{
  unsigned int mTaskID;
  unsigned int mStreamIndex;
  bool mPreSyncRequired;
};

/* 6277 */
struct FDynamicEmitterDataBaseVtbl
{
  void *(__cdecl *__vecDelDtor)(FDynamicEmitterDataBase *this, unsigned int);
  __declspec(align(16)) void (__cdecl *UpdateRenderThreadResourcesEmitter)(FDynamicEmitterDataBase *this, FParticleSystemSceneProxy *);
  void (__cdecl *ReleaseRenderThreadResources)(FDynamicEmitterDataBase *this, FParticleSystemSceneProxy *);
  void (__cdecl *GetDynamicMeshElementsEmitter)(FDynamicEmitterDataBase *this, FParticleSystemSceneProxy *, FSceneView *, FSceneViewFamily *, int, FMeshElementCollector *, FParticleVertexFactoryBase *);
  FMaterialRenderProxy *(__cdecl *GetMaterialRenderProxy)(FDynamicEmitterDataBase *this, bool);
  void (__cdecl *GatherSimpleLights)(FDynamicEmitterDataBase *this, FParticleSystemSceneProxy *, FSceneViewFamily *, FSimpleLightArray *);
  FDynamicEmitterReplayDataBase *(__cdecl *GetSource)(FDynamicEmitterDataBase *this);
  FMacroUVOverride *(__cdecl *GetMacroUVOverride)(FDynamicEmitterDataBase *this);
  FParticleVertexFactoryBase *(__cdecl *BuildVertexFactory)(FDynamicEmitterDataBase *this, FParticleSystemSceneProxy *);
};

/* 923 */
enum EParticleVertexFactoryType
{
  PVFT_Sprite = 0x0,
  PVFT_BeamTrail = 0x1,
  PVFT_Mesh = 0x2,
  PVFT_MAX = 0x3,
};

/* 6224 */
struct __cppobj __declspec(align(8)) FParticleVertexFactoryBase : FVertexFactory
{
  unsigned int LastFrameSetup;
  FSceneViewFamily *LastViewFamily;
  FSceneView *LastView;
  float LastFrameRealTime;
  EParticleVertexFactoryType ParticleFactoryType;
  bool bInUse;
  bool bIsDirty;
};

/* 6274 */
struct FDynamicEmitterReplayDataBaseVtbl
{
  void *(__cdecl *__vecDelDtor)(FDynamicEmitterReplayDataBase *this, unsigned int);
  void (__cdecl *Serialize)(FDynamicEmitterReplayDataBase *this, FArchive *);
};

/* 6058 */
struct __cppobj FRHICommandListDebugContext
{
};

/* 6027 */
struct __cppobj __declspec(align(8)) FRHIShader : FRHIResource
{
  FSHAHash Hash;
};

/* 6039 */
struct __cppobj FRHIComputeShader : FRHIShader
{
  FPipelineStateStats *Stats;
};

/* 6065 */
struct __cppobj FRHIBoundShaderState : FRHIResource
{
};

/* 6067 */
struct __cppobj FRHIDepthStencilState : FRHIResource
{
};

/* 6068 */
struct __cppobj FRHIRasterizerState : FRHIResource
{
};

/* 6069 */
struct __cppobj FRHIBlendState : FRHIResource
{
};

/* 4405 */
struct INetDeltaBaseStateVtbl
{
  void *(__cdecl *__vecDelDtor)(INetDeltaBaseState *this, unsigned int);
  bool (__cdecl *IsStateEqual)(INetDeltaBaseState *this, INetDeltaBaseState *);
};

/* 4409 */
struct INetSerializeCBVtbl
{
  void (__cdecl *NetSerializeStruct)(INetSerializeCB *this, UScriptStruct *, FBitArchive *, UPackageMap *, void *, bool *);
};

/* 5273 */
struct FDragDropOperationVtbl
{
  void *(__cdecl *__vecDelDtor)(FDragDropOperation *this, unsigned int);
  _BYTE gap8[8];
  void (__cdecl *OnDragged)(FDragDropOperation *this, FDragDropEvent *);
  FCursorReply *(__cdecl *OnCursorQuery)(FDragDropOperation *this, FCursorReply *result);
  TSharedPtr<SWidget,0> *(__cdecl *GetDefaultDecorator)(FDragDropOperation *this, TSharedPtr<SWidget,0> *result);
  FVector2D *(__cdecl *GetDecoratorPosition)(FDragDropOperation *this, FVector2D *result);
  void (__cdecl *SetDecoratorVisibility)(FDragDropOperation *this, bool);
  bool (__cdecl *IsExternalOperation)(FDragDropOperation *this);
  bool (__cdecl *IsWindowlessOperation)(FDragDropOperation *this);
  void (__cdecl *Construct)(FDragDropOperation *this);
  bool (__cdecl *IsOfTypeImpl)(FDragDropOperation *this, FString *);
};

/* 5251 */
struct FModifierKeysState
{
  unsigned __int16 bIsLeftShiftDown : 1;
  unsigned __int16 bIsRightShiftDown : 1;
  unsigned __int16 bIsLeftControlDown : 1;
  unsigned __int16 bIsRightControlDown : 1;
  unsigned __int16 bIsLeftAltDown : 1;
  unsigned __int16 bIsRightAltDown : 1;
  unsigned __int16 bIsLeftCommandDown : 1;
  unsigned __int16 bIsRightCommandDown : 1;
  unsigned __int16 bAreCapsLocked : 1;
};

/* 5249 */
struct FInputEvent
{
  FInputEventVtbl *vfptr;
  FModifierKeysState ModifierKeys;
  bool bIsRepeat;
  unsigned int UserIndex;
  FWidgetPath *EventPath;
};

/* 5264 */
const struct __cppobj __declspec(align(8)) FPointerEvent : FInputEvent
{
  FVector2D ScreenSpacePosition;
  FVector2D LastScreenSpacePosition;
  FVector2D CursorDelta;
  TSet<FKey,DefaultKeyFuncs<FKey,0>,FDefaultSetAllocator> *PressedButtons;
  FKey EffectingButton;
  unsigned int PointerIndex;
  unsigned int TouchpadIndex;
  float Force;
  bool bIsTouchEvent;
  _BYTE GestureType[1];
  FVector2D WheelOrGestureDelta;
  bool bIsDirectionInvertedFromDevice;
};

/* 5275 */
const struct __cppobj FKeyEvent : FInputEvent
{
  FKey Key;
  unsigned int CharacterCode;
  unsigned int KeyCode;
};

/* 5276 */
const struct __cppobj __declspec(align(8)) FAnalogInputEvent : FKeyEvent
{
  float AnalogValue;
};

/* 5277 */
const struct __cppobj __declspec(align(8)) FCharacterEvent : FInputEvent
{
  wchar_t Character;
};

/* 5278 */
const struct FFocusEvent
{
  _BYTE Cause[1];
  unsigned int UserIndex;
};

/* 5279 */
const struct __cppobj FMotionEvent : FInputEvent
{
  FVector Tilt;
  FVector RotationRate;
  FVector Gravity;
  FVector Acceleration;
};

/* 5285 */
struct __cppobj TBaseDelegate<TSharedPtr<SWidget,0>,enum EUINavigation> : FDelegateBase
{
};

/* 5286 */
struct __declspec(align(8)) FNavigationReply
{
  TSharedPtr<SWidget,0> EventHandler;
  TSharedPtr<SWidget,0> FocusRecipient;
  TBaseDelegate<TSharedPtr<SWidget,0>,enum EUINavigation> FocusDelegate;
  EUINavigationRule BoundaryRule;
};

/* 5287 */
const struct __cppobj __declspec(align(8)) FNavigationEvent : FInputEvent
{
  _BYTE NavigationType[1];
  _BYTE NavigationGenesis[1];
};

/* 6598 */
union $2029D0A2DC1D4CE55FF34F367E4EE2C9
{
  void (__cdecl *~IGameLayer)(IGameLayer *this);
  void *(__cdecl *__vecDelDtor)(IGameLayer *this, unsigned int);
};

/* 6599 */
struct IGameLayerVtbl
{
  TSharedRef<SWidget,0> *(__cdecl *AsWidget)(IGameLayer *this, TSharedRef<SWidget,0> *result);
  $2029D0A2DC1D4CE55FF34F367E4EE2C9 ___u1;
};

/* 7097 */
struct TArray<UMaterialFunctionInterface *,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 7098 */
const struct FMaterialLayersFunctions
{
  TArray<UMaterialFunctionInterface *,FDefaultAllocator> Layers;
  TArray<UMaterialFunctionInterface *,FDefaultAllocator> Blends;
  TArray<bool,FDefaultAllocator> LayerStates;
  FString KeyString;
};

/* 7099 */
struct TEnumAsByte<enum ECustomMaterialOutputType>
{
  char Value;
};

/* 7100 */
struct TArray<FCustomInput,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 7101 */
struct __cppobj UMaterialExpressionCustom : UMaterialExpression
{
  FString Code;
  TEnumAsByte<enum ECustomMaterialOutputType> OutputType;
  FString Description;
  TArray<FCustomInput,FDefaultAllocator> Inputs;
};

/* 7102 */
struct __cppobj UMaterialExpressionCustomOutput : UMaterialExpression
{
};

/* 8677 */
struct TSharedRef<IRun,0>
{
  IRun *Object;
  SharedPointerInternals::FSharedReferencer<0> SharedReferenceCount;
};

/* 8684 */
const struct TSharedRef<FString,0>
{
  FString *Object;
  SharedPointerInternals::FSharedReferencer<0> SharedReferenceCount;
};

/* 8666 */
struct FTextRange
{
  int BeginIndex;
  int EndIndex;
};

/* 374 */
enum ENavLinkDirection::Type
{
  BothWays = 0x0,
  LeftToRight = 0x1,
  RightToLeft = 0x2,
};

/* 583 */
typedef ENavLinkDirection::Type TextBiDi::ETextDirection;

/* 8217 */
struct TextBiDi::ITextBiDiVtbl
{
  void *(__cdecl *__vecDelDtor)(TextBiDi::ITextBiDi *this, unsigned int);
  __declspec(align(16)) TextBiDi::ETextDirection (__cdecl *ComputeTextDirection)(TextBiDi::ITextBiDi *this, FString *, TextBiDi::ETextDirection, TArray<TextBiDi::FTextDirectionInfo,FDefaultAllocator> *);
  TextBiDi::ETextDirection (__cdecl *ComputeTextDirection)(TextBiDi::ITextBiDi *this, FText *, TextBiDi::ETextDirection, TArray<TextBiDi::FTextDirectionInfo,FDefaultAllocator> *);
  TextBiDi::ETextDirection (__cdecl *ComputeTextDirection)(TextBiDi::ITextBiDi *this, const wchar_t *, const int, const int);
  TextBiDi::ETextDirection (__cdecl *ComputeTextDirection)(TextBiDi::ITextBiDi *this, FString *);
  TextBiDi::ETextDirection (__cdecl *ComputeTextDirection)(TextBiDi::ITextBiDi *this, FText *);
  TextBiDi::ETextDirection (__cdecl *ComputeBaseDirection)(TextBiDi::ITextBiDi *this, const wchar_t *, const int, const int);
  TextBiDi::ETextDirection (__cdecl *ComputeBaseDirection)(TextBiDi::ITextBiDi *this, FString *);
  TextBiDi::ETextDirection (__cdecl *ComputeBaseDirection)(TextBiDi::ITextBiDi *this, FText *);
};

/* 102 */
typedef EVertexColorViewMode::Type ESlateShaderResource::Type;

/* 5246 */
union $FF5621130AB6167EB6E17654626830DD
{
  void (__cdecl *~FSlateShaderResource)(FSlateShaderResource *this);
  void *(__cdecl *__vecDelDtor)(FSlateShaderResource *this, unsigned int);
};

/* 5247 */
struct FSlateShaderResourceVtbl
{
  unsigned int (__cdecl *GetWidth)(FSlateShaderResource *this);
  unsigned int (__cdecl *GetHeight)(FSlateShaderResource *this);
  ESlateShaderResource::Type (__cdecl *GetType)(FSlateShaderResource *this);
  $FF5621130AB6167EB6E17654626830DD ___u3;
};

/* 4305 */
struct TAtomicBase_Basic<bool>
{
  volatile bool Element;
};

/* 4306 */
struct __cppobj TAtomicBase_Arithmetic<bool,bool> : TAtomicBase_Basic<bool>
{
};

/* 4307 */
struct __cppobj TAtomicBase_Integral<bool> : TAtomicBase_Arithmetic<bool,bool>
{
};

/* 4308 */
struct __cppobj TAtomic<bool> : TAtomicBase_Integral<bool>
{
};

/* 4309 */
struct __cppobj FQueuedThread : FRunnable
{
  FEvent *DoWorkEvent;
  TAtomic<bool> TimeToDie;
  IQueuedWork *volatile QueuedWork;
  FQueuedThreadPool *OwningThreadPool;
  FRunnableThread *Thread;
};

/* 4650 */
struct FDynamicSkelMeshObjectDataGPUSkinVtbl
{
  void *(__cdecl *__vecDelDtor)(FDynamicSkelMeshObjectDataGPUSkin *this, unsigned int);
  void (__cdecl *GetResourceSizeEx)(FDynamicSkelMeshObjectDataGPUSkin *this, FResourceSizeEx *);
};

/* 4795 */
struct __declspec(align(4)) FCurveElement
{
  float Value;
  bool bValid;
};

/* 4774 */
const struct __cppobj FAnimationInitializeContext : FAnimationBaseContext
{
};

/* 4801 */
struct __cppobj TCustomBoneIndexArray<unsigned char,FCompactPoseBoneIndex> : TArray<unsigned char,FDefaultAllocator>
{
};

/* 4802 */
struct FCSPose<FCompactPose>
{
  FCompactPose Pose;
  TCustomBoneIndexArray<unsigned char,FCompactPoseBoneIndex> ComponentSpaceFlags;
  TCustomBoneIndexArray<unsigned char,FCompactPoseBoneIndex> BoneMask;
  TArray<FCompactPoseBoneIndex,FDefaultAllocator> BonesToConvert;
};

/* 4803 */
struct __cppobj FComponentSpacePoseContext : FAnimationBaseContext
{
  FCSPose<FCompactPose> Pose;
  FBlendedCurve Curve;
};

/* 4804 */
struct TArray<FNodeDebugData::DebugItem,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 4805 */
struct FNodeDebugData
{
  float AbsoluteWeight;
  TArray<FNodeDebugData::DebugItem,FDefaultAllocator> NodeChain;
  FString NodeDescription;
  FNodeDebugData *RootNodePtr;
  TArray<FNodeDebugData,FDefaultAllocator> SaveCachePoseNodes;
  UAnimInstance *AnimInstance;
};

/* 4776 */
const struct __cppobj FAnimationCacheBonesContext : FAnimationBaseContext
{
};

/* 4777 */
const struct __cppobj __declspec(align(8)) FAnimationUpdateContext : FAnimationBaseContext
{
  float CurrentWeight;
  float RootMotionWeightModifier;
  float DeltaTime;
};

/* 4332 */
struct FSoundQualityInfo
{
  int Quality;
  unsigned int NumChannels;
  unsigned int SampleRate;
  unsigned int SampleDataSize;
  float Duration;
  FString DebugName;
};

/* 5904 */
struct FRenderQueryPoolVtbl
{
  void *(__cdecl *__vecDelDtor)(FRenderQueryPool *this, unsigned int);
};

/* 5906 */
struct FOcclusionPrimitive
{
  FVector Center;
  FVector Extent;
};

/* 5942 */
struct __cppobj TDefaultDelete<FOcclusionFrameResults>
{
};

/* 5950 */
struct __cppobj TUniquePtr<FOcclusionFrameResults,TDefaultDelete<FOcclusionFrameResults> > : TDefaultDelete<FOcclusionFrameResults>
{
  FOcclusionFrameResults *Ptr;
};

/* 5951 */
struct FSceneSoftwareOcclusion
{
  TRefCountPtr<FGraphEvent> TaskRef;
  TUniquePtr<FOcclusionFrameResults,TDefaultDelete<FOcclusionFrameResults> > Available;
  TUniquePtr<FOcclusionFrameResults,TDefaultDelete<FOcclusionFrameResults> > Processing;
};

/* 5959 */
struct FLpvReadUniformBufferParameters
{
  FIntVector mLpvGridOffset;
  float LpvScale;
  float OneOverLpvScale;
  float SpecularIntensity;
  float DiffuseIntensity;
  float DirectionalOcclusionIntensity;
  float DiffuseOcclusionExponent;
  float SpecularOcclusionExponent;
  float SpecularOcclusionIntensity;
  float DiffuseOcclusionIntensity;
  float PostprocessSpecularIntensityThreshold;
  __declspec(align(16)) FVector LpvGridOffsetSmooth;
  __declspec(align(8)) FVector DirectionalOcclusionDefaultValue;
  float DirectionalOcclusionFadeRange;
  float FadeRange;
};

/* 5960 */
struct FShaderResourceParameter
{
  unsigned __int16 BaseIndex;
  unsigned __int16 NumResources;
};

/* 5961 */
struct __cppobj TUniformBuffer<FLpvWriteUniformBufferParameters> : FRenderResource
{
  EUniformBufferUsage BufferUsage;
  TRefCountPtr<FRHIUniformBuffer> UniformBufferRHI;
  char *Contents;
};

/* 5962 */
struct __cppobj FLightPropagationVolume : FRefCountedObject
{
  TRefCountPtr<IPooledRenderTarget> LpvVolumeTextures[2][7];
  FRWByteAddressBuffer *mVplListHeadBuffer;
  FRWBufferStructured *mVplListBuffer;
  FIntVector mGridOffset;
  FIntVector mOldGridOffset;
  FLpvWriteUniformBufferParameters *LpvWriteUniformBufferParams;
  FLpvReadUniformBufferParameters LpvReadUniformBufferParams;
  unsigned int mInjectedLightCount;
  FRWByteAddressBuffer *GvListHeadBuffer;
  FRWBufferStructured *GvListBuffer;
  FShaderResourceParameter LpvVolumeTextureSampler;
  TRefCountPtr<IPooledRenderTarget> GvVolumeTextures[2];
  TRefCountPtr<IPooledRenderTarget> AOVolumeTexture;
  float SecondaryOcclusionStrength;
  float SecondaryBounceStrength;
  float CubeSize;
  float Strength;
  bool bEnabled;
  bool bDirectionalOcclusionEnabled;
  bool bGeometryVolumeNeeded;
  unsigned int mWriteBufferIndex;
  bool bNeedsBufferClear;
  FBox BoundingBox;
  bool GeometryVolumeGenerated;
  TUniformBuffer<FLpvWriteUniformBufferParameters> LpvWriteUniformBuffer;
  TUniformBuffer<FLpvWriteUniformBufferParameters> RsmRenderUniformBuffer;
  bool bInitialized;
  unsigned int AsyncJobFenceID;
};

/* 5967 */
struct __cppobj FHeightfieldLightingAtlas : FRenderResource
{
  TRefCountPtr<IPooledRenderTarget> Height;
  TRefCountPtr<IPooledRenderTarget> Normal;
  TRefCountPtr<IPooledRenderTarget> DiffuseColor;
  TRefCountPtr<IPooledRenderTarget> DirectionalLightShadowing;
  TRefCountPtr<IPooledRenderTarget> Lighting;
  FIntPoint AtlasSize;
};

/* 5995 */
struct __cppobj __declspec(align(4)) FTileIntersectionResources : FRenderResource
{
  FRWBuffer TileConeAxisAndCos;
  FRWBuffer TileConeDepthRanges;
  FRWBuffer NumCulledTilesArray;
  FRWBuffer CulledTilesStartOffsetArray;
  FRWBuffer CulledTileDataArray;
  FRWBuffer ObjectTilesIndirectArguments;
  FIntPoint TileDimensions;
  int MaxSceneObjects;
  bool bAllow16BitIndices;
};

/* 5996 */
struct __cppobj FAOScreenGridResources : FRenderResource
{
  FIntPoint ScreenGridDimensions;
  FRWBuffer ScreenGridConeVisibility;
  bool bAllocateResourceForGI;
  FRWBuffer ConeDepthVisibilityFunction;
  FRWBuffer StepBentNormal;
  FRWBuffer SurfelIrradiance;
  FRWBuffer HeightfieldIrradiance;
};

/* 6000 */
struct __cppobj FRHIRenderQuery : FRHIResource
{
};

/* 6946 */
struct FDynamicPrimitiveResourceVtbl
{
  void (__cdecl *InitPrimitiveResource)(FDynamicPrimitiveResource *this);
  void (__cdecl *ReleasePrimitiveResource)(FDynamicPrimitiveResource *this);
};

/* 6970 */
struct TShaderMap<FGlobalShaderType>Vtbl
{
  void *(__cdecl *__vecDelDtor)(TShaderMap<FGlobalShaderType> *this, unsigned int);
  void (__cdecl *RegisterSerializedShaders)(TShaderMap<FGlobalShaderType> *this);
  void (__cdecl *DiscardSerializedShaders)(TShaderMap<FGlobalShaderType> *this);
};

/* 6973 */
struct IRefCountedObjectVtbl
{
  void *(__cdecl *__vecDelDtor)(IRefCountedObject *this, unsigned int);
  unsigned int (__cdecl *AddRef)(IRefCountedObject *this);
  unsigned int (__cdecl *Release)(IRefCountedObject *this);
  unsigned int (__cdecl *GetRefCount)(IRefCountedObject *this);
};

/* 6097 */
const struct FLightCacheInterface
{
  FLightCacheInterfaceVtbl *vfptr;
  bool bGlobalVolumeLightmap;
  FLightMap *LightMap;
  FShadowMap *ShadowMap;
  TRefCountPtr<FRHIUniformBuffer> PrecomputedLightingUniformBuffer;
};

/* 6695 */
union $E57B2202A54EAE30AF0CD953495C391F
{
  void (__cdecl *~PxGpuDispatcher)(physx::PxGpuDispatcher *this);
  void *(__cdecl *__vecDelDtor)(physx::PxGpuDispatcher *this, unsigned int);
};

/* 6696 */
struct physx::PxGpuDispatcherVtbl
{
  void (__cdecl *startSimulation)(physx::PxGpuDispatcher *this);
  _BYTE gap8[8];
  void (__cdecl *submitTask)(physx::PxGpuDispatcher *this, physx::PxTask *);
  void (__cdecl *finishGroup)(physx::PxGpuDispatcher *this);
  void (__cdecl *addCompletionPrereq)(physx::PxGpuDispatcher *this, physx::PxBaseTask *);
  physx::PxCudaContextManager *(__cdecl *getCudaContextManager)(physx::PxGpuDispatcher *this);
  void (__cdecl *stopSimulation)(physx::PxGpuDispatcher *this);
  bool (__cdecl *failureDetected)(physx::PxGpuDispatcher *this);
  void (__cdecl *forceFailureMode)(physx::PxGpuDispatcher *this);
  void (__cdecl *launchCopyKernel)(physx::PxGpuDispatcher *this, physx::PxGpuCopyDesc *, unsigned int, struct CUstream_st *);
  physx::PxBaseTask *(__cdecl *getPreLaunchTask)(physx::PxGpuDispatcher *this);
  void (__cdecl *addPreLaunchDependent)(physx::PxGpuDispatcher *this, physx::PxBaseTask *);
  physx::PxBaseTask *(__cdecl *getPostLaunchTask)(physx::PxGpuDispatcher *this);
  void (__cdecl *addPostLaunchDependent)(physx::PxGpuDispatcher *this, physx::PxBaseTask *);
  $E57B2202A54EAE30AF0CD953495C391F ___u13;
};

/* 6231 */
struct __cppobj FColoredMaterialRenderProxy : FMaterialRenderProxy
{
  FMaterialRenderProxy *const Parent;
  FLinearColor Color;
  FName ColorParamName;
};

/* 6232 */
struct __cppobj TTypeCompatibleBytes<void *> : TAlignedBytes<8,8>
{
};

/* 6233 */
struct __cppobj FHeapAllocator::ForElementType<void *> : FHeapAllocator::ForAnyElementType
{
};

/* 6234 */
struct TInlineAllocator<4,FDefaultAllocator>::ForElementType<void *>
{
  TTypeCompatibleBytes<void *> InlineData[4];
  FHeapAllocator::ForElementType<void *> SecondaryData;
};

/* 6235 */
struct TArray<void *,TInlineAllocator<4,FDefaultAllocator> >
{
  TInlineAllocator<4,FDefaultAllocator>::ForElementType<void *> AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 6236 */
struct TIndirectArray<FMeshBatch,TInlineAllocator<4,FDefaultAllocator> >
{
  TArray<void *,TInlineAllocator<4,FDefaultAllocator> > Array;
};

/* 6237 */
struct TArray<FParticleVertexFactoryBase *,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 6238 */
struct TArray<FDynamicEmitterDataBase *,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 6239 */
const struct __cppobj FParticleSystemSceneProxy : FPrimitiveSceneProxy
{
  TArray<int,FDefaultAllocator> MeshEmitterLODIndices;
  AActor *Owner;
  unsigned __int32 bCastShadow : 1;
  unsigned __int32 bManagingSignificance : 1;
  FMaterialRelevance MaterialRelevance;
  FParticleDynamicData *DynamicData;
  FParticleDynamicData *LastDynamicData;
  FColoredMaterialRenderProxy DeselectedWireframeMaterialInstance;
  int LODMethod;
  float PendingLODDistance;
  int VisualizeLODIndex;
  int LastFramePreRendered;
  TUniformBuffer<FPrimitiveUniformShaderParameters> WorldSpacePrimitiveUniformBuffer;
  TIndirectArray<FMeshBatch,TInlineAllocator<4,FDefaultAllocator> > MeshBatchPool;
  int FirstFreeMeshBatch;
  TArray<FParticleVertexFactoryBase *,FDefaultAllocator> EmitterVertexFactoryArray;
  TArray<FDynamicEmitterDataBase *,FDefaultAllocator> DynamicDataForThisFrame;
  __int8 bVertexFactoriesDirty : 1;
  ERHIFeatureLevel::Type FeatureLevel;
  unsigned __int32 bCanBeOccluded : 1;
  unsigned __int32 bHasCustomOcclusionBounds : 1;
  FBoxSphereBounds OcclusionBounds;
};

/* 6038 */
struct __declspec(align(8)) FPipelineStateStats
{
  __int64 FirstFrameUsed;
  __int64 LastFrameUsed;
  unsigned __int64 CreateCount;
  __int64 TotalBindCount;
  unsigned int PSOHash;
};

/* 5272 */
const struct __cppobj FDragDropEvent : FPointerEvent
{
  TSharedPtr<FDragDropOperation,0> Content;
};

/* 5250 */
struct FInputEventVtbl
{
  void *(__cdecl *__vecDelDtor)(FInputEvent *this, unsigned int);
  FText *(__cdecl *ToText)(FInputEvent *this, FText *result);
  bool (__cdecl *IsPointerEvent)(FInputEvent *this);
};

/* 5252 */
struct TAlignedBytes<72,8>::TPadding
{
  char Pad[72];
};

/* 5253 */
struct TAlignedBytes<72,8>
{
  TAlignedBytes<72,8>::TPadding Padding;
};

/* 5254 */
struct __cppobj TTypeCompatibleBytes<FArrangedWidget> : TAlignedBytes<72,8>
{
};

/* 5255 */
struct __cppobj FHeapAllocator::ForElementType<FArrangedWidget> : FHeapAllocator::ForAnyElementType
{
};

/* 5256 */
struct TInlineAllocator<4,FDefaultAllocator>::ForElementType<FArrangedWidget>
{
  TTypeCompatibleBytes<FArrangedWidget> InlineData[4];
  FHeapAllocator::ForElementType<FArrangedWidget> SecondaryData;
};

/* 5257 */
struct TArray<FArrangedWidget,TInlineAllocator<4,FDefaultAllocator> >
{
  TInlineAllocator<4,FDefaultAllocator>::ForElementType<FArrangedWidget> AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 5258 */
struct __declspec(align(8)) FArrangedChildren
{
  EVisibility VisibilityFilter;
  TArray<FArrangedWidget,TInlineAllocator<4,FDefaultAllocator> > Array;
  bool bAllow3DWidgets;
};

/* 5260 */
struct TArray<TSharedPtr<FVirtualPointerPosition,0>,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 5261 */
const struct FWidgetPath
{
  FArrangedChildren Widgets;
  TSharedPtr<SWindow,0> TopLevelWindow;
  TArray<TSharedPtr<FVirtualPointerPosition,0>,FDefaultAllocator> VirtualPointerPositions;
};

/* 5262 */
struct TSparseArray<TSetElement<FKey>,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<32,8> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 5263 */
const struct __declspec(align(8)) TSet<FKey,DefaultKeyFuncs<FKey,0>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<FKey>,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 8665 */
struct IRun
{
  IRunVtbl *vfptr;
};

/* 8216 */
struct TArray<TextBiDi::FTextDirectionInfo,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 4806 */
struct TArray<FNodeDebugData,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 5943 */
struct FFramebufferBin
{
  unsigned __int64 Data[256];
};

/* 5944 */
struct TSparseArray<TSetElement<TTuple<FPrimitiveComponentId,bool> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<16,4> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 5945 */
struct __declspec(align(8)) TSet<TTuple<FPrimitiveComponentId,bool>,TDefaultMapHashableKeyFuncs<FPrimitiveComponentId,bool,0>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<TTuple<FPrimitiveComponentId,bool> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 5946 */
struct TMapBase<FPrimitiveComponentId,bool,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FPrimitiveComponentId,bool,0> >
{
  TSet<TTuple<FPrimitiveComponentId,bool>,TDefaultMapHashableKeyFuncs<FPrimitiveComponentId,bool,0>,FDefaultSetAllocator> Pairs;
};

/* 5947 */
struct __cppobj TSortableMapBase<FPrimitiveComponentId,bool,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FPrimitiveComponentId,bool,0> > : TMapBase<FPrimitiveComponentId,bool,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FPrimitiveComponentId,bool,0> >
{
};

/* 5948 */
struct __cppobj TMap<FPrimitiveComponentId,bool,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FPrimitiveComponentId,bool,0> > : TSortableMapBase<FPrimitiveComponentId,bool,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FPrimitiveComponentId,bool,0> >
{
};

/* 5949 */
struct FOcclusionFrameResults
{
  FFramebufferBin Bins[6];
  TMap<FPrimitiveComponentId,bool,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FPrimitiveComponentId,bool,0> > VisibilityMap;
};

/* 5955 */
struct __declspec(align(8)) FByteAddressBuffer
{
  TRefCountPtr<FRHIStructuredBuffer> Buffer;
  TRefCountPtr<FRHIShaderResourceView> SRV;
  unsigned int NumBytes;
};

/* 5956 */
struct __cppobj FRWByteAddressBuffer : FByteAddressBuffer
{
  TRefCountPtr<FRHIUnorderedAccessView> UAV;
};

/* 5957 */
struct __declspec(align(8)) FRWBufferStructured
{
  TRefCountPtr<FRHIStructuredBuffer> Buffer;
  TRefCountPtr<FRHIUnorderedAccessView> UAV;
  TRefCountPtr<FRHIShaderResourceView> SRV;
  unsigned int NumBytes;
};

/* 5958 */
struct FLpvWriteUniformBufferParameters
{
  FMatrix mRsmToWorld;
  FVector4 mLightColour;
  FVector4 GeometryVolumeCaptureLightDirection;
  FVector4 mEyePos;
  FIntVector mOldGridOffset;
  __declspec(align(8)) FIntVector mLpvGridOffset;
  float ClearMultiplier;
  float LpvScale;
  float OneOverLpvScale;
  float DirectionalOcclusionIntensity;
  float DirectionalOcclusionRadius;
  float RsmAreaIntensityMultiplier;
  float RsmPixelToTexcoordMultiplier;
  float SecondaryOcclusionStrength;
  float SecondaryBounceStrength;
  float VplInjectionBias;
  float GeometryVolumeInjectionBias;
  float EmissiveInjectionMultiplier;
  int PropagationIndex;
};

/* 6494 */
struct FLightCacheInterfaceVtbl
{
  void *(__cdecl *__vecDelDtor)(FLightCacheInterface *this, unsigned int);
  FLightInteraction *(__cdecl *GetInteraction)(FLightCacheInterface *this, FLightInteraction *result, FLightSceneProxy *);
};

/* 6495 */
const struct __cppobj FLightMap : FDeferredCleanupInterface
{
  TArray<FGuid,FDefaultAllocator> LightGuids;
  bool bAllowHighQualityLightMaps;
  int NumRefs;
};

/* 6496 */
const struct __cppobj __declspec(align(8)) FShadowMap : FDeferredCleanupInterface
{
  TArray<FGuid,FDefaultAllocator> LightGuids;
  int NumRefs;
};

/* 6681 */
struct physx::PxCudaContextManager
{
  physx::PxCudaContextManagerVtbl *vfptr;
};

/* 1045 */
enum physx::PxGpuCopyDesc::CopyType
{
  HostToDevice = 0x0,
  DeviceToHost = 0x1,
  DeviceToDevice = 0x2,
  DeviceMemset32 = 0x3,
};

/* 6694 */
struct __declspec(align(8)) physx::PxGpuCopyDesc
{
  unsigned __int64 dest;
  unsigned __int64 source;
  unsigned __int64 bytes;
  physx::PxGpuCopyDesc::CopyType type;
};

/* 6226 */
struct __cppobj TTypeCompatibleBytes<FDynamicEmitterDataBase *> : TAlignedBytes<8,8>
{
};

/* 6227 */
struct __cppobj FHeapAllocator::ForElementType<FDynamicEmitterDataBase *> : FHeapAllocator::ForAnyElementType
{
};

/* 6228 */
struct TInlineAllocator<12,FDefaultAllocator>::ForElementType<FDynamicEmitterDataBase *>
{
  TTypeCompatibleBytes<FDynamicEmitterDataBase *> InlineData[12];
  FHeapAllocator::ForElementType<FDynamicEmitterDataBase *> SecondaryData;
};

/* 6229 */
struct TArray<FDynamicEmitterDataBase *,TInlineAllocator<12,FDefaultAllocator> >
{
  TInlineAllocator<12,FDefaultAllocator>::ForElementType<FDynamicEmitterDataBase *> AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 6230 */
struct FParticleDynamicData
{
  unsigned int EmitterIndex;
  TArray<FDynamicEmitterDataBase *,TInlineAllocator<12,FDefaultAllocator> > DynamicEmitterDataArray;
  FVector SystemPositionForMacroUVs;
  float SystemRadiusForMacroUVs;
};

/* 725 */
enum ETextHitPoint
{
  WithinText = 0x0,
  LeftGutter = 0x1,
  RightGutter = 0x2,
};

/* 796 */
typedef _PaddingMode ERunAttributes;

/* 8686 */
struct IRunVtbl
{
  void *(__cdecl *__vecDelDtor)(IRun *this, unsigned int);
  _BYTE gap8[16];
  __int16 (__cdecl *GetBaseLine)(IRun *this, float);
  __int16 (__cdecl *GetMaxHeight)(IRun *this, float);
  FVector2D *(__cdecl *Measure)(IRun *this, FVector2D *result, int, int, float, FRunTextContext *);
  char (__cdecl *GetKerning)(IRun *this, int, float, FRunTextContext *);
  TSharedRef<ILayoutBlock,0> *(__cdecl *CreateBlock)(IRun *this, TSharedRef<ILayoutBlock,0> *result, int, int, FVector2D, FLayoutBlockTextContext *, TSharedPtr<IRunRenderer,0> *);
  int (__cdecl *GetTextIndexAt)(IRun *this, TSharedRef<ILayoutBlock,0> *, FVector2D *, float, ETextHitPoint *const );
  FVector2D *(__cdecl *GetLocationAt)(IRun *this, FVector2D *result, TSharedRef<ILayoutBlock,0> *, int, float);
  void (__cdecl *BeginLayout)(IRun *this);
  void (__cdecl *EndLayout)(IRun *this);
  void (__cdecl *Move)(IRun *this, TSharedRef<FString,0> *, FTextRange *);
  TSharedRef<IRun,0> *(__cdecl *Clone)(IRun *this, TSharedRef<IRun,0> *result);
  void (__cdecl *AppendTextTo)(IRun *this, FString *, FTextRange *);
  void (__cdecl *AppendTextTo)(IRun *this, FString *);
  FRunInfo *(__cdecl *GetRunInfo)(IRun *this);
  ERunAttributes (__cdecl *GetRunAttributes)(IRun *this);
};

/* 76 */
enum ELightInteractionType
{
  LIT_CachedIrrelevant = 0x0,
  LIT_CachedLightMap = 0x1,
  LIT_Dynamic = 0x2,
  LIT_CachedSignedDistanceFieldShadowMap2D = 0x3,
  LIT_MAX = 0x4,
};

/* 6098 */
struct FLightInteraction
{
  ELightInteractionType Type;
};

/* 1067 */
enum nvidia::apex::RenderMeshAssetAuthoring::Primitive::Enum
{
  TRIANGLE_LIST = 0x0,
  COUNT = 0x1,
};

/* 1168 */
typedef nvidia::apex::RenderMeshAssetAuthoring::Primitive::Enum physx::PxCudaInteropMode::Enum;

/* 6691 */
struct physx::PxFlags<enum physx::PxCudaInteropRegisterFlag::Enum,unsigned int>
{
  unsigned int mBits;
};

/* 6692 */
union $7B678BFFD2A744E72E0AB3870FE74E79
{
  void (__cdecl *~PxCudaContextManager)(physx::PxCudaContextManager *this);
  void *(__cdecl *__vecDelDtor)(physx::PxCudaContextManager *this, unsigned int);
};

/* 6693 */
struct physx::PxCudaContextManagerVtbl
{
  void (__cdecl *acquireContext)(physx::PxCudaContextManager *this);
  _BYTE gap8[32];
  bool (__cdecl *contextIsValid)(physx::PxCudaContextManager *this);
  bool (__cdecl *supportsArchSM10)(physx::PxCudaContextManager *this);
  bool (__cdecl *supportsArchSM11)(physx::PxCudaContextManager *this);
  bool (__cdecl *supportsArchSM12)(physx::PxCudaContextManager *this);
  bool (__cdecl *supportsArchSM13)(physx::PxCudaContextManager *this);
  bool (__cdecl *supportsArchSM20)(physx::PxCudaContextManager *this);
  bool (__cdecl *supportsArchSM30)(physx::PxCudaContextManager *this);
  bool (__cdecl *supportsArchSM35)(physx::PxCudaContextManager *this);
  bool (__cdecl *supportsArchSM50)(physx::PxCudaContextManager *this);
  bool (__cdecl *supportsArchSM52)(physx::PxCudaContextManager *this);
  bool (__cdecl *supportsArchSM60)(physx::PxCudaContextManager *this);
  bool (__cdecl *isIntegrated)(physx::PxCudaContextManager *this);
  bool (__cdecl *canMapHostMemory)(physx::PxCudaContextManager *this);
  int (__cdecl *getDriverVersion)(physx::PxCudaContextManager *this);
  unsigned __int64 (__cdecl *getDeviceTotalMemBytes)(physx::PxCudaContextManager *this);
  int (__cdecl *getMultiprocessorCount)(physx::PxCudaContextManager *this);
  unsigned int (__cdecl *getClockRate)(physx::PxCudaContextManager *this);
  int (__cdecl *getSharedMemPerBlock)(physx::PxCudaContextManager *this);
  int (__cdecl *getSharedMemPerMultiprocessor)(physx::PxCudaContextManager *this);
  unsigned int (__cdecl *getMaxThreadsPerBlock)(physx::PxCudaContextManager *this);
  const char *(__cdecl *getDeviceName)(physx::PxCudaContextManager *this);
  int (__cdecl *getDevice)(physx::PxCudaContextManager *this);
  physx::PxCudaInteropMode::Enum (__cdecl *getInteropMode)(physx::PxCudaContextManager *this);
  void (__cdecl *setUsingConcurrentStreams)(physx::PxCudaContextManager *this, bool);
  bool (__cdecl *getUsingConcurrentStreams)(physx::PxCudaContextManager *this);
  bool (__cdecl *registerResourceInCudaGL)(physx::PxCudaContextManager *this, struct CUgraphicsResource_st **, unsigned int, physx::PxFlags<enum physx::PxCudaInteropRegisterFlag::Enum,unsigned int>);
  bool (__cdecl *registerResourceInCudaD3D)(physx::PxCudaContextManager *this, struct CUgraphicsResource_st **, void *, physx::PxFlags<enum physx::PxCudaInteropRegisterFlag::Enum,unsigned int>);
  bool (__cdecl *unregisterResourceInCuda)(physx::PxCudaContextManager *this, struct CUgraphicsResource_st *);
  int (__cdecl *usingDedicatedGPU)(physx::PxCudaContextManager *this);
  void (__cdecl *release)(physx::PxCudaContextManager *this);
  $7B678BFFD2A744E72E0AB3870FE74E79 ___u31;
};

/* 8667 */
struct FShapedTextContext
{
  _BYTE TextShapingMethod[1];
  _BYTE BaseDirection[1];
};

/* 8674 */
struct TSharedRef<FShapedTextCache,0>
{
  FShapedTextCache *Object;
  SharedPointerInternals::FSharedReferencer<0> SharedReferenceCount;
};

/* 8675 */
const struct __cppobj FRunTextContext : FShapedTextContext
{
  TSharedRef<FShapedTextCache,0> ShapedTextCache;
};

/* 8683 */
struct TSharedRef<ILayoutBlock,0>
{
  ILayoutBlock *Object;
  SharedPointerInternals::FSharedReferencer<0> SharedReferenceCount;
};

/* 8678 */
struct __cppobj __declspec(align(8)) FLayoutBlockTextContext : FRunTextContext
{
  _BYTE TextDirection[1];
};

/* 8681 */
struct TSharedPtr<IRunRenderer,0>
{
  IRunRenderer *Object;
  SharedPointerInternals::FSharedReferencer<0> SharedReferenceCount;
};

/* 6522 */
struct TSparseArray<TSetElement<TTuple<FString,FString> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<40,8> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 6523 */
struct __declspec(align(8)) TSet<TTuple<FString,FString>,TDefaultMapHashableKeyFuncs<FString,FString,0>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<TTuple<FString,FString> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 6524 */
struct TMapBase<FString,FString,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FString,FString,0> >
{
  TSet<TTuple<FString,FString>,TDefaultMapHashableKeyFuncs<FString,FString,0>,FDefaultSetAllocator> Pairs;
};

/* 6525 */
struct __cppobj TSortableMapBase<FString,FString,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FString,FString,0> > : TMapBase<FString,FString,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FString,FString,0> >
{
};

/* 6526 */
struct __cppobj TMap<FString,FString,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FString,FString,0> > : TSortableMapBase<FString,FString,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FString,FString,0> >
{
};

/* 8685 */
const struct FRunInfo
{
  FString Name;
  TMap<FString,FString,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FString,FString,0> > MetaData;
};

/* 8172 */
struct TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<120,8> >,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 8668 */
struct TSparseArray<TSetElement<TTuple<FCachedShapedTextKey,TSharedPtr<FShapedGlyphSequence const ,0> > >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<120,8> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 8669 */
struct __declspec(align(8)) TSet<TTuple<FCachedShapedTextKey,TSharedPtr<FShapedGlyphSequence const ,0> >,TDefaultMapHashableKeyFuncs<FCachedShapedTextKey,TSharedPtr<FShapedGlyphSequence const ,0>,0>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<TTuple<FCachedShapedTextKey,TSharedPtr<FShapedGlyphSequence const ,0> > >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 8670 */
struct TMapBase<FCachedShapedTextKey,TSharedPtr<FShapedGlyphSequence const ,0>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FCachedShapedTextKey,TSharedPtr<FShapedGlyphSequence const ,0>,0> >
{
  TSet<TTuple<FCachedShapedTextKey,TSharedPtr<FShapedGlyphSequence const ,0> >,TDefaultMapHashableKeyFuncs<FCachedShapedTextKey,TSharedPtr<FShapedGlyphSequence const ,0>,0>,FDefaultSetAllocator> Pairs;
};

/* 8671 */
struct __cppobj TSortableMapBase<FCachedShapedTextKey,TSharedPtr<FShapedGlyphSequence const ,0>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FCachedShapedTextKey,TSharedPtr<FShapedGlyphSequence const ,0>,0> > : TMapBase<FCachedShapedTextKey,TSharedPtr<FShapedGlyphSequence const ,0>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FCachedShapedTextKey,TSharedPtr<FShapedGlyphSequence const ,0>,0> >
{
};

/* 8672 */
struct __cppobj TMap<FCachedShapedTextKey,TSharedPtr<FShapedGlyphSequence const ,0>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FCachedShapedTextKey,TSharedPtr<FShapedGlyphSequence const ,0>,0> > : TSortableMapBase<FCachedShapedTextKey,TSharedPtr<FShapedGlyphSequence const ,0>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FCachedShapedTextKey,TSharedPtr<FShapedGlyphSequence const ,0>,0> >
{
};

/* 8673 */
struct FShapedTextCache
{
  FSlateFontCache *FontCache;
  TMap<FCachedShapedTextKey,TSharedPtr<FShapedGlyphSequence const ,0>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FCachedShapedTextKey,TSharedPtr<FShapedGlyphSequence const ,0>,0> > CachedShapedText;
};

/* 8676 */
struct ILayoutBlock
{
  ILayoutBlockVtbl *vfptr;
};

/* 8166 */
struct ISlateAtlasProvider
{
  ISlateAtlasProviderVtbl *vfptr;
};

/* 8168 */
struct __cppobj TDefaultDelete<FFreeTypeLibrary>
{
};

/* 8170 */
struct __cppobj TUniquePtr<FFreeTypeLibrary,TDefaultDelete<FFreeTypeLibrary> > : TDefaultDelete<FFreeTypeLibrary>
{
  FFreeTypeLibrary *Ptr;
};

/* 8171 */
struct __cppobj TDefaultDelete<FFreeTypeGlyphCache>
{
};

/* 8179 */
struct __cppobj TUniquePtr<FFreeTypeGlyphCache,TDefaultDelete<FFreeTypeGlyphCache> > : TDefaultDelete<FFreeTypeGlyphCache>
{
  FFreeTypeGlyphCache *Ptr;
};

/* 8180 */
struct __cppobj TDefaultDelete<FFreeTypeAdvanceCache>
{
};

/* 8187 */
struct __cppobj TUniquePtr<FFreeTypeAdvanceCache,TDefaultDelete<FFreeTypeAdvanceCache> > : TDefaultDelete<FFreeTypeAdvanceCache>
{
  FFreeTypeAdvanceCache *Ptr;
};

/* 8188 */
struct __cppobj TDefaultDelete<FFreeTypeKerningPairCache>
{
};

/* 8195 */
struct __cppobj TUniquePtr<FFreeTypeKerningPairCache,TDefaultDelete<FFreeTypeKerningPairCache> > : TDefaultDelete<FFreeTypeKerningPairCache>
{
  FFreeTypeKerningPairCache *Ptr;
};

/* 8196 */
struct __cppobj TDefaultDelete<FCompositeFontCache>
{
};

/* 8208 */
struct __cppobj TUniquePtr<FCompositeFontCache,TDefaultDelete<FCompositeFontCache> > : TDefaultDelete<FCompositeFontCache>
{
  FCompositeFontCache *Ptr;
};

/* 8209 */
struct __cppobj TDefaultDelete<FSlateFontRenderer>
{
};

/* 8211 */
struct __cppobj TUniquePtr<FSlateFontRenderer,TDefaultDelete<FSlateFontRenderer> > : TDefaultDelete<FSlateFontRenderer>
{
  FSlateFontRenderer *Ptr;
};

/* 8212 */
struct __cppobj TDefaultDelete<FSlateTextShaper>
{
};

/* 8248 */
struct __cppobj TUniquePtr<FSlateTextShaper,TDefaultDelete<FSlateTextShaper> > : TDefaultDelete<FSlateTextShaper>
{
  FSlateTextShaper *Ptr;
};

/* 7702 */
struct TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<144,8> >,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 8249 */
struct TSparseArray<TSetElement<TTuple<FSlateFontKey,TSharedRef<FCharacterList,0> > >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<144,8> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 8250 */
struct __declspec(align(8)) TSet<TTuple<FSlateFontKey,TSharedRef<FCharacterList,0> >,TDefaultMapHashableKeyFuncs<FSlateFontKey,TSharedRef<FCharacterList,0>,0>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<TTuple<FSlateFontKey,TSharedRef<FCharacterList,0> > >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 8251 */
struct TMapBase<FSlateFontKey,TSharedRef<FCharacterList,0>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FSlateFontKey,TSharedRef<FCharacterList,0>,0> >
{
  TSet<TTuple<FSlateFontKey,TSharedRef<FCharacterList,0> >,TDefaultMapHashableKeyFuncs<FSlateFontKey,TSharedRef<FCharacterList,0>,0>,FDefaultSetAllocator> Pairs;
};

/* 8252 */
struct __cppobj TSortableMapBase<FSlateFontKey,TSharedRef<FCharacterList,0>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FSlateFontKey,TSharedRef<FCharacterList,0>,0> > : TMapBase<FSlateFontKey,TSharedRef<FCharacterList,0>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FSlateFontKey,TSharedRef<FCharacterList,0>,0> >
{
};

/* 8253 */
struct __cppobj TMap<FSlateFontKey,TSharedRef<FCharacterList,0>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FSlateFontKey,TSharedRef<FCharacterList,0>,0> > : TSortableMapBase<FSlateFontKey,TSharedRef<FCharacterList,0>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FSlateFontKey,TSharedRef<FCharacterList,0>,0> >
{
};

/* 8254 */
struct TSparseArray<TSetElement<TTuple<FShapedGlyphEntryKey,TSharedRef<FShapedGlyphFontAtlasData,0> > >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<64,8> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 8255 */
struct __declspec(align(8)) TSet<TTuple<FShapedGlyphEntryKey,TSharedRef<FShapedGlyphFontAtlasData,0> >,TDefaultMapHashableKeyFuncs<FShapedGlyphEntryKey,TSharedRef<FShapedGlyphFontAtlasData,0>,0>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<TTuple<FShapedGlyphEntryKey,TSharedRef<FShapedGlyphFontAtlasData,0> > >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 8256 */
struct TMapBase<FShapedGlyphEntryKey,TSharedRef<FShapedGlyphFontAtlasData,0>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FShapedGlyphEntryKey,TSharedRef<FShapedGlyphFontAtlasData,0>,0> >
{
  TSet<TTuple<FShapedGlyphEntryKey,TSharedRef<FShapedGlyphFontAtlasData,0> >,TDefaultMapHashableKeyFuncs<FShapedGlyphEntryKey,TSharedRef<FShapedGlyphFontAtlasData,0>,0>,FDefaultSetAllocator> Pairs;
};

/* 8257 */
struct __cppobj TSortableMapBase<FShapedGlyphEntryKey,TSharedRef<FShapedGlyphFontAtlasData,0>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FShapedGlyphEntryKey,TSharedRef<FShapedGlyphFontAtlasData,0>,0> > : TMapBase<FShapedGlyphEntryKey,TSharedRef<FShapedGlyphFontAtlasData,0>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FShapedGlyphEntryKey,TSharedRef<FShapedGlyphFontAtlasData,0>,0> >
{
};

/* 8258 */
struct __cppobj TMap<FShapedGlyphEntryKey,TSharedRef<FShapedGlyphFontAtlasData,0>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FShapedGlyphEntryKey,TSharedRef<FShapedGlyphFontAtlasData,0>,0> > : TSortableMapBase<FShapedGlyphEntryKey,TSharedRef<FShapedGlyphFontAtlasData,0>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FShapedGlyphEntryKey,TSharedRef<FShapedGlyphFontAtlasData,0>,0> >
{
};

/* 8259 */
struct TArray<TSharedRef<FSlateFontAtlas,0>,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 8260 */
struct TArray<TSharedRef<ISlateFontTexture,0>,FDefaultAllocator>
{
  FHeapAllocator::ForAnyElementType AllocatorInstance;
  int ArrayNum;
  int ArrayMax;
};

/* 8268 */
struct TSharedRef<ISlateFontAtlasFactory,0>
{
  ISlateFontAtlasFactory *Object;
  SharedPointerInternals::FSharedReferencer<0> SharedReferenceCount;
};

/* 8213 */
struct __cppobj FSlateFontCache : ISlateAtlasProvider
{
  TUniquePtr<FFreeTypeLibrary,TDefaultDelete<FFreeTypeLibrary> > FTLibrary;
  TUniquePtr<FFreeTypeGlyphCache,TDefaultDelete<FFreeTypeGlyphCache> > FTGlyphCache;
  TUniquePtr<FFreeTypeAdvanceCache,TDefaultDelete<FFreeTypeAdvanceCache> > FTAdvanceCache;
  TUniquePtr<FFreeTypeKerningPairCache,TDefaultDelete<FFreeTypeKerningPairCache> > FTKerningPairCache;
  TUniquePtr<FCompositeFontCache,TDefaultDelete<FCompositeFontCache> > CompositeFontCache;
  TUniquePtr<FSlateFontRenderer,TDefaultDelete<FSlateFontRenderer> > FontRenderer;
  TUniquePtr<FSlateTextShaper,TDefaultDelete<FSlateTextShaper> > TextShaper;
  TMap<FSlateFontKey,TSharedRef<FCharacterList,0>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FSlateFontKey,TSharedRef<FCharacterList,0>,0> > FontToCharacterListCache;
  TMap<FShapedGlyphEntryKey,TSharedRef<FShapedGlyphFontAtlasData,0>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FShapedGlyphEntryKey,TSharedRef<FShapedGlyphFontAtlasData,0>,0> > ShapedGlyphToAtlasData;
  TArray<TSharedRef<FSlateFontAtlas,0>,FDefaultAllocator> FontAtlases;
  TArray<TSharedRef<ISlateFontTexture,0>,FDefaultAllocator> NonAtlasedTextures;
  TArray<TSharedRef<ISlateFontTexture,0>,FDefaultAllocator> AllFontTextures;
  TSharedRef<ISlateFontAtlasFactory,0> FontAtlasFactory;
  volatile bool bFlushRequested;
  int MaxAtlasPagesBeforeFlushRequest;
  int MaxNonAtlasedTexturesBeforeFlushRequest;
  unsigned __int64 FrameCounterLastFlushRequest;
  FWindowsCriticalSection FontObjectsToFlushCS;
  TArray<UObject const *,FDefaultAllocator> FontObjectsToFlush;
};

/* 8682 */
struct ILayoutBlockVtbl
{
  void *(__cdecl *__vecDelDtor)(ILayoutBlock *this, unsigned int);
  TSharedRef<IRun,0> *(__cdecl *GetRun)(ILayoutBlock *this, TSharedRef<IRun,0> *result);
  FTextRange *(__cdecl *GetTextRange)(ILayoutBlock *this, FTextRange *result);
  FVector2D *(__cdecl *GetSize)(ILayoutBlock *this, FVector2D *result);
  FLayoutBlockTextContext *(__cdecl *GetTextContext)(ILayoutBlock *this, FLayoutBlockTextContext *result);
  TSharedPtr<IRunRenderer,0> *(__cdecl *GetRenderer)(ILayoutBlock *this, TSharedPtr<IRunRenderer,0> *result);
  void (__cdecl *SetLocationOffset)(ILayoutBlock *this, FVector2D *);
  FVector2D *(__cdecl *GetLocationOffset)(ILayoutBlock *this, FVector2D *result);
};

/* 8167 */
struct ISlateAtlasProviderVtbl
{
  void *(__cdecl *__vecDelDtor)(ISlateAtlasProvider *this, unsigned int);
  int (__cdecl *GetNumAtlasPages)(ISlateAtlasProvider *this);
  FIntPoint *(__cdecl *GetAtlasPageSize)(ISlateAtlasProvider *this, FIntPoint *result);
  FSlateShaderResource *(__cdecl *GetAtlasPageResource)(ISlateAtlasProvider *this, const int);
  bool (__cdecl *IsAtlasPageResourceAlphaOnly)(ISlateAtlasProvider *this);
};

/* 8169 */
struct FFreeTypeLibrary
{
  struct FT_LibraryRec_ *FTLibrary;
  FT_MemoryRec_ *CustomMemory;
};

/* 8173 */
struct TSparseArray<TSetElement<TTuple<FFreeTypeGlyphCache::FCachedGlyphKey,FFreeTypeGlyphCache::FCachedGlyphData> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<120,8> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 8174 */
struct __declspec(align(8)) TSet<TTuple<FFreeTypeGlyphCache::FCachedGlyphKey,FFreeTypeGlyphCache::FCachedGlyphData>,TDefaultMapHashableKeyFuncs<FFreeTypeGlyphCache::FCachedGlyphKey,FFreeTypeGlyphCache::FCachedGlyphData,0>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<TTuple<FFreeTypeGlyphCache::FCachedGlyphKey,FFreeTypeGlyphCache::FCachedGlyphData> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 8175 */
struct TMapBase<FFreeTypeGlyphCache::FCachedGlyphKey,FFreeTypeGlyphCache::FCachedGlyphData,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FFreeTypeGlyphCache::FCachedGlyphKey,FFreeTypeGlyphCache::FCachedGlyphData,0> >
{
  TSet<TTuple<FFreeTypeGlyphCache::FCachedGlyphKey,FFreeTypeGlyphCache::FCachedGlyphData>,TDefaultMapHashableKeyFuncs<FFreeTypeGlyphCache::FCachedGlyphKey,FFreeTypeGlyphCache::FCachedGlyphData,0>,FDefaultSetAllocator> Pairs;
};

/* 8176 */
struct __cppobj TSortableMapBase<FFreeTypeGlyphCache::FCachedGlyphKey,FFreeTypeGlyphCache::FCachedGlyphData,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FFreeTypeGlyphCache::FCachedGlyphKey,FFreeTypeGlyphCache::FCachedGlyphData,0> > : TMapBase<FFreeTypeGlyphCache::FCachedGlyphKey,FFreeTypeGlyphCache::FCachedGlyphData,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FFreeTypeGlyphCache::FCachedGlyphKey,FFreeTypeGlyphCache::FCachedGlyphData,0> >
{
};

/* 8177 */
struct __cppobj TMap<FFreeTypeGlyphCache::FCachedGlyphKey,FFreeTypeGlyphCache::FCachedGlyphData,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FFreeTypeGlyphCache::FCachedGlyphKey,FFreeTypeGlyphCache::FCachedGlyphData,0> > : TSortableMapBase<FFreeTypeGlyphCache::FCachedGlyphKey,FFreeTypeGlyphCache::FCachedGlyphData,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FFreeTypeGlyphCache::FCachedGlyphKey,FFreeTypeGlyphCache::FCachedGlyphData,0> >
{
};

/* 8178 */
struct FFreeTypeGlyphCache
{
  TMap<FFreeTypeGlyphCache::FCachedGlyphKey,FFreeTypeGlyphCache::FCachedGlyphData,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FFreeTypeGlyphCache::FCachedGlyphKey,FFreeTypeGlyphCache::FCachedGlyphData,0> > CachedGlyphDataMap;
};

/* 8181 */
struct TSparseArray<TSetElement<TTuple<FFreeTypeAdvanceCache::FCachedAdvanceKey,long> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<48,8> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 8182 */
struct __declspec(align(8)) TSet<TTuple<FFreeTypeAdvanceCache::FCachedAdvanceKey,long>,TDefaultMapHashableKeyFuncs<FFreeTypeAdvanceCache::FCachedAdvanceKey,long,0>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<TTuple<FFreeTypeAdvanceCache::FCachedAdvanceKey,long> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 8183 */
struct TMapBase<FFreeTypeAdvanceCache::FCachedAdvanceKey,long,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FFreeTypeAdvanceCache::FCachedAdvanceKey,long,0> >
{
  TSet<TTuple<FFreeTypeAdvanceCache::FCachedAdvanceKey,long>,TDefaultMapHashableKeyFuncs<FFreeTypeAdvanceCache::FCachedAdvanceKey,long,0>,FDefaultSetAllocator> Pairs;
};

/* 8184 */
struct __cppobj TSortableMapBase<FFreeTypeAdvanceCache::FCachedAdvanceKey,long,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FFreeTypeAdvanceCache::FCachedAdvanceKey,long,0> > : TMapBase<FFreeTypeAdvanceCache::FCachedAdvanceKey,long,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FFreeTypeAdvanceCache::FCachedAdvanceKey,long,0> >
{
};

/* 8185 */
struct __cppobj TMap<FFreeTypeAdvanceCache::FCachedAdvanceKey,long,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FFreeTypeAdvanceCache::FCachedAdvanceKey,long,0> > : TSortableMapBase<FFreeTypeAdvanceCache::FCachedAdvanceKey,long,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FFreeTypeAdvanceCache::FCachedAdvanceKey,long,0> >
{
};

/* 8186 */
struct FFreeTypeAdvanceCache
{
  TMap<FFreeTypeAdvanceCache::FCachedAdvanceKey,long,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FFreeTypeAdvanceCache::FCachedAdvanceKey,long,0> > CachedAdvanceMap;
};

/* 8189 */
struct TSparseArray<TSetElement<TTuple<FFreeTypeKerningPairCache::FCachedKerningPairKey,FT_Vector_> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<48,8> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 8190 */
struct __declspec(align(8)) TSet<TTuple<FFreeTypeKerningPairCache::FCachedKerningPairKey,FT_Vector_>,TDefaultMapHashableKeyFuncs<FFreeTypeKerningPairCache::FCachedKerningPairKey,FT_Vector_,0>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<TTuple<FFreeTypeKerningPairCache::FCachedKerningPairKey,FT_Vector_> >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 8191 */
struct TMapBase<FFreeTypeKerningPairCache::FCachedKerningPairKey,FT_Vector_,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FFreeTypeKerningPairCache::FCachedKerningPairKey,FT_Vector_,0> >
{
  TSet<TTuple<FFreeTypeKerningPairCache::FCachedKerningPairKey,FT_Vector_>,TDefaultMapHashableKeyFuncs<FFreeTypeKerningPairCache::FCachedKerningPairKey,FT_Vector_,0>,FDefaultSetAllocator> Pairs;
};

/* 8192 */
struct __cppobj TSortableMapBase<FFreeTypeKerningPairCache::FCachedKerningPairKey,FT_Vector_,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FFreeTypeKerningPairCache::FCachedKerningPairKey,FT_Vector_,0> > : TMapBase<FFreeTypeKerningPairCache::FCachedKerningPairKey,FT_Vector_,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FFreeTypeKerningPairCache::FCachedKerningPairKey,FT_Vector_,0> >
{
};

/* 8193 */
struct __cppobj TMap<FFreeTypeKerningPairCache::FCachedKerningPairKey,FT_Vector_,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FFreeTypeKerningPairCache::FCachedKerningPairKey,FT_Vector_,0> > : TSortableMapBase<FFreeTypeKerningPairCache::FCachedKerningPairKey,FT_Vector_,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FFreeTypeKerningPairCache::FCachedKerningPairKey,FT_Vector_,0> >
{
};

/* 8194 */
struct FFreeTypeKerningPairCache
{
  TMap<FFreeTypeKerningPairCache::FCachedKerningPairKey,FT_Vector_,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FFreeTypeKerningPairCache::FCachedKerningPairKey,FT_Vector_,0> > CachedKerningPairMap;
};

/* 8197 */
struct TSparseArray<TSetElement<TTuple<FCompositeFont const *,TSharedPtr<FCachedCompositeFontData,0> > >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<32,8> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 8198 */
struct __declspec(align(8)) TSet<TTuple<FCompositeFont const *,TSharedPtr<FCachedCompositeFontData,0> >,TDefaultMapHashableKeyFuncs<FCompositeFont const *,TSharedPtr<FCachedCompositeFontData,0>,0>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<TTuple<FCompositeFont const *,TSharedPtr<FCachedCompositeFontData,0> > >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 8199 */
struct TMapBase<FCompositeFont const *,TSharedPtr<FCachedCompositeFontData,0>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FCompositeFont const *,TSharedPtr<FCachedCompositeFontData,0>,0> >
{
  TSet<TTuple<FCompositeFont const *,TSharedPtr<FCachedCompositeFontData,0> >,TDefaultMapHashableKeyFuncs<FCompositeFont const *,TSharedPtr<FCachedCompositeFontData,0>,0>,FDefaultSetAllocator> Pairs;
};

/* 8200 */
struct __cppobj TSortableMapBase<FCompositeFont const *,TSharedPtr<FCachedCompositeFontData,0>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FCompositeFont const *,TSharedPtr<FCachedCompositeFontData,0>,0> > : TMapBase<FCompositeFont const *,TSharedPtr<FCachedCompositeFontData,0>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FCompositeFont const *,TSharedPtr<FCachedCompositeFontData,0>,0> >
{
};

/* 8201 */
struct __cppobj TMap<FCompositeFont const *,TSharedPtr<FCachedCompositeFontData,0>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FCompositeFont const *,TSharedPtr<FCachedCompositeFontData,0>,0> > : TSortableMapBase<FCompositeFont const *,TSharedPtr<FCachedCompositeFontData,0>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FCompositeFont const *,TSharedPtr<FCachedCompositeFontData,0>,0> >
{
};

/* 8202 */
struct TSparseArray<TSetElement<TTuple<FFontData,TSharedPtr<FFreeTypeFace,0> > >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> >
{
  TArray<TSparseArrayElementOrFreeListLink<TAlignedBytes<56,8> >,FDefaultAllocator> Data;
  TBitArray<FDefaultBitArrayAllocator> AllocationFlags;
  int FirstFreeIndex;
  int NumFreeIndices;
};

/* 8203 */
struct __declspec(align(8)) TSet<TTuple<FFontData,TSharedPtr<FFreeTypeFace,0> >,TDefaultMapHashableKeyFuncs<FFontData,TSharedPtr<FFreeTypeFace,0>,0>,FDefaultSetAllocator>
{
  TSparseArray<TSetElement<TTuple<FFontData,TSharedPtr<FFreeTypeFace,0> > >,TSparseArrayAllocator<FDefaultAllocator,FDefaultBitArrayAllocator> > Elements;
  TInlineAllocator<1,FDefaultAllocator>::ForElementType<FSetElementId> Hash;
  int HashSize;
};

/* 8204 */
struct TMapBase<FFontData,TSharedPtr<FFreeTypeFace,0>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FFontData,TSharedPtr<FFreeTypeFace,0>,0> >
{
  TSet<TTuple<FFontData,TSharedPtr<FFreeTypeFace,0> >,TDefaultMapHashableKeyFuncs<FFontData,TSharedPtr<FFreeTypeFace,0>,0>,FDefaultSetAllocator> Pairs;
};

/* 8205 */
struct __cppobj TSortableMapBase<FFontData,TSharedPtr<FFreeTypeFace,0>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FFontData,TSharedPtr<FFreeTypeFace,0>,0> > : TMapBase<FFontData,TSharedPtr<FFreeTypeFace,0>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FFontData,TSharedPtr<FFreeTypeFace,0>,0> >
{
};

/* 8206 */
struct __cppobj TMap<FFontData,TSharedPtr<FFreeTypeFace,0>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FFontData,TSharedPtr<FFreeTypeFace,0>,0> > : TSortableMapBase<FFontData,TSharedPtr<FFreeTypeFace,0>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FFontData,TSharedPtr<FFreeTypeFace,0>,0> >
{
};

/* 8207 */
struct FCompositeFontCache
{
  FFreeTypeLibrary *FTLibrary;
  TMap<FCompositeFont const *,TSharedPtr<FCachedCompositeFontData,0>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FCompositeFont const *,TSharedPtr<FCachedCompositeFontData,0>,0> > CompositeFontToCachedDataMap;
  TMap<FFontData,TSharedPtr<FFreeTypeFace,0>,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs<FFontData,TSharedPtr<FFreeTypeFace,0>,0> > FontFaceMap;
};

/* 8210 */
struct FSlateFontRenderer
{
  FFreeTypeLibrary *FTLibrary;
  FFreeTypeGlyphCache *FTGlyphCache;
  FFreeTypeKerningPairCache *FTKerningPairCache;
  FCompositeFontCache *CompositeFontCache;
};

/* 8246 */
struct FHarfBuzzFontFactory
{
  FFreeTypeGlyphCache *FTGlyphCache;
  FFreeTypeAdvanceCache *FTAdvanceCache;
  FFreeTypeKerningPairCache *FTKerningPairCache;
  hb_font_funcs_t *CustomHarfBuzzFuncs;
};

/* 8247 */
struct FSlateTextShaper
{
  FFreeTypeGlyphCache *FTGlyphCache;
  FFreeTypeAdvanceCache *FTAdvanceCache;
  FFreeTypeKerningPairCache *FTKerningPairCache;
  FCompositeFontCache *CompositeFontCache;
  FSlateFontRenderer *FontRenderer;
  FSlateFontCache *FontCache;
  TUniquePtr<TextBiDi::ITextBiDi,TDefaultDelete<TextBiDi::ITextBiDi> > TextBiDiDetection;
  TSharedRef<IBreakIterator,0> GraphemeBreakIterator;
  FHarfBuzzFontFactory HarfBuzzFontFactory;
};

/* 8261 */
struct ISlateFontAtlasFactory
{
  ISlateFontAtlasFactoryVtbl *vfptr;
};

/* 7838 */
struct FT_MemoryRec_
{
  void *user;
  void *(__cdecl *alloc)(FT_MemoryRec_ *, int);
  void (__cdecl *free)(FT_MemoryRec_ *, void *);
  void *(__cdecl *realloc)(FT_MemoryRec_ *, int, int, void *);
};

/* 8220 */
struct hb_atomic_int_t
{
  int v;
};

/* 8221 */
struct hb_reference_count_t
{
  hb_atomic_int_t ref_count;
};

/* 8222 */
struct _RTL_CRITICAL_SECTION
{
  _RTL_CRITICAL_SECTION_DEBUG *DebugInfo;
  int LockCount;
  int RecursionCount;
  void *OwningThread;
  void *LockSemaphore;
  unsigned __int64 SpinCount;
};

/* 8225 */
struct hb_mutex_t
{
  _RTL_CRITICAL_SECTION m;
};

/* 8227 */
struct hb_user_data_array_t::hb_user_data_item_t
{
  hb_user_data_key_t *key;
  void *data;
  void (__cdecl *destroy)(void *);
};

/* 8228 */
struct hb_prealloced_array_t<hb_user_data_array_t::hb_user_data_item_t,2>
{
  unsigned int len;
  unsigned int allocated;
  hb_user_data_array_t::hb_user_data_item_t *array;
  hb_user_data_array_t::hb_user_data_item_t static_array[2];
};

/* 8229 */
struct hb_lockable_set_t<hb_user_data_array_t::hb_user_data_item_t,hb_mutex_t>
{
  hb_prealloced_array_t<hb_user_data_array_t::hb_user_data_item_t,2> items;
};

/* 8230 */
struct hb_user_data_array_t
{
  hb_mutex_t lock;
  hb_lockable_set_t<hb_user_data_array_t::hb_user_data_item_t,hb_mutex_t> items;
};

/* 8231 */
struct hb_object_header_t
{
  hb_reference_count_t ref_count;
  hb_user_data_array_t user_data;
};

/* 8232 */
struct $E710695310A8B98456D283F79A03F2F9
{
  void *font_h_extents;
  void *font_v_extents;
  void *nominal_glyph;
  void *variation_glyph;
  void *glyph_h_advance;
  void *glyph_v_advance;
  void *glyph_h_origin;
  void *glyph_v_origin;
  void *glyph_h_kerning;
  void *glyph_v_kerning;
  void *glyph_extents;
  void *glyph_contour_point;
  void *glyph_name;
  void *glyph_from_name;
};

/* 8233 */
struct $03A21BE1428429C9F15D2BE91539873A
{
  void (__cdecl *font_h_extents)(void *);
  void (__cdecl *font_v_extents)(void *);
  void (__cdecl *nominal_glyph)(void *);
  void (__cdecl *variation_glyph)(void *);
  void (__cdecl *glyph_h_advance)(void *);
  void (__cdecl *glyph_v_advance)(void *);
  void (__cdecl *glyph_h_origin)(void *);
  void (__cdecl *glyph_v_origin)(void *);
  void (__cdecl *glyph_h_kerning)(void *);
  void (__cdecl *glyph_v_kerning)(void *);
  void (__cdecl *glyph_extents)(void *);
  void (__cdecl *glyph_contour_point)(void *);
  void (__cdecl *glyph_name)(void *);
  void (__cdecl *glyph_from_name)(void *);
};

/* 8244 */
struct hb_font_funcs_t::get_t::get_funcs_t
{
  int (__cdecl *font_h_extents)(hb_font_t *, void *, hb_font_extents_t *, void *);
  int (__cdecl *font_v_extents)(hb_font_t *, void *, hb_font_extents_t *, void *);
  int (__cdecl *nominal_glyph)(hb_font_t *, void *, unsigned int, unsigned int *, void *);
  int (__cdecl *variation_glyph)(hb_font_t *, void *, unsigned int, unsigned int, unsigned int *, void *);
  int (__cdecl *glyph_h_advance)(hb_font_t *, void *, unsigned int, void *);
  int (__cdecl *glyph_v_advance)(hb_font_t *, void *, unsigned int, void *);
  int (__cdecl *glyph_h_origin)(hb_font_t *, void *, unsigned int, int *, int *, void *);
  int (__cdecl *glyph_v_origin)(hb_font_t *, void *, unsigned int, int *, int *, void *);
  int (__cdecl *glyph_h_kerning)(hb_font_t *, void *, unsigned int, unsigned int, void *);
  int (__cdecl *glyph_v_kerning)(hb_font_t *, void *, unsigned int, unsigned int, void *);
  int (__cdecl *glyph_extents)(hb_font_t *, void *, unsigned int, hb_glyph_extents_t *, void *);
  int (__cdecl *glyph_contour_point)(hb_font_t *, void *, unsigned int, unsigned int, int *, int *, void *);
  int (__cdecl *glyph_name)(hb_font_t *, void *, unsigned int, char *, unsigned int, void *);
  int (__cdecl *glyph_from_name)(hb_font_t *, void *, const char *, int, unsigned int *, void *);
};

/* 8245 */
union hb_font_funcs_t::get_t
{
  hb_font_funcs_t::get_t::get_funcs_t f;
  void (__cdecl *array[1])();
};

/* 8241 */
struct hb_font_funcs_t
{
  hb_object_header_t header;
  int immutable;
  $E710695310A8B98456D283F79A03F2F9 user_data;
  $03A21BE1428429C9F15D2BE91539873A destroy;
  hb_font_funcs_t::get_t get;
};

/* 8267 */
struct ISlateFontAtlasFactoryVtbl
{
  FIntPoint *(__cdecl *GetAtlasSize)(ISlateFontAtlasFactory *this, FIntPoint *result);
  TSharedRef<FSlateFontAtlas,0> *(__cdecl *CreateFontAtlas)(ISlateFontAtlasFactory *this, TSharedRef<FSlateFontAtlas,0> *result);
  TSharedPtr<ISlateFontTexture,0> *(__cdecl *CreateNonAtlasedTexture)(ISlateFontAtlasFactory *this, TSharedPtr<ISlateFontTexture,0> *result, const unsigned int, const unsigned int, TArray<unsigned char,FDefaultAllocator> *);
};

/* 8223 */
struct _LIST_ENTRY
{
  _LIST_ENTRY *Flink;
  _LIST_ENTRY *Blink;
};

/* 8224 */
struct _RTL_CRITICAL_SECTION_DEBUG
{
  unsigned __int16 Type;
  unsigned __int16 CreatorBackTraceIndex;
  _RTL_CRITICAL_SECTION *CriticalSection;
  _LIST_ENTRY ProcessLocksList;
  unsigned int EntryCount;
  unsigned int ContentionCount;
  unsigned int Flags;
  unsigned __int16 CreatorBackTraceIndexHigh;
  unsigned __int16 SpareWORD;
};

/* 8226 */
struct hb_user_data_key_t
{
  char unused;
};

/* 8236 */
struct __cppobj hb_shaper_data_t
{
};

/* 8234 */
struct __declspec(align(8)) hb_font_t
{
  hb_object_header_t header;
  int immutable;
  hb_font_t *parent;
  hb_face_t *face;
  int x_scale;
  int y_scale;
  unsigned int x_ppem;
  unsigned int y_ppem;
  hb_font_funcs_t *klass;
  void *user_data;
  void (__cdecl *destroy)(void *);
  hb_shaper_data_t shaper_data;
};

/* 8242 */
struct hb_font_extents_t
{
  int ascender;
  int descender;
  int line_gap;
  int reserved9;
  int reserved8;
  int reserved7;
  int reserved6;
  int reserved5;
  int reserved4;
  int reserved3;
  int reserved2;
  int reserved1;
};

/* 8243 */
struct hb_glyph_extents_t
{
  int x_bearing;
  int y_bearing;
  int width;
  int height;
};

/* 8265 */
struct TSharedRef<FSlateFontAtlas,0>
{
  FSlateFontAtlas *Object;
  SharedPointerInternals::FSharedReferencer<0> SharedReferenceCount;
};

/* 8266 */
struct TSharedPtr<ISlateFontTexture,0>
{
  ISlateFontTexture *Object;
  SharedPointerInternals::FSharedReferencer<0> SharedReferenceCount;
};

/* 8235 */
struct hb_face_t
{
  hb_object_header_t header;
  int immutable;
  struct hb_blob_t *(__cdecl *reference_table_func)(hb_face_t *, unsigned int, void *);
  void *user_data;
  void (__cdecl *destroy)(void *);
  unsigned int index;
  unsigned int upem;
  unsigned int num_glyphs;
  hb_shaper_data_t shaper_data;
  hb_face_t::plan_node_t *shape_plans;
};

/* 8262 */
struct ISlateFontTexture
{
  ISlateFontTextureVtbl *vfptr;
};

/* 371 */
enum ESlateTextureAtlasPaddingStyle
{
  NoPadding = 0x0,
  DilateBorder = 0x1,
  PadWithZero = 0x2,
};

/* 7129 */
struct __declspec(align(8)) FSlateTextureAtlas
{
  FSlateTextureAtlasVtbl *vfptr;
  TArray<unsigned char,FDefaultAllocator> AtlasData;
  FAtlasedTextureSlot *AtlasUsedSlots;
  FAtlasedTextureSlot *AtlasEmptySlots;
  unsigned int AtlasWidth;
  unsigned int AtlasHeight;
  unsigned int BytesPerPixel;
  ESlateTextureAtlasPaddingStyle PaddingStyle;
  bool bNeedsUpdate;
  _BYTE AtlasOwnerThread[1];
};

/* 8264 */
struct __cppobj FSlateFontAtlas : ISlateFontTexture, FSlateTextureAtlas
{
};

/* 8240 */
struct hb_face_t::plan_node_t
{
  hb_shape_plan_t *shape_plan;
  hb_face_t::plan_node_t *next;
};

/* 8263 */
struct ISlateFontTextureVtbl
{
  void *(__cdecl *__vecDelDtor)(ISlateFontTexture *this, unsigned int);
  FSlateShaderResource *(__cdecl *GetSlateTexture)(ISlateFontTexture *this);
  FTextureResource *(__cdecl *GetEngineTexture)(ISlateFontTexture *this);
  void (__cdecl *ReleaseResources)(ISlateFontTexture *this);
};

/* 7130 */
struct FSlateTextureAtlasVtbl
{
  void *(__cdecl *__vecDelDtor)(FSlateTextureAtlas *this, unsigned int);
  void (__cdecl *ConditionalUpdateTexture)(FSlateTextureAtlas *this);
};

/* 7132 */
struct TLinkedListBase<FAtlasedTextureSlot,FAtlasedTextureSlot,TIntrusiveLinkedListIterator>
{
  FAtlasedTextureSlot *NextLink;
  FAtlasedTextureSlot **PrevLink;
};

/* 7133 */
struct __cppobj TIntrusiveLinkedList<FAtlasedTextureSlot> : TLinkedListBase<FAtlasedTextureSlot,FAtlasedTextureSlot,TIntrusiveLinkedListIterator>
{
};

/* 7131 */
struct __cppobj __declspec(align(8)) FAtlasedTextureSlot : TIntrusiveLinkedList<FAtlasedTextureSlot>
{
  unsigned int X;
  unsigned int Y;
  unsigned int Width;
  unsigned int Height;
  char Padding;
};

/* 2377 */
enum hb_direction_t
{
  HB_DIRECTION_INVALID = 0x0,
  HB_DIRECTION_LTR = 0x4,
  HB_DIRECTION_RTL = 0x5,
  HB_DIRECTION_TTB = 0x6,
  HB_DIRECTION_BTT = 0x7,
};

/* 2378 */
enum hb_script_t
{
  HB_SCRIPT_COMMON = 0x5A797979,
  HB_SCRIPT_INHERITED = 0x5A696E68,
  HB_SCRIPT_UNKNOWN = 0x5A7A7A7A,
  HB_SCRIPT_ARABIC = 0x41726162,
  HB_SCRIPT_ARMENIAN = 0x41726D6E,
  HB_SCRIPT_BENGALI = 0x42656E67,
  HB_SCRIPT_CYRILLIC = 0x4379726C,
  HB_SCRIPT_DEVANAGARI = 0x44657661,
  HB_SCRIPT_GEORGIAN = 0x47656F72,
  HB_SCRIPT_GREEK = 0x4772656B,
  HB_SCRIPT_GUJARATI = 0x47756A72,
  HB_SCRIPT_GURMUKHI = 0x47757275,
  HB_SCRIPT_HANGUL = 0x48616E67,
  HB_SCRIPT_HAN = 0x48616E69,
  HB_SCRIPT_HEBREW = 0x48656272,
  HB_SCRIPT_HIRAGANA = 0x48697261,
  HB_SCRIPT_KANNADA = 0x4B6E6461,
  HB_SCRIPT_KATAKANA = 0x4B616E61,
  HB_SCRIPT_LAO = 0x4C616F6F,
  HB_SCRIPT_LATIN = 0x4C61746E,
  HB_SCRIPT_MALAYALAM = 0x4D6C796D,
  HB_SCRIPT_ORIYA = 0x4F727961,
  HB_SCRIPT_TAMIL = 0x54616D6C,
  HB_SCRIPT_TELUGU = 0x54656C75,
  HB_SCRIPT_THAI = 0x54686169,
  HB_SCRIPT_TIBETAN = 0x54696274,
  HB_SCRIPT_BOPOMOFO = 0x426F706F,
  HB_SCRIPT_BRAILLE = 0x42726169,
  HB_SCRIPT_CANADIAN_SYLLABICS = 0x43616E73,
  HB_SCRIPT_CHEROKEE = 0x43686572,
  HB_SCRIPT_ETHIOPIC = 0x45746869,
  HB_SCRIPT_KHMER = 0x4B686D72,
  HB_SCRIPT_MONGOLIAN = 0x4D6F6E67,
  HB_SCRIPT_MYANMAR = 0x4D796D72,
  HB_SCRIPT_OGHAM = 0x4F67616D,
  HB_SCRIPT_RUNIC = 0x52756E72,
  HB_SCRIPT_SINHALA = 0x53696E68,
  HB_SCRIPT_SYRIAC = 0x53797263,
  HB_SCRIPT_THAANA = 0x54686161,
  HB_SCRIPT_YI = 0x59696969,
  HB_SCRIPT_DESERET = 0x44737274,
  HB_SCRIPT_GOTHIC = 0x476F7468,
  HB_SCRIPT_OLD_ITALIC = 0x4974616C,
  HB_SCRIPT_BUHID = 0x42756864,
  HB_SCRIPT_HANUNOO = 0x48616E6F,
  HB_SCRIPT_TAGALOG = 0x54676C67,
  HB_SCRIPT_TAGBANWA = 0x54616762,
  HB_SCRIPT_CYPRIOT = 0x43707274,
  HB_SCRIPT_LIMBU = 0x4C696D62,
  HB_SCRIPT_LINEAR_B = 0x4C696E62,
  HB_SCRIPT_OSMANYA = 0x4F736D61,
  HB_SCRIPT_SHAVIAN = 0x53686177,
  HB_SCRIPT_TAI_LE = 0x54616C65,
  HB_SCRIPT_UGARITIC = 0x55676172,
  HB_SCRIPT_BUGINESE = 0x42756769,
  HB_SCRIPT_COPTIC = 0x436F7074,
  HB_SCRIPT_GLAGOLITIC = 0x476C6167,
  HB_SCRIPT_KHAROSHTHI = 0x4B686172,
  HB_SCRIPT_NEW_TAI_LUE = 0x54616C75,
  HB_SCRIPT_OLD_PERSIAN = 0x5870656F,
  HB_SCRIPT_SYLOTI_NAGRI = 0x53796C6F,
  HB_SCRIPT_TIFINAGH = 0x54666E67,
  HB_SCRIPT_BALINESE = 0x42616C69,
  HB_SCRIPT_CUNEIFORM = 0x58737578,
  HB_SCRIPT_NKO = 0x4E6B6F6F,
  HB_SCRIPT_PHAGS_PA = 0x50686167,
  HB_SCRIPT_PHOENICIAN = 0x50686E78,
  HB_SCRIPT_CARIAN = 0x43617269,
  HB_SCRIPT_CHAM = 0x4368616D,
  HB_SCRIPT_KAYAH_LI = 0x4B616C69,
  HB_SCRIPT_LEPCHA = 0x4C657063,
  HB_SCRIPT_LYCIAN = 0x4C796369,
  HB_SCRIPT_LYDIAN = 0x4C796469,
  HB_SCRIPT_OL_CHIKI = 0x4F6C636B,
  HB_SCRIPT_REJANG = 0x526A6E67,
  HB_SCRIPT_SAURASHTRA = 0x53617572,
  HB_SCRIPT_SUNDANESE = 0x53756E64,
  HB_SCRIPT_VAI = 0x56616969,
  HB_SCRIPT_AVESTAN = 0x41767374,
  HB_SCRIPT_BAMUM = 0x42616D75,
  HB_SCRIPT_EGYPTIAN_HIEROGLYPHS = 0x45677970,
  HB_SCRIPT_IMPERIAL_ARAMAIC = 0x41726D69,
  HB_SCRIPT_INSCRIPTIONAL_PAHLAVI = 0x50686C69,
  HB_SCRIPT_INSCRIPTIONAL_PARTHIAN = 0x50727469,
  HB_SCRIPT_JAVANESE = 0x4A617661,
  HB_SCRIPT_KAITHI = 0x4B746869,
  HB_SCRIPT_LISU = 0x4C697375,
  HB_SCRIPT_MEETEI_MAYEK = 0x4D746569,
  HB_SCRIPT_OLD_SOUTH_ARABIAN = 0x53617262,
  HB_SCRIPT_OLD_TURKIC = 0x4F726B68,
  HB_SCRIPT_SAMARITAN = 0x53616D72,
  HB_SCRIPT_TAI_THAM = 0x4C616E61,
  HB_SCRIPT_TAI_VIET = 0x54617674,
  HB_SCRIPT_BATAK = 0x4261746B,
  HB_SCRIPT_BRAHMI = 0x42726168,
  HB_SCRIPT_MANDAIC = 0x4D616E64,
  HB_SCRIPT_CHAKMA = 0x43616B6D,
  HB_SCRIPT_MEROITIC_CURSIVE = 0x4D657263,
  HB_SCRIPT_MEROITIC_HIEROGLYPHS = 0x4D65726F,
  HB_SCRIPT_MIAO = 0x506C7264,
  HB_SCRIPT_SHARADA = 0x53687264,
  HB_SCRIPT_SORA_SOMPENG = 0x536F7261,
  HB_SCRIPT_TAKRI = 0x54616B72,
  HB_SCRIPT_BASSA_VAH = 0x42617373,
  HB_SCRIPT_CAUCASIAN_ALBANIAN = 0x41676862,
  HB_SCRIPT_DUPLOYAN = 0x4475706C,
  HB_SCRIPT_ELBASAN = 0x456C6261,
  HB_SCRIPT_GRANTHA = 0x4772616E,
  HB_SCRIPT_KHOJKI = 0x4B686F6A,
  HB_SCRIPT_KHUDAWADI = 0x53696E64,
  HB_SCRIPT_LINEAR_A = 0x4C696E61,
  HB_SCRIPT_MAHAJANI = 0x4D61686A,
  HB_SCRIPT_MANICHAEAN = 0x4D616E69,
  HB_SCRIPT_MENDE_KIKAKUI = 0x4D656E64,
  HB_SCRIPT_MODI = 0x4D6F6469,
  HB_SCRIPT_MRO = 0x4D726F6F,
  HB_SCRIPT_NABATAEAN = 0x4E626174,
  HB_SCRIPT_OLD_NORTH_ARABIAN = 0x4E617262,
  HB_SCRIPT_OLD_PERMIC = 0x5065726D,
  HB_SCRIPT_PAHAWH_HMONG = 0x486D6E67,
  HB_SCRIPT_PALMYRENE = 0x50616C6D,
  HB_SCRIPT_PAU_CIN_HAU = 0x50617563,
  HB_SCRIPT_PSALTER_PAHLAVI = 0x50686C70,
  HB_SCRIPT_SIDDHAM = 0x53696464,
  HB_SCRIPT_TIRHUTA = 0x54697268,
  HB_SCRIPT_WARANG_CITI = 0x57617261,
  HB_SCRIPT_AHOM = 0x41686F6D,
  HB_SCRIPT_ANATOLIAN_HIEROGLYPHS = 0x486C7577,
  HB_SCRIPT_HATRAN = 0x48617472,
  HB_SCRIPT_MULTANI = 0x4D756C74,
  HB_SCRIPT_OLD_HUNGARIAN = 0x48756E67,
  HB_SCRIPT_SIGNWRITING = 0x53676E77,
  HB_SCRIPT_INVALID = 0x0,
  _HB_SCRIPT_MAX_VALUE = 0xFFFFFFFF,
  _HB_SCRIPT_MAX_VALUE_SIGNED = 0x7FFFFFFF,
};

/* 8237 */
struct hb_segment_properties_t
{
  hb_direction_t direction;
  hb_script_t script;
  const struct hb_language_impl_t *language;
  void *reserved1;
  void *reserved2;
};

/* 8238 */
struct __declspec(align(4)) hb_shape_plan_t
{
  hb_object_header_t header;
  int default_shaper_list;
  hb_face_t *face_unsafe;
  hb_segment_properties_t props;
  int (__cdecl *shaper_func)(hb_shape_plan_t *, hb_font_t *, struct hb_buffer_t *, hb_feature_t *, unsigned int);
  const char *shaper_name;
  hb_feature_t *user_features;
  unsigned int num_user_features;
  hb_shaper_data_t shaper_data;
};

/* 8239 */
const struct hb_feature_t
{
  unsigned int tag;
  unsigned int value;
  unsigned int start;
  unsigned int end;
};

